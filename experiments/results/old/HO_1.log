[18-02-2021_12-52-36] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
         This program comes with ABSOLUTELY NO WARRANTY; for details type `--warranty'. This is free software,          
           and you are welcome to redistribute it under certain conditions; type `--conditions' for details.            
                                     For help and usage instructions type `--help'.                                     
                                                                                                                        
  ####################################################################################################################  

[18-02-2021_12-52-36] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[18-02-2021_12-52-36] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[18-02-2021_12-52-36] DEBUG :: __main__ >> Parsing command line arguments: ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp', '-sc', '-pm=online', '-xf', '-df', '-ir', '2', '-er', '20', '-ppl', '10', '0.5', '0.5', '-op=False'].

[18-02-2021_12-52-36] DEBUG :: __main__ >> Parsing complete:
('domain_files', ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'])
('log_file', None)
('excel_file', './results/ASH_Excel_18-02-2021_12-52-36.xlsx')
('data_file', './results/ASH_Data_18-02-2021_12-52-36.dat')
('data_sep', ' ')
('data_end', '\n')
('silence_ash', False)
('silence_clingo', True)
('logging', 'INFO')
('threads', 8)
('time_limit', [3600])
('planning_mode', 'online')
('enforce_conformance', True)
('optimise_plan', False)
('step_max', [0])
('step_inc', [1])
('step_inc_init', [2])
('partial_planning_length', [10, 0.5, 0.5])
('experimental_runs', 20)
('initial_runs', 2)
('warranty', False)
('conditions', False)

[18-02-2021_12-52-36] DEBUG :: planner.ASH >> Instantiating new planning domain: Name = None, Domain files = ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'].

[18-02-2021_12-52-36] DEBUG :: planner.ASH >> The domain files ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'entities': True, 'static_state': True, 'initial_state': True, 'goal_state': True}.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Anon #1 >> Instantiated.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Anon #1 >> Entering standard solve call:
Solver options = --outf=3, --warn=none, -t, 1, -c, plan_at=0
Program parts = #program instance_module()., #program domain_sorts().

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Anon #1 >> Program building started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Anon #1 >> Program building completed.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Anon #1 >> Grounding started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Anon #1 >> Grounding completed in 0.005953s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Anon #1 >> Solving started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Anon #1 >> Model found:
Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Anon #1 >> Solving completed in 0.000211s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Anon #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.005953s, Solving time = 0.000211s, Total time = 0.006164s
Final Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-52-36] DEBUG :: planner.ASH >> Planning Domain Anon #1 : Abstraction range = [1-3] instantiated successfully

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program ASH #1 >> Instantiated.

[18-02-2021_12-52-36] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program instance_module.
al((1..abstraction_max)).
#const plan_at = 1.
pl(AL) :- AL=plan_at; al(AL).
sl(AL) :- AL>=plan_at; AL<=(plan_at+1); al(AL).
sl(AL) :- plan_at<1; al(AL).
(boolean(true);boolean(false)).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1>=AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1!=DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step).
#show is/2.
#show holds/4.
{ holds(AL,F,V,step) :  } :- fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step=0.
#false :- not 1 = { holds(AL,F,V,step) : fluent(AL,_,F,V) }; fluent(AL,_,F,_); AL>=plan_at; sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step>0.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; sl(AL).
#program plan_module(step,start).
#show occurs/4.
#show sub_goal/6.
{ occurs(AL,ROBOT,A,step) : action(AL,ROBOT,A) } :- incomplete_plan((step-1)); AL=plan_at; step>start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1!=A_2; action(AL,ROBOT,A_1); action(AL,ROBOT,A_2); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
:~ occurs(AL,step); incomplete_plan((step-1)); AL=plan_at; step>start. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); incomplete_plan((step-1)); AL=plan_at; step>start. [1@2,ROBOT,A,step]
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); AL=plan_at; step>start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); AL=plan_at; step>start.
goal_satisfied(AL,F,V,true,step) :- goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
goal_satisfied(AL,F,V,false,step) :- goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
incomplete_plan(step) :- goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); AL=plan_at; boolean(B).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#program conformance_module(step).
#show current_sub_goal/7.
current_sub_goal((AL+1),ROBOT,A,F,V,1,0) :- sub_goal((AL+1),ROBOT,A,F,V,1); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_sub_goals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); incomplete_sub_goals((AL+1),I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); AL=plan_at.
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
#program goal_abstraction_module.
#show holds/4.
#show goal/4.
holds(AL,F,V,0) :- goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) :  } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); AL>=plan_at; al(AL).
#false :- not 1 = { holds(AL,F,V,0) : fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); AL>=plan_at; al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL<reduc; al(AL).
state(AL,extensible,retracted) :- AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL<reduc; al(AL).
state(AL,door,open) :- AL<reduc; al(AL).
state(AL,door,closed) :- AL<reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ!=nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ!=SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1<redef; AL_2<redef; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; sl(AL).
action(AL,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; sl(AL).
#program domain_rules(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1!=STATE_2; AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,in(ROBO),L_1,(t-1)); not is(AL,connected(L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,configuration(D),closed,(t-1)); holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,actuate(DESC,D),t) :- not 1 = { holds(AL,grasping(DESC),H,(t-1)) : desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,ROBO,actuate(DESC,D)), fluent(AL,inertial,grasping(DESC),H) }; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); is(AL,in(OBJ,L)); action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L),t) :- holds(AL,configuration(DESC),extended,(t-1)); action(AL,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; OBJ_1!=nothing; action(AL,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(END,OBJ),t) :- not holds(AL,configuration(END),aligned_with(OBJ),(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t>0.
not occurs(AL,ROBO,release(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,configure(DESC_1,STATE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL<reduc; pl(AL).
not occurs(AL,ROBO,configure(DESC,aligned_with(OBJ)),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); action(AL,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,DESC,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ_1,BLOCK),t) :- holds(AL,on(OBJ_2),BLOCK,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; OBJ!=nothing; SURFACE!=nothing; action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
not occurs(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),t) :- holds(AL,grasping(DESC_2),OBJ_2,(t-1)); OBJ_1!=OBJ_2; DESC_1!=DESC_2; action(AL,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- holds(AL,configuration(DESC),retracted,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC_1,OBJ,SURFACE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,surface,SURFACE); pl(AL).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1!=nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1=(block,N_1); number(N_1); BLOCK_2=(block,N_2); number(N_2); BLOCK_1!=BLOCK_2; N_1>N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK : holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK : is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1!=L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_2; sl(AL_4); AL_4>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ!=nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_3; sl(AL_5); AL_5>=AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2; sl(AL_5); AL_5>=AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N<=3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N>3; N<=6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2=(X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,on((block,4)),(block,2),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
goal(1,on((block,3)),puzzle_room_table_left,true).
goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X<MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> Generating initial state.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Instantiated.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('initial_state', []), ('instance_module', []), ('state_module', [0]), ('domain_sorts', []), ('domain_rules', [0])

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Program building started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Program building completed.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Grounding started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Grounding completed in 0.093129s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Solving started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Model found:
Model :: Total atoms = 2722, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Solving completed in 0.014682s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.093129s, Solving time = 0.014682s, Total time = 0.107812s
Final Model :: Total atoms = 2722, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> Initial state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.093129s, Solving time = 0.014682s, Total time = 0.107812s
Model :: Total atoms = 2722, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 3            
          ========================================          

holds(3,complete(blue),false,0)
holds(3,complete(red),false,0)
holds(3,grasping(manipulator_arm_1),nothing,0)
holds(3,grasping(manipulator_arm_2),nothing,0)
holds(3,in(manipulator_arm_1),starting_room,0)
holds(3,in(manipulator_arm_2),starting_room,0)
holds(3,in(puzzle_room_table),puzzle_room,0)
holds(3,in(talos),starting_room,0)
holds(3,in((block,1)),puzzle_room,0)
holds(3,in((block,2)),puzzle_room,0)
holds(3,in((block,3)),puzzle_room,0)
holds(3,in((block,4)),puzzle_room,0)
holds(3,in((block,5)),store_room,0)
holds(3,in((block,6)),store_room,0)
holds(3,on((block,1)),puzzle_room_table,0)
holds(3,on((block,2)),puzzle_room_table,0)
holds(3,on((block,3)),(block,1),0)
holds(3,on((block,4)),(block,2),0)
holds(3,on((block,5)),nothing,0)
holds(3,on((block,6)),nothing,0)
holds(3,tower_base((block,1)),true,0)
holds(3,tower_base((block,2)),true,0)
holds(3,tower_base((block,3)),false,0)
holds(3,tower_base((block,4)),false,0)
holds(3,tower_base((block,5)),false,0)
holds(3,tower_base((block,6)),false,0)
holds(3,unordered_tower((block,1)),true,0)
holds(3,unordered_tower((block,2)),true,0)
holds(3,unordered_tower((block,3)),false,0)
holds(3,unordered_tower((block,4)),false,0)
holds(3,unordered_tower((block,5)),false,0)
holds(3,unordered_tower((block,6)),false,0)
holds(3,in_tower((block,1),(block,1)),true,0)
holds(3,in_tower((block,1),(block,2)),false,0)
holds(3,in_tower((block,1),(block,3)),true,0)
holds(3,in_tower((block,1),(block,4)),false,0)
holds(3,in_tower((block,1),(block,5)),false,0)
holds(3,in_tower((block,1),(block,6)),false,0)
holds(3,in_tower((block,2),(block,1)),false,0)
holds(3,in_tower((block,2),(block,2)),true,0)
holds(3,in_tower((block,2),(block,3)),false,0)
holds(3,in_tower((block,2),(block,4)),true,0)
holds(3,in_tower((block,2),(block,5)),false,0)
holds(3,in_tower((block,2),(block,6)),false,0)
holds(3,in_tower((block,3),(block,1)),false,0)
holds(3,in_tower((block,3),(block,2)),false,0)
holds(3,in_tower((block,3),(block,3)),false,0)
holds(3,in_tower((block,3),(block,4)),false,0)
holds(3,in_tower((block,3),(block,5)),false,0)
holds(3,in_tower((block,3),(block,6)),false,0)
holds(3,in_tower((block,4),(block,1)),false,0)
holds(3,in_tower((block,4),(block,2)),false,0)
holds(3,in_tower((block,4),(block,3)),false,0)
holds(3,in_tower((block,4),(block,4)),false,0)
holds(3,in_tower((block,4),(block,5)),false,0)
holds(3,in_tower((block,4),(block,6)),false,0)
holds(3,in_tower((block,5),(block,1)),false,0)
holds(3,in_tower((block,5),(block,2)),false,0)
holds(3,in_tower((block,5),(block,3)),false,0)
holds(3,in_tower((block,5),(block,4)),false,0)
holds(3,in_tower((block,5),(block,5)),false,0)
holds(3,in_tower((block,5),(block,6)),false,0)
holds(3,in_tower((block,6),(block,1)),false,0)
holds(3,in_tower((block,6),(block,2)),false,0)
holds(3,in_tower((block,6),(block,3)),false,0)
holds(3,in_tower((block,6),(block,4)),false,0)
holds(3,in_tower((block,6),(block,5)),false,0)
holds(3,in_tower((block,6),(block,6)),false,0)

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 2            
          ========================================          

holds(2,complete(blue),false,0)
holds(2,complete(red),false,0)
holds(2,configuration(manipulator_arm_1),retracted,0)
holds(2,configuration(manipulator_arm_2),retracted,0)
holds(2,configuration(puzzle_room_door),closed,0)
holds(2,configuration(starting_room_door),closed,0)
holds(2,configuration(store_room_door),closed,0)
holds(2,grasping(manipulator_arm_1),nothing,0)
holds(2,grasping(manipulator_arm_2),nothing,0)
holds(2,in(manipulator_arm_1),starting_room,0)
holds(2,in(manipulator_arm_2),starting_room,0)
holds(2,in(puzzle_room_table),puzzle_room,0)
holds(2,in(talos),starting_room,0)
holds(2,in((block,1)),puzzle_room,0)
holds(2,in((block,2)),puzzle_room,0)
holds(2,in((block,3)),puzzle_room,0)
holds(2,in((block,4)),puzzle_room,0)
holds(2,in((block,5)),store_room,0)
holds(2,in((block,6)),store_room,0)
holds(2,on((block,1)),puzzle_room_table,0)
holds(2,on((block,2)),puzzle_room_table,0)
holds(2,on((block,3)),(block,1),0)
holds(2,on((block,4)),(block,2),0)
holds(2,on((block,5)),nothing,0)
holds(2,on((block,6)),nothing,0)
holds(2,tower_base((block,1)),true,0)
holds(2,tower_base((block,2)),true,0)
holds(2,tower_base((block,3)),false,0)
holds(2,tower_base((block,4)),false,0)
holds(2,tower_base((block,5)),false,0)
holds(2,tower_base((block,6)),false,0)
holds(2,unordered_tower((block,1)),true,0)
holds(2,unordered_tower((block,2)),true,0)
holds(2,unordered_tower((block,3)),false,0)
holds(2,unordered_tower((block,4)),false,0)
holds(2,unordered_tower((block,5)),false,0)
holds(2,unordered_tower((block,6)),false,0)
holds(2,in_tower((block,1),(block,1)),true,0)
holds(2,in_tower((block,1),(block,2)),false,0)
holds(2,in_tower((block,1),(block,3)),true,0)
holds(2,in_tower((block,1),(block,4)),false,0)
holds(2,in_tower((block,1),(block,5)),false,0)
holds(2,in_tower((block,1),(block,6)),false,0)
holds(2,in_tower((block,2),(block,1)),false,0)
holds(2,in_tower((block,2),(block,2)),true,0)
holds(2,in_tower((block,2),(block,3)),false,0)
holds(2,in_tower((block,2),(block,4)),true,0)
holds(2,in_tower((block,2),(block,5)),false,0)
holds(2,in_tower((block,2),(block,6)),false,0)
holds(2,in_tower((block,3),(block,1)),false,0)
holds(2,in_tower((block,3),(block,2)),false,0)
holds(2,in_tower((block,3),(block,3)),false,0)
holds(2,in_tower((block,3),(block,4)),false,0)
holds(2,in_tower((block,3),(block,5)),false,0)
holds(2,in_tower((block,3),(block,6)),false,0)
holds(2,in_tower((block,4),(block,1)),false,0)
holds(2,in_tower((block,4),(block,2)),false,0)
holds(2,in_tower((block,4),(block,3)),false,0)
holds(2,in_tower((block,4),(block,4)),false,0)
holds(2,in_tower((block,4),(block,5)),false,0)
holds(2,in_tower((block,4),(block,6)),false,0)
holds(2,in_tower((block,5),(block,1)),false,0)
holds(2,in_tower((block,5),(block,2)),false,0)
holds(2,in_tower((block,5),(block,3)),false,0)
holds(2,in_tower((block,5),(block,4)),false,0)
holds(2,in_tower((block,5),(block,5)),false,0)
holds(2,in_tower((block,5),(block,6)),false,0)
holds(2,in_tower((block,6),(block,1)),false,0)
holds(2,in_tower((block,6),(block,2)),false,0)
holds(2,in_tower((block,6),(block,3)),false,0)
holds(2,in_tower((block,6),(block,4)),false,0)
holds(2,in_tower((block,6),(block,5)),false,0)
holds(2,in_tower((block,6),(block,6)),false,0)

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 1            
          ========================================          

holds(1,complete(blue),false,0)
holds(1,complete(red),false,0)
holds(1,configuration(manipulator_end_1),aligned_with(nothing),0)
holds(1,configuration(manipulator_end_2),aligned_with(nothing),0)
holds(1,configuration(manipulator_limb_1),retracted,0)
holds(1,configuration(manipulator_limb_2),retracted,0)
holds(1,configuration(puzzle_room_door),closed,0)
holds(1,configuration(starting_room_door),closed,0)
holds(1,configuration(store_room_door),closed,0)
holds(1,grasping(manipulator_arm_1),nothing,0)
holds(1,grasping(manipulator_arm_2),nothing,0)
holds(1,grasping(manipulator_end_1),nothing,0)
holds(1,grasping(manipulator_end_2),nothing,0)
holds(1,in(manipulator_arm_1),(starting_room,0),0)
holds(1,in(manipulator_arm_2),(starting_room,0),0)
holds(1,in(manipulator_end_1),(starting_room,0),0)
holds(1,in(manipulator_end_2),(starting_room,0),0)
holds(1,in(manipulator_limb_1),(starting_room,0),0)
holds(1,in(manipulator_limb_2),(starting_room,0),0)
holds(1,in(puzzle_room_table),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_left),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_right),(puzzle_room,1),0)
holds(1,in(talos),(starting_room,0),0)
holds(1,in((block,1)),(puzzle_room,1),0)
holds(1,in((block,2)),(puzzle_room,1),0)
holds(1,in((block,3)),(puzzle_room,1),0)
holds(1,in((block,4)),(puzzle_room,1),0)
holds(1,in((block,5)),(store_room,0),0)
holds(1,in((block,6)),(store_room,0),0)
holds(1,on((block,1)),puzzle_room_table_left,0)
holds(1,on((block,2)),puzzle_room_table_right,0)
holds(1,on((block,3)),(block,1),0)
holds(1,on((block,4)),(block,2),0)
holds(1,on((block,5)),nothing,0)
holds(1,on((block,6)),nothing,0)
holds(1,tower_base((block,1)),true,0)
holds(1,tower_base((block,2)),true,0)
holds(1,tower_base((block,3)),false,0)
holds(1,tower_base((block,4)),false,0)
holds(1,tower_base((block,5)),false,0)
holds(1,tower_base((block,6)),false,0)
holds(1,unordered_tower((block,1)),true,0)
holds(1,unordered_tower((block,2)),true,0)
holds(1,unordered_tower((block,3)),false,0)
holds(1,unordered_tower((block,4)),false,0)
holds(1,unordered_tower((block,5)),false,0)
holds(1,unordered_tower((block,6)),false,0)
holds(1,in_tower((block,1),(block,1)),true,0)
holds(1,in_tower((block,1),(block,2)),false,0)
holds(1,in_tower((block,1),(block,3)),true,0)
holds(1,in_tower((block,1),(block,4)),false,0)
holds(1,in_tower((block,1),(block,5)),false,0)
holds(1,in_tower((block,1),(block,6)),false,0)
holds(1,in_tower((block,2),(block,1)),false,0)
holds(1,in_tower((block,2),(block,2)),true,0)
holds(1,in_tower((block,2),(block,3)),false,0)
holds(1,in_tower((block,2),(block,4)),true,0)
holds(1,in_tower((block,2),(block,5)),false,0)
holds(1,in_tower((block,2),(block,6)),false,0)
holds(1,in_tower((block,3),(block,1)),false,0)
holds(1,in_tower((block,3),(block,2)),false,0)
holds(1,in_tower((block,3),(block,3)),false,0)
holds(1,in_tower((block,3),(block,4)),false,0)
holds(1,in_tower((block,3),(block,5)),false,0)
holds(1,in_tower((block,3),(block,6)),false,0)
holds(1,in_tower((block,4),(block,1)),false,0)
holds(1,in_tower((block,4),(block,2)),false,0)
holds(1,in_tower((block,4),(block,3)),false,0)
holds(1,in_tower((block,4),(block,4)),false,0)
holds(1,in_tower((block,4),(block,5)),false,0)
holds(1,in_tower((block,4),(block,6)),false,0)
holds(1,in_tower((block,5),(block,1)),false,0)
holds(1,in_tower((block,5),(block,2)),false,0)
holds(1,in_tower((block,5),(block,3)),false,0)
holds(1,in_tower((block,5),(block,4)),false,0)
holds(1,in_tower((block,5),(block,5)),false,0)
holds(1,in_tower((block,5),(block,6)),false,0)
holds(1,in_tower((block,6),(block,1)),false,0)
holds(1,in_tower((block,6),(block,2)),false,0)
holds(1,in_tower((block,6),(block,3)),false,0)
holds(1,in_tower((block,6),(block,4)),false,0)
holds(1,in_tower((block,6),(block,5)),false,0)
holds(1,in_tower((block,6),(block,6)),false,0)

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> Generating goal state.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Instantiated.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('goal_state', []), ('instance_module', []), ('goal_abstraction_module', []), ('domain_sorts', []), ('domain_rules', [0])

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Program building started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Program building completed.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Grounding started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Grounding completed in 0.036019s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Solving started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Model found:
Model :: Total atoms = 2590, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Solving completed in 0.004216s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.036019s, Solving time = 0.004216s, Total time = 0.040236s
Final Model :: Total atoms = 2590, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> Goal state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.036019s, Solving time = 0.004216s, Total time = 0.040236s
Model :: Total atoms = 2590, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 3              
          ========================================          

goal(3,complete(blue),false,false)
goal(3,complete(blue),true,true)
goal(3,complete(red),false,false)
goal(3,complete(red),true,true)
goal(3,on((block,3)),nothing,false)
goal(3,on((block,3)),puzzle_room_table,true)
goal(3,on((block,3)),(block,1),false)
goal(3,on((block,3)),(block,2),false)
goal(3,on((block,3)),(block,4),false)
goal(3,on((block,3)),(block,5),false)
goal(3,on((block,3)),(block,6),false)
goal(3,on((block,6)),nothing,false)
goal(3,on((block,6)),puzzle_room_table,true)
goal(3,on((block,6)),(block,1),false)
goal(3,on((block,6)),(block,2),false)
goal(3,on((block,6)),(block,3),false)
goal(3,on((block,6)),(block,4),false)
goal(3,on((block,6)),(block,5),false)

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 2              
          ========================================          

goal(2,complete(blue),false,false)
goal(2,complete(blue),true,true)
goal(2,complete(red),false,false)
goal(2,complete(red),true,true)
goal(2,on((block,3)),nothing,false)
goal(2,on((block,3)),puzzle_room_table,true)
goal(2,on((block,3)),(block,1),false)
goal(2,on((block,3)),(block,2),false)
goal(2,on((block,3)),(block,4),false)
goal(2,on((block,3)),(block,5),false)
goal(2,on((block,3)),(block,6),false)
goal(2,on((block,6)),nothing,false)
goal(2,on((block,6)),puzzle_room_table,true)
goal(2,on((block,6)),(block,1),false)
goal(2,on((block,6)),(block,2),false)
goal(2,on((block,6)),(block,3),false)
goal(2,on((block,6)),(block,4),false)
goal(2,on((block,6)),(block,5),false)

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 1              
          ========================================          

goal(1,complete(blue),false,false)
goal(1,complete(blue),true,true)
goal(1,complete(red),false,false)
goal(1,complete(red),true,true)
goal(1,on((block,3)),nothing,false)
goal(1,on((block,3)),puzzle_room_table_left,true)
goal(1,on((block,3)),puzzle_room_table_right,false)
goal(1,on((block,3)),(block,1),false)
goal(1,on((block,3)),(block,2),false)
goal(1,on((block,3)),(block,4),false)
goal(1,on((block,3)),(block,5),false)
goal(1,on((block,3)),(block,6),false)
goal(1,on((block,6)),nothing,false)
goal(1,on((block,6)),puzzle_room_table_left,false)
goal(1,on((block,6)),puzzle_room_table_right,true)
goal(1,on((block,6)),(block,1),false)
goal(1,on((block,6)),(block,2),false)
goal(1,on((block,6)),(block,3),false)
goal(1,on((block,6)),(block,4),false)
goal(1,on((block,6)),(block,5),false)

[18-02-2021_12-52-36] INFO :: Experiment >> 

  ################################################################################################  
                  Running experiments : Initial runs = 2 : Experimental runs = 20                   
  ################################################################################################  

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-52-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-52-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-52-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-36] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Instantiated.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building completed.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding base program parts.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.013090s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving base program parts.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.002753s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.039264s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005779s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.031213s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.003771s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.030458s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.004550s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.034253s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005748s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.046596s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005106s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.036968s.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005976s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-52-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.038434s.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.006579s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.038735s.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.008293s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.039187s.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.010249s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.046940s.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.014441s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.049200s.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.014851s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.048636s.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.019732s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.045786s.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.028584s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.053291s.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.049733s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.045095s.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.074714s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.084084s.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.104346s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.085040s.

[18-02-2021_12-52-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.210592s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.092431s.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Model found:
Model :: Total atoms = 3523, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.081159s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving completed in 1.612314s because STOP_CON_REACHED.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.898698s, Solving time = 0.656956s, Total time = 1.612314s
Final Model :: Total atoms = 3523, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039264s, Solving time = 0.005779s, Total time = 0.045043s
2 : Statistics :: Grounding time = 0.031213s, Solving time = 0.003771s, Total time = 0.034984s
3 : Statistics :: Grounding time = 0.030458s, Solving time = 0.004550s, Total time = 0.035008s
4 : Statistics :: Grounding time = 0.034253s, Solving time = 0.005748s, Total time = 0.040001s
5 : Statistics :: Grounding time = 0.046596s, Solving time = 0.005106s, Total time = 0.051702s
6 : Statistics :: Grounding time = 0.036968s, Solving time = 0.005976s, Total time = 0.042944s
7 : Statistics :: Grounding time = 0.038434s, Solving time = 0.006579s, Total time = 0.045013s
8 : Statistics :: Grounding time = 0.038735s, Solving time = 0.008293s, Total time = 0.047028s
9 : Statistics :: Grounding time = 0.039187s, Solving time = 0.010249s, Total time = 0.049435s
10 : Statistics :: Grounding time = 0.046940s, Solving time = 0.014441s, Total time = 0.061381s
11 : Statistics :: Grounding time = 0.049200s, Solving time = 0.014851s, Total time = 0.064050s
12 : Statistics :: Grounding time = 0.048636s, Solving time = 0.019732s, Total time = 0.068367s
13 : Statistics :: Grounding time = 0.045786s, Solving time = 0.028584s, Total time = 0.074370s
14 : Statistics :: Grounding time = 0.053291s, Solving time = 0.049733s, Total time = 0.103023s
15 : Statistics :: Grounding time = 0.045095s, Solving time = 0.074714s, Total time = 0.119809s
16 : Statistics :: Grounding time = 0.084084s, Solving time = 0.104346s, Total time = 0.188429s
17 : Statistics :: Grounding time = 0.085040s, Solving time = 0.210592s, Total time = 0.295632s
18 : Statistics :: Grounding time = 0.092431s, Solving time = 0.081159s, Total time = 0.173590s

[18-02-2021_12-52-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.898698s, Solving time = 0.656956s, Total time = 1.612314s
Model :: Total atoms = 3523, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-52-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_1,(block,3)),10)
occurs(3,talos,release(manipulator_arm_2,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[18-02-2021_12-52-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-38] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-52-38] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-52-38] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-52-38] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-52-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Instantiated.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building completed.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding base program parts.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.014572s.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving base program parts.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.002421s.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.062748s.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.005877s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.043757s.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.003652s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.045631s.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.004484s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.048669s.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.006292s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.050044s.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.007920s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.049410s.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.008704s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.054893s.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.010389s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.053682s.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.010248s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.056726s.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.010806s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-52-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.055104s.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.010739s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.058463s.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.013081s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.059316s.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.016679s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.061398s.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.019922s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.062697s.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.021152s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.063354s.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.025367s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.064332s.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.048598s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.066446s.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.058429s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving completed in 1.299770s because STOP_CON_REACHED.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.971240s, Solving time = 0.284763s, Total time = 1.299770s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.062748s, Solving time = 0.005877s, Total time = 0.068626s
2 : Statistics :: Grounding time = 0.043757s, Solving time = 0.003652s, Total time = 0.047409s
3 : Statistics :: Grounding time = 0.045631s, Solving time = 0.004484s, Total time = 0.050115s
4 : Statistics :: Grounding time = 0.048669s, Solving time = 0.006292s, Total time = 0.054961s
5 : Statistics :: Grounding time = 0.050044s, Solving time = 0.007920s, Total time = 0.057964s
6 : Statistics :: Grounding time = 0.049410s, Solving time = 0.008704s, Total time = 0.058114s
7 : Statistics :: Grounding time = 0.054893s, Solving time = 0.010389s, Total time = 0.065282s
8 : Statistics :: Grounding time = 0.053682s, Solving time = 0.010248s, Total time = 0.063930s
9 : Statistics :: Grounding time = 0.056726s, Solving time = 0.010806s, Total time = 0.067532s
10 : Statistics :: Grounding time = 0.055104s, Solving time = 0.010739s, Total time = 0.065843s
11 : Statistics :: Grounding time = 0.058463s, Solving time = 0.013081s, Total time = 0.071544s
12 : Statistics :: Grounding time = 0.059316s, Solving time = 0.016679s, Total time = 0.075995s
13 : Statistics :: Grounding time = 0.061398s, Solving time = 0.019922s, Total time = 0.081319s
14 : Statistics :: Grounding time = 0.062697s, Solving time = 0.021152s, Total time = 0.083849s
15 : Statistics :: Grounding time = 0.063354s, Solving time = 0.025367s, Total time = 0.088721s
16 : Statistics :: Grounding time = 0.064332s, Solving time = 0.048598s, Total time = 0.112930s
17 : Statistics :: Grounding time = 0.066446s, Solving time = 0.058429s, Total time = 0.124875s

[18-02-2021_12-52-39] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.971240s, Solving time = 0.284763s, Total time = 1.299770s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-52-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,configure(manipulator_arm_2,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),17)

[18-02-2021_12-52-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-39] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-52-39] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-52-39] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-52-39] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-52-39] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Instantiated.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building started.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building completed.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding base program parts.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.019312s.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving base program parts.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.003882s.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving started.

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-52-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.185641s.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.008672s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.062777s.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.005538s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.067031s.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.006301s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.072118s.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.010011s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.069628s.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.012421s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.074139s.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.013510s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.077179s.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.014902s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.078312s.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.015093s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.079652s.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.016140s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.086054s.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.021049s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.085032s.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.027527s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-52-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.089422s.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.029909s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.082683s.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Model found:
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.026292s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving completed in 1.383264s because STOP_CON_REACHED.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.128978s, Solving time = 0.211247s, Total time = 1.383264s
Final Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.185641s, Solving time = 0.008672s, Total time = 0.194313s
2 : Statistics :: Grounding time = 0.062777s, Solving time = 0.005538s, Total time = 0.068315s
3 : Statistics :: Grounding time = 0.067031s, Solving time = 0.006301s, Total time = 0.073333s
4 : Statistics :: Grounding time = 0.072118s, Solving time = 0.010011s, Total time = 0.082128s
5 : Statistics :: Grounding time = 0.069628s, Solving time = 0.012421s, Total time = 0.082049s
6 : Statistics :: Grounding time = 0.074139s, Solving time = 0.013510s, Total time = 0.087648s
7 : Statistics :: Grounding time = 0.077179s, Solving time = 0.014902s, Total time = 0.092081s
8 : Statistics :: Grounding time = 0.078312s, Solving time = 0.015093s, Total time = 0.093405s
9 : Statistics :: Grounding time = 0.079652s, Solving time = 0.016140s, Total time = 0.095792s
10 : Statistics :: Grounding time = 0.086054s, Solving time = 0.021049s, Total time = 0.107104s
11 : Statistics :: Grounding time = 0.085032s, Solving time = 0.027527s, Total time = 0.112559s
12 : Statistics :: Grounding time = 0.089422s, Solving time = 0.029909s, Total time = 0.119331s
13 : Statistics :: Grounding time = 0.082683s, Solving time = 0.026292s, Total time = 0.108975s

[18-02-2021_12-52-41] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.128978s, Solving time = 0.211247s, Total time = 1.383264s
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-52-41] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)

[18-02-2021_12-52-41] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.612314s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.299770s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.383264s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-52-41] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-52-41] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-52-41] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-41] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-52-41] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-52-41] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-52-41] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-52-41] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Instantiated.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building started.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building completed.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding base program parts.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.020492s.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving base program parts.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.003801s.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving started.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.257730s.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.019969s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.070959s.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.006500s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-52-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.068340s.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.007566s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.072087s.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.009383s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.072193s.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.015401s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.076083s.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.014801s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.076116s.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.015133s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.078873s.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.015502s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.080180s.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.017392s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.082088s.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.017971s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.084888s.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.021621s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.088367s.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.026568s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-52-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.089900s.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.033271s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.089173s.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.040144s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving completed in 1.621398s because STOP_CON_REACHED.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.307469s, Solving time = 0.265023s, Total time = 1.621398s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.257730s, Solving time = 0.019969s, Total time = 0.277699s
2 : Statistics :: Grounding time = 0.070959s, Solving time = 0.006500s, Total time = 0.077458s
3 : Statistics :: Grounding time = 0.068340s, Solving time = 0.007566s, Total time = 0.075907s
4 : Statistics :: Grounding time = 0.072087s, Solving time = 0.009383s, Total time = 0.081470s
5 : Statistics :: Grounding time = 0.072193s, Solving time = 0.015401s, Total time = 0.087594s
6 : Statistics :: Grounding time = 0.076083s, Solving time = 0.014801s, Total time = 0.090884s
7 : Statistics :: Grounding time = 0.076116s, Solving time = 0.015133s, Total time = 0.091249s
8 : Statistics :: Grounding time = 0.078873s, Solving time = 0.015502s, Total time = 0.094374s
9 : Statistics :: Grounding time = 0.080180s, Solving time = 0.017392s, Total time = 0.097571s
10 : Statistics :: Grounding time = 0.082088s, Solving time = 0.017971s, Total time = 0.100059s
11 : Statistics :: Grounding time = 0.084888s, Solving time = 0.021621s, Total time = 0.106509s
12 : Statistics :: Grounding time = 0.088367s, Solving time = 0.026568s, Total time = 0.114935s
13 : Statistics :: Grounding time = 0.089900s, Solving time = 0.033271s, Total time = 0.123171s
14 : Statistics :: Grounding time = 0.089173s, Solving time = 0.040144s, Total time = 0.129317s

[18-02-2021_12-52-43] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.307469s, Solving time = 0.265023s, Total time = 1.621398s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-52-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),27)

[18-02-2021_12-52-43] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.621398s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-52-43] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-52-43] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-52-43] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-43] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-52-43] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-52-43] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-52-43] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-52-43] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Instantiated.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building started.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building completed.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding base program parts.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.018229s.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving base program parts.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.002811s.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving started.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.110896s.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.015370s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.050212s.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.005774s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.052866s.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.007762s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.055468s.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.009538s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.055582s.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[18-02-2021_12-52-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.009881s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.060358s.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.011006s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.059995s.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.010867s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.062887s.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.012439s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.067354s.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Model found:
Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.015178s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving completed in 0.714193s because STOP_CON_REACHED.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.593846s, Solving time = 0.100627s, Total time = 0.714193s
Final Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.110896s, Solving time = 0.015370s, Total time = 0.126266s
2 : Statistics :: Grounding time = 0.050212s, Solving time = 0.005774s, Total time = 0.055986s
3 : Statistics :: Grounding time = 0.052866s, Solving time = 0.007762s, Total time = 0.060628s
4 : Statistics :: Grounding time = 0.055468s, Solving time = 0.009538s, Total time = 0.065006s
5 : Statistics :: Grounding time = 0.055582s, Solving time = 0.009881s, Total time = 0.065464s
6 : Statistics :: Grounding time = 0.060358s, Solving time = 0.011006s, Total time = 0.071364s
7 : Statistics :: Grounding time = 0.059995s, Solving time = 0.010867s, Total time = 0.070862s
8 : Statistics :: Grounding time = 0.062887s, Solving time = 0.012439s, Total time = 0.075326s
9 : Statistics :: Grounding time = 0.067354s, Solving time = 0.015178s, Total time = 0.082532s

[18-02-2021_12-52-44] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.593846s, Solving time = 0.100627s, Total time = 0.714193s
Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-52-44] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,configure(manipulator_arm_2,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),17)
occurs(2,talos,release(manipulator_arm_1,(block,3)),18)
occurs(2,talos,release(manipulator_arm_2,(block,5)),19)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),20)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[18-02-2021_12-52-44] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-44] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-52-44] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-52-44] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-52-44] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-52-44] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Instantiated.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building started.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building completed.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding base program parts.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.023503s.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving base program parts.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.003432s.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving started.

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-52-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.352381s.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.040507s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.074629s.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.007741s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.074864s.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.009310s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.077060s.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.013861s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.080979s.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Model found:
Model :: Total atoms = 7847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.018129s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving completed in 0.790205s because STOP_CON_REACHED.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.683416s, Solving time = 0.092982s, Total time = 0.790205s
Final Model :: Total atoms = 7847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.352381s, Solving time = 0.040507s, Total time = 0.392889s
2 : Statistics :: Grounding time = 0.074629s, Solving time = 0.007741s, Total time = 0.082371s
3 : Statistics :: Grounding time = 0.074864s, Solving time = 0.009310s, Total time = 0.084174s
4 : Statistics :: Grounding time = 0.077060s, Solving time = 0.013861s, Total time = 0.090921s
5 : Statistics :: Grounding time = 0.080979s, Solving time = 0.018129s, Total time = 0.099108s

[18-02-2021_12-52-45] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.683416s, Solving time = 0.092982s, Total time = 0.790205s
Model :: Total atoms = 7847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-52-45] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),27)
occurs(1,talos,release(manipulator_end_1,(block,3)),28)
occurs(1,talos,release(manipulator_end_2,(block,5)),29)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),30)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),31)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),32)

[18-02-2021_12-52-45] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.714193s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.790205s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-52-45] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-52-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-52-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-45] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-52-45] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-52-45] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-52-45] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-52-45] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Instantiated.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-52-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building started.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building completed.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding base program parts.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.027646s.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving base program parts.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.003421s.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving started.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.411440s.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.042493s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.074346s.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.008402s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.073290s.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.011438s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.081038s.

[18-02-2021_12-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.014920s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.085289s.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.015365s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.083598s.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.016070s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.090775s.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.022856s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.095826s.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.020444s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.094090s.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.021085s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.090569s.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.024644s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.091836s.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.024446s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 32
End step max = None

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 32]), ('conformance_module', [44])].

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.117020s.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.034558s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 32
End step max = None

[18-02-2021_12-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 32]), ('conformance_module', [45])].

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.096182s.

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.038839s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 32
End step max = None

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 32]), ('conformance_module', [46])].

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.097356s.

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.051971s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 32
End step max = None

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 32]), ('conformance_module', [47])].

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.104090s.

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.084798s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 32
End step max = None

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 32]), ('conformance_module', [48])].

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.101818s.

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.133669s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 32
End step max = None

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 32]), ('conformance_module', [49])].

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.103446s.

[18-02-2021_12-52-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.256686s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 32
End step max = None

[18-02-2021_12-52-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 32]), ('conformance_module', [50])].

[18-02-2021_12-52-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.103334s.

[18-02-2021_12-52-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.374214s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 32
End step max = None

[18-02-2021_12-52-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 32]), ('conformance_module', [51])].

[18-02-2021_12-52-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.108952s.

[18-02-2021_12-52-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.572931s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 32
End step max = None

[18-02-2021_12-52-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 32]), ('conformance_module', [52])].

[18-02-2021_12-52-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.113471s.

[18-02-2021_12-52-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.055441s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 32
End step max = None

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 32]), ('conformance_module', [53])].

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.111350s.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Model found:
Model :: Total atoms = 11775, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.075728s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving completed in 5.394435s because STOP_CON_REACHED.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.356760s, Solving time = 2.904417s, Total time = 5.394435s
Final Model :: Total atoms = 11775, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.411440s, Solving time = 0.042493s, Total time = 0.453933s
2 : Statistics :: Grounding time = 0.074346s, Solving time = 0.008402s, Total time = 0.082748s
3 : Statistics :: Grounding time = 0.073290s, Solving time = 0.011438s, Total time = 0.084727s
4 : Statistics :: Grounding time = 0.081038s, Solving time = 0.014920s, Total time = 0.095958s
5 : Statistics :: Grounding time = 0.085289s, Solving time = 0.015365s, Total time = 0.100654s
6 : Statistics :: Grounding time = 0.083598s, Solving time = 0.016070s, Total time = 0.099667s
7 : Statistics :: Grounding time = 0.090775s, Solving time = 0.022856s, Total time = 0.113630s
8 : Statistics :: Grounding time = 0.095826s, Solving time = 0.020444s, Total time = 0.116270s
9 : Statistics :: Grounding time = 0.094090s, Solving time = 0.021085s, Total time = 0.115175s
10 : Statistics :: Grounding time = 0.090569s, Solving time = 0.024644s, Total time = 0.115213s
11 : Statistics :: Grounding time = 0.091836s, Solving time = 0.024446s, Total time = 0.116282s
12 : Statistics :: Grounding time = 0.117020s, Solving time = 0.034558s, Total time = 0.151578s
13 : Statistics :: Grounding time = 0.096182s, Solving time = 0.038839s, Total time = 0.135020s
14 : Statistics :: Grounding time = 0.097356s, Solving time = 0.051971s, Total time = 0.149326s
15 : Statistics :: Grounding time = 0.104090s, Solving time = 0.084798s, Total time = 0.188888s
16 : Statistics :: Grounding time = 0.101818s, Solving time = 0.133669s, Total time = 0.235487s
17 : Statistics :: Grounding time = 0.103446s, Solving time = 0.256686s, Total time = 0.360131s
18 : Statistics :: Grounding time = 0.103334s, Solving time = 0.374214s, Total time = 0.477548s
19 : Statistics :: Grounding time = 0.108952s, Solving time = 0.572931s, Total time = 0.681883s
20 : Statistics :: Grounding time = 0.113471s, Solving time = 1.055441s, Total time = 1.168912s
21 : Statistics :: Grounding time = 0.111350s, Solving time = 0.075728s, Total time = 0.187078s

[18-02-2021_12-52-51] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.356760s, Solving time = 2.904417s, Total time = 5.394435s
Model :: Total atoms = 11775, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-52-51] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),27)
occurs(1,talos,release(manipulator_end_1,(block,3)),28)
occurs(1,talos,release(manipulator_end_2,(block,5)),29)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),30)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),31)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),37)
occurs(1,talos,lift(manipulator_end_2,(block,4)),38)
occurs(1,talos,release(manipulator_end_2,(block,4)),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),40)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),41)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,2)),42)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),43)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),44)
occurs(1,talos,release(manipulator_end_2,(block,6)),45)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),46)
occurs(1,talos,release(manipulator_end_1,(block,5)),47)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),50)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),51)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),52)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),53)

[18-02-2021_12-52-51] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     5.394435s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[18-02-2021_12-52-51] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-52-51] INFO :: Experiment >> 

      ================================================      
              Initial run 1 : Time 15.203439s               
      ================================================      

[18-02-2021_12-52-51] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-52-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-52-51] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-52-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-52-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-51] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Instantiated.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building started.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building completed.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding base program parts.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.013439s.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving base program parts.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.001785s.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving started.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.051178s.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.004926s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-52-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.030702s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.002736s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.031317s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.004448s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.035588s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.005464s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.034717s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.005997s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.036052s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.006450s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.037071s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.007322s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.036721s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.008805s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.037259s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.010168s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.044254s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.011925s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.040518s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.016248s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.041314s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.021879s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.040513s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.033560s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.042333s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.040788s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.042106s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.074094s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.076100s.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.090628s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-52-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.079984s.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.232081s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.087394s.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.103950s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving completed in 1.564628s because STOP_CON_REACHED.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.838560s, Solving time = 0.683254s, Total time = 1.564628s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.051178s, Solving time = 0.004926s, Total time = 0.056104s
2 : Statistics :: Grounding time = 0.030702s, Solving time = 0.002736s, Total time = 0.033438s
3 : Statistics :: Grounding time = 0.031317s, Solving time = 0.004448s, Total time = 0.035765s
4 : Statistics :: Grounding time = 0.035588s, Solving time = 0.005464s, Total time = 0.041051s
5 : Statistics :: Grounding time = 0.034717s, Solving time = 0.005997s, Total time = 0.040714s
6 : Statistics :: Grounding time = 0.036052s, Solving time = 0.006450s, Total time = 0.042502s
7 : Statistics :: Grounding time = 0.037071s, Solving time = 0.007322s, Total time = 0.044393s
8 : Statistics :: Grounding time = 0.036721s, Solving time = 0.008805s, Total time = 0.045526s
9 : Statistics :: Grounding time = 0.037259s, Solving time = 0.010168s, Total time = 0.047427s
10 : Statistics :: Grounding time = 0.044254s, Solving time = 0.011925s, Total time = 0.056179s
11 : Statistics :: Grounding time = 0.040518s, Solving time = 0.016248s, Total time = 0.056766s
12 : Statistics :: Grounding time = 0.041314s, Solving time = 0.021879s, Total time = 0.063193s
13 : Statistics :: Grounding time = 0.040513s, Solving time = 0.033560s, Total time = 0.074073s
14 : Statistics :: Grounding time = 0.042333s, Solving time = 0.040788s, Total time = 0.083122s
15 : Statistics :: Grounding time = 0.042106s, Solving time = 0.074094s, Total time = 0.116201s
16 : Statistics :: Grounding time = 0.076100s, Solving time = 0.090628s, Total time = 0.166728s
17 : Statistics :: Grounding time = 0.079984s, Solving time = 0.232081s, Total time = 0.312064s
18 : Statistics :: Grounding time = 0.087394s, Solving time = 0.103950s, Total time = 0.191344s

[18-02-2021_12-52-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.838560s, Solving time = 0.683254s, Total time = 1.564628s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-52-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),10)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[18-02-2021_12-52-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-53] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-52-53] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-52-53] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-52-53] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-52-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Instantiated.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building started.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building completed.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding base program parts.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.014737s.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving base program parts.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.002444s.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving started.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.063134s.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.006151s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.043538s.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.004254s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.045565s.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.004884s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.045221s.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.007052s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.048792s.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.008257s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.049842s.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.009436s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-52-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.052214s.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.009823s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.055117s.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.010911s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.054770s.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.010486s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.054811s.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.010949s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.058744s.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.013735s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.058986s.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.018782s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.063600s.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.018442s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.059730s.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.018947s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.072092s.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.026186s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.070886s.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.041147s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.065899s.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.069547s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving completed in 1.314174s because STOP_CON_REACHED.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.977678s, Solving time = 0.291433s, Total time = 1.314174s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.063134s, Solving time = 0.006151s, Total time = 0.069285s
2 : Statistics :: Grounding time = 0.043538s, Solving time = 0.004254s, Total time = 0.047792s
3 : Statistics :: Grounding time = 0.045565s, Solving time = 0.004884s, Total time = 0.050449s
4 : Statistics :: Grounding time = 0.045221s, Solving time = 0.007052s, Total time = 0.052274s
5 : Statistics :: Grounding time = 0.048792s, Solving time = 0.008257s, Total time = 0.057049s
6 : Statistics :: Grounding time = 0.049842s, Solving time = 0.009436s, Total time = 0.059278s
7 : Statistics :: Grounding time = 0.052214s, Solving time = 0.009823s, Total time = 0.062037s
8 : Statistics :: Grounding time = 0.055117s, Solving time = 0.010911s, Total time = 0.066028s
9 : Statistics :: Grounding time = 0.054770s, Solving time = 0.010486s, Total time = 0.065255s
10 : Statistics :: Grounding time = 0.054811s, Solving time = 0.010949s, Total time = 0.065760s
11 : Statistics :: Grounding time = 0.058744s, Solving time = 0.013735s, Total time = 0.072479s
12 : Statistics :: Grounding time = 0.058986s, Solving time = 0.018782s, Total time = 0.077769s
13 : Statistics :: Grounding time = 0.063600s, Solving time = 0.018442s, Total time = 0.082043s
14 : Statistics :: Grounding time = 0.059730s, Solving time = 0.018947s, Total time = 0.078677s
15 : Statistics :: Grounding time = 0.072092s, Solving time = 0.026186s, Total time = 0.098278s
16 : Statistics :: Grounding time = 0.070886s, Solving time = 0.041147s, Total time = 0.112033s
17 : Statistics :: Grounding time = 0.065899s, Solving time = 0.069547s, Total time = 0.135446s

[18-02-2021_12-52-54] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.977678s, Solving time = 0.291433s, Total time = 1.314174s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-52-54] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,retracted),5)
occurs(2,talos,configure(manipulator_arm_1,extended),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)

[18-02-2021_12-52-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-54] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-52-54] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-52-54] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-52-54] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-52-54] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Instantiated.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building started.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building completed.

[18-02-2021_12-52-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding base program parts.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.017452s.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving base program parts.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.003397s.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving started.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.183695s.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.007985s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.062570s.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.005131s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.062708s.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.006443s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.070792s.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.010458s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.074735s.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.012426s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.071798s.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.013457s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.074559s.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.014902s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.077071s.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.015368s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.077939s.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.017650s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.078432s.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.020886s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-52-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.080968s.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.028424s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.079825s.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.026173s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.080776s.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.031396s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving completed in 1.351387s because STOP_CON_REACHED.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.093319s, Solving time = 0.214098s, Total time = 1.351387s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.183695s, Solving time = 0.007985s, Total time = 0.191680s
2 : Statistics :: Grounding time = 0.062570s, Solving time = 0.005131s, Total time = 0.067702s
3 : Statistics :: Grounding time = 0.062708s, Solving time = 0.006443s, Total time = 0.069151s
4 : Statistics :: Grounding time = 0.070792s, Solving time = 0.010458s, Total time = 0.081250s
5 : Statistics :: Grounding time = 0.074735s, Solving time = 0.012426s, Total time = 0.087161s
6 : Statistics :: Grounding time = 0.071798s, Solving time = 0.013457s, Total time = 0.085256s
7 : Statistics :: Grounding time = 0.074559s, Solving time = 0.014902s, Total time = 0.089461s
8 : Statistics :: Grounding time = 0.077071s, Solving time = 0.015368s, Total time = 0.092439s
9 : Statistics :: Grounding time = 0.077939s, Solving time = 0.017650s, Total time = 0.095589s
10 : Statistics :: Grounding time = 0.078432s, Solving time = 0.020886s, Total time = 0.099319s
11 : Statistics :: Grounding time = 0.080968s, Solving time = 0.028424s, Total time = 0.109392s
12 : Statistics :: Grounding time = 0.079825s, Solving time = 0.026173s, Total time = 0.105998s
13 : Statistics :: Grounding time = 0.080776s, Solving time = 0.031396s, Total time = 0.112171s

[18-02-2021_12-52-56] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.093319s, Solving time = 0.214098s, Total time = 1.351387s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-52-56] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)

[18-02-2021_12-52-56] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.564628s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.314174s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.351387s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-52-56] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-52-56] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-52-56] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-56] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-52-56] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-52-56] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-52-56] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-52-56] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Instantiated.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building started.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building completed.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding base program parts.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.020566s.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving base program parts.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.003617s.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving started.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.258564s.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.019691s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-52-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.069922s.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.006247s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.068019s.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.007683s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.071474s.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.009209s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.071175s.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.011202s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.075454s.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.013897s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.078597s.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.015215s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.079145s.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.016334s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.078622s.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.016808s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.082314s.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.018689s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.086514s.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.022115s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.090812s.

[18-02-2021_12-52-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.023971s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.086648s.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.030485s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.088139s.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.030937s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving completed in 1.598529s because STOP_CON_REACHED.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.305966s, Solving time = 0.246101s, Total time = 1.598529s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.258564s, Solving time = 0.019691s, Total time = 0.278255s
2 : Statistics :: Grounding time = 0.069922s, Solving time = 0.006247s, Total time = 0.076168s
3 : Statistics :: Grounding time = 0.068019s, Solving time = 0.007683s, Total time = 0.075703s
4 : Statistics :: Grounding time = 0.071474s, Solving time = 0.009209s, Total time = 0.080683s
5 : Statistics :: Grounding time = 0.071175s, Solving time = 0.011202s, Total time = 0.082377s
6 : Statistics :: Grounding time = 0.075454s, Solving time = 0.013897s, Total time = 0.089351s
7 : Statistics :: Grounding time = 0.078597s, Solving time = 0.015215s, Total time = 0.093812s
8 : Statistics :: Grounding time = 0.079145s, Solving time = 0.016334s, Total time = 0.095479s
9 : Statistics :: Grounding time = 0.078622s, Solving time = 0.016808s, Total time = 0.095430s
10 : Statistics :: Grounding time = 0.082314s, Solving time = 0.018689s, Total time = 0.101003s
11 : Statistics :: Grounding time = 0.086514s, Solving time = 0.022115s, Total time = 0.108629s
12 : Statistics :: Grounding time = 0.090812s, Solving time = 0.023971s, Total time = 0.114783s
13 : Statistics :: Grounding time = 0.086648s, Solving time = 0.030485s, Total time = 0.117133s
14 : Statistics :: Grounding time = 0.088139s, Solving time = 0.030937s, Total time = 0.119076s

[18-02-2021_12-52-58] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.305966s, Solving time = 0.246101s, Total time = 1.598529s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-52-58] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)

[18-02-2021_12-52-58] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.598529s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-52-58] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-52-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-52-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-58] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-52-58] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-52-58] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-52-58] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-52-58] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Instantiated.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building started.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building completed.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding base program parts.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.020415s.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving base program parts.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.002889s.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving started.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.112286s.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.014641s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.050666s.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.006410s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.050891s.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.008489s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.054167s.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.009385s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-52-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.055984s.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.010164s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.059738s.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.010658s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.058829s.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.010593s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.062180s.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.011907s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.061188s.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Model found:
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.014739s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving completed in 0.705070s because STOP_CON_REACHED.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.586344s, Solving time = 0.099873s, Total time = 0.705070s
Final Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.112286s, Solving time = 0.014641s, Total time = 0.126927s
2 : Statistics :: Grounding time = 0.050666s, Solving time = 0.006410s, Total time = 0.057076s
3 : Statistics :: Grounding time = 0.050891s, Solving time = 0.008489s, Total time = 0.059381s
4 : Statistics :: Grounding time = 0.054167s, Solving time = 0.009385s, Total time = 0.063552s
5 : Statistics :: Grounding time = 0.055984s, Solving time = 0.010164s, Total time = 0.066148s
6 : Statistics :: Grounding time = 0.059738s, Solving time = 0.010658s, Total time = 0.070395s
7 : Statistics :: Grounding time = 0.058829s, Solving time = 0.010593s, Total time = 0.069421s
8 : Statistics :: Grounding time = 0.062180s, Solving time = 0.011907s, Total time = 0.074087s
9 : Statistics :: Grounding time = 0.061188s, Solving time = 0.014739s, Total time = 0.075927s

[18-02-2021_12-52-59] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.586344s, Solving time = 0.099873s, Total time = 0.705070s
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-52-59] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,retracted),5)
occurs(2,talos,configure(manipulator_arm_1,extended),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),18)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),19)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[18-02-2021_12-52-59] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-52-59] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-52-59] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-52-59] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-52-59] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-52-59] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Instantiated.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building started.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building completed.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding base program parts.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.024451s.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving base program parts.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.003495s.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving started.

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-52-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.349966s.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.036706s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.071829s.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.007891s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.074358s.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.011206s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.077296s.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.013880s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.077953s.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.017270s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving completed in 0.780239s because STOP_CON_REACHED.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.675855s, Solving time = 0.090449s, Total time = 0.780239s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.349966s, Solving time = 0.036706s, Total time = 0.386672s
2 : Statistics :: Grounding time = 0.071829s, Solving time = 0.007891s, Total time = 0.079720s
3 : Statistics :: Grounding time = 0.074358s, Solving time = 0.011206s, Total time = 0.085565s
4 : Statistics :: Grounding time = 0.077296s, Solving time = 0.013880s, Total time = 0.091177s
5 : Statistics :: Grounding time = 0.077953s, Solving time = 0.017270s, Total time = 0.095223s

[18-02-2021_12-53-00] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.675855s, Solving time = 0.090449s, Total time = 0.780239s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-00] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),29)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)

[18-02-2021_12-53-00] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.705070s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.780239s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-53-00] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-53-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-53-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-00] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-53-00] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-53-00] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-53-00] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-53-00] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Instantiated.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-53-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building started.

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building completed.

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding base program parts.

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.025106s.

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving base program parts.

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.003574s.

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving started.

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.383741s.

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.041897s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.073915s.

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.007989s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-53-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.073457s.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.011570s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.082041s.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.017680s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.087782s.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.016458s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.086167s.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.017376s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.086685s.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.022559s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.093931s.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.023025s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.091706s.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.030167s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.090993s.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.036297s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.092734s.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Model found:
Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.045180s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving completed in 1.587628s because STOP_CON_REACHED.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.268259s, Solving time = 0.273772s, Total time = 1.587628s
Final Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.383741s, Solving time = 0.041897s, Total time = 0.425638s
2 : Statistics :: Grounding time = 0.073915s, Solving time = 0.007989s, Total time = 0.081904s
3 : Statistics :: Grounding time = 0.073457s, Solving time = 0.011570s, Total time = 0.085027s
4 : Statistics :: Grounding time = 0.082041s, Solving time = 0.017680s, Total time = 0.099720s
5 : Statistics :: Grounding time = 0.087782s, Solving time = 0.016458s, Total time = 0.104240s
6 : Statistics :: Grounding time = 0.086167s, Solving time = 0.017376s, Total time = 0.103543s
7 : Statistics :: Grounding time = 0.086685s, Solving time = 0.022559s, Total time = 0.109244s
8 : Statistics :: Grounding time = 0.093931s, Solving time = 0.023025s, Total time = 0.116957s
9 : Statistics :: Grounding time = 0.091706s, Solving time = 0.030167s, Total time = 0.121873s
10 : Statistics :: Grounding time = 0.090993s, Solving time = 0.036297s, Total time = 0.127289s
11 : Statistics :: Grounding time = 0.092734s, Solving time = 0.045180s, Total time = 0.137914s

[18-02-2021_12-53-03] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.268259s, Solving time = 0.273772s, Total time = 1.587628s
Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-53-03] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),29)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),34)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),35)
occurs(1,talos,release(manipulator_end_2,(block,3)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),38)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),39)
occurs(1,talos,release(manipulator_end_2,(block,2)),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),41)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),42)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),43)

[18-02-2021_12-53-03] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.587628s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[18-02-2021_12-53-03] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-53-03] INFO :: Experiment >> 

      ================================================      
              Initial run 2 : Time 11.277620s               
      ================================================      

[18-02-2021_12-53-03] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-53-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-53-03] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-53-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-53-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-03] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Instantiated.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building completed.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding base program parts.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.013501s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving base program parts.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.001836s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.039116s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.004890s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.031807s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.002908s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.031076s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.004661s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.034147s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.004890s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.035037s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.005151s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.036770s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.006043s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.038326s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.006864s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.041548s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.008493s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.038684s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.009712s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.039776s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.010986s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.039920s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.012416s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.041638s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.019474s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.040116s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.028234s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.041964s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.037149s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.042346s.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.059685s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.077424s.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.119309s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.079854s.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.239092s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.082774s.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.133187s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving completed in 1.582879s because STOP_CON_REACHED.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.825822s, Solving time = 0.714978s, Total time = 1.582879s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039116s, Solving time = 0.004890s, Total time = 0.044007s
2 : Statistics :: Grounding time = 0.031807s, Solving time = 0.002908s, Total time = 0.034714s
3 : Statistics :: Grounding time = 0.031076s, Solving time = 0.004661s, Total time = 0.035737s
4 : Statistics :: Grounding time = 0.034147s, Solving time = 0.004890s, Total time = 0.039037s
5 : Statistics :: Grounding time = 0.035037s, Solving time = 0.005151s, Total time = 0.040187s
6 : Statistics :: Grounding time = 0.036770s, Solving time = 0.006043s, Total time = 0.042812s
7 : Statistics :: Grounding time = 0.038326s, Solving time = 0.006864s, Total time = 0.045190s
8 : Statistics :: Grounding time = 0.041548s, Solving time = 0.008493s, Total time = 0.050041s
9 : Statistics :: Grounding time = 0.038684s, Solving time = 0.009712s, Total time = 0.048396s
10 : Statistics :: Grounding time = 0.039776s, Solving time = 0.010986s, Total time = 0.050762s
11 : Statistics :: Grounding time = 0.039920s, Solving time = 0.012416s, Total time = 0.052335s
12 : Statistics :: Grounding time = 0.041638s, Solving time = 0.019474s, Total time = 0.061112s
13 : Statistics :: Grounding time = 0.040116s, Solving time = 0.028234s, Total time = 0.068350s
14 : Statistics :: Grounding time = 0.041964s, Solving time = 0.037149s, Total time = 0.079113s
15 : Statistics :: Grounding time = 0.042346s, Solving time = 0.059685s, Total time = 0.102030s
16 : Statistics :: Grounding time = 0.077424s, Solving time = 0.119309s, Total time = 0.196732s
17 : Statistics :: Grounding time = 0.079854s, Solving time = 0.239092s, Total time = 0.318946s
18 : Statistics :: Grounding time = 0.082774s, Solving time = 0.133187s, Total time = 0.215961s

[18-02-2021_12-53-04] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.825822s, Solving time = 0.714978s, Total time = 1.582879s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-04] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[18-02-2021_12-53-04] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-04] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-53-04] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-53-04] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-04] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-53-04] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Instantiated.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building started.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building completed.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding base program parts.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.014250s.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving base program parts.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.002443s.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving started.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.061679s.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.005461s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.043460s.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.003616s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.046042s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.004737s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.046223s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.006621s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.048847s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.008698s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.050699s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.009545s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.055462s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.010050s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.055273s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.011038s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.056002s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.010764s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.062671s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.011692s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.061038s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.028114s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.065029s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.017487s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.066943s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.022048s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.067222s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.026248s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.063676s.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.026023s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-53-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.062988s.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.039829s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.065414s.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.024508s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving completed in 1.303768s because STOP_CON_REACHED.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.992920s, Solving time = 0.268924s, Total time = 1.303768s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061679s, Solving time = 0.005461s, Total time = 0.067140s
2 : Statistics :: Grounding time = 0.043460s, Solving time = 0.003616s, Total time = 0.047076s
3 : Statistics :: Grounding time = 0.046042s, Solving time = 0.004737s, Total time = 0.050780s
4 : Statistics :: Grounding time = 0.046223s, Solving time = 0.006621s, Total time = 0.052844s
5 : Statistics :: Grounding time = 0.048847s, Solving time = 0.008698s, Total time = 0.057545s
6 : Statistics :: Grounding time = 0.050699s, Solving time = 0.009545s, Total time = 0.060244s
7 : Statistics :: Grounding time = 0.055462s, Solving time = 0.010050s, Total time = 0.065513s
8 : Statistics :: Grounding time = 0.055273s, Solving time = 0.011038s, Total time = 0.066310s
9 : Statistics :: Grounding time = 0.056002s, Solving time = 0.010764s, Total time = 0.066766s
10 : Statistics :: Grounding time = 0.062671s, Solving time = 0.011692s, Total time = 0.074363s
11 : Statistics :: Grounding time = 0.061038s, Solving time = 0.028114s, Total time = 0.089152s
12 : Statistics :: Grounding time = 0.065029s, Solving time = 0.017487s, Total time = 0.082515s
13 : Statistics :: Grounding time = 0.066943s, Solving time = 0.022048s, Total time = 0.088991s
14 : Statistics :: Grounding time = 0.067222s, Solving time = 0.026248s, Total time = 0.093470s
15 : Statistics :: Grounding time = 0.063676s, Solving time = 0.026023s, Total time = 0.089699s
16 : Statistics :: Grounding time = 0.062988s, Solving time = 0.039829s, Total time = 0.102817s
17 : Statistics :: Grounding time = 0.065414s, Solving time = 0.024508s, Total time = 0.089922s

[18-02-2021_12-53-06] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.992920s, Solving time = 0.268924s, Total time = 1.303768s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-06] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_2,retracted),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)

[18-02-2021_12-53-06] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-06] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-53-06] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-53-06] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-53-06] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-53-06] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Instantiated.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building started.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building completed.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding base program parts.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.016078s.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving base program parts.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.002871s.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving started.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.190796s.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.009089s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.066868s.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.005044s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.064351s.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.006465s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.067276s.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.010462s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.069048s.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.012332s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.071705s.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.014333s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.075896s.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.014712s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.078759s.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.015609s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.076775s.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.017131s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.078770s.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.021141s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.078800s.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.021045s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.084498s.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.024240s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.084532s.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Model found:
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.038310s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving completed in 1.357764s because STOP_CON_REACHED.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.104151s, Solving time = 0.212784s, Total time = 1.357764s
Final Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.190796s, Solving time = 0.009089s, Total time = 0.199884s
2 : Statistics :: Grounding time = 0.066868s, Solving time = 0.005044s, Total time = 0.071912s
3 : Statistics :: Grounding time = 0.064351s, Solving time = 0.006465s, Total time = 0.070816s
4 : Statistics :: Grounding time = 0.067276s, Solving time = 0.010462s, Total time = 0.077738s
5 : Statistics :: Grounding time = 0.069048s, Solving time = 0.012332s, Total time = 0.081380s
6 : Statistics :: Grounding time = 0.071705s, Solving time = 0.014333s, Total time = 0.086039s
7 : Statistics :: Grounding time = 0.075896s, Solving time = 0.014712s, Total time = 0.090607s
8 : Statistics :: Grounding time = 0.078759s, Solving time = 0.015609s, Total time = 0.094367s
9 : Statistics :: Grounding time = 0.076775s, Solving time = 0.017131s, Total time = 0.093906s
10 : Statistics :: Grounding time = 0.078770s, Solving time = 0.021141s, Total time = 0.099911s
11 : Statistics :: Grounding time = 0.078800s, Solving time = 0.021045s, Total time = 0.099845s
12 : Statistics :: Grounding time = 0.084498s, Solving time = 0.024240s, Total time = 0.108738s
13 : Statistics :: Grounding time = 0.084532s, Solving time = 0.038310s, Total time = 0.122842s

[18-02-2021_12-53-07] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.104151s, Solving time = 0.212784s, Total time = 1.357764s
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)

[18-02-2021_12-53-07] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.582879s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.303768s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.357764s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-53-07] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-53-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-53-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-07] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-53-07] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-07] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-07] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-53-07] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Instantiated.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building started.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building completed.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding base program parts.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.019769s.

[18-02-2021_12-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving base program parts.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.003725s.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving started.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.256631s.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.019725s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.068462s.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.006341s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.068097s.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.007472s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.072054s.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.008688s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.076811s.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.012004s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.074872s.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.013554s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.076760s.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.016511s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.079893s.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.015546s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.079061s.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.016906s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.084305s.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.018406s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.090843s.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.020291s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.090963s.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.024092s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.088239s.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.032441s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.088833s.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.040717s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving completed in 1.622238s because STOP_CON_REACHED.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.315593s, Solving time = 0.256418s, Total time = 1.622238s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.256631s, Solving time = 0.019725s, Total time = 0.276356s
2 : Statistics :: Grounding time = 0.068462s, Solving time = 0.006341s, Total time = 0.074804s
3 : Statistics :: Grounding time = 0.068097s, Solving time = 0.007472s, Total time = 0.075569s
4 : Statistics :: Grounding time = 0.072054s, Solving time = 0.008688s, Total time = 0.080742s
5 : Statistics :: Grounding time = 0.076811s, Solving time = 0.012004s, Total time = 0.088815s
6 : Statistics :: Grounding time = 0.074872s, Solving time = 0.013554s, Total time = 0.088426s
7 : Statistics :: Grounding time = 0.076760s, Solving time = 0.016511s, Total time = 0.093271s
8 : Statistics :: Grounding time = 0.079893s, Solving time = 0.015546s, Total time = 0.095439s
9 : Statistics :: Grounding time = 0.079061s, Solving time = 0.016906s, Total time = 0.095968s
10 : Statistics :: Grounding time = 0.084305s, Solving time = 0.018406s, Total time = 0.102711s
11 : Statistics :: Grounding time = 0.090843s, Solving time = 0.020291s, Total time = 0.111134s
12 : Statistics :: Grounding time = 0.090963s, Solving time = 0.024092s, Total time = 0.115055s
13 : Statistics :: Grounding time = 0.088239s, Solving time = 0.032441s, Total time = 0.120680s
14 : Statistics :: Grounding time = 0.088833s, Solving time = 0.040717s, Total time = 0.129549s

[18-02-2021_12-53-09] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.315593s, Solving time = 0.256418s, Total time = 1.622238s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-53-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)

[18-02-2021_12-53-09] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.622238s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-53-09] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-53-09] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-53-09] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-09] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-53-09] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-09] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-09] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-53-09] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Instantiated.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building started.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building completed.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding base program parts.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.019021s.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving base program parts.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.002399s.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving started.

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.112886s.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.015631s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.050977s.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.005790s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.050812s.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.007680s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.055574s.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.009295s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.055464s.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.009617s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.059169s.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.010747s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.059216s.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.011086s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.061971s.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.011728s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.068002s.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Model found:
Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.014757s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving completed in 0.710305s because STOP_CON_REACHED.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.593091s, Solving time = 0.098729s, Total time = 0.710305s
Final Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.112886s, Solving time = 0.015631s, Total time = 0.128516s
2 : Statistics :: Grounding time = 0.050977s, Solving time = 0.005790s, Total time = 0.056767s
3 : Statistics :: Grounding time = 0.050812s, Solving time = 0.007680s, Total time = 0.058491s
4 : Statistics :: Grounding time = 0.055574s, Solving time = 0.009295s, Total time = 0.064868s
5 : Statistics :: Grounding time = 0.055464s, Solving time = 0.009617s, Total time = 0.065080s
6 : Statistics :: Grounding time = 0.059169s, Solving time = 0.010747s, Total time = 0.069916s
7 : Statistics :: Grounding time = 0.059216s, Solving time = 0.011086s, Total time = 0.070302s
8 : Statistics :: Grounding time = 0.061971s, Solving time = 0.011728s, Total time = 0.073699s
9 : Statistics :: Grounding time = 0.068002s, Solving time = 0.014757s, Total time = 0.082759s

[18-02-2021_12-53-10] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.593091s, Solving time = 0.098729s, Total time = 0.710305s
Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-53-10] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_2,retracted),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_1,(block,5)),18)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),19)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[18-02-2021_12-53-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-10] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-53-10] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-10] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-53-10] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-53-10] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Instantiated.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building started.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building completed.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding base program parts.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.024112s.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving base program parts.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.003723s.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving started.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.342791s.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.039872s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.072525s.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.008399s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.079602s.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.010122s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.074827s.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.013520s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.077578s.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.018002s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving completed in 0.779042s because STOP_CON_REACHED.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.671435s, Solving time = 0.093636s, Total time = 0.779042s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.342791s, Solving time = 0.039872s, Total time = 0.382663s
2 : Statistics :: Grounding time = 0.072525s, Solving time = 0.008399s, Total time = 0.080924s
3 : Statistics :: Grounding time = 0.079602s, Solving time = 0.010122s, Total time = 0.089724s
4 : Statistics :: Grounding time = 0.074827s, Solving time = 0.013520s, Total time = 0.088347s
5 : Statistics :: Grounding time = 0.077578s, Solving time = 0.018002s, Total time = 0.095580s

[18-02-2021_12-53-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.671435s, Solving time = 0.093636s, Total time = 0.779042s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)

[18-02-2021_12-53-12] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.710305s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.779042s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-53-12] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-53-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-53-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-12] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-53-12] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-53-12] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-53-12] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-53-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Instantiated.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building started.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building completed.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding base program parts.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.026515s.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving base program parts.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.003688s.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving started.

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-53-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.386212s.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.040999s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.074222s.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.008077s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.074816s.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.011916s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.079261s.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.015208s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.082899s.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.016494s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.086248s.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.017492s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.096012s.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Model found:
Model :: Total atoms = 9195, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.025211s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving completed in 1.069004s because STOP_CON_REACHED.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.906185s, Solving time = 0.139085s, Total time = 1.069004s
Final Model :: Total atoms = 9195, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.386212s, Solving time = 0.040999s, Total time = 0.427211s
2 : Statistics :: Grounding time = 0.074222s, Solving time = 0.008077s, Total time = 0.082299s
3 : Statistics :: Grounding time = 0.074816s, Solving time = 0.011916s, Total time = 0.086732s
4 : Statistics :: Grounding time = 0.079261s, Solving time = 0.015208s, Total time = 0.094469s
5 : Statistics :: Grounding time = 0.082899s, Solving time = 0.016494s, Total time = 0.099393s
6 : Statistics :: Grounding time = 0.086248s, Solving time = 0.017492s, Total time = 0.103740s
7 : Statistics :: Grounding time = 0.096012s, Solving time = 0.025211s, Total time = 0.121223s

[18-02-2021_12-53-13] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.906185s, Solving time = 0.139085s, Total time = 1.069004s
Model :: Total atoms = 9195, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-13] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[18-02-2021_12-53-13] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.069004s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[18-02-2021_12-53-13] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-53-13] INFO :: Experiment >> 

      ================================================      
            Experimental run 1 : Time 10.732679s            
      ================================================      

[18-02-2021_12-53-13] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-53-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-53-13] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-53-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-53-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-13] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Instantiated.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Program building started.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Program building completed.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding base program parts.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.013471s.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving base program parts.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.003069s.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental solving started.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.041938s.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.005426s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.031801s.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.003332s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.031058s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.004627s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.034329s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.005258s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.034571s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.005751s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.036020s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.006440s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.037517s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.007338s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.038078s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.007800s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.037622s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.010100s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.040043s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.011793s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.039070s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.014242s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.041345s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.021735s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.044731s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.026048s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.042498s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.040733s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.048149s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.067304s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.077433s.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.094363s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.080636s.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.204779s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.083287s.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Model found:
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.101475s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental solving completed in 1.518227s because STOP_CON_REACHED.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.833597s, Solving time = 0.641613s, Total time = 1.518227s
Final Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.041938s, Solving time = 0.005426s, Total time = 0.047364s
2 : Statistics :: Grounding time = 0.031801s, Solving time = 0.003332s, Total time = 0.035133s
3 : Statistics :: Grounding time = 0.031058s, Solving time = 0.004627s, Total time = 0.035685s
4 : Statistics :: Grounding time = 0.034329s, Solving time = 0.005258s, Total time = 0.039587s
5 : Statistics :: Grounding time = 0.034571s, Solving time = 0.005751s, Total time = 0.040322s
6 : Statistics :: Grounding time = 0.036020s, Solving time = 0.006440s, Total time = 0.042460s
7 : Statistics :: Grounding time = 0.037517s, Solving time = 0.007338s, Total time = 0.044855s
8 : Statistics :: Grounding time = 0.038078s, Solving time = 0.007800s, Total time = 0.045878s
9 : Statistics :: Grounding time = 0.037622s, Solving time = 0.010100s, Total time = 0.047722s
10 : Statistics :: Grounding time = 0.040043s, Solving time = 0.011793s, Total time = 0.051836s
11 : Statistics :: Grounding time = 0.039070s, Solving time = 0.014242s, Total time = 0.053312s
12 : Statistics :: Grounding time = 0.041345s, Solving time = 0.021735s, Total time = 0.063081s
13 : Statistics :: Grounding time = 0.044731s, Solving time = 0.026048s, Total time = 0.070779s
14 : Statistics :: Grounding time = 0.042498s, Solving time = 0.040733s, Total time = 0.083231s
15 : Statistics :: Grounding time = 0.048149s, Solving time = 0.067304s, Total time = 0.115453s
16 : Statistics :: Grounding time = 0.077433s, Solving time = 0.094363s, Total time = 0.171796s
17 : Statistics :: Grounding time = 0.080636s, Solving time = 0.204779s, Total time = 0.285415s
18 : Statistics :: Grounding time = 0.083287s, Solving time = 0.101475s, Total time = 0.184762s

[18-02-2021_12-53-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.833597s, Solving time = 0.641613s, Total time = 1.518227s
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,release(manipulator_arm_2,(block,3)),11)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[18-02-2021_12-53-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-15] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-53-15] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-53-15] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-15] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-53-15] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Instantiated.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Program building started.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Program building completed.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding base program parts.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.014615s.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving base program parts.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.002236s.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental solving started.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.064717s.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.006074s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.044680s.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.003770s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.045301s.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.004433s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.049211s.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.006640s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.048393s.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.007871s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.050551s.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.008856s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.057700s.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.009163s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.059020s.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.009558s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.056126s.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.010407s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.055927s.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.011016s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.058134s.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.013084s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.060282s.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.017364s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.061402s.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.019747s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.061128s.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.021388s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.070601s.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.028070s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.064129s.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.035470s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.070770s.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.060372s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental solving completed in 1.310716s because STOP_CON_REACHED.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.992684s, Solving time = 0.275520s, Total time = 1.310716s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.064717s, Solving time = 0.006074s, Total time = 0.070791s
2 : Statistics :: Grounding time = 0.044680s, Solving time = 0.003770s, Total time = 0.048450s
3 : Statistics :: Grounding time = 0.045301s, Solving time = 0.004433s, Total time = 0.049734s
4 : Statistics :: Grounding time = 0.049211s, Solving time = 0.006640s, Total time = 0.055851s
5 : Statistics :: Grounding time = 0.048393s, Solving time = 0.007871s, Total time = 0.056264s
6 : Statistics :: Grounding time = 0.050551s, Solving time = 0.008856s, Total time = 0.059406s
7 : Statistics :: Grounding time = 0.057700s, Solving time = 0.009163s, Total time = 0.066864s
8 : Statistics :: Grounding time = 0.059020s, Solving time = 0.009558s, Total time = 0.068578s
9 : Statistics :: Grounding time = 0.056126s, Solving time = 0.010407s, Total time = 0.066532s
10 : Statistics :: Grounding time = 0.055927s, Solving time = 0.011016s, Total time = 0.066943s
11 : Statistics :: Grounding time = 0.058134s, Solving time = 0.013084s, Total time = 0.071218s
12 : Statistics :: Grounding time = 0.060282s, Solving time = 0.017364s, Total time = 0.077647s
13 : Statistics :: Grounding time = 0.061402s, Solving time = 0.019747s, Total time = 0.081149s
14 : Statistics :: Grounding time = 0.061128s, Solving time = 0.021388s, Total time = 0.082515s
15 : Statistics :: Grounding time = 0.070601s, Solving time = 0.028070s, Total time = 0.098671s
16 : Statistics :: Grounding time = 0.064129s, Solving time = 0.035470s, Total time = 0.099598s
17 : Statistics :: Grounding time = 0.070770s, Solving time = 0.060372s, Total time = 0.131142s

[18-02-2021_12-53-16] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.992684s, Solving time = 0.275520s, Total time = 1.310716s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-16] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)

[18-02-2021_12-53-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-16] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-53-16] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-53-16] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-53-16] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-53-16] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Instantiated.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Program building started.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Program building completed.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding base program parts.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.016302s.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving base program parts.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.003819s.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental solving started.

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.190498s.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.008392s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.063797s.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.005828s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.063698s.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.006855s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.067587s.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.010713s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.071423s.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.012404s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.071962s.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.014368s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.076177s.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.014892s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.077673s.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.016335s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.081161s.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.017411s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.078902s.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.021059s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.080477s.

[18-02-2021_12-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.026835s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.080404s.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.025002s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.084895s.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.033511s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental solving completed in 1.362685s because STOP_CON_REACHED.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.104954s, Solving time = 0.217423s, Total time = 1.362685s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.190498s, Solving time = 0.008392s, Total time = 0.198890s
2 : Statistics :: Grounding time = 0.063797s, Solving time = 0.005828s, Total time = 0.069625s
3 : Statistics :: Grounding time = 0.063698s, Solving time = 0.006855s, Total time = 0.070553s
4 : Statistics :: Grounding time = 0.067587s, Solving time = 0.010713s, Total time = 0.078299s
5 : Statistics :: Grounding time = 0.071423s, Solving time = 0.012404s, Total time = 0.083827s
6 : Statistics :: Grounding time = 0.071962s, Solving time = 0.014368s, Total time = 0.086330s
7 : Statistics :: Grounding time = 0.076177s, Solving time = 0.014892s, Total time = 0.091070s
8 : Statistics :: Grounding time = 0.077673s, Solving time = 0.016335s, Total time = 0.094008s
9 : Statistics :: Grounding time = 0.081161s, Solving time = 0.017411s, Total time = 0.098572s
10 : Statistics :: Grounding time = 0.078902s, Solving time = 0.021059s, Total time = 0.099961s
11 : Statistics :: Grounding time = 0.080477s, Solving time = 0.026835s, Total time = 0.107312s
12 : Statistics :: Grounding time = 0.080404s, Solving time = 0.025002s, Total time = 0.105406s
13 : Statistics :: Grounding time = 0.084895s, Solving time = 0.033511s, Total time = 0.118406s

[18-02-2021_12-53-18] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.104954s, Solving time = 0.217423s, Total time = 1.362685s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-53-18] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,configure(manipulator_limb_2,retracted),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)

[18-02-2021_12-53-18] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.518227s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.310716s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.362685s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-53-18] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-53-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-53-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-18] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-53-18] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-18] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-18] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-53-18] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Instantiated.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Program building started.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Program building completed.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding base program parts.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.019507s.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving base program parts.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.003605s.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental solving started.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.271997s.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.019303s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.067835s.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.006465s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.068639s.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.007623s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.072214s.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.008666s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.071935s.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.011389s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.074343s.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.013262s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.076452s.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.014806s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.081473s.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.015281s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.081005s.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.016627s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.090628s.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.018301s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.091823s.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.021652s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.084743s.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.023888s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.086719s.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.029677s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.087322s.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.053644s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental solving completed in 1.639299s because STOP_CON_REACHED.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.326637s, Solving time = 0.264188s, Total time = 1.639299s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.271997s, Solving time = 0.019303s, Total time = 0.291301s
2 : Statistics :: Grounding time = 0.067835s, Solving time = 0.006465s, Total time = 0.074300s
3 : Statistics :: Grounding time = 0.068639s, Solving time = 0.007623s, Total time = 0.076262s
4 : Statistics :: Grounding time = 0.072214s, Solving time = 0.008666s, Total time = 0.080880s
5 : Statistics :: Grounding time = 0.071935s, Solving time = 0.011389s, Total time = 0.083323s
6 : Statistics :: Grounding time = 0.074343s, Solving time = 0.013262s, Total time = 0.087605s
7 : Statistics :: Grounding time = 0.076452s, Solving time = 0.014806s, Total time = 0.091258s
8 : Statistics :: Grounding time = 0.081473s, Solving time = 0.015281s, Total time = 0.096754s
9 : Statistics :: Grounding time = 0.081005s, Solving time = 0.016627s, Total time = 0.097632s
10 : Statistics :: Grounding time = 0.090628s, Solving time = 0.018301s, Total time = 0.108929s
11 : Statistics :: Grounding time = 0.091823s, Solving time = 0.021652s, Total time = 0.113475s
12 : Statistics :: Grounding time = 0.084743s, Solving time = 0.023888s, Total time = 0.108632s
13 : Statistics :: Grounding time = 0.086719s, Solving time = 0.029677s, Total time = 0.116396s
14 : Statistics :: Grounding time = 0.087322s, Solving time = 0.053644s, Total time = 0.140966s

[18-02-2021_12-53-20] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.326637s, Solving time = 0.264188s, Total time = 1.639299s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-53-20] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,configure(manipulator_limb_2,retracted),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)

[18-02-2021_12-53-20] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.639299s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-53-20] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-53-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-53-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-20] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-53-20] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-20] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-20] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-53-20] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Instantiated.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Program building started.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Program building completed.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding base program parts.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.019318s.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving base program parts.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.002204s.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental solving started.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.119499s.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.015542s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.050974s.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.005417s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.050309s.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.008257s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.059974s.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.009792s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.056059s.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.010446s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.059571s.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.011191s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.057598s.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.010978s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.060227s.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.011985s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.061450s.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Model found:
Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.014786s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental solving completed in 0.714422s because STOP_CON_REACHED.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.594979s, Solving time = 0.100598s, Total time = 0.714422s
Final Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.119499s, Solving time = 0.015542s, Total time = 0.135041s
2 : Statistics :: Grounding time = 0.050974s, Solving time = 0.005417s, Total time = 0.056391s
3 : Statistics :: Grounding time = 0.050309s, Solving time = 0.008257s, Total time = 0.058566s
4 : Statistics :: Grounding time = 0.059974s, Solving time = 0.009792s, Total time = 0.069766s
5 : Statistics :: Grounding time = 0.056059s, Solving time = 0.010446s, Total time = 0.066505s
6 : Statistics :: Grounding time = 0.059571s, Solving time = 0.011191s, Total time = 0.070762s
7 : Statistics :: Grounding time = 0.057598s, Solving time = 0.010978s, Total time = 0.068577s
8 : Statistics :: Grounding time = 0.060227s, Solving time = 0.011985s, Total time = 0.072212s
9 : Statistics :: Grounding time = 0.061450s, Solving time = 0.014786s, Total time = 0.076236s

[18-02-2021_12-53-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.594979s, Solving time = 0.100598s, Total time = 0.714422s
Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_1,(block,5)),18)
occurs(2,talos,release(manipulator_arm_2,(block,3)),19)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),20)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[18-02-2021_12-53-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-21] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-53-21] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-21] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-53-21] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-53-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Instantiated.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Program building started.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Program building completed.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding base program parts.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.023976s.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving base program parts.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.003522s.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental solving started.

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.346341s.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.037198s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.073933s.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.008031s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.072699s.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.010064s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.076439s.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.014027s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.077631s.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Model found:
Model :: Total atoms = 7847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.017922s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental solving completed in 0.775735s because STOP_CON_REACHED.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.671020s, Solving time = 0.090765s, Total time = 0.775735s
Final Model :: Total atoms = 7847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.346341s, Solving time = 0.037198s, Total time = 0.383539s
2 : Statistics :: Grounding time = 0.073933s, Solving time = 0.008031s, Total time = 0.081964s
3 : Statistics :: Grounding time = 0.072699s, Solving time = 0.010064s, Total time = 0.082764s
4 : Statistics :: Grounding time = 0.076439s, Solving time = 0.014027s, Total time = 0.090466s
5 : Statistics :: Grounding time = 0.077631s, Solving time = 0.017922s, Total time = 0.095554s

[18-02-2021_12-53-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.671020s, Solving time = 0.090765s, Total time = 0.775735s
Model :: Total atoms = 7847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,configure(manipulator_limb_2,retracted),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,release(manipulator_end_2,(block,3)),29)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),30)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),31)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),32)

[18-02-2021_12-53-22] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.714422s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.775735s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-53-22] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-53-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-53-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-22] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-53-22] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-53-22] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-53-22] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-53-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Instantiated.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Program building started.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Program building completed.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding base program parts.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.025606s.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving base program parts.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.003593s.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental solving started.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.403879s.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.043005s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.075165s.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.008535s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.075543s.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.011630s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.081339s.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.015496s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.087068s.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.016544s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.084752s.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.016615s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.086758s.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.021205s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.089468s.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.020892s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.090353s.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.023707s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.091395s.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.031251s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.095170s.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Model found:
Model :: Total atoms = 9940, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.037016s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental solving completed in 1.579166s because STOP_CON_REACHED.

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.286496s, Solving time = 0.249490s, Total time = 1.579166s
Final Model :: Total atoms = 9940, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.403879s, Solving time = 0.043005s, Total time = 0.446884s
2 : Statistics :: Grounding time = 0.075165s, Solving time = 0.008535s, Total time = 0.083700s
3 : Statistics :: Grounding time = 0.075543s, Solving time = 0.011630s, Total time = 0.087173s
4 : Statistics :: Grounding time = 0.081339s, Solving time = 0.015496s, Total time = 0.096835s
5 : Statistics :: Grounding time = 0.087068s, Solving time = 0.016544s, Total time = 0.103612s
6 : Statistics :: Grounding time = 0.084752s, Solving time = 0.016615s, Total time = 0.101367s
7 : Statistics :: Grounding time = 0.086758s, Solving time = 0.021205s, Total time = 0.107963s
8 : Statistics :: Grounding time = 0.089468s, Solving time = 0.020892s, Total time = 0.110360s
9 : Statistics :: Grounding time = 0.090353s, Solving time = 0.023707s, Total time = 0.114060s
10 : Statistics :: Grounding time = 0.091395s, Solving time = 0.031251s, Total time = 0.122646s
11 : Statistics :: Grounding time = 0.095170s, Solving time = 0.037016s, Total time = 0.132186s

[18-02-2021_12-53-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.286496s, Solving time = 0.249490s, Total time = 1.579166s
Model :: Total atoms = 9940, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,configure(manipulator_limb_2,retracted),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,release(manipulator_end_2,(block,3)),29)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),30)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),31)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),34)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),35)
occurs(1,talos,release(manipulator_end_1,(block,3)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),38)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),39)
occurs(1,talos,release(manipulator_end_1,(block,2)),40)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),41)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),42)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),43)

[18-02-2021_12-53-25] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.579166s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[18-02-2021_12-53-25] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-53-25] INFO :: Experiment >> 

      ================================================      
            Experimental run 2 : Time 11.162216s            
      ================================================      

[18-02-2021_12-53-25] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-53-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-53-25] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-53-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-53-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-25] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Instantiated.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Program building started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Program building completed.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding base program parts.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.015018s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving base program parts.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.003028s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.039388s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.005614s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.030944s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.003433s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.031039s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.004498s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.033928s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.005528s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.034343s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.005536s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.036008s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.006664s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.037344s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.006712s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.037011s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.007559s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.038326s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.009852s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.039955s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.010519s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.039488s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.017175s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.041333s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.021443s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.041530s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.027378s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.042535s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.036115s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.042700s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.058910s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.077016s.

[18-02-2021_12-53-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.090838s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.078676s.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.179765s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.083359s.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.055597s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental solving completed in 1.420490s because STOP_CON_REACHED.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.819942s, Solving time = 0.556161s, Total time = 1.420490s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039388s, Solving time = 0.005614s, Total time = 0.045002s
2 : Statistics :: Grounding time = 0.030944s, Solving time = 0.003433s, Total time = 0.034377s
3 : Statistics :: Grounding time = 0.031039s, Solving time = 0.004498s, Total time = 0.035537s
4 : Statistics :: Grounding time = 0.033928s, Solving time = 0.005528s, Total time = 0.039456s
5 : Statistics :: Grounding time = 0.034343s, Solving time = 0.005536s, Total time = 0.039879s
6 : Statistics :: Grounding time = 0.036008s, Solving time = 0.006664s, Total time = 0.042671s
7 : Statistics :: Grounding time = 0.037344s, Solving time = 0.006712s, Total time = 0.044055s
8 : Statistics :: Grounding time = 0.037011s, Solving time = 0.007559s, Total time = 0.044570s
9 : Statistics :: Grounding time = 0.038326s, Solving time = 0.009852s, Total time = 0.048178s
10 : Statistics :: Grounding time = 0.039955s, Solving time = 0.010519s, Total time = 0.050474s
11 : Statistics :: Grounding time = 0.039488s, Solving time = 0.017175s, Total time = 0.056663s
12 : Statistics :: Grounding time = 0.041333s, Solving time = 0.021443s, Total time = 0.062776s
13 : Statistics :: Grounding time = 0.041530s, Solving time = 0.027378s, Total time = 0.068908s
14 : Statistics :: Grounding time = 0.042535s, Solving time = 0.036115s, Total time = 0.078650s
15 : Statistics :: Grounding time = 0.042700s, Solving time = 0.058910s, Total time = 0.101610s
16 : Statistics :: Grounding time = 0.077016s, Solving time = 0.090838s, Total time = 0.167853s
17 : Statistics :: Grounding time = 0.078676s, Solving time = 0.179765s, Total time = 0.258441s
18 : Statistics :: Grounding time = 0.083359s, Solving time = 0.055597s, Total time = 0.138956s

[18-02-2021_12-53-26] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.819942s, Solving time = 0.556161s, Total time = 1.420490s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-26] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_2,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),11)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[18-02-2021_12-53-26] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-26] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-53-26] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-53-26] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-26] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-53-26] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Instantiated.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Program building started.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Program building completed.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding base program parts.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.015384s.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving base program parts.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.002449s.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental solving started.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.061808s.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.004945s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.044427s.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.003537s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.045666s.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.004413s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.045519s.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.006233s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.051178s.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.007548s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.050689s.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.008524s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.053694s.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.009705s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.054500s.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.009906s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.056580s.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.010814s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.067898s.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.010652s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.059585s.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.013665s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.059167s.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.016975s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.061160s.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.017853s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.062737s.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.020847s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.064096s.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.031340s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.065525s.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.047865s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.067909s.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.082805s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental solving completed in 1.339957s because STOP_CON_REACHED.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.987524s, Solving time = 0.310075s, Total time = 1.339957s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061808s, Solving time = 0.004945s, Total time = 0.066753s
2 : Statistics :: Grounding time = 0.044427s, Solving time = 0.003537s, Total time = 0.047964s
3 : Statistics :: Grounding time = 0.045666s, Solving time = 0.004413s, Total time = 0.050080s
4 : Statistics :: Grounding time = 0.045519s, Solving time = 0.006233s, Total time = 0.051751s
5 : Statistics :: Grounding time = 0.051178s, Solving time = 0.007548s, Total time = 0.058726s
6 : Statistics :: Grounding time = 0.050689s, Solving time = 0.008524s, Total time = 0.059213s
7 : Statistics :: Grounding time = 0.053694s, Solving time = 0.009705s, Total time = 0.063399s
8 : Statistics :: Grounding time = 0.054500s, Solving time = 0.009906s, Total time = 0.064407s
9 : Statistics :: Grounding time = 0.056580s, Solving time = 0.010814s, Total time = 0.067393s
10 : Statistics :: Grounding time = 0.067898s, Solving time = 0.010652s, Total time = 0.078550s
11 : Statistics :: Grounding time = 0.059585s, Solving time = 0.013665s, Total time = 0.073250s
12 : Statistics :: Grounding time = 0.059167s, Solving time = 0.016975s, Total time = 0.076142s
13 : Statistics :: Grounding time = 0.061160s, Solving time = 0.017853s, Total time = 0.079013s
14 : Statistics :: Grounding time = 0.062737s, Solving time = 0.020847s, Total time = 0.083584s
15 : Statistics :: Grounding time = 0.064096s, Solving time = 0.031340s, Total time = 0.095437s
16 : Statistics :: Grounding time = 0.065525s, Solving time = 0.047865s, Total time = 0.113390s
17 : Statistics :: Grounding time = 0.067909s, Solving time = 0.082805s, Total time = 0.150713s

[18-02-2021_12-53-27] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.987524s, Solving time = 0.310075s, Total time = 1.339957s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-53-27] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,configure(manipulator_arm_2,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),17)

[18-02-2021_12-53-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-27] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-53-27] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-53-27] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-53-27] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-53-27] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Instantiated.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Program building started.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Program building completed.

[18-02-2021_12-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding base program parts.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.016383s.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving base program parts.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.002635s.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental solving started.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.183899s.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.009150s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.062707s.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.005296s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.068787s.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.006741s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.066711s.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.009592s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.068704s.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.011669s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.071752s.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.012657s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.074611s.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.013815s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.080345s.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.014589s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.079679s.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.017467s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.079677s.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.021062s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.086758s.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.026179s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.080204s.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.028944s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.080593s.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.032866s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental solving completed in 1.353738s because STOP_CON_REACHED.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.100811s, Solving time = 0.212664s, Total time = 1.353738s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.183899s, Solving time = 0.009150s, Total time = 0.193050s
2 : Statistics :: Grounding time = 0.062707s, Solving time = 0.005296s, Total time = 0.068003s
3 : Statistics :: Grounding time = 0.068787s, Solving time = 0.006741s, Total time = 0.075528s
4 : Statistics :: Grounding time = 0.066711s, Solving time = 0.009592s, Total time = 0.076303s
5 : Statistics :: Grounding time = 0.068704s, Solving time = 0.011669s, Total time = 0.080373s
6 : Statistics :: Grounding time = 0.071752s, Solving time = 0.012657s, Total time = 0.084410s
7 : Statistics :: Grounding time = 0.074611s, Solving time = 0.013815s, Total time = 0.088426s
8 : Statistics :: Grounding time = 0.080345s, Solving time = 0.014589s, Total time = 0.094934s
9 : Statistics :: Grounding time = 0.079679s, Solving time = 0.017467s, Total time = 0.097146s
10 : Statistics :: Grounding time = 0.079677s, Solving time = 0.021062s, Total time = 0.100740s
11 : Statistics :: Grounding time = 0.086758s, Solving time = 0.026179s, Total time = 0.112937s
12 : Statistics :: Grounding time = 0.080204s, Solving time = 0.028944s, Total time = 0.109148s
13 : Statistics :: Grounding time = 0.080593s, Solving time = 0.032866s, Total time = 0.113460s

[18-02-2021_12-53-29] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.100811s, Solving time = 0.212664s, Total time = 1.353738s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-29] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),10)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)

[18-02-2021_12-53-29] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.420490s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.339957s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.353738s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-53-29] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-53-29] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-53-29] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-29] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-53-29] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-29] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-29] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-53-29] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Instantiated.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Program building started.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Program building completed.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding base program parts.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.019924s.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving base program parts.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.003547s.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental solving started.

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.262466s.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.019670s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.067606s.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.005680s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.069154s.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.007936s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.070885s.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.008636s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.071055s.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.011429s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.077076s.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.013471s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.075509s.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.014922s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.079715s.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.015300s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.078977s.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.016530s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.082736s.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.017853s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.086701s.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.023946s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.088136s.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.024321s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.085956s.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.030243s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.089181s.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.050802s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental solving completed in 1.615431s because STOP_CON_REACHED.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.305078s, Solving time = 0.264286s, Total time = 1.615431s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.262466s, Solving time = 0.019670s, Total time = 0.282136s
2 : Statistics :: Grounding time = 0.067606s, Solving time = 0.005680s, Total time = 0.073287s
3 : Statistics :: Grounding time = 0.069154s, Solving time = 0.007936s, Total time = 0.077089s
4 : Statistics :: Grounding time = 0.070885s, Solving time = 0.008636s, Total time = 0.079522s
5 : Statistics :: Grounding time = 0.071055s, Solving time = 0.011429s, Total time = 0.082484s
6 : Statistics :: Grounding time = 0.077076s, Solving time = 0.013471s, Total time = 0.090547s
7 : Statistics :: Grounding time = 0.075509s, Solving time = 0.014922s, Total time = 0.090430s
8 : Statistics :: Grounding time = 0.079715s, Solving time = 0.015300s, Total time = 0.095015s
9 : Statistics :: Grounding time = 0.078977s, Solving time = 0.016530s, Total time = 0.095507s
10 : Statistics :: Grounding time = 0.082736s, Solving time = 0.017853s, Total time = 0.100589s
11 : Statistics :: Grounding time = 0.086701s, Solving time = 0.023946s, Total time = 0.110647s
12 : Statistics :: Grounding time = 0.088136s, Solving time = 0.024321s, Total time = 0.112457s
13 : Statistics :: Grounding time = 0.085956s, Solving time = 0.030243s, Total time = 0.116199s
14 : Statistics :: Grounding time = 0.089181s, Solving time = 0.050802s, Total time = 0.139983s

[18-02-2021_12-53-31] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.305078s, Solving time = 0.264286s, Total time = 1.615431s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-53-31] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),10)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),27)

[18-02-2021_12-53-31] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.615431s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-53-31] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-53-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-53-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-31] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-53-31] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-31] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-31] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-53-31] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Instantiated.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Program building started.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Program building completed.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding base program parts.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.019046s.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving base program parts.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.002265s.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental solving started.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.117222s.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.014803s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.052083s.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.005244s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.051959s.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.007998s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.054752s.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.009811s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.063185s.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.012504s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.058767s.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.010908s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.058802s.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.011568s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.061446s.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.012356s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.066192s.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Model found:
Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.015207s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental solving completed in 0.724611s because STOP_CON_REACHED.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.603453s, Solving time = 0.102663s, Total time = 0.724611s
Final Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.117222s, Solving time = 0.014803s, Total time = 0.132025s
2 : Statistics :: Grounding time = 0.052083s, Solving time = 0.005244s, Total time = 0.057326s
3 : Statistics :: Grounding time = 0.051959s, Solving time = 0.007998s, Total time = 0.059956s
4 : Statistics :: Grounding time = 0.054752s, Solving time = 0.009811s, Total time = 0.064563s
5 : Statistics :: Grounding time = 0.063185s, Solving time = 0.012504s, Total time = 0.075688s
6 : Statistics :: Grounding time = 0.058767s, Solving time = 0.010908s, Total time = 0.069675s
7 : Statistics :: Grounding time = 0.058802s, Solving time = 0.011568s, Total time = 0.070370s
8 : Statistics :: Grounding time = 0.061446s, Solving time = 0.012356s, Total time = 0.073802s
9 : Statistics :: Grounding time = 0.066192s, Solving time = 0.015207s, Total time = 0.081399s

[18-02-2021_12-53-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.603453s, Solving time = 0.102663s, Total time = 0.724611s
Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-53-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,configure(manipulator_arm_2,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_2,(block,5)),18)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),19)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[18-02-2021_12-53-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-32] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-53-32] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-32] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-53-32] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-53-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Instantiated.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Program building started.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Program building completed.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding base program parts.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.025717s.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving base program parts.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.003541s.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental solving started.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.343538s.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.036805s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.071511s.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.007994s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.072420s.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.010062s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.075728s.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.015277s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.078227s.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.017440s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental solving completed in 0.772874s because STOP_CON_REACHED.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.667141s, Solving time = 0.091118s, Total time = 0.772874s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.343538s, Solving time = 0.036805s, Total time = 0.380343s
2 : Statistics :: Grounding time = 0.071511s, Solving time = 0.007994s, Total time = 0.079504s
3 : Statistics :: Grounding time = 0.072420s, Solving time = 0.010062s, Total time = 0.082482s
4 : Statistics :: Grounding time = 0.075728s, Solving time = 0.015277s, Total time = 0.091004s
5 : Statistics :: Grounding time = 0.078227s, Solving time = 0.017440s, Total time = 0.095667s

[18-02-2021_12-53-33] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.667141s, Solving time = 0.091118s, Total time = 0.772874s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-33] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),10)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_2,(block,5)),28)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),30)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)

[18-02-2021_12-53-33] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.724611s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.772874s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-53-33] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-53-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-53-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-33] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-53-33] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-53-33] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-53-33] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-53-33] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Instantiated.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Program building started.

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Program building completed.

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding base program parts.

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.025926s.

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving base program parts.

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.003604s.

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental solving started.

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.379861s.

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.042214s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.075910s.

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.008343s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.075072s.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.011353s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.080842s.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.015055s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.079892s.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.015235s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.086125s.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.017247s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.085741s.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.021886s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.089128s.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.020803s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.089440s.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.022530s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.090175s.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.026244s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.101427s.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.025524s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 32
End step max = None

[18-02-2021_12-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 32]), ('conformance_module', [44])].

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.096462s.

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.034322s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 32
End step max = None

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 32]), ('conformance_module', [45])].

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.095574s.

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.049087s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 32
End step max = None

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 32]), ('conformance_module', [46])].

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.097240s.

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.072111s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 32
End step max = None

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 32]), ('conformance_module', [47])].

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.103484s.

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.119018s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 32
End step max = None

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 32]), ('conformance_module', [48])].

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.100691s.

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.158815s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 32
End step max = None

[18-02-2021_12-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 32]), ('conformance_module', [49])].

[18-02-2021_12-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.111105s.

[18-02-2021_12-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.229491s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 32
End step max = None

[18-02-2021_12-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 32]), ('conformance_module', [50])].

[18-02-2021_12-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.103363s.

[18-02-2021_12-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.377387s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 32
End step max = None

[18-02-2021_12-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 32]), ('conformance_module', [51])].

[18-02-2021_12-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.104861s.

[18-02-2021_12-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.482402s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 32
End step max = None

[18-02-2021_12-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 32]), ('conformance_module', [52])].

[18-02-2021_12-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.114140s.

[18-02-2021_12-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.831674s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 32
End step max = None

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 32]), ('conformance_module', [53])].

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.116233s.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Model found:
Model :: Total atoms = 11766, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.292649s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental solving completed in 5.308811s because STOP_CON_REACHED.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.302692s, Solving time = 2.876994s, Total time = 5.308811s
Final Model :: Total atoms = 11766, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.379861s, Solving time = 0.042214s, Total time = 0.422075s
2 : Statistics :: Grounding time = 0.075910s, Solving time = 0.008343s, Total time = 0.084253s
3 : Statistics :: Grounding time = 0.075072s, Solving time = 0.011353s, Total time = 0.086425s
4 : Statistics :: Grounding time = 0.080842s, Solving time = 0.015055s, Total time = 0.095897s
5 : Statistics :: Grounding time = 0.079892s, Solving time = 0.015235s, Total time = 0.095127s
6 : Statistics :: Grounding time = 0.086125s, Solving time = 0.017247s, Total time = 0.103372s
7 : Statistics :: Grounding time = 0.085741s, Solving time = 0.021886s, Total time = 0.107627s
8 : Statistics :: Grounding time = 0.089128s, Solving time = 0.020803s, Total time = 0.109931s
9 : Statistics :: Grounding time = 0.089440s, Solving time = 0.022530s, Total time = 0.111969s
10 : Statistics :: Grounding time = 0.090175s, Solving time = 0.026244s, Total time = 0.116419s
11 : Statistics :: Grounding time = 0.101427s, Solving time = 0.025524s, Total time = 0.126951s
12 : Statistics :: Grounding time = 0.096462s, Solving time = 0.034322s, Total time = 0.130784s
13 : Statistics :: Grounding time = 0.095574s, Solving time = 0.049087s, Total time = 0.144662s
14 : Statistics :: Grounding time = 0.097240s, Solving time = 0.072111s, Total time = 0.169351s
15 : Statistics :: Grounding time = 0.103484s, Solving time = 0.119018s, Total time = 0.222502s
16 : Statistics :: Grounding time = 0.100691s, Solving time = 0.158815s, Total time = 0.259506s
17 : Statistics :: Grounding time = 0.111105s, Solving time = 0.229491s, Total time = 0.340595s
18 : Statistics :: Grounding time = 0.103363s, Solving time = 0.377387s, Total time = 0.480749s
19 : Statistics :: Grounding time = 0.104861s, Solving time = 0.482402s, Total time = 0.587264s
20 : Statistics :: Grounding time = 0.114140s, Solving time = 0.831674s, Total time = 0.945814s
21 : Statistics :: Grounding time = 0.116233s, Solving time = 0.292649s, Total time = 0.408882s

[18-02-2021_12-53-39] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.302692s, Solving time = 2.876994s, Total time = 5.308811s
Model :: Total atoms = 11766, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),10)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_2,(block,5)),28)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),30)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),33)
occurs(1,talos,lift(manipulator_end_2,(block,4)),34)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),35)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,1)),36)
occurs(1,talos,release(manipulator_end_2,(block,4)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),38)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),39)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),40)
occurs(1,talos,release(manipulator_end_2,(block,6)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),43)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),44)
occurs(1,talos,release(manipulator_end_1,(block,5)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),46)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),47)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),48)
occurs(1,talos,release(manipulator_end_1,(block,2)),49)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),50)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),51)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),52)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),53)

[18-02-2021_12-53-39] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     5.308811s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[18-02-2021_12-53-39] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-53-39] INFO :: Experiment >> 

      ================================================      
            Experimental run 3 : Time 14.879801s            
      ================================================      

[18-02-2021_12-53-39] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-53-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-53-39] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-53-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-53-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-39] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Instantiated.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Program building started.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Program building completed.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding base program parts.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.014041s.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving base program parts.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.002752s.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental solving started.

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.041203s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.005589s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.030981s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.003608s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.030971s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.004675s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.034033s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.005398s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.034904s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.005190s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.036623s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.006858s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.037448s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.007315s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.036982s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.008443s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.041962s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.009817s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.040847s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.009113s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.039387s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.012881s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.041742s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.029796s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.041197s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.026698s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.041649s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.043199s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.041465s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.063686s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.076275s.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.107120s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-53-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.080673s.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.191335s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.082305s.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.081983s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental solving completed in 1.495446s because STOP_CON_REACHED.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.824687s, Solving time = 0.625458s, Total time = 1.495446s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.041203s, Solving time = 0.005589s, Total time = 0.046792s
2 : Statistics :: Grounding time = 0.030981s, Solving time = 0.003608s, Total time = 0.034589s
3 : Statistics :: Grounding time = 0.030971s, Solving time = 0.004675s, Total time = 0.035647s
4 : Statistics :: Grounding time = 0.034033s, Solving time = 0.005398s, Total time = 0.039431s
5 : Statistics :: Grounding time = 0.034904s, Solving time = 0.005190s, Total time = 0.040094s
6 : Statistics :: Grounding time = 0.036623s, Solving time = 0.006858s, Total time = 0.043480s
7 : Statistics :: Grounding time = 0.037448s, Solving time = 0.007315s, Total time = 0.044763s
8 : Statistics :: Grounding time = 0.036982s, Solving time = 0.008443s, Total time = 0.045425s
9 : Statistics :: Grounding time = 0.041962s, Solving time = 0.009817s, Total time = 0.051779s
10 : Statistics :: Grounding time = 0.040847s, Solving time = 0.009113s, Total time = 0.049960s
11 : Statistics :: Grounding time = 0.039387s, Solving time = 0.012881s, Total time = 0.052268s
12 : Statistics :: Grounding time = 0.041742s, Solving time = 0.029796s, Total time = 0.071538s
13 : Statistics :: Grounding time = 0.041197s, Solving time = 0.026698s, Total time = 0.067895s
14 : Statistics :: Grounding time = 0.041649s, Solving time = 0.043199s, Total time = 0.084847s
15 : Statistics :: Grounding time = 0.041465s, Solving time = 0.063686s, Total time = 0.105151s
16 : Statistics :: Grounding time = 0.076275s, Solving time = 0.107120s, Total time = 0.183395s
17 : Statistics :: Grounding time = 0.080673s, Solving time = 0.191335s, Total time = 0.272008s
18 : Statistics :: Grounding time = 0.082305s, Solving time = 0.081983s, Total time = 0.164288s

[18-02-2021_12-53-41] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.824687s, Solving time = 0.625458s, Total time = 1.495446s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-53-41] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[18-02-2021_12-53-41] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-41] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-53-41] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-53-41] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-41] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-53-41] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Instantiated.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Program building started.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Program building completed.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding base program parts.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.015519s.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving base program parts.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.002682s.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental solving started.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.061782s.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.005794s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.043877s.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.004300s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.045397s.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.004918s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.044757s.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.006673s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.049201s.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.008024s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.053085s.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.008986s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.052940s.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.009425s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.062876s.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.010317s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.056840s.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.010560s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.055937s.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.010722s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.059245s.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.014233s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.059249s.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.018436s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.062329s.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.019542s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.061232s.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.019817s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.063597s.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.035043s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.064599s.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.044297s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.066458s.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.084689s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental solving completed in 1.339182s because STOP_CON_REACHED.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.978920s, Solving time = 0.318458s, Total time = 1.339182s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061782s, Solving time = 0.005794s, Total time = 0.067576s
2 : Statistics :: Grounding time = 0.043877s, Solving time = 0.004300s, Total time = 0.048177s
3 : Statistics :: Grounding time = 0.045397s, Solving time = 0.004918s, Total time = 0.050315s
4 : Statistics :: Grounding time = 0.044757s, Solving time = 0.006673s, Total time = 0.051430s
5 : Statistics :: Grounding time = 0.049201s, Solving time = 0.008024s, Total time = 0.057224s
6 : Statistics :: Grounding time = 0.053085s, Solving time = 0.008986s, Total time = 0.062071s
7 : Statistics :: Grounding time = 0.052940s, Solving time = 0.009425s, Total time = 0.062365s
8 : Statistics :: Grounding time = 0.062876s, Solving time = 0.010317s, Total time = 0.073193s
9 : Statistics :: Grounding time = 0.056840s, Solving time = 0.010560s, Total time = 0.067400s
10 : Statistics :: Grounding time = 0.055937s, Solving time = 0.010722s, Total time = 0.066659s
11 : Statistics :: Grounding time = 0.059245s, Solving time = 0.014233s, Total time = 0.073478s
12 : Statistics :: Grounding time = 0.059249s, Solving time = 0.018436s, Total time = 0.077686s
13 : Statistics :: Grounding time = 0.062329s, Solving time = 0.019542s, Total time = 0.081871s
14 : Statistics :: Grounding time = 0.061232s, Solving time = 0.019817s, Total time = 0.081049s
15 : Statistics :: Grounding time = 0.063597s, Solving time = 0.035043s, Total time = 0.098640s
16 : Statistics :: Grounding time = 0.064599s, Solving time = 0.044297s, Total time = 0.108895s
17 : Statistics :: Grounding time = 0.066458s, Solving time = 0.084689s, Total time = 0.151147s

[18-02-2021_12-53-42] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.978920s, Solving time = 0.318458s, Total time = 1.339182s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-42] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,retracted),5)
occurs(2,talos,configure(manipulator_arm_1,extended),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)

[18-02-2021_12-53-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-42] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-53-42] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-53-42] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-53-42] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-53-42] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Instantiated.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Program building started.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Program building completed.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding base program parts.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.016456s.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving base program parts.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.002659s.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental solving started.

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.198605s.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.008872s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.062590s.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.005930s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.062413s.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.007166s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.066397s.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.010316s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.068725s.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.012245s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.071832s.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.013125s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.074340s.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.013640s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.076532s.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.014961s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.076843s.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.016824s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.077874s.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.021169s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.079883s.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.031725s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.081206s.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.024361s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.080155s.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.025398s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental solving completed in 1.341290s because STOP_CON_REACHED.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.093849s, Solving time = 0.208391s, Total time = 1.341290s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.198605s, Solving time = 0.008872s, Total time = 0.207477s
2 : Statistics :: Grounding time = 0.062590s, Solving time = 0.005930s, Total time = 0.068520s
3 : Statistics :: Grounding time = 0.062413s, Solving time = 0.007166s, Total time = 0.069579s
4 : Statistics :: Grounding time = 0.066397s, Solving time = 0.010316s, Total time = 0.076713s
5 : Statistics :: Grounding time = 0.068725s, Solving time = 0.012245s, Total time = 0.080970s
6 : Statistics :: Grounding time = 0.071832s, Solving time = 0.013125s, Total time = 0.084957s
7 : Statistics :: Grounding time = 0.074340s, Solving time = 0.013640s, Total time = 0.087980s
8 : Statistics :: Grounding time = 0.076532s, Solving time = 0.014961s, Total time = 0.091493s
9 : Statistics :: Grounding time = 0.076843s, Solving time = 0.016824s, Total time = 0.093667s
10 : Statistics :: Grounding time = 0.077874s, Solving time = 0.021169s, Total time = 0.099042s
11 : Statistics :: Grounding time = 0.079883s, Solving time = 0.031725s, Total time = 0.111608s
12 : Statistics :: Grounding time = 0.081206s, Solving time = 0.024361s, Total time = 0.105567s
13 : Statistics :: Grounding time = 0.080155s, Solving time = 0.025398s, Total time = 0.105553s

[18-02-2021_12-53-44] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.093849s, Solving time = 0.208391s, Total time = 1.341290s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-44] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)

[18-02-2021_12-53-44] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.495446s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.339182s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.341290s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-53-44] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-53-44] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-53-44] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-44] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-53-44] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-44] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-44] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-53-44] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Instantiated.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Program building started.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Program building completed.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding base program parts.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.022488s.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving base program parts.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.003839s.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental solving started.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.254150s.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.018636s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.068275s.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.006632s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.075328s.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.008123s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.071695s.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.009251s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.072583s.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.012068s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.073129s.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.013048s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.074072s.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.014000s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.079940s.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.016378s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.080487s.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.017057s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.081938s.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.017895s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.085712s.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.022933s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.085385s.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.023741s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.089300s.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.030788s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.092868s.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.059142s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental solving completed in 1.628873s because STOP_CON_REACHED.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.307351s, Solving time = 0.273532s, Total time = 1.628873s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.254150s, Solving time = 0.018636s, Total time = 0.272786s
2 : Statistics :: Grounding time = 0.068275s, Solving time = 0.006632s, Total time = 0.074906s
3 : Statistics :: Grounding time = 0.075328s, Solving time = 0.008123s, Total time = 0.083451s
4 : Statistics :: Grounding time = 0.071695s, Solving time = 0.009251s, Total time = 0.080946s
5 : Statistics :: Grounding time = 0.072583s, Solving time = 0.012068s, Total time = 0.084651s
6 : Statistics :: Grounding time = 0.073129s, Solving time = 0.013048s, Total time = 0.086177s
7 : Statistics :: Grounding time = 0.074072s, Solving time = 0.014000s, Total time = 0.088073s
8 : Statistics :: Grounding time = 0.079940s, Solving time = 0.016378s, Total time = 0.096318s
9 : Statistics :: Grounding time = 0.080487s, Solving time = 0.017057s, Total time = 0.097544s
10 : Statistics :: Grounding time = 0.081938s, Solving time = 0.017895s, Total time = 0.099833s
11 : Statistics :: Grounding time = 0.085712s, Solving time = 0.022933s, Total time = 0.108645s
12 : Statistics :: Grounding time = 0.085385s, Solving time = 0.023741s, Total time = 0.109126s
13 : Statistics :: Grounding time = 0.089300s, Solving time = 0.030788s, Total time = 0.120088s
14 : Statistics :: Grounding time = 0.092868s, Solving time = 0.059142s, Total time = 0.152011s

[18-02-2021_12-53-46] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.307351s, Solving time = 0.273532s, Total time = 1.628873s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-53-46] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)

[18-02-2021_12-53-46] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.628873s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-53-46] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-53-46] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-53-46] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-46] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-53-46] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-46] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-46] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-53-46] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Instantiated.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Program building started.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Program building completed.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding base program parts.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.019216s.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving base program parts.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.003132s.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental solving started.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.110887s.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.014456s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.050104s.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.006134s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.050959s.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.008002s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.055463s.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.009559s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.056990s.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.009928s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.063729s.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.010651s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.060432s.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.010987s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.063418s.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.011571s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.062872s.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Model found:
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.014750s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental solving completed in 0.712753s because STOP_CON_REACHED.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.594069s, Solving time = 0.099169s, Total time = 0.712753s
Final Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.110887s, Solving time = 0.014456s, Total time = 0.125343s
2 : Statistics :: Grounding time = 0.050104s, Solving time = 0.006134s, Total time = 0.056238s
3 : Statistics :: Grounding time = 0.050959s, Solving time = 0.008002s, Total time = 0.058961s
4 : Statistics :: Grounding time = 0.055463s, Solving time = 0.009559s, Total time = 0.065022s
5 : Statistics :: Grounding time = 0.056990s, Solving time = 0.009928s, Total time = 0.066918s
6 : Statistics :: Grounding time = 0.063729s, Solving time = 0.010651s, Total time = 0.074380s
7 : Statistics :: Grounding time = 0.060432s, Solving time = 0.010987s, Total time = 0.071419s
8 : Statistics :: Grounding time = 0.063418s, Solving time = 0.011571s, Total time = 0.074989s
9 : Statistics :: Grounding time = 0.062872s, Solving time = 0.014750s, Total time = 0.077622s

[18-02-2021_12-53-47] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.594069s, Solving time = 0.099169s, Total time = 0.712753s
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-47] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,retracted),5)
occurs(2,talos,configure(manipulator_arm_1,extended),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),18)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[18-02-2021_12-53-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-47] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-53-47] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-47] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-53-47] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-53-47] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Instantiated.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Program building started.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Program building completed.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding base program parts.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.025237s.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving base program parts.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.003513s.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental solving started.

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.358561s.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.035643s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.071847s.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.007652s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.072008s.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.011004s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.077216s.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.013224s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.078088s.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.017163s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental solving completed in 0.784924s because STOP_CON_REACHED.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.682956s, Solving time = 0.088198s, Total time = 0.784924s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.358561s, Solving time = 0.035643s, Total time = 0.394203s
2 : Statistics :: Grounding time = 0.071847s, Solving time = 0.007652s, Total time = 0.079499s
3 : Statistics :: Grounding time = 0.072008s, Solving time = 0.011004s, Total time = 0.083012s
4 : Statistics :: Grounding time = 0.077216s, Solving time = 0.013224s, Total time = 0.090440s
5 : Statistics :: Grounding time = 0.078088s, Solving time = 0.017163s, Total time = 0.095251s

[18-02-2021_12-53-48] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.682956s, Solving time = 0.088198s, Total time = 0.784924s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-53-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)

[18-02-2021_12-53-48] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.712753s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.784924s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-53-48] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-53-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-53-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-48] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-53-48] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-53-48] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-53-48] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-53-48] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Instantiated.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Program building started.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Program building completed.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding base program parts.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.026114s.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving base program parts.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.003726s.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental solving started.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.373312s.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.041863s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.073300s.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.008173s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.074810s.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.011712s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.080252s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.016083s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.085903s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.016226s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.085926s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.017150s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.092683s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Model found:
Model :: Total atoms = 9195, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.027379s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental solving completed in 1.059356s because STOP_CON_REACHED.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.892300s, Solving time = 0.142313s, Total time = 1.059356s
Final Model :: Total atoms = 9195, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.373312s, Solving time = 0.041863s, Total time = 0.415175s
2 : Statistics :: Grounding time = 0.073300s, Solving time = 0.008173s, Total time = 0.081473s
3 : Statistics :: Grounding time = 0.074810s, Solving time = 0.011712s, Total time = 0.086522s
4 : Statistics :: Grounding time = 0.080252s, Solving time = 0.016083s, Total time = 0.096335s
5 : Statistics :: Grounding time = 0.085903s, Solving time = 0.016226s, Total time = 0.102129s
6 : Statistics :: Grounding time = 0.085926s, Solving time = 0.017150s, Total time = 0.103077s
7 : Statistics :: Grounding time = 0.092683s, Solving time = 0.027379s, Total time = 0.120062s

[18-02-2021_12-53-50] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.892300s, Solving time = 0.142313s, Total time = 1.059356s
Model :: Total atoms = 9195, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-50] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[18-02-2021_12-53-50] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.059356s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[18-02-2021_12-53-50] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-53-50] INFO :: Experiment >> 

      ================================================      
            Experimental run 4 : Time 10.573787s            
      ================================================      

[18-02-2021_12-53-50] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-53-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-53-50] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-53-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-53-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-50] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Instantiated.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Program building started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Program building completed.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding base program parts.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.013855s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving base program parts.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.001602s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.039305s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.004901s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.032182s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.002616s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.031481s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.003776s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.034778s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.004780s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.034885s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.005649s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.036444s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.006315s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.037070s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.007148s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.036684s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.008738s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.038698s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.010901s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.039847s.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.010612s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.040002s.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.011799s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.041159s.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.016445s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.043360s.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.026194s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.044747s.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.043721s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.041518s.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.083758s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.076702s.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.133055s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.081153s.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.186227s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.084243s.

[18-02-2021_12-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.051733s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental solving completed in 1.491959s because STOP_CON_REACHED.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.828112s, Solving time = 0.619970s, Total time = 1.491959s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039305s, Solving time = 0.004901s, Total time = 0.044206s
2 : Statistics :: Grounding time = 0.032182s, Solving time = 0.002616s, Total time = 0.034797s
3 : Statistics :: Grounding time = 0.031481s, Solving time = 0.003776s, Total time = 0.035257s
4 : Statistics :: Grounding time = 0.034778s, Solving time = 0.004780s, Total time = 0.039558s
5 : Statistics :: Grounding time = 0.034885s, Solving time = 0.005649s, Total time = 0.040534s
6 : Statistics :: Grounding time = 0.036444s, Solving time = 0.006315s, Total time = 0.042758s
7 : Statistics :: Grounding time = 0.037070s, Solving time = 0.007148s, Total time = 0.044218s
8 : Statistics :: Grounding time = 0.036684s, Solving time = 0.008738s, Total time = 0.045422s
9 : Statistics :: Grounding time = 0.038698s, Solving time = 0.010901s, Total time = 0.049599s
10 : Statistics :: Grounding time = 0.039847s, Solving time = 0.010612s, Total time = 0.050459s
11 : Statistics :: Grounding time = 0.040002s, Solving time = 0.011799s, Total time = 0.051801s
12 : Statistics :: Grounding time = 0.041159s, Solving time = 0.016445s, Total time = 0.057604s
13 : Statistics :: Grounding time = 0.043360s, Solving time = 0.026194s, Total time = 0.069554s
14 : Statistics :: Grounding time = 0.044747s, Solving time = 0.043721s, Total time = 0.088468s
15 : Statistics :: Grounding time = 0.041518s, Solving time = 0.083758s, Total time = 0.125276s
16 : Statistics :: Grounding time = 0.076702s, Solving time = 0.133055s, Total time = 0.209757s
17 : Statistics :: Grounding time = 0.081153s, Solving time = 0.186227s, Total time = 0.267380s
18 : Statistics :: Grounding time = 0.084243s, Solving time = 0.051733s, Total time = 0.135976s

[18-02-2021_12-53-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.828112s, Solving time = 0.619970s, Total time = 1.491959s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[18-02-2021_12-53-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-52] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-53-52] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-53-52] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-52] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-53-52] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Instantiated.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Program building started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Program building completed.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding base program parts.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.014118s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving base program parts.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.002370s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.071550s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.005475s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.044422s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.003540s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.045955s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.004450s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.049448s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.006602s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.061039s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.008519s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.051884s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.009904s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.059928s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.010816s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.057528s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.009668s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.056675s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.010816s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.056628s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.011547s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.058374s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.013548s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.058927s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.017096s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.060569s.

[18-02-2021_12-53-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.024871s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.061097s.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.021006s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.066088s.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.027157s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.063397s.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.035944s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.065338s.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.038348s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental solving completed in 1.307191s because STOP_CON_REACHED.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.002966s, Solving time = 0.261677s, Total time = 1.307191s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.071550s, Solving time = 0.005475s, Total time = 0.077025s
2 : Statistics :: Grounding time = 0.044422s, Solving time = 0.003540s, Total time = 0.047962s
3 : Statistics :: Grounding time = 0.045955s, Solving time = 0.004450s, Total time = 0.050405s
4 : Statistics :: Grounding time = 0.049448s, Solving time = 0.006602s, Total time = 0.056050s
5 : Statistics :: Grounding time = 0.061039s, Solving time = 0.008519s, Total time = 0.069558s
6 : Statistics :: Grounding time = 0.051884s, Solving time = 0.009904s, Total time = 0.061788s
7 : Statistics :: Grounding time = 0.059928s, Solving time = 0.010816s, Total time = 0.070744s
8 : Statistics :: Grounding time = 0.057528s, Solving time = 0.009668s, Total time = 0.067196s
9 : Statistics :: Grounding time = 0.056675s, Solving time = 0.010816s, Total time = 0.067491s
10 : Statistics :: Grounding time = 0.056628s, Solving time = 0.011547s, Total time = 0.068175s
11 : Statistics :: Grounding time = 0.058374s, Solving time = 0.013548s, Total time = 0.071922s
12 : Statistics :: Grounding time = 0.058927s, Solving time = 0.017096s, Total time = 0.076023s
13 : Statistics :: Grounding time = 0.060569s, Solving time = 0.024871s, Total time = 0.085440s
14 : Statistics :: Grounding time = 0.061097s, Solving time = 0.021006s, Total time = 0.082103s
15 : Statistics :: Grounding time = 0.066088s, Solving time = 0.027157s, Total time = 0.093245s
16 : Statistics :: Grounding time = 0.063397s, Solving time = 0.035944s, Total time = 0.099341s
17 : Statistics :: Grounding time = 0.065338s, Solving time = 0.038348s, Total time = 0.103686s

[18-02-2021_12-53-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.002966s, Solving time = 0.261677s, Total time = 1.307191s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-53-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)

[18-02-2021_12-53-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-53] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-53-53] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-53-53] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-53-53] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-53-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Instantiated.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Program building started.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Program building completed.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding base program parts.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.015988s.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving base program parts.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.002971s.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental solving started.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.184387s.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.008047s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.068391s.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.005700s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.069439s.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.006737s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.065899s.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.010088s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-53-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.068046s.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.011413s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.071837s.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.012907s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.078672s.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.014791s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.076317s.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.015124s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.076258s.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.016905s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.077728s.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.019918s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.080319s.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.025717s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.086206s.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.022912s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.089074s.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Model found:
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.023827s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental solving completed in 1.344497s because STOP_CON_REACHED.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.108560s, Solving time = 0.197055s, Total time = 1.344497s
Final Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.184387s, Solving time = 0.008047s, Total time = 0.192434s
2 : Statistics :: Grounding time = 0.068391s, Solving time = 0.005700s, Total time = 0.074091s
3 : Statistics :: Grounding time = 0.069439s, Solving time = 0.006737s, Total time = 0.076175s
4 : Statistics :: Grounding time = 0.065899s, Solving time = 0.010088s, Total time = 0.075987s
5 : Statistics :: Grounding time = 0.068046s, Solving time = 0.011413s, Total time = 0.079459s
6 : Statistics :: Grounding time = 0.071837s, Solving time = 0.012907s, Total time = 0.084745s
7 : Statistics :: Grounding time = 0.078672s, Solving time = 0.014791s, Total time = 0.093463s
8 : Statistics :: Grounding time = 0.076317s, Solving time = 0.015124s, Total time = 0.091441s
9 : Statistics :: Grounding time = 0.076258s, Solving time = 0.016905s, Total time = 0.093162s
10 : Statistics :: Grounding time = 0.077728s, Solving time = 0.019918s, Total time = 0.097647s
11 : Statistics :: Grounding time = 0.080319s, Solving time = 0.025717s, Total time = 0.106035s
12 : Statistics :: Grounding time = 0.086206s, Solving time = 0.022912s, Total time = 0.109117s
13 : Statistics :: Grounding time = 0.089074s, Solving time = 0.023827s, Total time = 0.112901s

[18-02-2021_12-53-54] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.108560s, Solving time = 0.197055s, Total time = 1.344497s
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-54] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)

[18-02-2021_12-53-54] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.491959s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.307191s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.344497s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-53-54] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-53-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-53-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-54] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-53-54] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-54] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-54] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-53-54] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Instantiated.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Program building started.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Program building completed.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding base program parts.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.020442s.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving base program parts.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.003617s.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental solving started.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.256548s.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.019983s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.067303s.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.006472s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.068249s.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.008044s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.070773s.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.008618s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.070503s.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.011173s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.073428s.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.013712s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.074691s.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.014409s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.079833s.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.015112s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.084000s.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.016886s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.080966s.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.017882s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.084393s.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.022109s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.087435s.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.025737s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.105543s.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.036665s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.088765s.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.053390s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental solving completed in 1.633538s because STOP_CON_REACHED.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.312873s, Solving time = 0.273807s, Total time = 1.633538s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.256548s, Solving time = 0.019983s, Total time = 0.276531s
2 : Statistics :: Grounding time = 0.067303s, Solving time = 0.006472s, Total time = 0.073775s
3 : Statistics :: Grounding time = 0.068249s, Solving time = 0.008044s, Total time = 0.076293s
4 : Statistics :: Grounding time = 0.070773s, Solving time = 0.008618s, Total time = 0.079391s
5 : Statistics :: Grounding time = 0.070503s, Solving time = 0.011173s, Total time = 0.081676s
6 : Statistics :: Grounding time = 0.073428s, Solving time = 0.013712s, Total time = 0.087140s
7 : Statistics :: Grounding time = 0.074691s, Solving time = 0.014409s, Total time = 0.089100s
8 : Statistics :: Grounding time = 0.079833s, Solving time = 0.015112s, Total time = 0.094945s
9 : Statistics :: Grounding time = 0.084000s, Solving time = 0.016886s, Total time = 0.100886s
10 : Statistics :: Grounding time = 0.080966s, Solving time = 0.017882s, Total time = 0.098848s
11 : Statistics :: Grounding time = 0.084393s, Solving time = 0.022109s, Total time = 0.106502s
12 : Statistics :: Grounding time = 0.087435s, Solving time = 0.025737s, Total time = 0.113172s
13 : Statistics :: Grounding time = 0.105543s, Solving time = 0.036665s, Total time = 0.142208s
14 : Statistics :: Grounding time = 0.088765s, Solving time = 0.053390s, Total time = 0.142155s

[18-02-2021_12-53-56] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.312873s, Solving time = 0.273807s, Total time = 1.633538s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-53-56] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)

[18-02-2021_12-53-56] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.633538s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-53-56] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-53-56] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-53-56] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-56] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-53-56] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-56] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-53-56] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-53-56] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Instantiated.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Program building started.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Program building completed.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding base program parts.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.019242s.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving base program parts.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.002651s.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental solving started.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.125883s.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.014812s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.069244s.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.005824s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.051656s.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.008258s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.054804s.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.009172s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.055462s.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.009541s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.058722s.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.010386s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.059318s.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.010859s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.061702s.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.011674s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.060738s.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Model found:
Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.015130s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental solving completed in 0.733677s because STOP_CON_REACHED.

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.616772s, Solving time = 0.098307s, Total time = 0.733677s
Final Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.125883s, Solving time = 0.014812s, Total time = 0.140696s
2 : Statistics :: Grounding time = 0.069244s, Solving time = 0.005824s, Total time = 0.075068s
3 : Statistics :: Grounding time = 0.051656s, Solving time = 0.008258s, Total time = 0.059914s
4 : Statistics :: Grounding time = 0.054804s, Solving time = 0.009172s, Total time = 0.063977s
5 : Statistics :: Grounding time = 0.055462s, Solving time = 0.009541s, Total time = 0.065003s
6 : Statistics :: Grounding time = 0.058722s, Solving time = 0.010386s, Total time = 0.069109s
7 : Statistics :: Grounding time = 0.059318s, Solving time = 0.010859s, Total time = 0.070177s
8 : Statistics :: Grounding time = 0.061702s, Solving time = 0.011674s, Total time = 0.073376s
9 : Statistics :: Grounding time = 0.060738s, Solving time = 0.015130s, Total time = 0.075868s

[18-02-2021_12-53-57] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.616772s, Solving time = 0.098307s, Total time = 0.733677s
Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-58] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_1,(block,5)),18)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),19)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[18-02-2021_12-53-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-58] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-53-58] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-53-58] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-53-58] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-53-58] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Instantiated.

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Program building started.

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Program building completed.

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding base program parts.

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.024270s.

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving base program parts.

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.003800s.

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental solving started.

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.346744s.

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.036707s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.071468s.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.008095s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.072554s.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.010337s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.075978s.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.013657s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.081861s.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.017940s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental solving completed in 0.777346s because STOP_CON_REACHED.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.672875s, Solving time = 0.090536s, Total time = 0.777346s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.346744s, Solving time = 0.036707s, Total time = 0.383452s
2 : Statistics :: Grounding time = 0.071468s, Solving time = 0.008095s, Total time = 0.079562s
3 : Statistics :: Grounding time = 0.072554s, Solving time = 0.010337s, Total time = 0.082891s
4 : Statistics :: Grounding time = 0.075978s, Solving time = 0.013657s, Total time = 0.089635s
5 : Statistics :: Grounding time = 0.081861s, Solving time = 0.017940s, Total time = 0.099801s

[18-02-2021_12-53-59] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.672875s, Solving time = 0.090536s, Total time = 0.777346s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-53-59] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)

[18-02-2021_12-53-59] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.733677s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.777346s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-53-59] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-53-59] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-53-59] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-53-59] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-53-59] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-53-59] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-53-59] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-53-59] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Instantiated.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Program building started.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Program building completed.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding base program parts.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.025962s.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving base program parts.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.003723s.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental solving started.

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.381135s.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.042461s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.073783s.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.008260s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.073420s.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.012008s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.079651s.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.014755s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.082082s.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.015073s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.084098s.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.016392s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.086809s.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.019830s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.088602s.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.021787s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.089340s.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.024593s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.095331s.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.029409s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.090603s.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.030190s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 32
End step max = None

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 32]), ('conformance_module', [44])].

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.098675s.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.030717s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 32
End step max = None

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 32]), ('conformance_module', [45])].

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.095450s.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.040960s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 32
End step max = None

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 32]), ('conformance_module', [46])].

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.098455s.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.050861s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 32
End step max = None

[18-02-2021_12-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 32]), ('conformance_module', [47])].

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.107520s.

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.080762s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 32
End step max = None

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 32]), ('conformance_module', [48])].

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.100022s.

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.148319s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 32
End step max = None

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 32]), ('conformance_module', [49])].

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.105623s.

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.253061s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 32
End step max = None

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 32]), ('conformance_module', [50])].

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.104332s.

[18-02-2021_12-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.413309s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 32
End step max = None

[18-02-2021_12-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 32]), ('conformance_module', [51])].

[18-02-2021_12-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.111090s.

[18-02-2021_12-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.645598s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 32
End step max = None

[18-02-2021_12-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 32]), ('conformance_module', [52])].

[18-02-2021_12-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.108986s.

[18-02-2021_12-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 1.240799s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 32
End step max = None

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 32]), ('conformance_module', [53])].

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.109338s.

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Model found:
Model :: Total atoms = 11762, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.318226s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental solving completed in 5.879274s because STOP_CON_REACHED.

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.290306s, Solving time = 3.461092s, Total time = 5.879274s
Final Model :: Total atoms = 11762, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.381135s, Solving time = 0.042461s, Total time = 0.423596s
2 : Statistics :: Grounding time = 0.073783s, Solving time = 0.008260s, Total time = 0.082042s
3 : Statistics :: Grounding time = 0.073420s, Solving time = 0.012008s, Total time = 0.085428s
4 : Statistics :: Grounding time = 0.079651s, Solving time = 0.014755s, Total time = 0.094405s
5 : Statistics :: Grounding time = 0.082082s, Solving time = 0.015073s, Total time = 0.097155s
6 : Statistics :: Grounding time = 0.084098s, Solving time = 0.016392s, Total time = 0.100491s
7 : Statistics :: Grounding time = 0.086809s, Solving time = 0.019830s, Total time = 0.106639s
8 : Statistics :: Grounding time = 0.088602s, Solving time = 0.021787s, Total time = 0.110389s
9 : Statistics :: Grounding time = 0.089340s, Solving time = 0.024593s, Total time = 0.113934s
10 : Statistics :: Grounding time = 0.095331s, Solving time = 0.029409s, Total time = 0.124740s
11 : Statistics :: Grounding time = 0.090603s, Solving time = 0.030190s, Total time = 0.120793s
12 : Statistics :: Grounding time = 0.098675s, Solving time = 0.030717s, Total time = 0.129392s
13 : Statistics :: Grounding time = 0.095450s, Solving time = 0.040960s, Total time = 0.136411s
14 : Statistics :: Grounding time = 0.098455s, Solving time = 0.050861s, Total time = 0.149316s
15 : Statistics :: Grounding time = 0.107520s, Solving time = 0.080762s, Total time = 0.188282s
16 : Statistics :: Grounding time = 0.100022s, Solving time = 0.148319s, Total time = 0.248340s
17 : Statistics :: Grounding time = 0.105623s, Solving time = 0.253061s, Total time = 0.358684s
18 : Statistics :: Grounding time = 0.104332s, Solving time = 0.413309s, Total time = 0.517641s
19 : Statistics :: Grounding time = 0.111090s, Solving time = 0.645598s, Total time = 0.756688s
20 : Statistics :: Grounding time = 0.108986s, Solving time = 1.240799s, Total time = 1.349785s
21 : Statistics :: Grounding time = 0.109338s, Solving time = 0.318226s, Total time = 0.427564s

[18-02-2021_12-54-05] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.290306s, Solving time = 3.461092s, Total time = 5.879274s
Model :: Total atoms = 11762, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-05] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,put(manipulator_end_1,(block,4),puzzle_room_table_left),33)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),34)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),35)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),36)
occurs(1,talos,release(manipulator_end_2,(block,2)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),38)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),39)
occurs(1,talos,release(manipulator_end_1,(block,4)),40)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,2)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),43)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),44)
occurs(1,talos,release(manipulator_end_1,(block,6)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),46)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),47)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),48)
occurs(1,talos,release(manipulator_end_2,(block,5)),49)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),50)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[18-02-2021_12-54-05] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     5.879274s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[18-02-2021_12-54-05] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-54-05] INFO :: Experiment >> 

      ================================================      
            Experimental run 5 : Time 15.481217s            
      ================================================      

[18-02-2021_12-54-05] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-54-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-54-05] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-54-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-54-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-05] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Instantiated.

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Program building started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Program building completed.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding base program parts.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.013866s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving base program parts.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.002743s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.038850s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.005586s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.030946s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.003400s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.030664s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.004608s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.034102s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.005401s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.034626s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.005421s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.036452s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.006180s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.038266s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.006366s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.037286s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.007045s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.040807s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.009470s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.040166s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.011055s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.039217s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.014785s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.041222s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.025168s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.040172s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.028686s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.041625s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.044764s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.043143s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.069799s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.076093s.

[18-02-2021_12-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.107175s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.080334s.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.158388s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.084076s.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Model found:
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.094084s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental solving completed in 1.474810s because STOP_CON_REACHED.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.821912s, Solving time = 0.610123s, Total time = 1.474810s
Final Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.038850s, Solving time = 0.005586s, Total time = 0.044436s
2 : Statistics :: Grounding time = 0.030946s, Solving time = 0.003400s, Total time = 0.034347s
3 : Statistics :: Grounding time = 0.030664s, Solving time = 0.004608s, Total time = 0.035272s
4 : Statistics :: Grounding time = 0.034102s, Solving time = 0.005401s, Total time = 0.039503s
5 : Statistics :: Grounding time = 0.034626s, Solving time = 0.005421s, Total time = 0.040048s
6 : Statistics :: Grounding time = 0.036452s, Solving time = 0.006180s, Total time = 0.042632s
7 : Statistics :: Grounding time = 0.038266s, Solving time = 0.006366s, Total time = 0.044631s
8 : Statistics :: Grounding time = 0.037286s, Solving time = 0.007045s, Total time = 0.044331s
9 : Statistics :: Grounding time = 0.040807s, Solving time = 0.009470s, Total time = 0.050276s
10 : Statistics :: Grounding time = 0.040166s, Solving time = 0.011055s, Total time = 0.051221s
11 : Statistics :: Grounding time = 0.039217s, Solving time = 0.014785s, Total time = 0.054002s
12 : Statistics :: Grounding time = 0.041222s, Solving time = 0.025168s, Total time = 0.066390s
13 : Statistics :: Grounding time = 0.040172s, Solving time = 0.028686s, Total time = 0.068858s
14 : Statistics :: Grounding time = 0.041625s, Solving time = 0.044764s, Total time = 0.086389s
15 : Statistics :: Grounding time = 0.043143s, Solving time = 0.069799s, Total time = 0.112941s
16 : Statistics :: Grounding time = 0.076093s, Solving time = 0.107175s, Total time = 0.183268s
17 : Statistics :: Grounding time = 0.080334s, Solving time = 0.158388s, Total time = 0.238722s
18 : Statistics :: Grounding time = 0.084076s, Solving time = 0.094084s, Total time = 0.178160s

[18-02-2021_12-54-07] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.821912s, Solving time = 0.610123s, Total time = 1.474810s
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),11)
occurs(3,talos,release(manipulator_arm_2,(block,3)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[18-02-2021_12-54-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-07] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-54-07] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-54-07] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-54-07] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-54-07] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Instantiated.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Program building started.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Program building completed.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding base program parts.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.014621s.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving base program parts.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.002143s.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental solving started.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.062488s.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.005149s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.043228s.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.003740s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.049094s.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.004912s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.045356s.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.006412s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.049185s.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.008300s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.049717s.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.008481s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.053493s.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.009920s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.053394s.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.009935s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.055606s.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.010323s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.055948s.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.011207s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.058279s.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.013792s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.057971s.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.016845s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.061688s.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.022308s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.066756s.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.024802s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.062513s.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.031571s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.062455s.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.047549s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.066546s.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.027956s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental solving completed in 1.276638s because STOP_CON_REACHED.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.968339s, Solving time = 0.265343s, Total time = 1.276638s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.062488s, Solving time = 0.005149s, Total time = 0.067636s
2 : Statistics :: Grounding time = 0.043228s, Solving time = 0.003740s, Total time = 0.046968s
3 : Statistics :: Grounding time = 0.049094s, Solving time = 0.004912s, Total time = 0.054007s
4 : Statistics :: Grounding time = 0.045356s, Solving time = 0.006412s, Total time = 0.051768s
5 : Statistics :: Grounding time = 0.049185s, Solving time = 0.008300s, Total time = 0.057485s
6 : Statistics :: Grounding time = 0.049717s, Solving time = 0.008481s, Total time = 0.058198s
7 : Statistics :: Grounding time = 0.053493s, Solving time = 0.009920s, Total time = 0.063413s
8 : Statistics :: Grounding time = 0.053394s, Solving time = 0.009935s, Total time = 0.063329s
9 : Statistics :: Grounding time = 0.055606s, Solving time = 0.010323s, Total time = 0.065929s
10 : Statistics :: Grounding time = 0.055948s, Solving time = 0.011207s, Total time = 0.067155s
11 : Statistics :: Grounding time = 0.058279s, Solving time = 0.013792s, Total time = 0.072071s
12 : Statistics :: Grounding time = 0.057971s, Solving time = 0.016845s, Total time = 0.074815s
13 : Statistics :: Grounding time = 0.061688s, Solving time = 0.022308s, Total time = 0.083996s
14 : Statistics :: Grounding time = 0.066756s, Solving time = 0.024802s, Total time = 0.091558s
15 : Statistics :: Grounding time = 0.062513s, Solving time = 0.031571s, Total time = 0.094084s
16 : Statistics :: Grounding time = 0.062455s, Solving time = 0.047549s, Total time = 0.110003s
17 : Statistics :: Grounding time = 0.066546s, Solving time = 0.027956s, Total time = 0.094502s

[18-02-2021_12-54-08] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.968339s, Solving time = 0.265343s, Total time = 1.276638s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-08] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_2,retracted),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),12)
occurs(2,talos,release(manipulator_arm_2,(block,6)),13)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),14)
occurs(2,talos,configure(manipulator_arm_1,extended),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)

[18-02-2021_12-54-08] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-08] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-54-08] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-54-08] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-54-08] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-54-08] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Instantiated.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Program building started.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Program building completed.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding base program parts.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.016104s.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving base program parts.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.002888s.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental solving started.

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.184452s.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.009132s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.062801s.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.005791s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.064048s.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.007335s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.067307s.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.010177s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.069432s.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.012320s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.074593s.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.013335s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.074484s.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.013913s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.076493s.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.014323s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.079646s.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.016862s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.078652s.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.020585s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.080562s.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.025463s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.080587s.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.032890s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.081254s.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Model found:
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.023233s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental solving completed in 1.340282s because STOP_CON_REACHED.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.090416s, Solving time = 0.208247s, Total time = 1.340282s
Final Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.184452s, Solving time = 0.009132s, Total time = 0.193584s
2 : Statistics :: Grounding time = 0.062801s, Solving time = 0.005791s, Total time = 0.068592s
3 : Statistics :: Grounding time = 0.064048s, Solving time = 0.007335s, Total time = 0.071383s
4 : Statistics :: Grounding time = 0.067307s, Solving time = 0.010177s, Total time = 0.077483s
5 : Statistics :: Grounding time = 0.069432s, Solving time = 0.012320s, Total time = 0.081753s
6 : Statistics :: Grounding time = 0.074593s, Solving time = 0.013335s, Total time = 0.087928s
7 : Statistics :: Grounding time = 0.074484s, Solving time = 0.013913s, Total time = 0.088396s
8 : Statistics :: Grounding time = 0.076493s, Solving time = 0.014323s, Total time = 0.090817s
9 : Statistics :: Grounding time = 0.079646s, Solving time = 0.016862s, Total time = 0.096508s
10 : Statistics :: Grounding time = 0.078652s, Solving time = 0.020585s, Total time = 0.099237s
11 : Statistics :: Grounding time = 0.080562s, Solving time = 0.025463s, Total time = 0.106025s
12 : Statistics :: Grounding time = 0.080587s, Solving time = 0.032890s, Total time = 0.113477s
13 : Statistics :: Grounding time = 0.081254s, Solving time = 0.023233s, Total time = 0.104486s

[18-02-2021_12-54-10] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.090416s, Solving time = 0.208247s, Total time = 1.340282s
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-54-10] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)

[18-02-2021_12-54-10] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.474810s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.276638s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.340282s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-54-10] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-54-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-54-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-10] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-54-10] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-54-10] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-54-10] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-54-10] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Instantiated.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Program building started.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Program building completed.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding base program parts.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.020441s.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving base program parts.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.003397s.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental solving started.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.255663s.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.020389s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.070851s.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.005880s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.069323s.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.008443s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.071310s.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.008764s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.071850s.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.011739s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.074871s.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.013276s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.075138s.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.014513s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.080206s.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.018099s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.081731s.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.016034s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.081942s.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.017965s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.084615s.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.022391s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.085959s.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.026232s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.092100s.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.028548s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.092052s.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.041830s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental solving completed in 1.612083s because STOP_CON_REACHED.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.308053s, Solving time = 0.257501s, Total time = 1.612083s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.255663s, Solving time = 0.020389s, Total time = 0.276052s
2 : Statistics :: Grounding time = 0.070851s, Solving time = 0.005880s, Total time = 0.076731s
3 : Statistics :: Grounding time = 0.069323s, Solving time = 0.008443s, Total time = 0.077766s
4 : Statistics :: Grounding time = 0.071310s, Solving time = 0.008764s, Total time = 0.080075s
5 : Statistics :: Grounding time = 0.071850s, Solving time = 0.011739s, Total time = 0.083590s
6 : Statistics :: Grounding time = 0.074871s, Solving time = 0.013276s, Total time = 0.088147s
7 : Statistics :: Grounding time = 0.075138s, Solving time = 0.014513s, Total time = 0.089651s
8 : Statistics :: Grounding time = 0.080206s, Solving time = 0.018099s, Total time = 0.098304s
9 : Statistics :: Grounding time = 0.081731s, Solving time = 0.016034s, Total time = 0.097765s
10 : Statistics :: Grounding time = 0.081942s, Solving time = 0.017965s, Total time = 0.099907s
11 : Statistics :: Grounding time = 0.084615s, Solving time = 0.022391s, Total time = 0.107007s
12 : Statistics :: Grounding time = 0.085959s, Solving time = 0.026232s, Total time = 0.112191s
13 : Statistics :: Grounding time = 0.092100s, Solving time = 0.028548s, Total time = 0.120648s
14 : Statistics :: Grounding time = 0.092052s, Solving time = 0.041830s, Total time = 0.133882s

[18-02-2021_12-54-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.308053s, Solving time = 0.257501s, Total time = 1.612083s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-54-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)

[18-02-2021_12-54-12] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.612083s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-54-12] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-54-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-54-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-12] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-54-12] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-54-12] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-54-12] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-54-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Instantiated.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Program building started.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Program building completed.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding base program parts.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.019055s.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving base program parts.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.003014s.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental solving started.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.109036s.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.015183s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.050832s.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.005107s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.052889s.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.007429s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.055706s.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.009454s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.056035s.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.009578s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.059987s.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.010934s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.061386s.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.010886s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.060963s.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.011915s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.062014s.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Model found:
Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.015143s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental solving completed in 0.706580s because STOP_CON_REACHED.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.587903s, Solving time = 0.098642s, Total time = 0.706580s
Final Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.109036s, Solving time = 0.015183s, Total time = 0.124219s
2 : Statistics :: Grounding time = 0.050832s, Solving time = 0.005107s, Total time = 0.055939s
3 : Statistics :: Grounding time = 0.052889s, Solving time = 0.007429s, Total time = 0.060318s
4 : Statistics :: Grounding time = 0.055706s, Solving time = 0.009454s, Total time = 0.065160s
5 : Statistics :: Grounding time = 0.056035s, Solving time = 0.009578s, Total time = 0.065613s
6 : Statistics :: Grounding time = 0.059987s, Solving time = 0.010934s, Total time = 0.070921s
7 : Statistics :: Grounding time = 0.061386s, Solving time = 0.010886s, Total time = 0.072272s
8 : Statistics :: Grounding time = 0.060963s, Solving time = 0.011915s, Total time = 0.072878s
9 : Statistics :: Grounding time = 0.062014s, Solving time = 0.015143s, Total time = 0.077157s

[18-02-2021_12-54-13] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.587903s, Solving time = 0.098642s, Total time = 0.706580s
Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-13] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_2,retracted),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),12)
occurs(2,talos,release(manipulator_arm_2,(block,6)),13)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),14)
occurs(2,talos,configure(manipulator_arm_1,extended),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_1,(block,5)),18)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),19)
occurs(2,talos,release(manipulator_arm_2,(block,3)),20)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[18-02-2021_12-54-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-13] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-54-13] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-54-13] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-54-13] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-54-13] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Instantiated.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Program building started.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Program building completed.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding base program parts.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.024838s.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving base program parts.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.003470s.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental solving started.

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.342379s.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.037225s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.072029s.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.007605s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.073629s.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.010495s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.076903s.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.013908s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.082630s.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Model found:
Model :: Total atoms = 7844, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.017853s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental solving completed in 0.776919s because STOP_CON_REACHED.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.672408s, Solving time = 0.090555s, Total time = 0.776919s
Final Model :: Total atoms = 7844, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.342379s, Solving time = 0.037225s, Total time = 0.379604s
2 : Statistics :: Grounding time = 0.072029s, Solving time = 0.007605s, Total time = 0.079634s
3 : Statistics :: Grounding time = 0.073629s, Solving time = 0.010495s, Total time = 0.084124s
4 : Statistics :: Grounding time = 0.076903s, Solving time = 0.013908s, Total time = 0.090811s
5 : Statistics :: Grounding time = 0.082630s, Solving time = 0.017853s, Total time = 0.100482s

[18-02-2021_12-54-14] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.672408s, Solving time = 0.090555s, Total time = 0.776919s
Model :: Total atoms = 7844, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-54-14] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,release(manipulator_end_2,(block,3)),31)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),32)

[18-02-2021_12-54-14] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.706580s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.776919s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-54-14] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-54-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-54-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-14] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-54-14] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-54-14] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-54-14] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-54-14] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Instantiated.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Program building started.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Program building completed.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding base program parts.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.025618s.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving base program parts.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.003748s.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental solving started.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.381606s.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.042362s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.078866s.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.008219s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.073092s.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.011907s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.080966s.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.015325s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.080188s.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.015807s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.084305s.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.016815s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.085783s.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.021777s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.089967s.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.023114s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.095176s.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.027666s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.091768s.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.035882s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.093316s.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Model found:
Model :: Total atoms = 9940, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.041921s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental solving completed in 1.569451s because STOP_CON_REACHED.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.260650s, Solving time = 0.264542s, Total time = 1.569451s
Final Model :: Total atoms = 9940, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.381606s, Solving time = 0.042362s, Total time = 0.423968s
2 : Statistics :: Grounding time = 0.078866s, Solving time = 0.008219s, Total time = 0.087085s
3 : Statistics :: Grounding time = 0.073092s, Solving time = 0.011907s, Total time = 0.084998s
4 : Statistics :: Grounding time = 0.080966s, Solving time = 0.015325s, Total time = 0.096291s
5 : Statistics :: Grounding time = 0.080188s, Solving time = 0.015807s, Total time = 0.095995s
6 : Statistics :: Grounding time = 0.084305s, Solving time = 0.016815s, Total time = 0.101120s
7 : Statistics :: Grounding time = 0.085783s, Solving time = 0.021777s, Total time = 0.107560s
8 : Statistics :: Grounding time = 0.089967s, Solving time = 0.023114s, Total time = 0.113081s
9 : Statistics :: Grounding time = 0.095176s, Solving time = 0.027666s, Total time = 0.122842s
10 : Statistics :: Grounding time = 0.091768s, Solving time = 0.035882s, Total time = 0.127651s
11 : Statistics :: Grounding time = 0.093316s, Solving time = 0.041921s, Total time = 0.135237s

[18-02-2021_12-54-16] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.260650s, Solving time = 0.264542s, Total time = 1.569451s
Model :: Total atoms = 9940, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-16] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,release(manipulator_end_2,(block,3)),31)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),34)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),35)
occurs(1,talos,release(manipulator_end_2,(block,3)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),38)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),39)
occurs(1,talos,release(manipulator_end_2,(block,2)),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),41)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),42)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),43)

[18-02-2021_12-54-16] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.569451s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[18-02-2021_12-54-16] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-54-16] INFO :: Experiment >> 

      ================================================      
            Experimental run 6 : Time 11.003944s            
      ================================================      

[18-02-2021_12-54-16] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-54-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-54-16] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-54-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-54-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-16] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Instantiated.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Program building started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Program building completed.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding base program parts.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.014178s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving base program parts.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.002332s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.039745s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.005819s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.030992s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.003382s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.030871s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.004507s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.034186s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.005400s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.034663s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.005925s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.036859s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.006327s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.037858s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.007300s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.037949s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.009127s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.039106s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.008566s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.041311s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.010038s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.040309s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.013103s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.041375s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.018661s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.041150s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.026409s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.045376s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.044043s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.042010s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.074355s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.078172s.

[18-02-2021_12-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.124013s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.080935s.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.187880s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.084310s.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Model found:
Model :: Total atoms = 3523, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.155218s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental solving completed in 1.589011s because STOP_CON_REACHED.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.831355s, Solving time = 0.712404s, Total time = 1.589011s
Final Model :: Total atoms = 3523, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039745s, Solving time = 0.005819s, Total time = 0.045564s
2 : Statistics :: Grounding time = 0.030992s, Solving time = 0.003382s, Total time = 0.034374s
3 : Statistics :: Grounding time = 0.030871s, Solving time = 0.004507s, Total time = 0.035378s
4 : Statistics :: Grounding time = 0.034186s, Solving time = 0.005400s, Total time = 0.039586s
5 : Statistics :: Grounding time = 0.034663s, Solving time = 0.005925s, Total time = 0.040588s
6 : Statistics :: Grounding time = 0.036859s, Solving time = 0.006327s, Total time = 0.043185s
7 : Statistics :: Grounding time = 0.037858s, Solving time = 0.007300s, Total time = 0.045159s
8 : Statistics :: Grounding time = 0.037949s, Solving time = 0.009127s, Total time = 0.047076s
9 : Statistics :: Grounding time = 0.039106s, Solving time = 0.008566s, Total time = 0.047671s
10 : Statistics :: Grounding time = 0.041311s, Solving time = 0.010038s, Total time = 0.051349s
11 : Statistics :: Grounding time = 0.040309s, Solving time = 0.013103s, Total time = 0.053412s
12 : Statistics :: Grounding time = 0.041375s, Solving time = 0.018661s, Total time = 0.060037s
13 : Statistics :: Grounding time = 0.041150s, Solving time = 0.026409s, Total time = 0.067559s
14 : Statistics :: Grounding time = 0.045376s, Solving time = 0.044043s, Total time = 0.089419s
15 : Statistics :: Grounding time = 0.042010s, Solving time = 0.074355s, Total time = 0.116366s
16 : Statistics :: Grounding time = 0.078172s, Solving time = 0.124013s, Total time = 0.202184s
17 : Statistics :: Grounding time = 0.080935s, Solving time = 0.187880s, Total time = 0.268814s
18 : Statistics :: Grounding time = 0.084310s, Solving time = 0.155218s, Total time = 0.239528s

[18-02-2021_12-54-18] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.831355s, Solving time = 0.712404s, Total time = 1.589011s
Model :: Total atoms = 3523, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-18] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_1,(block,3)),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),11)
occurs(3,talos,release(manipulator_arm_2,(block,5)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[18-02-2021_12-54-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-18] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-54-18] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-54-18] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-54-18] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-54-18] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Instantiated.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Program building started.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Program building completed.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding base program parts.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.014392s.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving base program parts.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.002879s.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental solving started.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.061374s.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.005067s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.043291s.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.003349s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.045057s.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.004227s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.045448s.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.006152s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.048720s.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.007522s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.049637s.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.008535s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.055115s.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.009119s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.053652s.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.009499s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.056272s.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.011302s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.055864s.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.010838s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.060016s.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.013742s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.059308s.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.017227s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.060862s.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.018007s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.061151s.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.021289s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.067280s.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.024356s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.069877s.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.030595s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.070963s.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.061312s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental solving completed in 1.285045s because STOP_CON_REACHED.

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.978280s, Solving time = 0.265016s, Total time = 1.285045s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-54-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061374s, Solving time = 0.005067s, Total time = 0.066441s
2 : Statistics :: Grounding time = 0.043291s, Solving time = 0.003349s, Total time = 0.046640s
3 : Statistics :: Grounding time = 0.045057s, Solving time = 0.004227s, Total time = 0.049283s
4 : Statistics :: Grounding time = 0.045448s, Solving time = 0.006152s, Total time = 0.051600s
5 : Statistics :: Grounding time = 0.048720s, Solving time = 0.007522s, Total time = 0.056242s
6 : Statistics :: Grounding time = 0.049637s, Solving time = 0.008535s, Total time = 0.058172s
7 : Statistics :: Grounding time = 0.055115s, Solving time = 0.009119s, Total time = 0.064235s
8 : Statistics :: Grounding time = 0.053652s, Solving time = 0.009499s, Total time = 0.063151s
9 : Statistics :: Grounding time = 0.056272s, Solving time = 0.011302s, Total time = 0.067573s
10 : Statistics :: Grounding time = 0.055864s, Solving time = 0.010838s, Total time = 0.066702s
11 : Statistics :: Grounding time = 0.060016s, Solving time = 0.013742s, Total time = 0.073758s
12 : Statistics :: Grounding time = 0.059308s, Solving time = 0.017227s, Total time = 0.076534s
13 : Statistics :: Grounding time = 0.060862s, Solving time = 0.018007s, Total time = 0.078869s
14 : Statistics :: Grounding time = 0.061151s, Solving time = 0.021289s, Total time = 0.082440s
15 : Statistics :: Grounding time = 0.067280s, Solving time = 0.024356s, Total time = 0.091636s
16 : Statistics :: Grounding time = 0.069877s, Solving time = 0.030595s, Total time = 0.100472s
17 : Statistics :: Grounding time = 0.070963s, Solving time = 0.061312s, Total time = 0.132276s

[18-02-2021_12-54-19] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.978280s, Solving time = 0.265016s, Total time = 1.285045s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-54-20] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),17)

[18-02-2021_12-54-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-20] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-54-20] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-54-20] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-54-20] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-54-20] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Instantiated.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Program building started.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Program building completed.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding base program parts.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.016595s.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving base program parts.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.003002s.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental solving started.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.183810s.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.008144s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.067983s.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.005432s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.062250s.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.006919s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.066389s.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.010409s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.067704s.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.012185s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.075937s.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.013392s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.074912s.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.014417s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.078222s.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.015381s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.077623s.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.017898s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.078564s.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.021611s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.081236s.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.024858s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.086564s.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.024569s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.080859s.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Model found:
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.030049s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental solving completed in 1.347503s because STOP_CON_REACHED.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.098649s, Solving time = 0.208266s, Total time = 1.347503s
Final Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.183810s, Solving time = 0.008144s, Total time = 0.191954s
2 : Statistics :: Grounding time = 0.067983s, Solving time = 0.005432s, Total time = 0.073415s
3 : Statistics :: Grounding time = 0.062250s, Solving time = 0.006919s, Total time = 0.069169s
4 : Statistics :: Grounding time = 0.066389s, Solving time = 0.010409s, Total time = 0.076798s
5 : Statistics :: Grounding time = 0.067704s, Solving time = 0.012185s, Total time = 0.079890s
6 : Statistics :: Grounding time = 0.075937s, Solving time = 0.013392s, Total time = 0.089329s
7 : Statistics :: Grounding time = 0.074912s, Solving time = 0.014417s, Total time = 0.089329s
8 : Statistics :: Grounding time = 0.078222s, Solving time = 0.015381s, Total time = 0.093603s
9 : Statistics :: Grounding time = 0.077623s, Solving time = 0.017898s, Total time = 0.095521s
10 : Statistics :: Grounding time = 0.078564s, Solving time = 0.021611s, Total time = 0.100175s
11 : Statistics :: Grounding time = 0.081236s, Solving time = 0.024858s, Total time = 0.106094s
12 : Statistics :: Grounding time = 0.086564s, Solving time = 0.024569s, Total time = 0.111134s
13 : Statistics :: Grounding time = 0.080859s, Solving time = 0.030049s, Total time = 0.110907s

[18-02-2021_12-54-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.098649s, Solving time = 0.208266s, Total time = 1.347503s
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-54-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)

[18-02-2021_12-54-21] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.589011s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.285045s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.347503s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-54-21] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-54-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-54-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-21] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-54-21] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-54-21] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-54-21] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-54-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Instantiated.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Program building started.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Program building completed.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding base program parts.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.020584s.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving base program parts.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.003481s.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental solving started.

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.269158s.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.019537s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.067325s.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.006404s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.067514s.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.007259s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.071251s.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.008537s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.073287s.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.011587s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.072889s.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.012641s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.076321s.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.014434s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.080078s.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.015022s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.079928s.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.016503s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.083446s.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.018414s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.083422s.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.021304s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.085227s.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.024384s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.087303s.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.029783s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.088597s.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.047126s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental solving completed in 1.614576s because STOP_CON_REACHED.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.306331s, Solving time = 0.256416s, Total time = 1.614576s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.269158s, Solving time = 0.019537s, Total time = 0.288695s
2 : Statistics :: Grounding time = 0.067325s, Solving time = 0.006404s, Total time = 0.073729s
3 : Statistics :: Grounding time = 0.067514s, Solving time = 0.007259s, Total time = 0.074773s
4 : Statistics :: Grounding time = 0.071251s, Solving time = 0.008537s, Total time = 0.079788s
5 : Statistics :: Grounding time = 0.073287s, Solving time = 0.011587s, Total time = 0.084875s
6 : Statistics :: Grounding time = 0.072889s, Solving time = 0.012641s, Total time = 0.085530s
7 : Statistics :: Grounding time = 0.076321s, Solving time = 0.014434s, Total time = 0.090756s
8 : Statistics :: Grounding time = 0.080078s, Solving time = 0.015022s, Total time = 0.095100s
9 : Statistics :: Grounding time = 0.079928s, Solving time = 0.016503s, Total time = 0.096431s
10 : Statistics :: Grounding time = 0.083446s, Solving time = 0.018414s, Total time = 0.101860s
11 : Statistics :: Grounding time = 0.083422s, Solving time = 0.021304s, Total time = 0.104726s
12 : Statistics :: Grounding time = 0.085227s, Solving time = 0.024384s, Total time = 0.109611s
13 : Statistics :: Grounding time = 0.087303s, Solving time = 0.029783s, Total time = 0.117086s
14 : Statistics :: Grounding time = 0.088597s, Solving time = 0.047126s, Total time = 0.135723s

[18-02-2021_12-54-23] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.306331s, Solving time = 0.256416s, Total time = 1.614576s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-23] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),27)

[18-02-2021_12-54-23] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.614576s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-54-23] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-54-23] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-54-23] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-23] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-54-23] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-54-23] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-54-23] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-54-23] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Instantiated.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Program building started.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Program building completed.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding base program parts.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.019538s.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving base program parts.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.002958s.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental solving started.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.112941s.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.015639s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.050635s.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.005710s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.051218s.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.008306s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.054864s.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.009799s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.055795s.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.009979s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.064577s.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.011078s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.058177s.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.011128s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.063787s.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.012285s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.060814s.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Model found:
Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.014342s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental solving completed in 0.712436s because STOP_CON_REACHED.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.592345s, Solving time = 0.101225s, Total time = 0.712436s
Final Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.112941s, Solving time = 0.015639s, Total time = 0.128580s
2 : Statistics :: Grounding time = 0.050635s, Solving time = 0.005710s, Total time = 0.056345s
3 : Statistics :: Grounding time = 0.051218s, Solving time = 0.008306s, Total time = 0.059524s
4 : Statistics :: Grounding time = 0.054864s, Solving time = 0.009799s, Total time = 0.064663s
5 : Statistics :: Grounding time = 0.055795s, Solving time = 0.009979s, Total time = 0.065774s
6 : Statistics :: Grounding time = 0.064577s, Solving time = 0.011078s, Total time = 0.075655s
7 : Statistics :: Grounding time = 0.058177s, Solving time = 0.011128s, Total time = 0.069305s
8 : Statistics :: Grounding time = 0.063787s, Solving time = 0.012285s, Total time = 0.076072s
9 : Statistics :: Grounding time = 0.060814s, Solving time = 0.014342s, Total time = 0.075156s

[18-02-2021_12-54-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.592345s, Solving time = 0.101225s, Total time = 0.712436s
Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),17)
occurs(2,talos,release(manipulator_arm_1,(block,3)),18)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),19)
occurs(2,talos,release(manipulator_arm_2,(block,5)),20)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[18-02-2021_12-54-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-24] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-54-24] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-54-24] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-54-24] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-54-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Instantiated.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Program building started.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Program building completed.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding base program parts.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.023799s.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving base program parts.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.003583s.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental solving started.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.342122s.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.036934s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.075401s.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.008202s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.072073s.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.009538s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.082456s.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.014208s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.077850s.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Model found:
Model :: Total atoms = 7844, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.017424s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental solving completed in 0.776802s because STOP_CON_REACHED.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.673701s, Solving time = 0.089889s, Total time = 0.776802s
Final Model :: Total atoms = 7844, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.342122s, Solving time = 0.036934s, Total time = 0.379056s
2 : Statistics :: Grounding time = 0.075401s, Solving time = 0.008202s, Total time = 0.083603s
3 : Statistics :: Grounding time = 0.072073s, Solving time = 0.009538s, Total time = 0.081611s
4 : Statistics :: Grounding time = 0.082456s, Solving time = 0.014208s, Total time = 0.096665s
5 : Statistics :: Grounding time = 0.077850s, Solving time = 0.017424s, Total time = 0.095274s

[18-02-2021_12-54-25] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.673701s, Solving time = 0.089889s, Total time = 0.776802s
Model :: Total atoms = 7844, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),27)
occurs(1,talos,release(manipulator_end_1,(block,3)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,release(manipulator_end_2,(block,5)),31)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),32)

[18-02-2021_12-54-25] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.712436s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.776802s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-54-25] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-54-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-54-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-25] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-54-25] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-54-25] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-54-25] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-54-25] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Instantiated.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Program building started.

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Program building completed.

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding base program parts.

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.025030s.

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving base program parts.

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.003562s.

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental solving started.

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.386376s.

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.042376s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.074292s.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.008330s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.073819s.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.012045s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.080168s.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.015082s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.078336s.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.014475s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.085628s.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.017176s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.088845s.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.020734s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.092905s.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.020364s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.095014s.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.024271s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.090479s.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.026320s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.093923s.

[18-02-2021_12-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.033686s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 32
End step max = None

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 32]), ('conformance_module', [44])].

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.094603s.

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.030753s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 32
End step max = None

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 32]), ('conformance_module', [45])].

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.098060s.

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.041997s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 32
End step max = None

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 32]), ('conformance_module', [46])].

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.096597s.

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.048148s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 32
End step max = None

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 32]), ('conformance_module', [47])].

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.104223s.

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.091990s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 32
End step max = None

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 32]), ('conformance_module', [48])].

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.112217s.

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.145565s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 32
End step max = None

[18-02-2021_12-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 32]), ('conformance_module', [49])].

[18-02-2021_12-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.103503s.

[18-02-2021_12-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.269767s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 32
End step max = None

[18-02-2021_12-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 32]), ('conformance_module', [50])].

[18-02-2021_12-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.107673s.

[18-02-2021_12-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.436960s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 32
End step max = None

[18-02-2021_12-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 32]), ('conformance_module', [51])].

[18-02-2021_12-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.105370s.

[18-02-2021_12-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.749792s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 32
End step max = None

[18-02-2021_12-54-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 32]), ('conformance_module', [52])].

[18-02-2021_12-54-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.112165s.

[18-02-2021_12-54-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 1.245143s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 32
End step max = None

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 32]), ('conformance_module', [53])].

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.109467s.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Model found:
Model :: Total atoms = 11768, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.204926s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental solving completed in 5.943202s because STOP_CON_REACHED.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.308695s, Solving time = 3.503463s, Total time = 5.943202s
Final Model :: Total atoms = 11768, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.386376s, Solving time = 0.042376s, Total time = 0.428752s
2 : Statistics :: Grounding time = 0.074292s, Solving time = 0.008330s, Total time = 0.082622s
3 : Statistics :: Grounding time = 0.073819s, Solving time = 0.012045s, Total time = 0.085864s
4 : Statistics :: Grounding time = 0.080168s, Solving time = 0.015082s, Total time = 0.095250s
5 : Statistics :: Grounding time = 0.078336s, Solving time = 0.014475s, Total time = 0.092811s
6 : Statistics :: Grounding time = 0.085628s, Solving time = 0.017176s, Total time = 0.102804s
7 : Statistics :: Grounding time = 0.088845s, Solving time = 0.020734s, Total time = 0.109579s
8 : Statistics :: Grounding time = 0.092905s, Solving time = 0.020364s, Total time = 0.113269s
9 : Statistics :: Grounding time = 0.095014s, Solving time = 0.024271s, Total time = 0.119285s
10 : Statistics :: Grounding time = 0.090479s, Solving time = 0.026320s, Total time = 0.116799s
11 : Statistics :: Grounding time = 0.093923s, Solving time = 0.033686s, Total time = 0.127609s
12 : Statistics :: Grounding time = 0.094603s, Solving time = 0.030753s, Total time = 0.125357s
13 : Statistics :: Grounding time = 0.098060s, Solving time = 0.041997s, Total time = 0.140057s
14 : Statistics :: Grounding time = 0.096597s, Solving time = 0.048148s, Total time = 0.144745s
15 : Statistics :: Grounding time = 0.104223s, Solving time = 0.091990s, Total time = 0.196213s
16 : Statistics :: Grounding time = 0.112217s, Solving time = 0.145565s, Total time = 0.257783s
17 : Statistics :: Grounding time = 0.103503s, Solving time = 0.269767s, Total time = 0.373270s
18 : Statistics :: Grounding time = 0.107673s, Solving time = 0.436960s, Total time = 0.544633s
19 : Statistics :: Grounding time = 0.105370s, Solving time = 0.749792s, Total time = 0.855162s
20 : Statistics :: Grounding time = 0.112165s, Solving time = 1.245143s, Total time = 1.357308s
21 : Statistics :: Grounding time = 0.109467s, Solving time = 0.204926s, Total time = 0.314393s

[18-02-2021_12-54-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.308695s, Solving time = 3.503463s, Total time = 5.943202s
Model :: Total atoms = 11768, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),27)
occurs(1,talos,release(manipulator_end_1,(block,3)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,release(manipulator_end_2,(block,5)),31)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,lift(manipulator_end_1,(block,4)),35)
occurs(1,talos,release(manipulator_end_1,(block,4)),36)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_2,(block,2)),38)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),39)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),41)
occurs(1,talos,lift(manipulator_end_1,(block,5)),42)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),43)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),44)
occurs(1,talos,release(manipulator_end_2,(block,6)),45)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),48)
occurs(1,talos,release(manipulator_end_1,(block,5)),49)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),50)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),51)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[18-02-2021_12-54-32] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     5.943202s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[18-02-2021_12-54-32] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-54-32] INFO :: Experiment >> 

      ================================================      
            Experimental run 7 : Time 15.618519s            
      ================================================      

[18-02-2021_12-54-32] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-54-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-54-32] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-54-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-54-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Instantiated.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Program building started.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Program building completed.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding base program parts.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.013867s.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving base program parts.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.002235s.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental solving started.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.039144s.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005043s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.031242s.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.002858s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.032181s.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.004174s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.034069s.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005931s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.039168s.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005310s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.039827s.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.006576s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.038315s.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.007670s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.037642s.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.009093s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.038870s.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.010310s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.044996s.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.011728s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.039365s.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.014125s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.041129s.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.022284s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.040299s.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.030880s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.045991s.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.044754s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.041976s.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.063000s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.077113s.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.119251s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.079782s.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.216699s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.084658s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Model found:
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.083867s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental solving completed in 1.549872s because STOP_CON_REACHED.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.839636s, Solving time = 0.665787s, Total time = 1.549872s
Final Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039144s, Solving time = 0.005043s, Total time = 0.044187s
2 : Statistics :: Grounding time = 0.031242s, Solving time = 0.002858s, Total time = 0.034100s
3 : Statistics :: Grounding time = 0.032181s, Solving time = 0.004174s, Total time = 0.036355s
4 : Statistics :: Grounding time = 0.034069s, Solving time = 0.005931s, Total time = 0.040000s
5 : Statistics :: Grounding time = 0.039168s, Solving time = 0.005310s, Total time = 0.044478s
6 : Statistics :: Grounding time = 0.039827s, Solving time = 0.006576s, Total time = 0.046403s
7 : Statistics :: Grounding time = 0.038315s, Solving time = 0.007670s, Total time = 0.045985s
8 : Statistics :: Grounding time = 0.037642s, Solving time = 0.009093s, Total time = 0.046736s
9 : Statistics :: Grounding time = 0.038870s, Solving time = 0.010310s, Total time = 0.049180s
10 : Statistics :: Grounding time = 0.044996s, Solving time = 0.011728s, Total time = 0.056725s
11 : Statistics :: Grounding time = 0.039365s, Solving time = 0.014125s, Total time = 0.053489s
12 : Statistics :: Grounding time = 0.041129s, Solving time = 0.022284s, Total time = 0.063413s
13 : Statistics :: Grounding time = 0.040299s, Solving time = 0.030880s, Total time = 0.071179s
14 : Statistics :: Grounding time = 0.045991s, Solving time = 0.044754s, Total time = 0.090746s
15 : Statistics :: Grounding time = 0.041976s, Solving time = 0.063000s, Total time = 0.104975s
16 : Statistics :: Grounding time = 0.077113s, Solving time = 0.119251s, Total time = 0.196364s
17 : Statistics :: Grounding time = 0.079782s, Solving time = 0.216699s, Total time = 0.296481s
18 : Statistics :: Grounding time = 0.084658s, Solving time = 0.083867s, Total time = 0.168525s

[18-02-2021_12-54-34] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.839636s, Solving time = 0.665787s, Total time = 1.549872s
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-34] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),8)
occurs(3,talos,release(manipulator_arm_1,(block,3)),9)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),10)
occurs(3,talos,release(manipulator_arm_2,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[18-02-2021_12-54-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-34] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-54-34] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-54-34] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-54-34] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-54-34] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Instantiated.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Program building started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Program building completed.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding base program parts.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.015427s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving base program parts.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.002371s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental solving started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.061396s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.005804s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.044333s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.004349s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.045130s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.004861s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.045138s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.006124s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.049486s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.008161s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.049710s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.009066s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.051816s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.009718s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.053798s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.009925s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.083189s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.011170s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.056057s.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.010743s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.058435s.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.013628s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.058895s.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.020128s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.061092s.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.019595s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.061344s.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.019095s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.063558s.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.034180s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.064545s.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Model found:
Model :: Total atoms = 4783, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.022140s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental solving completed in 1.173114s because STOP_CON_REACHED.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.923347s, Solving time = 0.211057s, Total time = 1.173114s
Final Model :: Total atoms = 4783, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061396s, Solving time = 0.005804s, Total time = 0.067200s
2 : Statistics :: Grounding time = 0.044333s, Solving time = 0.004349s, Total time = 0.048683s
3 : Statistics :: Grounding time = 0.045130s, Solving time = 0.004861s, Total time = 0.049990s
4 : Statistics :: Grounding time = 0.045138s, Solving time = 0.006124s, Total time = 0.051261s
5 : Statistics :: Grounding time = 0.049486s, Solving time = 0.008161s, Total time = 0.057646s
6 : Statistics :: Grounding time = 0.049710s, Solving time = 0.009066s, Total time = 0.058776s
7 : Statistics :: Grounding time = 0.051816s, Solving time = 0.009718s, Total time = 0.061534s
8 : Statistics :: Grounding time = 0.053798s, Solving time = 0.009925s, Total time = 0.063723s
9 : Statistics :: Grounding time = 0.083189s, Solving time = 0.011170s, Total time = 0.094359s
10 : Statistics :: Grounding time = 0.056057s, Solving time = 0.010743s, Total time = 0.066800s
11 : Statistics :: Grounding time = 0.058435s, Solving time = 0.013628s, Total time = 0.072063s
12 : Statistics :: Grounding time = 0.058895s, Solving time = 0.020128s, Total time = 0.079023s
13 : Statistics :: Grounding time = 0.061092s, Solving time = 0.019595s, Total time = 0.080687s
14 : Statistics :: Grounding time = 0.061344s, Solving time = 0.019095s, Total time = 0.080438s
15 : Statistics :: Grounding time = 0.063558s, Solving time = 0.034180s, Total time = 0.097738s
16 : Statistics :: Grounding time = 0.064545s, Solving time = 0.022140s, Total time = 0.086685s

[18-02-2021_12-54-35] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.923347s, Solving time = 0.211057s, Total time = 1.173114s
Model :: Total atoms = 4783, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-35] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,retracted),5)
occurs(2,talos,configure(manipulator_arm_1,extended),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),12)
occurs(2,talos,release(manipulator_arm_1,(block,6)),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),14)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),15)
occurs(2,talos,release(manipulator_arm_1,(block,3)),16)

[18-02-2021_12-54-35] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-35] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-54-35] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 16

[18-02-2021_12-54-35] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-54-35] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-54-35] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Instantiated.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Program building started.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Program building completed.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding base program parts.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.015907s.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving base program parts.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.002979s.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental solving started.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.182263s.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.008410s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.066026s.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.005985s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.063969s.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.007026s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.072738s.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.010192s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.069295s.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.012217s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.071443s.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.013110s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.073138s.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.014279s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.075764s.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.014993s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.077967s.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.017331s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.078806s.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.021601s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.080942s.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.027608s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.080259s.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.025326s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.083756s.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.025391s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental solving completed in 1.339938s because STOP_CON_REACHED.

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.092271s, Solving time = 0.206448s, Total time = 1.339938s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.182263s, Solving time = 0.008410s, Total time = 0.190672s
2 : Statistics :: Grounding time = 0.066026s, Solving time = 0.005985s, Total time = 0.072011s
3 : Statistics :: Grounding time = 0.063969s, Solving time = 0.007026s, Total time = 0.070995s
4 : Statistics :: Grounding time = 0.072738s, Solving time = 0.010192s, Total time = 0.082930s
5 : Statistics :: Grounding time = 0.069295s, Solving time = 0.012217s, Total time = 0.081512s
6 : Statistics :: Grounding time = 0.071443s, Solving time = 0.013110s, Total time = 0.084553s
7 : Statistics :: Grounding time = 0.073138s, Solving time = 0.014279s, Total time = 0.087417s
8 : Statistics :: Grounding time = 0.075764s, Solving time = 0.014993s, Total time = 0.090757s
9 : Statistics :: Grounding time = 0.077967s, Solving time = 0.017331s, Total time = 0.095298s
10 : Statistics :: Grounding time = 0.078806s, Solving time = 0.021601s, Total time = 0.100407s
11 : Statistics :: Grounding time = 0.080942s, Solving time = 0.027608s, Total time = 0.108549s
12 : Statistics :: Grounding time = 0.080259s, Solving time = 0.025326s, Total time = 0.105585s
13 : Statistics :: Grounding time = 0.083756s, Solving time = 0.025391s, Total time = 0.109147s

[18-02-2021_12-54-36] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.092271s, Solving time = 0.206448s, Total time = 1.339938s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)

[18-02-2021_12-54-37] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.549872s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.173114s : Steps =    16 : Actions =    16 |  
  | Level 1 : Time =     1.339938s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-54-37] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-54-37] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-54-37] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-37] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-54-37] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 8

[18-02-2021_12-54-37] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-54-37] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 16

[18-02-2021_12-54-37] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Instantiated.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> The logic program was extended with 16 rules into program part conformance_module(step).

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Program building started.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Program building completed.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding base program parts.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.019791s.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving base program parts.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.003468s.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Incremental solving started.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.257884s.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.019950s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.086564s.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.006416s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.068518s.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.008123s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.071113s.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.008789s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.077052s.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.011599s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.074572s.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.013347s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.075012s.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.014203s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.080034s.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.015944s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.079569s.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.017738s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.082011s.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.020863s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.083895s.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.021503s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.085617s.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.028266s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Grounding completed in 0.104883s.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving started.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Model found:
Model :: Total atoms = 6936, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Solving completed in 0.024852s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Incremental solving completed in 1.504239s because STOP_CON_REACHED.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.246514s, Solving time = 0.215062s, Total time = 1.504239s
Final Model :: Total atoms = 6936, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #67 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.257884s, Solving time = 0.019950s, Total time = 0.277834s
2 : Statistics :: Grounding time = 0.086564s, Solving time = 0.006416s, Total time = 0.092980s
3 : Statistics :: Grounding time = 0.068518s, Solving time = 0.008123s, Total time = 0.076641s
4 : Statistics :: Grounding time = 0.071113s, Solving time = 0.008789s, Total time = 0.079902s
5 : Statistics :: Grounding time = 0.077052s, Solving time = 0.011599s, Total time = 0.088651s
6 : Statistics :: Grounding time = 0.074572s, Solving time = 0.013347s, Total time = 0.087919s
7 : Statistics :: Grounding time = 0.075012s, Solving time = 0.014203s, Total time = 0.089215s
8 : Statistics :: Grounding time = 0.080034s, Solving time = 0.015944s, Total time = 0.095978s
9 : Statistics :: Grounding time = 0.079569s, Solving time = 0.017738s, Total time = 0.097307s
10 : Statistics :: Grounding time = 0.082011s, Solving time = 0.020863s, Total time = 0.102874s
11 : Statistics :: Grounding time = 0.083895s, Solving time = 0.021503s, Total time = 0.105398s
12 : Statistics :: Grounding time = 0.085617s, Solving time = 0.028266s, Total time = 0.113883s
13 : Statistics :: Grounding time = 0.104883s, Solving time = 0.024852s, Total time = 0.129734s

[18-02-2021_12-54-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.246514s, Solving time = 0.215062s, Total time = 1.504239s
Model :: Total atoms = 6936, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-54-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),24)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),25)
occurs(1,talos,release(manipulator_end_1,(block,3)),26)

[18-02-2021_12-54-38] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.504239s : Steps =    26 : Actions =    26 |  
  ====================================================================  

[18-02-2021_12-54-38] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-54-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-54-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-38] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-54-38] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-54-38] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-54-38] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-54-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Instantiated.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> The logic program was extended with 16 rules into program part plan_module(step, start).

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> The logic program was extended with 2480 rules into program part state_module(step).

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=16, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 16], range_=IncRange(start=16, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 16, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Program building started.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Program building completed.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding base program parts.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.019082s.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving base program parts.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.003070s.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Incremental solving started.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 16
End step max = None

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [17]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 16]), ('conformance_module', [17])].

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.106887s.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.012880s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 16
End step max = None

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 16]), ('conformance_module', [18])].

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.049800s.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.005820s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 16
End step max = None

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 16]), ('conformance_module', [19])].

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.051584s.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.007484s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 16
End step max = None

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 16]), ('conformance_module', [20])].

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.055856s.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.009503s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 16
End step max = None

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 16]), ('conformance_module', [21])].

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.056269s.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.010559s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 16
End step max = None

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 16]), ('conformance_module', [22])].

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.078556s.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.010951s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 16
End step max = None

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 16]), ('conformance_module', [23])].

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.058878s.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.011159s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 16
End step max = None

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 16]), ('conformance_module', [24])].

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.061174s.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.012519s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 16
End step max = None

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 16]), ('conformance_module', [25])].

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.060816s.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.013856s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 16
End step max = None

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 16]), ('conformance_module', [26])].

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Grounding completed in 0.064945s.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving started.

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Model found:
Model :: Total atoms = 6428, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Solving completed in 0.015417s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Incremental solving completed in 0.799024s because STOP_CON_REACHED.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.663848s, Solving time = 0.113217s, Total time = 0.799024s
Final Model :: Total atoms = 6428, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #68 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.106887s, Solving time = 0.012880s, Total time = 0.119767s
2 : Statistics :: Grounding time = 0.049800s, Solving time = 0.005820s, Total time = 0.055620s
3 : Statistics :: Grounding time = 0.051584s, Solving time = 0.007484s, Total time = 0.059068s
4 : Statistics :: Grounding time = 0.055856s, Solving time = 0.009503s, Total time = 0.065359s
5 : Statistics :: Grounding time = 0.056269s, Solving time = 0.010559s, Total time = 0.066828s
6 : Statistics :: Grounding time = 0.078556s, Solving time = 0.010951s, Total time = 0.089506s
7 : Statistics :: Grounding time = 0.058878s, Solving time = 0.011159s, Total time = 0.070038s
8 : Statistics :: Grounding time = 0.061174s, Solving time = 0.012519s, Total time = 0.073693s
9 : Statistics :: Grounding time = 0.060816s, Solving time = 0.013856s, Total time = 0.074672s
10 : Statistics :: Grounding time = 0.064945s, Solving time = 0.015417s, Total time = 0.080362s

[18-02-2021_12-54-40] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.663848s, Solving time = 0.113217s, Total time = 0.799024s
Model :: Total atoms = 6428, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-40] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,retracted),5)
occurs(2,talos,configure(manipulator_arm_1,extended),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),12)
occurs(2,talos,release(manipulator_arm_1,(block,6)),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),14)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),15)
occurs(2,talos,release(manipulator_arm_1,(block,3)),16)
occurs(2,talos,configure(manipulator_arm_2,extended),17)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),18)
occurs(2,talos,release(manipulator_arm_2,(block,5)),19)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),20)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[18-02-2021_12-54-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-40] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 16

[18-02-2021_12-54-40] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 10

[18-02-2021_12-54-40] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-54-40] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-54-40] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Instantiated.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> The logic program was extended with 26 rules into program part plan_module(step, start).

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> The logic program was extended with 4280 rules into program part state_module(step).

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=26, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 26], range_=IncRange(start=26, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 26, Max end step = None
Step inc = 1, Step inc init = 28, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Program building started.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Program building completed.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding base program parts.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.023340s.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving base program parts.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.003603s.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Incremental solving started.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Beginning Incremental call [1]:
Current step bound = 27
End step min = 26
End step max = None

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding program parts: [('check', [27]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 26]), ('conformance_module', [27])].

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.336934s.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving started.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.035311s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Beginning Incremental call [2]:
Current step bound = 28
End step min = 26
End step max = None

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 26]), ('conformance_module', [28])].

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.073331s.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving started.

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.008100s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Beginning Incremental call [3]:
Current step bound = 29
End step min = 26
End step max = None

[18-02-2021_12-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 26]), ('conformance_module', [29])].

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.070129s.

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving started.

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.010689s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Beginning Incremental call [4]:
Current step bound = 30
End step min = 26
End step max = None

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 26]), ('conformance_module', [30])].

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.081729s.

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving started.

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.014061s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Beginning Incremental call [5]:
Current step bound = 31
End step min = 26
End step max = None

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 26]), ('conformance_module', [31])].

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.078238s.

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving started.

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.015213s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Beginning Incremental call [6]:
Current step bound = 32
End step min = 26
End step max = None

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 26]), ('conformance_module', [32])].

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Grounding completed in 0.082940s.

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving started.

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Model found:
Model :: Total atoms = 7857, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Solving completed in 0.017830s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Incremental solving completed in 0.867766s because STOP_CON_REACHED.

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.746641s, Solving time = 0.104807s, Total time = 0.867766s
Final Model :: Total atoms = 7857, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #69 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.336934s, Solving time = 0.035311s, Total time = 0.372245s
2 : Statistics :: Grounding time = 0.073331s, Solving time = 0.008100s, Total time = 0.081432s
3 : Statistics :: Grounding time = 0.070129s, Solving time = 0.010689s, Total time = 0.080818s
4 : Statistics :: Grounding time = 0.081729s, Solving time = 0.014061s, Total time = 0.095790s
5 : Statistics :: Grounding time = 0.078238s, Solving time = 0.015213s, Total time = 0.093450s
6 : Statistics :: Grounding time = 0.082940s, Solving time = 0.017830s, Total time = 0.100770s

[18-02-2021_12-54-41] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.746641s, Solving time = 0.104807s, Total time = 0.867766s
Model :: Total atoms = 7857, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-41] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),24)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),25)
occurs(1,talos,release(manipulator_end_1,(block,3)),26)
occurs(1,talos,configure(manipulator_limb_2,extended),27)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),28)
occurs(1,talos,release(manipulator_end_2,(block,5)),29)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),30)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),31)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),32)

[18-02-2021_12-54-41] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.799024s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.867766s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-54-41] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-54-41] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-54-41] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-41] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-54-41] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-54-41] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-54-41] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-54-41] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Instantiated.

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Program building started.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Program building completed.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding base program parts.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.026304s.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving base program parts.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.002451s.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Incremental solving started.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.388637s.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.041637s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.084709s.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.008345s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.073813s.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.011252s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.080497s.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.015537s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.083388s.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.015869s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.087728s.

[18-02-2021_12-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.017128s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.085978s.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.020816s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.088848s.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.022022s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.090377s.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.029156s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.093342s.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.037436s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Grounding completed in 0.091416s.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving started.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Model found:
Model :: Total atoms = 9940, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Solving completed in 0.044808s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Incremental solving completed in 1.585621s because STOP_CON_REACHED.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.275037s, Solving time = 0.266455s, Total time = 1.585621s
Final Model :: Total atoms = 9940, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #70 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.388637s, Solving time = 0.041637s, Total time = 0.430274s
2 : Statistics :: Grounding time = 0.084709s, Solving time = 0.008345s, Total time = 0.093054s
3 : Statistics :: Grounding time = 0.073813s, Solving time = 0.011252s, Total time = 0.085065s
4 : Statistics :: Grounding time = 0.080497s, Solving time = 0.015537s, Total time = 0.096034s
5 : Statistics :: Grounding time = 0.083388s, Solving time = 0.015869s, Total time = 0.099256s
6 : Statistics :: Grounding time = 0.087728s, Solving time = 0.017128s, Total time = 0.104856s
7 : Statistics :: Grounding time = 0.085978s, Solving time = 0.020816s, Total time = 0.106793s
8 : Statistics :: Grounding time = 0.088848s, Solving time = 0.022022s, Total time = 0.110870s
9 : Statistics :: Grounding time = 0.090377s, Solving time = 0.029156s, Total time = 0.119533s
10 : Statistics :: Grounding time = 0.093342s, Solving time = 0.037436s, Total time = 0.130777s
11 : Statistics :: Grounding time = 0.091416s, Solving time = 0.044808s, Total time = 0.136225s

[18-02-2021_12-54-43] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.275037s, Solving time = 0.266455s, Total time = 1.585621s
Model :: Total atoms = 9940, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),24)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),25)
occurs(1,talos,release(manipulator_end_1,(block,3)),26)
occurs(1,talos,configure(manipulator_limb_2,extended),27)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),28)
occurs(1,talos,release(manipulator_end_2,(block,5)),29)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),30)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),31)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),34)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),35)
occurs(1,talos,release(manipulator_end_1,(block,3)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),38)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),39)
occurs(1,talos,release(manipulator_end_1,(block,2)),40)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),41)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),42)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),43)

[18-02-2021_12-54-43] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.585621s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[18-02-2021_12-54-43] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-54-43] INFO :: Experiment >> 

      ================================================      
            Experimental run 8 : Time 11.172917s            
      ================================================      

[18-02-2021_12-54-43] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-54-43] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-54-43] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-54-43] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-54-43] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-43] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Instantiated.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Program building started.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Program building completed.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding base program parts.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.015120s.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving base program parts.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.002811s.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Incremental solving started.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.042738s.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.005599s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.033851s.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.003225s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.047833s.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.007035s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-54-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.037865s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.004627s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.035486s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.005021s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.036608s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.005822s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.038019s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.006293s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.038061s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.010210s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.038356s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.010536s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.039979s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.011205s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.039210s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.013773s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.041028s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.016484s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.045677s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.027137s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.046394s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.046555s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.041997s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.068170s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.076845s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.089622s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.079742s.

[18-02-2021_12-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.204758s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Grounding completed in 0.082837s.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving started.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Solving completed in 0.157191s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Incremental solving completed in 1.596707s because STOP_CON_REACHED.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.857644s, Solving time = 0.696074s, Total time = 1.596707s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #71 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.042738s, Solving time = 0.005599s, Total time = 0.048337s
2 : Statistics :: Grounding time = 0.033851s, Solving time = 0.003225s, Total time = 0.037076s
3 : Statistics :: Grounding time = 0.047833s, Solving time = 0.007035s, Total time = 0.054868s
4 : Statistics :: Grounding time = 0.037865s, Solving time = 0.004627s, Total time = 0.042492s
5 : Statistics :: Grounding time = 0.035486s, Solving time = 0.005021s, Total time = 0.040506s
6 : Statistics :: Grounding time = 0.036608s, Solving time = 0.005822s, Total time = 0.042430s
7 : Statistics :: Grounding time = 0.038019s, Solving time = 0.006293s, Total time = 0.044312s
8 : Statistics :: Grounding time = 0.038061s, Solving time = 0.010210s, Total time = 0.048271s
9 : Statistics :: Grounding time = 0.038356s, Solving time = 0.010536s, Total time = 0.048892s
10 : Statistics :: Grounding time = 0.039979s, Solving time = 0.011205s, Total time = 0.051184s
11 : Statistics :: Grounding time = 0.039210s, Solving time = 0.013773s, Total time = 0.052983s
12 : Statistics :: Grounding time = 0.041028s, Solving time = 0.016484s, Total time = 0.057512s
13 : Statistics :: Grounding time = 0.045677s, Solving time = 0.027137s, Total time = 0.072813s
14 : Statistics :: Grounding time = 0.046394s, Solving time = 0.046555s, Total time = 0.092948s
15 : Statistics :: Grounding time = 0.041997s, Solving time = 0.068170s, Total time = 0.110166s
16 : Statistics :: Grounding time = 0.076845s, Solving time = 0.089622s, Total time = 0.166467s
17 : Statistics :: Grounding time = 0.079742s, Solving time = 0.204758s, Total time = 0.284500s
18 : Statistics :: Grounding time = 0.082837s, Solving time = 0.157191s, Total time = 0.240028s

[18-02-2021_12-54-45] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.857644s, Solving time = 0.696074s, Total time = 1.596707s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-45] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),10)
occurs(3,talos,release(manipulator_arm_2,(block,3)),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[18-02-2021_12-54-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-45] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-54-45] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-54-45] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-54-45] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-54-45] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Instantiated.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Program building started.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Program building completed.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding base program parts.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.015601s.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving base program parts.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.002262s.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Incremental solving started.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.061460s.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.005600s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.043488s.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.004418s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.045460s.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.005113s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.045207s.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.007068s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.048972s.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.008082s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.050075s.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.009109s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.056214s.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.009896s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.053026s.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.010274s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.057218s.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.010381s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.054827s.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.010541s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.058184s.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.013685s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.059068s.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.017761s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.065713s.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.021312s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.061386s.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.021845s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.064353s.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.029941s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.064519s.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.035438s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Grounding completed in 0.065619s.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving started.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Solving completed in 0.059547s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Incremental solving completed in 1.295174s because STOP_CON_REACHED.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.970392s, Solving time = 0.282273s, Total time = 1.295174s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #72 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061460s, Solving time = 0.005600s, Total time = 0.067060s
2 : Statistics :: Grounding time = 0.043488s, Solving time = 0.004418s, Total time = 0.047906s
3 : Statistics :: Grounding time = 0.045460s, Solving time = 0.005113s, Total time = 0.050573s
4 : Statistics :: Grounding time = 0.045207s, Solving time = 0.007068s, Total time = 0.052275s
5 : Statistics :: Grounding time = 0.048972s, Solving time = 0.008082s, Total time = 0.057053s
6 : Statistics :: Grounding time = 0.050075s, Solving time = 0.009109s, Total time = 0.059184s
7 : Statistics :: Grounding time = 0.056214s, Solving time = 0.009896s, Total time = 0.066110s
8 : Statistics :: Grounding time = 0.053026s, Solving time = 0.010274s, Total time = 0.063300s
9 : Statistics :: Grounding time = 0.057218s, Solving time = 0.010381s, Total time = 0.067599s
10 : Statistics :: Grounding time = 0.054827s, Solving time = 0.010541s, Total time = 0.065368s
11 : Statistics :: Grounding time = 0.058184s, Solving time = 0.013685s, Total time = 0.071869s
12 : Statistics :: Grounding time = 0.059068s, Solving time = 0.017761s, Total time = 0.076830s
13 : Statistics :: Grounding time = 0.065713s, Solving time = 0.021312s, Total time = 0.087025s
14 : Statistics :: Grounding time = 0.061386s, Solving time = 0.021845s, Total time = 0.083231s
15 : Statistics :: Grounding time = 0.064353s, Solving time = 0.029941s, Total time = 0.094294s
16 : Statistics :: Grounding time = 0.064519s, Solving time = 0.035438s, Total time = 0.099957s
17 : Statistics :: Grounding time = 0.065619s, Solving time = 0.059547s, Total time = 0.125165s

[18-02-2021_12-54-46] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.970392s, Solving time = 0.282273s, Total time = 1.295174s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-46] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,configure(manipulator_arm_1,retracted),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_1,(block,5)),17)

[18-02-2021_12-54-46] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-46] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-54-46] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-54-46] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-54-46] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-54-46] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Instantiated.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Program building started.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Program building completed.

[18-02-2021_12-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding base program parts.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.016486s.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving base program parts.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.003325s.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Incremental solving started.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.183596s.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.009030s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.084764s.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.005649s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.067038s.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.006959s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.071593s.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.009820s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.075135s.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.011775s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.073103s.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.013313s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.074896s.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.013988s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.076320s.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.014895s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.075502s.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.016383s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.080873s.

[18-02-2021_12-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.021564s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.084226s.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.026269s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.084716s.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.026381s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Grounding completed in 0.081475s.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving started.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Solving completed in 0.043054s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Incremental solving completed in 1.393634s because STOP_CON_REACHED.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.129722s, Solving time = 0.222404s, Total time = 1.393634s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #73 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.183596s, Solving time = 0.009030s, Total time = 0.192626s
2 : Statistics :: Grounding time = 0.084764s, Solving time = 0.005649s, Total time = 0.090413s
3 : Statistics :: Grounding time = 0.067038s, Solving time = 0.006959s, Total time = 0.073997s
4 : Statistics :: Grounding time = 0.071593s, Solving time = 0.009820s, Total time = 0.081413s
5 : Statistics :: Grounding time = 0.075135s, Solving time = 0.011775s, Total time = 0.086910s
6 : Statistics :: Grounding time = 0.073103s, Solving time = 0.013313s, Total time = 0.086415s
7 : Statistics :: Grounding time = 0.074896s, Solving time = 0.013988s, Total time = 0.088883s
8 : Statistics :: Grounding time = 0.076320s, Solving time = 0.014895s, Total time = 0.091215s
9 : Statistics :: Grounding time = 0.075502s, Solving time = 0.016383s, Total time = 0.091884s
10 : Statistics :: Grounding time = 0.080873s, Solving time = 0.021564s, Total time = 0.102437s
11 : Statistics :: Grounding time = 0.084226s, Solving time = 0.026269s, Total time = 0.110495s
12 : Statistics :: Grounding time = 0.084716s, Solving time = 0.026381s, Total time = 0.111097s
13 : Statistics :: Grounding time = 0.081475s, Solving time = 0.043054s, Total time = 0.124529s

[18-02-2021_12-54-48] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.129722s, Solving time = 0.222404s, Total time = 1.393634s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-54-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)

[18-02-2021_12-54-48] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.596707s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.295174s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.393634s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-54-48] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-54-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-54-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-48] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-54-48] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-54-48] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-54-48] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-54-48] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Instantiated.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Program building started.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Program building completed.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding base program parts.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.019627s.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving base program parts.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.003307s.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Incremental solving started.

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.260876s.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.019843s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.074745s.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.006377s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.068370s.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.008286s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.072122s.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.009022s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.072575s.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.012107s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.073439s.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.014036s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.075012s.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.015788s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.083934s.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.015590s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.083727s.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.017228s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.081232s.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.018019s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.104923s.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.030830s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.085910s.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.023573s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.092633s.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.030877s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Grounding completed in 0.094694s.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving started.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Solving completed in 0.050550s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Incremental solving completed in 1.667327s because STOP_CON_REACHED.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.343819s, Solving time = 0.275431s, Total time = 1.667327s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #74 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.260876s, Solving time = 0.019843s, Total time = 0.280719s
2 : Statistics :: Grounding time = 0.074745s, Solving time = 0.006377s, Total time = 0.081122s
3 : Statistics :: Grounding time = 0.068370s, Solving time = 0.008286s, Total time = 0.076656s
4 : Statistics :: Grounding time = 0.072122s, Solving time = 0.009022s, Total time = 0.081144s
5 : Statistics :: Grounding time = 0.072575s, Solving time = 0.012107s, Total time = 0.084682s
6 : Statistics :: Grounding time = 0.073439s, Solving time = 0.014036s, Total time = 0.087475s
7 : Statistics :: Grounding time = 0.075012s, Solving time = 0.015788s, Total time = 0.090800s
8 : Statistics :: Grounding time = 0.083934s, Solving time = 0.015590s, Total time = 0.099523s
9 : Statistics :: Grounding time = 0.083727s, Solving time = 0.017228s, Total time = 0.100955s
10 : Statistics :: Grounding time = 0.081232s, Solving time = 0.018019s, Total time = 0.099251s
11 : Statistics :: Grounding time = 0.104923s, Solving time = 0.030830s, Total time = 0.135753s
12 : Statistics :: Grounding time = 0.085910s, Solving time = 0.023573s, Total time = 0.109483s
13 : Statistics :: Grounding time = 0.092633s, Solving time = 0.030877s, Total time = 0.123510s
14 : Statistics :: Grounding time = 0.094694s, Solving time = 0.050550s, Total time = 0.145243s

[18-02-2021_12-54-50] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.343819s, Solving time = 0.275431s, Total time = 1.667327s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-54-50] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)

[18-02-2021_12-54-50] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.667327s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-54-50] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-54-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-54-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-50] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-54-50] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-54-50] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-54-50] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-54-50] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Instantiated.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Program building started.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Program building completed.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding base program parts.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.018608s.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving base program parts.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.003095s.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Incremental solving started.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.110755s.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.014987s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.052377s.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.006147s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.052155s.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.007708s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.054686s.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.008890s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.056881s.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.009668s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.058197s.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.010495s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.059861s.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.011411s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.063018s.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.012049s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Grounding completed in 0.062205s.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving started.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Model found:
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Solving completed in 0.014479s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Incremental solving completed in 0.706529s because STOP_CON_REACHED.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.588745s, Solving time = 0.098928s, Total time = 0.706529s
Final Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #75 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.110755s, Solving time = 0.014987s, Total time = 0.125742s
2 : Statistics :: Grounding time = 0.052377s, Solving time = 0.006147s, Total time = 0.058524s
3 : Statistics :: Grounding time = 0.052155s, Solving time = 0.007708s, Total time = 0.059863s
4 : Statistics :: Grounding time = 0.054686s, Solving time = 0.008890s, Total time = 0.063576s
5 : Statistics :: Grounding time = 0.056881s, Solving time = 0.009668s, Total time = 0.066549s
6 : Statistics :: Grounding time = 0.058197s, Solving time = 0.010495s, Total time = 0.068693s
7 : Statistics :: Grounding time = 0.059861s, Solving time = 0.011411s, Total time = 0.071272s
8 : Statistics :: Grounding time = 0.063018s, Solving time = 0.012049s, Total time = 0.075067s
9 : Statistics :: Grounding time = 0.062205s, Solving time = 0.014479s, Total time = 0.076684s

[18-02-2021_12-54-51] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.588745s, Solving time = 0.098928s, Total time = 0.706529s
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-54-51] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,configure(manipulator_arm_1,retracted),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_1,(block,5)),17)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),18)
occurs(2,talos,release(manipulator_arm_2,(block,3)),19)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),20)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[18-02-2021_12-54-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-51] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-54-51] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-54-51] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-54-51] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-54-51] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Instantiated.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Program building started.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Program building completed.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding base program parts.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding completed in 0.024579s.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving base program parts.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving completed in 0.003413s.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Incremental solving started.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding completed in 0.340957s.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving started.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving completed in 0.036676s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding completed in 0.073783s.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving started.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving completed in 0.007058s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding completed in 0.072798s.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving started.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving completed in 0.010899s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding completed in 0.081003s.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving started.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving completed in 0.014420s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Grounding completed in 0.077401s.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving started.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Model found:
Model :: Total atoms = 7847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Solving completed in 0.017804s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Incremental solving completed in 0.774638s because STOP_CON_REACHED.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.670522s, Solving time = 0.090271s, Total time = 0.774638s
Final Model :: Total atoms = 7847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #76 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.340957s, Solving time = 0.036676s, Total time = 0.377634s
2 : Statistics :: Grounding time = 0.073783s, Solving time = 0.007058s, Total time = 0.080841s
3 : Statistics :: Grounding time = 0.072798s, Solving time = 0.010899s, Total time = 0.083697s
4 : Statistics :: Grounding time = 0.081003s, Solving time = 0.014420s, Total time = 0.095423s
5 : Statistics :: Grounding time = 0.077401s, Solving time = 0.017804s, Total time = 0.095205s

[18-02-2021_12-54-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.670522s, Solving time = 0.090271s, Total time = 0.774638s
Model :: Total atoms = 7847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-54-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),28)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),29)
occurs(1,talos,release(manipulator_end_2,(block,3)),30)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),31)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),32)

[18-02-2021_12-54-52] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.706529s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.774638s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-54-52] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-54-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-54-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-52] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-54-52] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-54-52] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-54-52] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-54-52] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Instantiated.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Program building started.

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Program building completed.

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding base program parts.

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.026695s.

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving base program parts.

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.003636s.

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Incremental solving started.

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.395526s.

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.041643s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.076705s.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.008392s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.074519s.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.011303s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.085509s.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.014881s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.082344s.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.015318s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.085597s.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.016921s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.086179s.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.021671s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.089241s.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.020447s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.089560s.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.022042s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.091253s.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.026699s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.092336s.

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.027995s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 32
End step max = None

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 32]), ('conformance_module', [44])].

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.098189s.

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.035688s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 32
End step max = None

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 32]), ('conformance_module', [45])].

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.094789s.

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.036644s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 32
End step max = None

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 32]), ('conformance_module', [46])].

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.100558s.

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.057088s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 32
End step max = None

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 32]), ('conformance_module', [47])].

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.098913s.

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.078540s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 32
End step max = None

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 32]), ('conformance_module', [48])].

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.099046s.

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.122719s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 32
End step max = None

[18-02-2021_12-54-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 32]), ('conformance_module', [49])].

[18-02-2021_12-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.101141s.

[18-02-2021_12-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.225006s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 32
End step max = None

[18-02-2021_12-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 32]), ('conformance_module', [50])].

[18-02-2021_12-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.103924s.

[18-02-2021_12-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.355505s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 32
End step max = None

[18-02-2021_12-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 32]), ('conformance_module', [51])].

[18-02-2021_12-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.105617s.

[18-02-2021_12-54-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.645842s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 32
End step max = None

[18-02-2021_12-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 32]), ('conformance_module', [52])].

[18-02-2021_12-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.106400s.

[18-02-2021_12-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 1.085375s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 32
End step max = None

[18-02-2021_12-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 32]), ('conformance_module', [53])].

[18-02-2021_12-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Grounding completed in 0.109235s.

[18-02-2021_12-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving started.

[18-02-2021_12-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Model found:
Model :: Total atoms = 11771, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Solving completed in 0.117164s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Incremental solving completed in 5.417238s because STOP_CON_REACHED.

[18-02-2021_12-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.293277s, Solving time = 2.990515s, Total time = 5.417238s
Final Model :: Total atoms = 11771, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #77 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.395526s, Solving time = 0.041643s, Total time = 0.437170s
2 : Statistics :: Grounding time = 0.076705s, Solving time = 0.008392s, Total time = 0.085096s
3 : Statistics :: Grounding time = 0.074519s, Solving time = 0.011303s, Total time = 0.085822s
4 : Statistics :: Grounding time = 0.085509s, Solving time = 0.014881s, Total time = 0.100390s
5 : Statistics :: Grounding time = 0.082344s, Solving time = 0.015318s, Total time = 0.097662s
6 : Statistics :: Grounding time = 0.085597s, Solving time = 0.016921s, Total time = 0.102518s
7 : Statistics :: Grounding time = 0.086179s, Solving time = 0.021671s, Total time = 0.107850s
8 : Statistics :: Grounding time = 0.089241s, Solving time = 0.020447s, Total time = 0.109688s
9 : Statistics :: Grounding time = 0.089560s, Solving time = 0.022042s, Total time = 0.111602s
10 : Statistics :: Grounding time = 0.091253s, Solving time = 0.026699s, Total time = 0.117952s
11 : Statistics :: Grounding time = 0.092336s, Solving time = 0.027995s, Total time = 0.120331s
12 : Statistics :: Grounding time = 0.098189s, Solving time = 0.035688s, Total time = 0.133876s
13 : Statistics :: Grounding time = 0.094789s, Solving time = 0.036644s, Total time = 0.131433s
14 : Statistics :: Grounding time = 0.100558s, Solving time = 0.057088s, Total time = 0.157646s
15 : Statistics :: Grounding time = 0.098913s, Solving time = 0.078540s, Total time = 0.177453s
16 : Statistics :: Grounding time = 0.099046s, Solving time = 0.122719s, Total time = 0.221765s
17 : Statistics :: Grounding time = 0.101141s, Solving time = 0.225006s, Total time = 0.326147s
18 : Statistics :: Grounding time = 0.103924s, Solving time = 0.355505s, Total time = 0.459429s
19 : Statistics :: Grounding time = 0.105617s, Solving time = 0.645842s, Total time = 0.751459s
20 : Statistics :: Grounding time = 0.106400s, Solving time = 1.085375s, Total time = 1.191774s
21 : Statistics :: Grounding time = 0.109235s, Solving time = 0.117164s, Total time = 0.226398s

[18-02-2021_12-54-58] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.293277s, Solving time = 2.990515s, Total time = 5.417238s
Model :: Total atoms = 11771, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-54-58] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),28)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),29)
occurs(1,talos,release(manipulator_end_2,(block,3)),30)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),31)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),32)
occurs(1,talos,put(manipulator_end_1,(block,4),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_1,(block,4)),34)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),35)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),36)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,4)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),38)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),39)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),40)
occurs(1,talos,release(manipulator_end_2,(block,6)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),43)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),44)
occurs(1,talos,release(manipulator_end_2,(block,2)),45)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),46)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),47)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),48)
occurs(1,talos,release(manipulator_end_1,(block,5)),49)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),50)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),51)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[18-02-2021_12-54-59] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     5.417238s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[18-02-2021_12-54-59] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-54-59] INFO :: Experiment >> 

      ================================================      
            Experimental run 9 : Time 15.297963s            
      ================================================      

[18-02-2021_12-54-59] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-54-59] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-54-59] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-54-59] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-54-59] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-54-59] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Instantiated.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Program building started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Program building completed.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding base program parts.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.013660s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving base program parts.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.002042s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Incremental solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.038945s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.005048s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.032839s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.003654s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.032297s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.004666s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.034064s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.005244s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.034352s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.005673s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.036799s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.006404s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.038006s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.006379s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.037416s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.008474s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.038006s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.010940s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.040405s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.010547s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.039834s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.013348s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.040998s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.019300s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.040184s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.026082s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.042044s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.042114s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.042062s.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.055218s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.077626s.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.094204s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.081939s.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.213244s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Grounding completed in 0.083066s.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving started.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Solving completed in 0.139788s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Incremental solving completed in 1.538817s because STOP_CON_REACHED.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.824543s, Solving time = 0.672369s, Total time = 1.538817s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #78 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.038945s, Solving time = 0.005048s, Total time = 0.043993s
2 : Statistics :: Grounding time = 0.032839s, Solving time = 0.003654s, Total time = 0.036493s
3 : Statistics :: Grounding time = 0.032297s, Solving time = 0.004666s, Total time = 0.036963s
4 : Statistics :: Grounding time = 0.034064s, Solving time = 0.005244s, Total time = 0.039308s
5 : Statistics :: Grounding time = 0.034352s, Solving time = 0.005673s, Total time = 0.040025s
6 : Statistics :: Grounding time = 0.036799s, Solving time = 0.006404s, Total time = 0.043204s
7 : Statistics :: Grounding time = 0.038006s, Solving time = 0.006379s, Total time = 0.044385s
8 : Statistics :: Grounding time = 0.037416s, Solving time = 0.008474s, Total time = 0.045890s
9 : Statistics :: Grounding time = 0.038006s, Solving time = 0.010940s, Total time = 0.048946s
10 : Statistics :: Grounding time = 0.040405s, Solving time = 0.010547s, Total time = 0.050951s
11 : Statistics :: Grounding time = 0.039834s, Solving time = 0.013348s, Total time = 0.053182s
12 : Statistics :: Grounding time = 0.040998s, Solving time = 0.019300s, Total time = 0.060298s
13 : Statistics :: Grounding time = 0.040184s, Solving time = 0.026082s, Total time = 0.066266s
14 : Statistics :: Grounding time = 0.042044s, Solving time = 0.042114s, Total time = 0.084159s
15 : Statistics :: Grounding time = 0.042062s, Solving time = 0.055218s, Total time = 0.097280s
16 : Statistics :: Grounding time = 0.077626s, Solving time = 0.094204s, Total time = 0.171830s
17 : Statistics :: Grounding time = 0.081939s, Solving time = 0.213244s, Total time = 0.295183s
18 : Statistics :: Grounding time = 0.083066s, Solving time = 0.139788s, Total time = 0.222855s

[18-02-2021_12-55-00] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.824543s, Solving time = 0.672369s, Total time = 1.538817s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-55-00] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[18-02-2021_12-55-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-00] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-55-00] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-55-00] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-55-00] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-55-00] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Instantiated.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Program building started.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Program building completed.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding base program parts.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.014258s.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving base program parts.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.003005s.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Incremental solving started.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.061571s.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.005371s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.043166s.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.003630s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.048206s.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.004925s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.061701s.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.006755s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.049150s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.007887s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.049806s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.009022s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.053016s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.009337s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.056324s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.009661s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.056284s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.010074s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.056620s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.010522s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.058538s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.013704s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.059010s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.018772s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.061672s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.018539s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.061176s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.019918s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.063469s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.031453s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.065081s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.032836s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Grounding completed in 0.065710s.

[18-02-2021_12-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving started.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Solving completed in 0.049579s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Incremental solving completed in 1.291420s because STOP_CON_REACHED.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.984758s, Solving time = 0.264988s, Total time = 1.291420s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #79 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061571s, Solving time = 0.005371s, Total time = 0.066942s
2 : Statistics :: Grounding time = 0.043166s, Solving time = 0.003630s, Total time = 0.046795s
3 : Statistics :: Grounding time = 0.048206s, Solving time = 0.004925s, Total time = 0.053131s
4 : Statistics :: Grounding time = 0.061701s, Solving time = 0.006755s, Total time = 0.068457s
5 : Statistics :: Grounding time = 0.049150s, Solving time = 0.007887s, Total time = 0.057037s
6 : Statistics :: Grounding time = 0.049806s, Solving time = 0.009022s, Total time = 0.058828s
7 : Statistics :: Grounding time = 0.053016s, Solving time = 0.009337s, Total time = 0.062353s
8 : Statistics :: Grounding time = 0.056324s, Solving time = 0.009661s, Total time = 0.065984s
9 : Statistics :: Grounding time = 0.056284s, Solving time = 0.010074s, Total time = 0.066357s
10 : Statistics :: Grounding time = 0.056620s, Solving time = 0.010522s, Total time = 0.067142s
11 : Statistics :: Grounding time = 0.058538s, Solving time = 0.013704s, Total time = 0.072243s
12 : Statistics :: Grounding time = 0.059010s, Solving time = 0.018772s, Total time = 0.077781s
13 : Statistics :: Grounding time = 0.061672s, Solving time = 0.018539s, Total time = 0.080211s
14 : Statistics :: Grounding time = 0.061176s, Solving time = 0.019918s, Total time = 0.081094s
15 : Statistics :: Grounding time = 0.063469s, Solving time = 0.031453s, Total time = 0.094922s
16 : Statistics :: Grounding time = 0.065081s, Solving time = 0.032836s, Total time = 0.097917s
17 : Statistics :: Grounding time = 0.065710s, Solving time = 0.049579s, Total time = 0.115289s

[18-02-2021_12-55-02] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.984758s, Solving time = 0.264988s, Total time = 1.291420s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-02] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)

[18-02-2021_12-55-02] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-02] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-55-02] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-55-02] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-55-02] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-55-02] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Instantiated.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Program building started.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Program building completed.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding base program parts.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.016612s.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving base program parts.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.002617s.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Incremental solving started.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.196631s.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.008545s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.063126s.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.005959s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.062961s.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.006907s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.065550s.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.009912s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.067687s.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.012265s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.071472s.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.012812s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.075558s.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.014582s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.076841s.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.014851s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.075976s.

[18-02-2021_12-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.017385s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.080967s.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.020111s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.080544s.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.024223s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.081568s.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.027794s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Grounding completed in 0.081481s.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving started.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Model found:
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Solving completed in 0.036292s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Incremental solving completed in 1.349669s because STOP_CON_REACHED.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.096976s, Solving time = 0.214255s, Total time = 1.349669s
Final Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #80 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.196631s, Solving time = 0.008545s, Total time = 0.205176s
2 : Statistics :: Grounding time = 0.063126s, Solving time = 0.005959s, Total time = 0.069086s
3 : Statistics :: Grounding time = 0.062961s, Solving time = 0.006907s, Total time = 0.069868s
4 : Statistics :: Grounding time = 0.065550s, Solving time = 0.009912s, Total time = 0.075462s
5 : Statistics :: Grounding time = 0.067687s, Solving time = 0.012265s, Total time = 0.079953s
6 : Statistics :: Grounding time = 0.071472s, Solving time = 0.012812s, Total time = 0.084284s
7 : Statistics :: Grounding time = 0.075558s, Solving time = 0.014582s, Total time = 0.090140s
8 : Statistics :: Grounding time = 0.076841s, Solving time = 0.014851s, Total time = 0.091692s
9 : Statistics :: Grounding time = 0.075976s, Solving time = 0.017385s, Total time = 0.093361s
10 : Statistics :: Grounding time = 0.080967s, Solving time = 0.020111s, Total time = 0.101079s
11 : Statistics :: Grounding time = 0.080544s, Solving time = 0.024223s, Total time = 0.104767s
12 : Statistics :: Grounding time = 0.081568s, Solving time = 0.027794s, Total time = 0.109362s
13 : Statistics :: Grounding time = 0.081481s, Solving time = 0.036292s, Total time = 0.117773s

[18-02-2021_12-55-03] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.096976s, Solving time = 0.214255s, Total time = 1.349669s
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-55-03] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)

[18-02-2021_12-55-03] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.538817s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.291420s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.349669s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-55-03] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-55-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-55-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-03] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-55-03] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-55-03] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-55-03] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-55-03] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Instantiated.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Program building started.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Program building completed.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding base program parts.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.020250s.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving base program parts.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.003532s.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Incremental solving started.

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.264788s.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.019469s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.071689s.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.006213s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.069213s.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.007191s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.071632s.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.008436s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.084629s.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.012429s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.074304s.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.013698s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.081697s.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.014591s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.091979s.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.015720s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.081214s.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.016868s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.101771s.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.018204s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.088256s.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.022062s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.092277s.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.023580s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.096959s.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.031150s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Grounding completed in 0.088176s.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving started.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Solving completed in 0.046363s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Incremental solving completed in 1.684498s because STOP_CON_REACHED.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.378835s, Solving time = 0.259505s, Total time = 1.684498s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #81 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.264788s, Solving time = 0.019469s, Total time = 0.284257s
2 : Statistics :: Grounding time = 0.071689s, Solving time = 0.006213s, Total time = 0.077902s
3 : Statistics :: Grounding time = 0.069213s, Solving time = 0.007191s, Total time = 0.076404s
4 : Statistics :: Grounding time = 0.071632s, Solving time = 0.008436s, Total time = 0.080069s
5 : Statistics :: Grounding time = 0.084629s, Solving time = 0.012429s, Total time = 0.097058s
6 : Statistics :: Grounding time = 0.074304s, Solving time = 0.013698s, Total time = 0.088003s
7 : Statistics :: Grounding time = 0.081697s, Solving time = 0.014591s, Total time = 0.096288s
8 : Statistics :: Grounding time = 0.091979s, Solving time = 0.015720s, Total time = 0.107699s
9 : Statistics :: Grounding time = 0.081214s, Solving time = 0.016868s, Total time = 0.098082s
10 : Statistics :: Grounding time = 0.101771s, Solving time = 0.018204s, Total time = 0.119975s
11 : Statistics :: Grounding time = 0.088256s, Solving time = 0.022062s, Total time = 0.110317s
12 : Statistics :: Grounding time = 0.092277s, Solving time = 0.023580s, Total time = 0.115857s
13 : Statistics :: Grounding time = 0.096959s, Solving time = 0.031150s, Total time = 0.128108s
14 : Statistics :: Grounding time = 0.088176s, Solving time = 0.046363s, Total time = 0.134540s

[18-02-2021_12-55-05] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.378835s, Solving time = 0.259505s, Total time = 1.684498s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-55-05] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)

[18-02-2021_12-55-05] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.684498s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-55-05] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-55-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-55-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-05] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-55-05] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-55-05] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-55-05] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-55-05] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Instantiated.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Program building started.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Program building completed.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding base program parts.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.018856s.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving base program parts.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.002324s.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Incremental solving started.

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.110829s.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.014402s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.051737s.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.005962s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.050921s.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.007964s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.059446s.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.008940s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.057096s.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.010013s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.058962s.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.010801s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.059904s.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.011266s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.062015s.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.011377s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Grounding completed in 0.063151s.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving started.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Model found:
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Solving completed in 0.015235s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Incremental solving completed in 0.709772s because STOP_CON_REACHED.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.592916s, Solving time = 0.098285s, Total time = 0.709772s
Final Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #82 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.110829s, Solving time = 0.014402s, Total time = 0.125231s
2 : Statistics :: Grounding time = 0.051737s, Solving time = 0.005962s, Total time = 0.057700s
3 : Statistics :: Grounding time = 0.050921s, Solving time = 0.007964s, Total time = 0.058886s
4 : Statistics :: Grounding time = 0.059446s, Solving time = 0.008940s, Total time = 0.068386s
5 : Statistics :: Grounding time = 0.057096s, Solving time = 0.010013s, Total time = 0.067109s
6 : Statistics :: Grounding time = 0.058962s, Solving time = 0.010801s, Total time = 0.069763s
7 : Statistics :: Grounding time = 0.059904s, Solving time = 0.011266s, Total time = 0.071170s
8 : Statistics :: Grounding time = 0.062015s, Solving time = 0.011377s, Total time = 0.073392s
9 : Statistics :: Grounding time = 0.063151s, Solving time = 0.015235s, Total time = 0.078386s

[18-02-2021_12-55-06] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.592916s, Solving time = 0.098285s, Total time = 0.709772s
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-06] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),18)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),19)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[18-02-2021_12-55-06] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-06] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-55-06] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-55-06] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-55-06] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-55-06] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Instantiated.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Program building started.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Program building completed.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding base program parts.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding completed in 0.024149s.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving base program parts.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving completed in 0.003483s.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Incremental solving started.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding completed in 0.343468s.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving started.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving completed in 0.037666s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding completed in 0.071749s.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving started.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving completed in 0.007117s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding completed in 0.079557s.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving started.

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving completed in 0.010592s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding completed in 0.076467s.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving started.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving completed in 0.013307s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Grounding completed in 0.077918s.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving started.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Solving completed in 0.016991s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Incremental solving completed in 0.775904s because STOP_CON_REACHED.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.673308s, Solving time = 0.089155s, Total time = 0.775904s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #83 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.343468s, Solving time = 0.037666s, Total time = 0.381134s
2 : Statistics :: Grounding time = 0.071749s, Solving time = 0.007117s, Total time = 0.078866s
3 : Statistics :: Grounding time = 0.079557s, Solving time = 0.010592s, Total time = 0.090149s
4 : Statistics :: Grounding time = 0.076467s, Solving time = 0.013307s, Total time = 0.089774s
5 : Statistics :: Grounding time = 0.077918s, Solving time = 0.016991s, Total time = 0.094909s

[18-02-2021_12-55-08] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.673308s, Solving time = 0.089155s, Total time = 0.775904s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-55-08] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),30)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)

[18-02-2021_12-55-08] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.709772s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.775904s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-55-08] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-55-08] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-55-08] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-08] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-55-08] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-55-08] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-55-08] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-55-08] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Instantiated.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Program building started.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Program building completed.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding base program parts.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.025374s.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving base program parts.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.003454s.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Incremental solving started.

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.375546s.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.044450s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.075185s.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.011784s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.097693s.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.011609s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.079629s.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.014883s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.082676s.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.015619s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.084766s.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.016922s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.085935s.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.021806s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.088173s.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.019979s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-55-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.089178s.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.023595s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.090629s.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.024846s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.092382s.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.028815s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 32
End step max = None

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 32]), ('conformance_module', [44])].

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.098851s.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.030242s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 32
End step max = None

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 32]), ('conformance_module', [45])].

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.096510s.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.040547s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 32
End step max = None

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 32]), ('conformance_module', [46])].

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.099427s.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.057652s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 32
End step max = None

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 32]), ('conformance_module', [47])].

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.105365s.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.108223s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 32
End step max = None

[18-02-2021_12-55-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 32]), ('conformance_module', [48])].

[18-02-2021_12-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.100989s.

[18-02-2021_12-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.154810s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 32
End step max = None

[18-02-2021_12-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 32]), ('conformance_module', [49])].

[18-02-2021_12-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.105660s.

[18-02-2021_12-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.290675s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 32
End step max = None

[18-02-2021_12-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 32]), ('conformance_module', [50])].

[18-02-2021_12-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.103434s.

[18-02-2021_12-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.364531s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 32
End step max = None

[18-02-2021_12-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 32]), ('conformance_module', [51])].

[18-02-2021_12-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.105351s.

[18-02-2021_12-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.638566s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 32
End step max = None

[18-02-2021_12-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 32]), ('conformance_module', [52])].

[18-02-2021_12-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.105045s.

[18-02-2021_12-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 1.014924s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 32
End step max = None

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 32]), ('conformance_module', [53])].

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Grounding completed in 0.108356s.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving started.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Model found:
Model :: Total atoms = 11774, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Solving completed in 0.355645s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Incremental solving completed in 5.723278s because STOP_CON_REACHED.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.296153s, Solving time = 3.293576s, Total time = 5.723278s
Final Model :: Total atoms = 11774, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #84 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.375546s, Solving time = 0.044450s, Total time = 0.419996s
2 : Statistics :: Grounding time = 0.075185s, Solving time = 0.011784s, Total time = 0.086969s
3 : Statistics :: Grounding time = 0.097693s, Solving time = 0.011609s, Total time = 0.109302s
4 : Statistics :: Grounding time = 0.079629s, Solving time = 0.014883s, Total time = 0.094511s
5 : Statistics :: Grounding time = 0.082676s, Solving time = 0.015619s, Total time = 0.098296s
6 : Statistics :: Grounding time = 0.084766s, Solving time = 0.016922s, Total time = 0.101688s
7 : Statistics :: Grounding time = 0.085935s, Solving time = 0.021806s, Total time = 0.107740s
8 : Statistics :: Grounding time = 0.088173s, Solving time = 0.019979s, Total time = 0.108151s
9 : Statistics :: Grounding time = 0.089178s, Solving time = 0.023595s, Total time = 0.112773s
10 : Statistics :: Grounding time = 0.090629s, Solving time = 0.024846s, Total time = 0.115475s
11 : Statistics :: Grounding time = 0.092382s, Solving time = 0.028815s, Total time = 0.121197s
12 : Statistics :: Grounding time = 0.098851s, Solving time = 0.030242s, Total time = 0.129093s
13 : Statistics :: Grounding time = 0.096510s, Solving time = 0.040547s, Total time = 0.137056s
14 : Statistics :: Grounding time = 0.099427s, Solving time = 0.057652s, Total time = 0.157079s
15 : Statistics :: Grounding time = 0.105365s, Solving time = 0.108223s, Total time = 0.213589s
16 : Statistics :: Grounding time = 0.100989s, Solving time = 0.154810s, Total time = 0.255799s
17 : Statistics :: Grounding time = 0.105660s, Solving time = 0.290675s, Total time = 0.396334s
18 : Statistics :: Grounding time = 0.103434s, Solving time = 0.364531s, Total time = 0.467965s
19 : Statistics :: Grounding time = 0.105351s, Solving time = 0.638566s, Total time = 0.743917s
20 : Statistics :: Grounding time = 0.105045s, Solving time = 1.014924s, Total time = 1.119968s
21 : Statistics :: Grounding time = 0.108356s, Solving time = 0.355645s, Total time = 0.464001s

[18-02-2021_12-55-14] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.296153s, Solving time = 3.293576s, Total time = 5.723278s
Model :: Total atoms = 11774, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-14] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),30)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,4),puzzle_room_table_right),33)
occurs(1,talos,release(manipulator_end_2,(block,4)),34)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),35)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),36)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,2)),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),39)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),40)
occurs(1,talos,release(manipulator_end_1,(block,6)),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),43)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),44)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),45)
occurs(1,talos,release(manipulator_end_2,(block,5)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),47)
occurs(1,talos,release(manipulator_end_1,(block,2)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),50)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),51)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),52)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),53)

[18-02-2021_12-55-14] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     5.723278s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[18-02-2021_12-55-14] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-55-14] INFO :: Experiment >> 

      ================================================      
           Experimental run 10 : Time 15.656271s            
      ================================================      

[18-02-2021_12-55-14] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-55-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-55-14] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-55-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-55-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-14] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Instantiated.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Program building started.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Program building completed.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding base program parts.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.014170s.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving base program parts.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.002198s.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Incremental solving started.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.039532s.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.005598s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.031086s.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.003624s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.031037s.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.003982s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.035135s.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.004707s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.034798s.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.004860s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.036349s.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.006067s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.038222s.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.006613s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.037261s.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.007983s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.037996s.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.009418s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.039514s.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.010164s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.039571s.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.012153s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.041285s.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.017344s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.040158s.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.024610s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.046663s.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.048426s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.042929s.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.074396s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.076390s.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.126265s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.080204s.

[18-02-2021_12-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.220704s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Grounding completed in 0.084555s.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Model found:
Model :: Total atoms = 3523, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Solving completed in 0.137843s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Incremental solving completed in 1.596053s because STOP_CON_REACHED.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.826855s, Solving time = 0.726954s, Total time = 1.596053s
Final Model :: Total atoms = 3523, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #85 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039532s, Solving time = 0.005598s, Total time = 0.045130s
2 : Statistics :: Grounding time = 0.031086s, Solving time = 0.003624s, Total time = 0.034710s
3 : Statistics :: Grounding time = 0.031037s, Solving time = 0.003982s, Total time = 0.035019s
4 : Statistics :: Grounding time = 0.035135s, Solving time = 0.004707s, Total time = 0.039842s
5 : Statistics :: Grounding time = 0.034798s, Solving time = 0.004860s, Total time = 0.039657s
6 : Statistics :: Grounding time = 0.036349s, Solving time = 0.006067s, Total time = 0.042416s
7 : Statistics :: Grounding time = 0.038222s, Solving time = 0.006613s, Total time = 0.044835s
8 : Statistics :: Grounding time = 0.037261s, Solving time = 0.007983s, Total time = 0.045244s
9 : Statistics :: Grounding time = 0.037996s, Solving time = 0.009418s, Total time = 0.047414s
10 : Statistics :: Grounding time = 0.039514s, Solving time = 0.010164s, Total time = 0.049678s
11 : Statistics :: Grounding time = 0.039571s, Solving time = 0.012153s, Total time = 0.051724s
12 : Statistics :: Grounding time = 0.041285s, Solving time = 0.017344s, Total time = 0.058629s
13 : Statistics :: Grounding time = 0.040158s, Solving time = 0.024610s, Total time = 0.064768s
14 : Statistics :: Grounding time = 0.046663s, Solving time = 0.048426s, Total time = 0.095089s
15 : Statistics :: Grounding time = 0.042929s, Solving time = 0.074396s, Total time = 0.117325s
16 : Statistics :: Grounding time = 0.076390s, Solving time = 0.126265s, Total time = 0.202655s
17 : Statistics :: Grounding time = 0.080204s, Solving time = 0.220704s, Total time = 0.300908s
18 : Statistics :: Grounding time = 0.084555s, Solving time = 0.137843s, Total time = 0.222398s

[18-02-2021_12-55-16] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.826855s, Solving time = 0.726954s, Total time = 1.596053s
Model :: Total atoms = 3523, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-55-16] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_2,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),11)
occurs(3,talos,release(manipulator_arm_1,(block,3)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[18-02-2021_12-55-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-16] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-55-16] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-55-16] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-55-16] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-55-16] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Instantiated.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Program building started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Program building completed.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding base program parts.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.014545s.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving base program parts.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.002311s.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Incremental solving started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.063333s.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.005833s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.043523s.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.003508s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.045347s.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.004281s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.045113s.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.006251s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.049170s.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.008289s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.050341s.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.008851s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.053086s.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.009763s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.056611s.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.010022s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.056575s.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.010303s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.056136s.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.010525s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.058931s.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.013259s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.060369s.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.019503s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.061038s.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.022118s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.061043s.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.020319s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.067898s.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.030553s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.064469s.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.044360s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Grounding completed in 0.065524s.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving started.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Solving completed in 0.025613s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Incremental solving completed in 1.270886s because STOP_CON_REACHED.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.973051s, Solving time = 0.255662s, Total time = 1.270886s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #86 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.063333s, Solving time = 0.005833s, Total time = 0.069166s
2 : Statistics :: Grounding time = 0.043523s, Solving time = 0.003508s, Total time = 0.047031s
3 : Statistics :: Grounding time = 0.045347s, Solving time = 0.004281s, Total time = 0.049629s
4 : Statistics :: Grounding time = 0.045113s, Solving time = 0.006251s, Total time = 0.051363s
5 : Statistics :: Grounding time = 0.049170s, Solving time = 0.008289s, Total time = 0.057459s
6 : Statistics :: Grounding time = 0.050341s, Solving time = 0.008851s, Total time = 0.059192s
7 : Statistics :: Grounding time = 0.053086s, Solving time = 0.009763s, Total time = 0.062849s
8 : Statistics :: Grounding time = 0.056611s, Solving time = 0.010022s, Total time = 0.066634s
9 : Statistics :: Grounding time = 0.056575s, Solving time = 0.010303s, Total time = 0.066878s
10 : Statistics :: Grounding time = 0.056136s, Solving time = 0.010525s, Total time = 0.066661s
11 : Statistics :: Grounding time = 0.058931s, Solving time = 0.013259s, Total time = 0.072191s
12 : Statistics :: Grounding time = 0.060369s, Solving time = 0.019503s, Total time = 0.079871s
13 : Statistics :: Grounding time = 0.061038s, Solving time = 0.022118s, Total time = 0.083156s
14 : Statistics :: Grounding time = 0.061043s, Solving time = 0.020319s, Total time = 0.081361s
15 : Statistics :: Grounding time = 0.067898s, Solving time = 0.030553s, Total time = 0.098451s
16 : Statistics :: Grounding time = 0.064469s, Solving time = 0.044360s, Total time = 0.108828s
17 : Statistics :: Grounding time = 0.065524s, Solving time = 0.025613s, Total time = 0.091138s

[18-02-2021_12-55-17] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.973051s, Solving time = 0.255662s, Total time = 1.270886s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-55-17] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,retracted),5)
occurs(2,talos,configure(manipulator_arm_1,extended),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),17)

[18-02-2021_12-55-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-17] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-55-17] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-55-17] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-55-17] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-55-17] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Instantiated.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Program building started.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Program building completed.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding base program parts.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.016594s.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving base program parts.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.003565s.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Incremental solving started.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.182953s.

[18-02-2021_12-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.009049s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.063010s.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.004803s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.064101s.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.006822s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.066394s.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.010241s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.069308s.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.012308s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.076910s.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.012901s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.078058s.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.014300s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.077792s.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.015196s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.076933s.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.017176s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.080649s.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.021090s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.079552s.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.032158s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.079759s.

[18-02-2021_12-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.021942s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Grounding completed in 0.078752s.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving started.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Solving completed in 0.021979s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Incremental solving completed in 1.336090s because STOP_CON_REACHED.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.090762s, Solving time = 0.203532s, Total time = 1.336090s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #87 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.182953s, Solving time = 0.009049s, Total time = 0.192002s
2 : Statistics :: Grounding time = 0.063010s, Solving time = 0.004803s, Total time = 0.067813s
3 : Statistics :: Grounding time = 0.064101s, Solving time = 0.006822s, Total time = 0.070923s
4 : Statistics :: Grounding time = 0.066394s, Solving time = 0.010241s, Total time = 0.076635s
5 : Statistics :: Grounding time = 0.069308s, Solving time = 0.012308s, Total time = 0.081616s
6 : Statistics :: Grounding time = 0.076910s, Solving time = 0.012901s, Total time = 0.089811s
7 : Statistics :: Grounding time = 0.078058s, Solving time = 0.014300s, Total time = 0.092358s
8 : Statistics :: Grounding time = 0.077792s, Solving time = 0.015196s, Total time = 0.092988s
9 : Statistics :: Grounding time = 0.076933s, Solving time = 0.017176s, Total time = 0.094109s
10 : Statistics :: Grounding time = 0.080649s, Solving time = 0.021090s, Total time = 0.101739s
11 : Statistics :: Grounding time = 0.079552s, Solving time = 0.032158s, Total time = 0.111710s
12 : Statistics :: Grounding time = 0.079759s, Solving time = 0.021942s, Total time = 0.101701s
13 : Statistics :: Grounding time = 0.078752s, Solving time = 0.021979s, Total time = 0.100730s

[18-02-2021_12-55-19] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.090762s, Solving time = 0.203532s, Total time = 1.336090s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-55-19] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)

[18-02-2021_12-55-19] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.596053s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.270886s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.336090s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-55-19] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-55-19] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-55-19] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-19] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-55-19] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-55-19] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-55-19] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-55-19] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Instantiated.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Program building started.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Program building completed.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding base program parts.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.019844s.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving base program parts.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.003502s.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Incremental solving started.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.259062s.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.019607s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.068350s.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.006779s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.068788s.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.007681s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.071117s.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.008829s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.071908s.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.011726s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.074216s.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.013561s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.075743s.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.014720s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.080231s.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.016403s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.080441s.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.016586s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.085186s.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.018536s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.084500s.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.021794s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.085658s.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.023295s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.088840s.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.028724s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Grounding completed in 0.092488s.

[18-02-2021_12-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving started.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Solving completed in 0.041528s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Incremental solving completed in 1.606000s because STOP_CON_REACHED.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.306372s, Solving time = 0.253270s, Total time = 1.606000s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #88 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.259062s, Solving time = 0.019607s, Total time = 0.278669s
2 : Statistics :: Grounding time = 0.068350s, Solving time = 0.006779s, Total time = 0.075129s
3 : Statistics :: Grounding time = 0.068788s, Solving time = 0.007681s, Total time = 0.076469s
4 : Statistics :: Grounding time = 0.071117s, Solving time = 0.008829s, Total time = 0.079945s
5 : Statistics :: Grounding time = 0.071908s, Solving time = 0.011726s, Total time = 0.083634s
6 : Statistics :: Grounding time = 0.074216s, Solving time = 0.013561s, Total time = 0.087777s
7 : Statistics :: Grounding time = 0.075743s, Solving time = 0.014720s, Total time = 0.090463s
8 : Statistics :: Grounding time = 0.080231s, Solving time = 0.016403s, Total time = 0.096634s
9 : Statistics :: Grounding time = 0.080441s, Solving time = 0.016586s, Total time = 0.097027s
10 : Statistics :: Grounding time = 0.085186s, Solving time = 0.018536s, Total time = 0.103722s
11 : Statistics :: Grounding time = 0.084500s, Solving time = 0.021794s, Total time = 0.106295s
12 : Statistics :: Grounding time = 0.085658s, Solving time = 0.023295s, Total time = 0.108953s
13 : Statistics :: Grounding time = 0.088840s, Solving time = 0.028724s, Total time = 0.117564s
14 : Statistics :: Grounding time = 0.092488s, Solving time = 0.041528s, Total time = 0.134016s

[18-02-2021_12-55-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.306372s, Solving time = 0.253270s, Total time = 1.606000s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),27)

[18-02-2021_12-55-21] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.606000s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-55-21] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-55-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-55-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-21] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-55-21] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-55-21] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-55-21] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-55-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Instantiated.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Program building started.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Program building completed.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding base program parts.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.019021s.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving base program parts.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.002524s.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Incremental solving started.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.116248s.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.015869s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.052312s.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.005882s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.054499s.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.007796s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.055294s.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.009874s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.055490s.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.009933s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.058187s.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.010242s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.059106s.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.011187s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.062442s.

[18-02-2021_12-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.011681s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Grounding completed in 0.062875s.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving started.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Model found:
Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Solving completed in 0.014773s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Incremental solving completed in 0.713969s because STOP_CON_REACHED.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.595474s, Solving time = 0.099762s, Total time = 0.713969s
Final Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #89 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.116248s, Solving time = 0.015869s, Total time = 0.132118s
2 : Statistics :: Grounding time = 0.052312s, Solving time = 0.005882s, Total time = 0.058195s
3 : Statistics :: Grounding time = 0.054499s, Solving time = 0.007796s, Total time = 0.062295s
4 : Statistics :: Grounding time = 0.055294s, Solving time = 0.009874s, Total time = 0.065169s
5 : Statistics :: Grounding time = 0.055490s, Solving time = 0.009933s, Total time = 0.065423s
6 : Statistics :: Grounding time = 0.058187s, Solving time = 0.010242s, Total time = 0.068429s
7 : Statistics :: Grounding time = 0.059106s, Solving time = 0.011187s, Total time = 0.070292s
8 : Statistics :: Grounding time = 0.062442s, Solving time = 0.011681s, Total time = 0.074122s
9 : Statistics :: Grounding time = 0.062875s, Solving time = 0.014773s, Total time = 0.077648s

[18-02-2021_12-55-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.595474s, Solving time = 0.099762s, Total time = 0.713969s
Model :: Total atoms = 6405, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-55-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,retracted),5)
occurs(2,talos,configure(manipulator_arm_1,extended),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),17)
occurs(2,talos,release(manipulator_arm_2,(block,5)),18)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),19)
occurs(2,talos,release(manipulator_arm_1,(block,3)),20)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[18-02-2021_12-55-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-22] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-55-22] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-55-22] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-55-22] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-55-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Instantiated.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Program building started.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Program building completed.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding base program parts.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding completed in 0.023891s.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving base program parts.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving completed in 0.003762s.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Incremental solving started.

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding completed in 0.367497s.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving started.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving completed in 0.042819s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding completed in 0.072143s.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving started.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving completed in 0.008412s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding completed in 0.071810s.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving started.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving completed in 0.010143s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding completed in 0.078967s.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving started.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving completed in 0.013453s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Grounding completed in 0.079023s.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving started.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Model found:
Model :: Total atoms = 7844, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Solving completed in 0.018119s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Incremental solving completed in 0.803868s because STOP_CON_REACHED.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.693331s, Solving time = 0.096708s, Total time = 0.803868s
Final Model :: Total atoms = 7844, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #90 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.367497s, Solving time = 0.042819s, Total time = 0.410316s
2 : Statistics :: Grounding time = 0.072143s, Solving time = 0.008412s, Total time = 0.080555s
3 : Statistics :: Grounding time = 0.071810s, Solving time = 0.010143s, Total time = 0.081953s
4 : Statistics :: Grounding time = 0.078967s, Solving time = 0.013453s, Total time = 0.092420s
5 : Statistics :: Grounding time = 0.079023s, Solving time = 0.018119s, Total time = 0.097142s

[18-02-2021_12-55-23] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.693331s, Solving time = 0.096708s, Total time = 0.803868s
Model :: Total atoms = 7844, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-55-23] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),27)
occurs(1,talos,release(manipulator_end_2,(block,5)),28)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),30)
occurs(1,talos,release(manipulator_end_1,(block,3)),31)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),32)

[18-02-2021_12-55-23] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.713969s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.803868s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-55-23] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-55-23] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-55-23] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-23] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-55-23] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-55-23] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-55-23] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-55-23] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Instantiated.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Program building started.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Program building completed.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding base program parts.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.025981s.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving base program parts.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.003364s.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Incremental solving started.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.391755s.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.042421s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.073922s.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.008183s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.073211s.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.011054s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.079943s.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.014431s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.081701s.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.014998s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.088040s.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.016270s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.087940s.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.022340s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.088817s.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.020640s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.090798s.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.023089s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.097246s.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.024701s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.093572s.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.027551s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 32
End step max = None

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 32]), ('conformance_module', [44])].

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.095109s.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.036104s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 32
End step max = None

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 32]), ('conformance_module', [45])].

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.102041s.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.040927s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 32
End step max = None

[18-02-2021_12-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 32]), ('conformance_module', [46])].

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.098139s.

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.067644s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 32
End step max = None

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 32]), ('conformance_module', [47])].

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.098763s.

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.104110s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 32
End step max = None

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 32]), ('conformance_module', [48])].

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.102308s.

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.184157s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 32
End step max = None

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 32]), ('conformance_module', [49])].

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.103870s.

[18-02-2021_12-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.320214s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 32
End step max = None

[18-02-2021_12-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 32]), ('conformance_module', [50])].

[18-02-2021_12-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.102882s.

[18-02-2021_12-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.566250s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 32
End step max = None

[18-02-2021_12-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 32]), ('conformance_module', [51])].

[18-02-2021_12-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.106994s.

[18-02-2021_12-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.700744s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 32
End step max = None

[18-02-2021_12-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 32]), ('conformance_module', [52])].

[18-02-2021_12-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.108171s.

[18-02-2021_12-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 1.255955s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 32
End step max = None

[18-02-2021_12-55-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 32]), ('conformance_module', [53])].

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Grounding completed in 0.116460s.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving started.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Model found:
Model :: Total atoms = 11773, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Solving completed in 0.337125s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Incremental solving completed in 6.286040s because STOP_CON_REACHED.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.307663s, Solving time = 3.842273s, Total time = 6.286040s
Final Model :: Total atoms = 11773, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #91 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.391755s, Solving time = 0.042421s, Total time = 0.434175s
2 : Statistics :: Grounding time = 0.073922s, Solving time = 0.008183s, Total time = 0.082105s
3 : Statistics :: Grounding time = 0.073211s, Solving time = 0.011054s, Total time = 0.084265s
4 : Statistics :: Grounding time = 0.079943s, Solving time = 0.014431s, Total time = 0.094374s
5 : Statistics :: Grounding time = 0.081701s, Solving time = 0.014998s, Total time = 0.096698s
6 : Statistics :: Grounding time = 0.088040s, Solving time = 0.016270s, Total time = 0.104311s
7 : Statistics :: Grounding time = 0.087940s, Solving time = 0.022340s, Total time = 0.110280s
8 : Statistics :: Grounding time = 0.088817s, Solving time = 0.020640s, Total time = 0.109457s
9 : Statistics :: Grounding time = 0.090798s, Solving time = 0.023089s, Total time = 0.113887s
10 : Statistics :: Grounding time = 0.097246s, Solving time = 0.024701s, Total time = 0.121946s
11 : Statistics :: Grounding time = 0.093572s, Solving time = 0.027551s, Total time = 0.121123s
12 : Statistics :: Grounding time = 0.095109s, Solving time = 0.036104s, Total time = 0.131212s
13 : Statistics :: Grounding time = 0.102041s, Solving time = 0.040927s, Total time = 0.142968s
14 : Statistics :: Grounding time = 0.098139s, Solving time = 0.067644s, Total time = 0.165783s
15 : Statistics :: Grounding time = 0.098763s, Solving time = 0.104110s, Total time = 0.202873s
16 : Statistics :: Grounding time = 0.102308s, Solving time = 0.184157s, Total time = 0.286465s
17 : Statistics :: Grounding time = 0.103870s, Solving time = 0.320214s, Total time = 0.424085s
18 : Statistics :: Grounding time = 0.102882s, Solving time = 0.566250s, Total time = 0.669133s
19 : Statistics :: Grounding time = 0.106994s, Solving time = 0.700744s, Total time = 0.807737s
20 : Statistics :: Grounding time = 0.108171s, Solving time = 1.255955s, Total time = 1.364127s
21 : Statistics :: Grounding time = 0.116460s, Solving time = 0.337125s, Total time = 0.453585s

[18-02-2021_12-55-30] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.307663s, Solving time = 3.842273s, Total time = 6.286040s
Model :: Total atoms = 11773, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-55-30] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),27)
occurs(1,talos,release(manipulator_end_2,(block,5)),28)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),30)
occurs(1,talos,release(manipulator_end_1,(block,3)),31)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),32)
occurs(1,talos,put(manipulator_end_2,(block,4),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_2,(block,4)),34)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),35)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),37)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,3)),38)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),39)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),40)
occurs(1,talos,release(manipulator_end_1,(block,6)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),42)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),43)
occurs(1,talos,release(manipulator_end_2,(block,5)),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),46)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),47)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),48)
occurs(1,talos,release(manipulator_end_1,(block,2)),49)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),50)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),51)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),52)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),53)

[18-02-2021_12-55-30] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     6.286040s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[18-02-2021_12-55-30] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-55-30] INFO :: Experiment >> 

      ================================================      
           Experimental run 11 : Time 15.887180s            
      ================================================      

[18-02-2021_12-55-30] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-55-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-55-30] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-55-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-55-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-30] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Instantiated.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Program building started.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Program building completed.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding base program parts.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.019045s.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving base program parts.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.001654s.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Incremental solving started.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.042718s.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.004619s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.031366s.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.002435s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.031666s.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.003871s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.034234s.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.004619s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.038805s.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.005266s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.036568s.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.006428s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.039539s.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.007193s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.037673s.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.008450s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.038924s.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.010428s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.039319s.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.012116s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.039513s.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.014561s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.040666s.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.022826s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.040163s.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.028861s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.042507s.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.038465s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.042670s.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.066692s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.079899s.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.116868s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.080917s.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.172886s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Grounding completed in 0.084012s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Solving completed in 0.130323s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Incremental solving completed in 1.541012s because STOP_CON_REACHED.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.840204s, Solving time = 0.658561s, Total time = 1.541012s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #92 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.042718s, Solving time = 0.004619s, Total time = 0.047336s
2 : Statistics :: Grounding time = 0.031366s, Solving time = 0.002435s, Total time = 0.033800s
3 : Statistics :: Grounding time = 0.031666s, Solving time = 0.003871s, Total time = 0.035537s
4 : Statistics :: Grounding time = 0.034234s, Solving time = 0.004619s, Total time = 0.038854s
5 : Statistics :: Grounding time = 0.038805s, Solving time = 0.005266s, Total time = 0.044071s
6 : Statistics :: Grounding time = 0.036568s, Solving time = 0.006428s, Total time = 0.042996s
7 : Statistics :: Grounding time = 0.039539s, Solving time = 0.007193s, Total time = 0.046733s
8 : Statistics :: Grounding time = 0.037673s, Solving time = 0.008450s, Total time = 0.046123s
9 : Statistics :: Grounding time = 0.038924s, Solving time = 0.010428s, Total time = 0.049352s
10 : Statistics :: Grounding time = 0.039319s, Solving time = 0.012116s, Total time = 0.051435s
11 : Statistics :: Grounding time = 0.039513s, Solving time = 0.014561s, Total time = 0.054075s
12 : Statistics :: Grounding time = 0.040666s, Solving time = 0.022826s, Total time = 0.063492s
13 : Statistics :: Grounding time = 0.040163s, Solving time = 0.028861s, Total time = 0.069023s
14 : Statistics :: Grounding time = 0.042507s, Solving time = 0.038465s, Total time = 0.080972s
15 : Statistics :: Grounding time = 0.042670s, Solving time = 0.066692s, Total time = 0.109361s
16 : Statistics :: Grounding time = 0.079899s, Solving time = 0.116868s, Total time = 0.196767s
17 : Statistics :: Grounding time = 0.080917s, Solving time = 0.172886s, Total time = 0.253803s
18 : Statistics :: Grounding time = 0.084012s, Solving time = 0.130323s, Total time = 0.214335s

[18-02-2021_12-55-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.840204s, Solving time = 0.658561s, Total time = 1.541012s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-55-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[18-02-2021_12-55-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-32] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-55-32] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-55-32] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-55-32] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-55-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Instantiated.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Program building started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Program building completed.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding base program parts.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.014575s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving base program parts.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.001961s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Incremental solving started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.061292s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.005311s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.044487s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.003416s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.045192s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.004192s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.045399s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.006219s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.048751s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.007302s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.051198s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.008895s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.077902s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.010238s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.053710s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.009605s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.066770s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.010351s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.056415s.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.011065s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.058926s.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.013667s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.059124s.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.016593s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.061214s.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.018024s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.061441s.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.023361s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.069163s.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.030960s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.064715s.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.049972s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Grounding completed in 0.066212s.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving started.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Solving completed in 0.057489s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Incremental solving completed in 1.337076s because STOP_CON_REACHED.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.006485s, Solving time = 0.288621s, Total time = 1.337076s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #93 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061292s, Solving time = 0.005311s, Total time = 0.066603s
2 : Statistics :: Grounding time = 0.044487s, Solving time = 0.003416s, Total time = 0.047903s
3 : Statistics :: Grounding time = 0.045192s, Solving time = 0.004192s, Total time = 0.049384s
4 : Statistics :: Grounding time = 0.045399s, Solving time = 0.006219s, Total time = 0.051618s
5 : Statistics :: Grounding time = 0.048751s, Solving time = 0.007302s, Total time = 0.056053s
6 : Statistics :: Grounding time = 0.051198s, Solving time = 0.008895s, Total time = 0.060093s
7 : Statistics :: Grounding time = 0.077902s, Solving time = 0.010238s, Total time = 0.088140s
8 : Statistics :: Grounding time = 0.053710s, Solving time = 0.009605s, Total time = 0.063315s
9 : Statistics :: Grounding time = 0.066770s, Solving time = 0.010351s, Total time = 0.077121s
10 : Statistics :: Grounding time = 0.056415s, Solving time = 0.011065s, Total time = 0.067479s
11 : Statistics :: Grounding time = 0.058926s, Solving time = 0.013667s, Total time = 0.072593s
12 : Statistics :: Grounding time = 0.059124s, Solving time = 0.016593s, Total time = 0.075717s
13 : Statistics :: Grounding time = 0.061214s, Solving time = 0.018024s, Total time = 0.079238s
14 : Statistics :: Grounding time = 0.061441s, Solving time = 0.023361s, Total time = 0.084803s
15 : Statistics :: Grounding time = 0.069163s, Solving time = 0.030960s, Total time = 0.100123s
16 : Statistics :: Grounding time = 0.064715s, Solving time = 0.049972s, Total time = 0.114687s
17 : Statistics :: Grounding time = 0.066212s, Solving time = 0.057489s, Total time = 0.123700s

[18-02-2021_12-55-33] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.006485s, Solving time = 0.288621s, Total time = 1.337076s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-55-33] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)

[18-02-2021_12-55-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-33] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-55-33] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-55-33] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-55-33] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-55-33] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Instantiated.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Program building started.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Program building completed.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding base program parts.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.016770s.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving base program parts.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.002781s.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Incremental solving started.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.182093s.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.008243s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.062899s.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.004946s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.063821s.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.006744s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.066661s.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.009572s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.069770s.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.011946s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.071802s.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.013140s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.073546s.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.013709s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.076631s.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.015420s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.077739s.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.017162s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.079753s.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.022008s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.080836s.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.026076s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.080879s.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.028446s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Grounding completed in 0.081922s.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving started.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Solving completed in 0.026759s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Incremental solving completed in 1.333116s because STOP_CON_REACHED.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.085122s, Solving time = 0.206954s, Total time = 1.333116s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #94 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.182093s, Solving time = 0.008243s, Total time = 0.190336s
2 : Statistics :: Grounding time = 0.062899s, Solving time = 0.004946s, Total time = 0.067845s
3 : Statistics :: Grounding time = 0.063821s, Solving time = 0.006744s, Total time = 0.070565s
4 : Statistics :: Grounding time = 0.066661s, Solving time = 0.009572s, Total time = 0.076233s
5 : Statistics :: Grounding time = 0.069770s, Solving time = 0.011946s, Total time = 0.081715s
6 : Statistics :: Grounding time = 0.071802s, Solving time = 0.013140s, Total time = 0.084943s
7 : Statistics :: Grounding time = 0.073546s, Solving time = 0.013709s, Total time = 0.087255s
8 : Statistics :: Grounding time = 0.076631s, Solving time = 0.015420s, Total time = 0.092052s
9 : Statistics :: Grounding time = 0.077739s, Solving time = 0.017162s, Total time = 0.094902s
10 : Statistics :: Grounding time = 0.079753s, Solving time = 0.022008s, Total time = 0.101761s
11 : Statistics :: Grounding time = 0.080836s, Solving time = 0.026076s, Total time = 0.106912s
12 : Statistics :: Grounding time = 0.080879s, Solving time = 0.028446s, Total time = 0.109325s
13 : Statistics :: Grounding time = 0.081922s, Solving time = 0.026759s, Total time = 0.108682s

[18-02-2021_12-55-35] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.085122s, Solving time = 0.206954s, Total time = 1.333116s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-55-35] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)

[18-02-2021_12-55-35] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.541012s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.337076s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.333116s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-55-35] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-55-35] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-55-35] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-35] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-55-35] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-55-35] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-55-35] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-55-35] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Instantiated.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Program building started.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Program building completed.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding base program parts.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.020095s.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving base program parts.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.003467s.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Incremental solving started.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.263977s.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.021221s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.069349s.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.006039s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.086576s.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.008330s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.071345s.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.009513s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.092942s.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.012283s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.074382s.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.013834s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.074819s.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.014671s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.077989s.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.015438s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.079983s.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.017246s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.085074s.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.018588s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.088576s.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.024655s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.086093s.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.025884s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.083877s.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.028117s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Grounding completed in 0.088198s.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving started.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Solving completed in 0.064979s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Incremental solving completed in 1.674753s because STOP_CON_REACHED.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.343273s, Solving time = 0.284264s, Total time = 1.674753s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #95 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.263977s, Solving time = 0.021221s, Total time = 0.285199s
2 : Statistics :: Grounding time = 0.069349s, Solving time = 0.006039s, Total time = 0.075388s
3 : Statistics :: Grounding time = 0.086576s, Solving time = 0.008330s, Total time = 0.094905s
4 : Statistics :: Grounding time = 0.071345s, Solving time = 0.009513s, Total time = 0.080858s
5 : Statistics :: Grounding time = 0.092942s, Solving time = 0.012283s, Total time = 0.105225s
6 : Statistics :: Grounding time = 0.074382s, Solving time = 0.013834s, Total time = 0.088216s
7 : Statistics :: Grounding time = 0.074819s, Solving time = 0.014671s, Total time = 0.089490s
8 : Statistics :: Grounding time = 0.077989s, Solving time = 0.015438s, Total time = 0.093427s
9 : Statistics :: Grounding time = 0.079983s, Solving time = 0.017246s, Total time = 0.097229s
10 : Statistics :: Grounding time = 0.085074s, Solving time = 0.018588s, Total time = 0.103661s
11 : Statistics :: Grounding time = 0.088576s, Solving time = 0.024655s, Total time = 0.113231s
12 : Statistics :: Grounding time = 0.086093s, Solving time = 0.025884s, Total time = 0.111976s
13 : Statistics :: Grounding time = 0.083877s, Solving time = 0.028117s, Total time = 0.111994s
14 : Statistics :: Grounding time = 0.088198s, Solving time = 0.064979s, Total time = 0.153177s

[18-02-2021_12-55-37] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.343273s, Solving time = 0.284264s, Total time = 1.674753s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-55-37] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)

[18-02-2021_12-55-37] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.674753s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-55-37] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-55-37] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-55-37] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-37] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-55-37] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-55-37] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-55-37] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-55-37] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Instantiated.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Program building started.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Program building completed.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding base program parts.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.019250s.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving base program parts.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.003132s.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Incremental solving started.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.136665s.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.015037s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.054191s.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.006256s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.051461s.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.008281s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.056348s.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.009425s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.055330s.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.010070s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.058305s.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.010400s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.058651s.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.011009s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.060725s.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.011927s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Grounding completed in 0.061670s.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving started.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Model found:
Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Solving completed in 0.014534s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Incremental solving completed in 0.731179s because STOP_CON_REACHED.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.612597s, Solving time = 0.100070s, Total time = 0.731179s
Final Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #96 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.136665s, Solving time = 0.015037s, Total time = 0.151702s
2 : Statistics :: Grounding time = 0.054191s, Solving time = 0.006256s, Total time = 0.060447s
3 : Statistics :: Grounding time = 0.051461s, Solving time = 0.008281s, Total time = 0.059742s
4 : Statistics :: Grounding time = 0.056348s, Solving time = 0.009425s, Total time = 0.065773s
5 : Statistics :: Grounding time = 0.055330s, Solving time = 0.010070s, Total time = 0.065400s
6 : Statistics :: Grounding time = 0.058305s, Solving time = 0.010400s, Total time = 0.068705s
7 : Statistics :: Grounding time = 0.058651s, Solving time = 0.011009s, Total time = 0.069660s
8 : Statistics :: Grounding time = 0.060725s, Solving time = 0.011927s, Total time = 0.072652s
9 : Statistics :: Grounding time = 0.061670s, Solving time = 0.014534s, Total time = 0.076204s

[18-02-2021_12-55-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.612597s, Solving time = 0.100070s, Total time = 0.731179s
Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-55-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_1,(block,5)),18)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),19)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[18-02-2021_12-55-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-38] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-55-38] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-55-38] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-55-38] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-55-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Instantiated.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Program building started.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Program building completed.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding base program parts.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding completed in 0.024050s.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving base program parts.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving completed in 0.003565s.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Incremental solving started.

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding completed in 0.342743s.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving started.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving completed in 0.037649s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding completed in 0.071898s.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving started.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving completed in 0.008051s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding completed in 0.078724s.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving started.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving completed in 0.010667s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding completed in 0.080084s.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving started.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving completed in 0.013579s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Grounding completed in 0.077292s.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving started.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Solving completed in 0.017580s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Incremental solving completed in 0.780040s because STOP_CON_REACHED.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.674791s, Solving time = 0.091090s, Total time = 0.780040s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #97 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.342743s, Solving time = 0.037649s, Total time = 0.380391s
2 : Statistics :: Grounding time = 0.071898s, Solving time = 0.008051s, Total time = 0.079949s
3 : Statistics :: Grounding time = 0.078724s, Solving time = 0.010667s, Total time = 0.089391s
4 : Statistics :: Grounding time = 0.080084s, Solving time = 0.013579s, Total time = 0.093663s
5 : Statistics :: Grounding time = 0.077292s, Solving time = 0.017580s, Total time = 0.094872s

[18-02-2021_12-55-39] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.674791s, Solving time = 0.091090s, Total time = 0.780040s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-55-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)

[18-02-2021_12-55-39] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.731179s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.780040s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-55-39] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-55-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-55-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-39] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-55-39] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-55-39] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-55-39] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-55-39] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Instantiated.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Program building started.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Program building completed.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding base program parts.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.024867s.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving base program parts.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.003620s.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Incremental solving started.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.387304s.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.042620s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.072773s.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.008457s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.077445s.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.012247s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.080589s.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.015857s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.082244s.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.016357s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.085234s.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.017043s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.086454s.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.022075s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.089586s.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.020559s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.089886s.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.025419s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.091439s.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.028923s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.091700s.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.029109s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 32
End step max = None

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 32]), ('conformance_module', [44])].

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.096925s.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.038919s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 32
End step max = None

[18-02-2021_12-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 32]), ('conformance_module', [45])].

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.095236s.

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.041705s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 32
End step max = None

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 32]), ('conformance_module', [46])].

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.098601s.

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.053869s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 32
End step max = None

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 32]), ('conformance_module', [47])].

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.108640s.

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.087615s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 32
End step max = None

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 32]), ('conformance_module', [48])].

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.101524s.

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.153726s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 32
End step max = None

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 32]), ('conformance_module', [49])].

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.104364s.

[18-02-2021_12-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.279162s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 32
End step max = None

[18-02-2021_12-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 32]), ('conformance_module', [50])].

[18-02-2021_12-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.105276s.

[18-02-2021_12-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.388764s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 32
End step max = None

[18-02-2021_12-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 32]), ('conformance_module', [51])].

[18-02-2021_12-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.105937s.

[18-02-2021_12-55-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.613454s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 32
End step max = None

[18-02-2021_12-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 32]), ('conformance_module', [52])].

[18-02-2021_12-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.105572s.

[18-02-2021_12-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 1.072706s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 32
End step max = None

[18-02-2021_12-55-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 32]), ('conformance_module', [53])].

[18-02-2021_12-55-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.107858s.

[18-02-2021_12-55-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 1.405419s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 32
End step max = None

[18-02-2021_12-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 32]), ('conformance_module', [54])].

[18-02-2021_12-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.109383s.

[18-02-2021_12-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 2.077555s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 32
End step max = None

[18-02-2021_12-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 32]), ('conformance_module', [55])].

[18-02-2021_12-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.111132s.

[18-02-2021_12-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 2.586764s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [24]:
Current step bound = 56
End step min = 32
End step max = None

[18-02-2021_12-55-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 32]), ('conformance_module', [56])].

[18-02-2021_12-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.117322s.

[18-02-2021_12-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 3.892435s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Beginning Incremental call [25]:
Current step bound = 57
End step min = 32
End step max = None

[18-02-2021_12-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 32]), ('conformance_module', [57])].

[18-02-2021_12-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Grounding completed in 0.113935s.

[18-02-2021_12-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving started.

[18-02-2021_12-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Model found:
Model :: Total atoms = 12491, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Solving completed in 0.848538s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Incremental solving completed in 16.731733s because STOP_CON_REACHED.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.741227s, Solving time = 13.782918s, Total time = 16.731733s
Final Model :: Total atoms = 12491, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #98 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.387304s, Solving time = 0.042620s, Total time = 0.429924s
2 : Statistics :: Grounding time = 0.072773s, Solving time = 0.008457s, Total time = 0.081231s
3 : Statistics :: Grounding time = 0.077445s, Solving time = 0.012247s, Total time = 0.089692s
4 : Statistics :: Grounding time = 0.080589s, Solving time = 0.015857s, Total time = 0.096447s
5 : Statistics :: Grounding time = 0.082244s, Solving time = 0.016357s, Total time = 0.098602s
6 : Statistics :: Grounding time = 0.085234s, Solving time = 0.017043s, Total time = 0.102277s
7 : Statistics :: Grounding time = 0.086454s, Solving time = 0.022075s, Total time = 0.108529s
8 : Statistics :: Grounding time = 0.089586s, Solving time = 0.020559s, Total time = 0.110144s
9 : Statistics :: Grounding time = 0.089886s, Solving time = 0.025419s, Total time = 0.115306s
10 : Statistics :: Grounding time = 0.091439s, Solving time = 0.028923s, Total time = 0.120362s
11 : Statistics :: Grounding time = 0.091700s, Solving time = 0.029109s, Total time = 0.120809s
12 : Statistics :: Grounding time = 0.096925s, Solving time = 0.038919s, Total time = 0.135843s
13 : Statistics :: Grounding time = 0.095236s, Solving time = 0.041705s, Total time = 0.136941s
14 : Statistics :: Grounding time = 0.098601s, Solving time = 0.053869s, Total time = 0.152470s
15 : Statistics :: Grounding time = 0.108640s, Solving time = 0.087615s, Total time = 0.196256s
16 : Statistics :: Grounding time = 0.101524s, Solving time = 0.153726s, Total time = 0.255250s
17 : Statistics :: Grounding time = 0.104364s, Solving time = 0.279162s, Total time = 0.383526s
18 : Statistics :: Grounding time = 0.105276s, Solving time = 0.388764s, Total time = 0.494040s
19 : Statistics :: Grounding time = 0.105937s, Solving time = 0.613454s, Total time = 0.719390s
20 : Statistics :: Grounding time = 0.105572s, Solving time = 1.072706s, Total time = 1.178278s
21 : Statistics :: Grounding time = 0.107858s, Solving time = 1.405419s, Total time = 1.513277s
22 : Statistics :: Grounding time = 0.109383s, Solving time = 2.077555s, Total time = 2.186938s
23 : Statistics :: Grounding time = 0.111132s, Solving time = 2.586764s, Total time = 2.697896s
24 : Statistics :: Grounding time = 0.117322s, Solving time = 3.892435s, Total time = 4.009757s
25 : Statistics :: Grounding time = 0.113935s, Solving time = 0.848538s, Total time = 0.962473s

[18-02-2021_12-55-57] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.741227s, Solving time = 13.782918s, Total time = 16.731733s
Model :: Total atoms = 12491, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-55-57] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,lift(manipulator_end_1,(block,4)),33)
occurs(1,talos,release(manipulator_end_1,(block,4)),34)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),35)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),38)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),39)
occurs(1,talos,release(manipulator_end_2,(block,3)),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),41)
occurs(1,talos,put(manipulator_end_1,(block,5),puzzle_room_table_right),42)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),43)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),44)
occurs(1,talos,release(manipulator_end_2,(block,2)),45)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),46)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),47)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),48)
occurs(1,talos,release(manipulator_end_2,(block,6)),49)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),50)
occurs(1,talos,release(manipulator_end_1,(block,5)),51)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),52)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),53)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),54)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),55)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),56)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),57)

[18-02-2021_12-55-57] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    16.731733s : Steps =    57 : Actions =    57 |  
  ====================================================================  

[18-02-2021_12-55-57] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-55-57] INFO :: Experiment >> 

      ================================================      
           Experimental run 12 : Time 26.527156s            
      ================================================      

[18-02-2021_12-55-57] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-55-57] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-55-57] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-55-57] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-55-57] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-57] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Instantiated.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Program building started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Program building completed.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding base program parts.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.013745s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving base program parts.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.002290s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Incremental solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.041294s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.005703s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.031274s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.003639s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.030925s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.004714s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.034085s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.005411s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.035414s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.005085s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.036077s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.005931s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.037898s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.006585s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.037330s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.007906s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.040741s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.010853s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.039559s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.010027s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.039020s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.013311s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.040924s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.021299s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.040336s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.031116s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.041095s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.044502s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.043035s.

[18-02-2021_12-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.064557s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.081815s.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.123700s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.085467s.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.157297s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Grounding completed in 0.089706s.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving started.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Solving completed in 0.125441s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Incremental solving completed in 1.532280s because STOP_CON_REACHED.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.839739s, Solving time = 0.649367s, Total time = 1.532280s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #99 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.041294s, Solving time = 0.005703s, Total time = 0.046996s
2 : Statistics :: Grounding time = 0.031274s, Solving time = 0.003639s, Total time = 0.034913s
3 : Statistics :: Grounding time = 0.030925s, Solving time = 0.004714s, Total time = 0.035639s
4 : Statistics :: Grounding time = 0.034085s, Solving time = 0.005411s, Total time = 0.039496s
5 : Statistics :: Grounding time = 0.035414s, Solving time = 0.005085s, Total time = 0.040499s
6 : Statistics :: Grounding time = 0.036077s, Solving time = 0.005931s, Total time = 0.042007s
7 : Statistics :: Grounding time = 0.037898s, Solving time = 0.006585s, Total time = 0.044483s
8 : Statistics :: Grounding time = 0.037330s, Solving time = 0.007906s, Total time = 0.045236s
9 : Statistics :: Grounding time = 0.040741s, Solving time = 0.010853s, Total time = 0.051594s
10 : Statistics :: Grounding time = 0.039559s, Solving time = 0.010027s, Total time = 0.049586s
11 : Statistics :: Grounding time = 0.039020s, Solving time = 0.013311s, Total time = 0.052331s
12 : Statistics :: Grounding time = 0.040924s, Solving time = 0.021299s, Total time = 0.062223s
13 : Statistics :: Grounding time = 0.040336s, Solving time = 0.031116s, Total time = 0.071452s
14 : Statistics :: Grounding time = 0.041095s, Solving time = 0.044502s, Total time = 0.085597s
15 : Statistics :: Grounding time = 0.043035s, Solving time = 0.064557s, Total time = 0.107592s
16 : Statistics :: Grounding time = 0.081815s, Solving time = 0.123700s, Total time = 0.205515s
17 : Statistics :: Grounding time = 0.085467s, Solving time = 0.157297s, Total time = 0.242764s
18 : Statistics :: Grounding time = 0.089706s, Solving time = 0.125441s, Total time = 0.215147s

[18-02-2021_12-55-58] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.839739s, Solving time = 0.649367s, Total time = 1.532280s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-55-58] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_1,(block,5)),8)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[18-02-2021_12-55-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-55-58] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-55-58] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-55-58] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-55-58] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-55-58] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Instantiated.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Program building started.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Program building completed.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding base program parts.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.014488s.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving base program parts.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.001753s.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Incremental solving started.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.061865s.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.005059s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.043083s.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.003456s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.045280s.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.004245s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.045256s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.006259s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.049311s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.007822s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.049870s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.008676s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.053113s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.009497s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.058965s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.010353s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.057333s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.011189s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.056479s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.010636s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.064241s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.013359s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.060639s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.020417s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.060221s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.015570s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.062730s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.022638s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.063066s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.028161s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.061382s.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.041315s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Grounding completed in 0.069279s.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving started.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Solving completed in 0.054197s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Incremental solving completed in 1.294229s because STOP_CON_REACHED.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.976599s, Solving time = 0.274602s, Total time = 1.294229s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #100 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061865s, Solving time = 0.005059s, Total time = 0.066923s
2 : Statistics :: Grounding time = 0.043083s, Solving time = 0.003456s, Total time = 0.046540s
3 : Statistics :: Grounding time = 0.045280s, Solving time = 0.004245s, Total time = 0.049525s
4 : Statistics :: Grounding time = 0.045256s, Solving time = 0.006259s, Total time = 0.051515s
5 : Statistics :: Grounding time = 0.049311s, Solving time = 0.007822s, Total time = 0.057133s
6 : Statistics :: Grounding time = 0.049870s, Solving time = 0.008676s, Total time = 0.058546s
7 : Statistics :: Grounding time = 0.053113s, Solving time = 0.009497s, Total time = 0.062609s
8 : Statistics :: Grounding time = 0.058965s, Solving time = 0.010353s, Total time = 0.069318s
9 : Statistics :: Grounding time = 0.057333s, Solving time = 0.011189s, Total time = 0.068522s
10 : Statistics :: Grounding time = 0.056479s, Solving time = 0.010636s, Total time = 0.067115s
11 : Statistics :: Grounding time = 0.064241s, Solving time = 0.013359s, Total time = 0.077600s
12 : Statistics :: Grounding time = 0.060639s, Solving time = 0.020417s, Total time = 0.081056s
13 : Statistics :: Grounding time = 0.060221s, Solving time = 0.015570s, Total time = 0.075790s
14 : Statistics :: Grounding time = 0.062730s, Solving time = 0.022638s, Total time = 0.085368s
15 : Statistics :: Grounding time = 0.063066s, Solving time = 0.028161s, Total time = 0.091227s
16 : Statistics :: Grounding time = 0.061382s, Solving time = 0.041315s, Total time = 0.102696s
17 : Statistics :: Grounding time = 0.069279s, Solving time = 0.054197s, Total time = 0.123476s

[18-02-2021_12-56-00] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.976599s, Solving time = 0.274602s, Total time = 1.294229s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-00] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_1,retracted),5)
occurs(2,talos,configure(manipulator_arm_2,extended),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),15)
occurs(2,talos,release(manipulator_arm_1,(block,5)),16)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),17)

[18-02-2021_12-56-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-00] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-56-00] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-56-00] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-56-00] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-56-00] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Instantiated.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Program building started.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Program building completed.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding base program parts.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.017283s.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving base program parts.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.002853s.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Incremental solving started.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.190253s.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.008843s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.062691s.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.004853s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.063137s.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.006191s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.088518s.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.010632s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.072273s.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.012043s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.071551s.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.013263s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.076600s.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.014360s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.076094s.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.015028s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.079502s.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.017078s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.077264s.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.020855s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.085205s.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.029498s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.084326s.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.024137s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Grounding completed in 0.081054s.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving started.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Solving completed in 0.023271s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Incremental solving completed in 1.368759s because STOP_CON_REACHED.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.125752s, Solving time = 0.202904s, Total time = 1.368759s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #101 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.190253s, Solving time = 0.008843s, Total time = 0.199096s
2 : Statistics :: Grounding time = 0.062691s, Solving time = 0.004853s, Total time = 0.067544s
3 : Statistics :: Grounding time = 0.063137s, Solving time = 0.006191s, Total time = 0.069328s
4 : Statistics :: Grounding time = 0.088518s, Solving time = 0.010632s, Total time = 0.099150s
5 : Statistics :: Grounding time = 0.072273s, Solving time = 0.012043s, Total time = 0.084316s
6 : Statistics :: Grounding time = 0.071551s, Solving time = 0.013263s, Total time = 0.084814s
7 : Statistics :: Grounding time = 0.076600s, Solving time = 0.014360s, Total time = 0.090960s
8 : Statistics :: Grounding time = 0.076094s, Solving time = 0.015028s, Total time = 0.091122s
9 : Statistics :: Grounding time = 0.079502s, Solving time = 0.017078s, Total time = 0.096580s
10 : Statistics :: Grounding time = 0.077264s, Solving time = 0.020855s, Total time = 0.098119s
11 : Statistics :: Grounding time = 0.085205s, Solving time = 0.029498s, Total time = 0.114703s
12 : Statistics :: Grounding time = 0.084326s, Solving time = 0.024137s, Total time = 0.108463s
13 : Statistics :: Grounding time = 0.081054s, Solving time = 0.023271s, Total time = 0.104325s

[18-02-2021_12-56-01] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.125752s, Solving time = 0.202904s, Total time = 1.368759s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-01] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)

[18-02-2021_12-56-01] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.532280s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.294229s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.368759s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-56-01] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-56-01] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-56-01] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-01] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-56-01] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-56-01] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-56-01] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-56-01] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Instantiated.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Program building started.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Program building completed.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding base program parts.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.019764s.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving base program parts.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.003563s.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Incremental solving started.

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.253286s.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.020444s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.068300s.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.006501s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.070175s.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.008986s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.071597s.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.009379s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.070745s.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.012484s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.073901s.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.013633s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.073863s.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.013983s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.079771s.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.015718s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.080686s.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.017336s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.082246s.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.017955s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.091521s.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.020780s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.086050s.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.024563s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.089924s.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.034860s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Grounding completed in 0.087496s.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving started.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Model found:
Model :: Total atoms = 7109, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Solving completed in 0.043377s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Incremental solving completed in 1.610649s because STOP_CON_REACHED.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.299325s, Solving time = 0.263563s, Total time = 1.610649s
Final Model :: Total atoms = 7109, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #102 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.253286s, Solving time = 0.020444s, Total time = 0.273730s
2 : Statistics :: Grounding time = 0.068300s, Solving time = 0.006501s, Total time = 0.074802s
3 : Statistics :: Grounding time = 0.070175s, Solving time = 0.008986s, Total time = 0.079161s
4 : Statistics :: Grounding time = 0.071597s, Solving time = 0.009379s, Total time = 0.080976s
5 : Statistics :: Grounding time = 0.070745s, Solving time = 0.012484s, Total time = 0.083228s
6 : Statistics :: Grounding time = 0.073901s, Solving time = 0.013633s, Total time = 0.087534s
7 : Statistics :: Grounding time = 0.073863s, Solving time = 0.013983s, Total time = 0.087845s
8 : Statistics :: Grounding time = 0.079771s, Solving time = 0.015718s, Total time = 0.095489s
9 : Statistics :: Grounding time = 0.080686s, Solving time = 0.017336s, Total time = 0.098022s
10 : Statistics :: Grounding time = 0.082246s, Solving time = 0.017955s, Total time = 0.100201s
11 : Statistics :: Grounding time = 0.091521s, Solving time = 0.020780s, Total time = 0.112301s
12 : Statistics :: Grounding time = 0.086050s, Solving time = 0.024563s, Total time = 0.110613s
13 : Statistics :: Grounding time = 0.089924s, Solving time = 0.034860s, Total time = 0.124784s
14 : Statistics :: Grounding time = 0.087496s, Solving time = 0.043377s, Total time = 0.130873s

[18-02-2021_12-56-03] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.299325s, Solving time = 0.263563s, Total time = 1.610649s
Model :: Total atoms = 7109, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-03] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),25)
occurs(1,talos,release(manipulator_end_1,(block,5)),26)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),27)

[18-02-2021_12-56-03] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.610649s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-56-03] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-56-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-56-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-03] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-56-03] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-56-03] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-56-03] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-56-03] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Instantiated.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Program building started.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Program building completed.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding base program parts.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.018920s.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving base program parts.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.003198s.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Incremental solving started.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.111695s.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[18-02-2021_12-56-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.015760s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.050604s.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.006079s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.052179s.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.007389s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.055770s.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.009418s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.057967s.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.010221s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.062759s.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.011147s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.058603s.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.010952s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.062807s.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.011921s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Grounding completed in 0.061351s.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving started.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Model found:
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Solving completed in 0.015229s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Incremental solving completed in 0.713117s because STOP_CON_REACHED.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.592655s, Solving time = 0.101313s, Total time = 0.713117s
Final Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #103 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.111695s, Solving time = 0.015760s, Total time = 0.127455s
2 : Statistics :: Grounding time = 0.050604s, Solving time = 0.006079s, Total time = 0.056683s
3 : Statistics :: Grounding time = 0.052179s, Solving time = 0.007389s, Total time = 0.059568s
4 : Statistics :: Grounding time = 0.055770s, Solving time = 0.009418s, Total time = 0.065188s
5 : Statistics :: Grounding time = 0.057967s, Solving time = 0.010221s, Total time = 0.068188s
6 : Statistics :: Grounding time = 0.062759s, Solving time = 0.011147s, Total time = 0.073906s
7 : Statistics :: Grounding time = 0.058603s, Solving time = 0.010952s, Total time = 0.069555s
8 : Statistics :: Grounding time = 0.062807s, Solving time = 0.011921s, Total time = 0.074728s
9 : Statistics :: Grounding time = 0.061351s, Solving time = 0.015229s, Total time = 0.076580s

[18-02-2021_12-56-04] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.592655s, Solving time = 0.101313s, Total time = 0.713117s
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-56-04] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_1,retracted),5)
occurs(2,talos,configure(manipulator_arm_2,extended),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),15)
occurs(2,talos,release(manipulator_arm_1,(block,5)),16)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),17)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),18)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[18-02-2021_12-56-04] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-04] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-56-04] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-56-04] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-56-04] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-56-04] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Instantiated.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Program building started.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Program building completed.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding base program parts.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding completed in 0.024114s.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving base program parts.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving completed in 0.003414s.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Incremental solving started.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding completed in 0.363779s.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving started.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving completed in 0.037124s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding completed in 0.079441s.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving started.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving completed in 0.007738s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding completed in 0.070450s.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving started.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving completed in 0.011067s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding completed in 0.076054s.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving started.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving completed in 0.013876s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Grounding completed in 0.077356s.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving started.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Model found:
Model :: Total atoms = 7845, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Solving completed in 0.016365s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Incremental solving completed in 0.794116s because STOP_CON_REACHED.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.691194s, Solving time = 0.089584s, Total time = 0.794116s
Final Model :: Total atoms = 7845, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #104 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.363779s, Solving time = 0.037124s, Total time = 0.400903s
2 : Statistics :: Grounding time = 0.079441s, Solving time = 0.007738s, Total time = 0.087179s
3 : Statistics :: Grounding time = 0.070450s, Solving time = 0.011067s, Total time = 0.081517s
4 : Statistics :: Grounding time = 0.076054s, Solving time = 0.013876s, Total time = 0.089930s
5 : Statistics :: Grounding time = 0.077356s, Solving time = 0.016365s, Total time = 0.093721s

[18-02-2021_12-56-05] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.691194s, Solving time = 0.089584s, Total time = 0.794116s
Model :: Total atoms = 7845, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-05] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),25)
occurs(1,talos,release(manipulator_end_1,(block,5)),26)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),29)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)

[18-02-2021_12-56-05] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.713117s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.794116s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-56-05] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-56-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-56-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-05] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-56-05] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-56-05] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-56-05] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-56-05] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Instantiated.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Program building started.

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Program building completed.

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding base program parts.

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.025614s.

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving base program parts.

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.003579s.

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Incremental solving started.

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.374813s.

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.042062s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.074543s.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.008054s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.078784s.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.011354s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.080572s.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.015558s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.083385s.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.015715s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.087821s.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.018302s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.101987s.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.019768s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.087973s.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.022105s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.088582s.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.021081s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.090767s.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.028517s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.091340s.

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.030332s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 32
End step max = None

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 32]), ('conformance_module', [44])].

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.100419s.

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.028050s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 32
End step max = None

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 32]), ('conformance_module', [45])].

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.095614s.

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.039706s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 32
End step max = None

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 32]), ('conformance_module', [46])].

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.098223s.

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.053417s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 32
End step max = None

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 32]), ('conformance_module', [47])].

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.099598s.

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.085467s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 32
End step max = None

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 32]), ('conformance_module', [48])].

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.102282s.

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.114283s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 32
End step max = None

[18-02-2021_12-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 32]), ('conformance_module', [49])].

[18-02-2021_12-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.101405s.

[18-02-2021_12-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.214025s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 32
End step max = None

[18-02-2021_12-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 32]), ('conformance_module', [50])].

[18-02-2021_12-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.106728s.

[18-02-2021_12-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.474154s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 32
End step max = None

[18-02-2021_12-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 32]), ('conformance_module', [51])].

[18-02-2021_12-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.106040s.

[18-02-2021_12-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.719792s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 32
End step max = None

[18-02-2021_12-56-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 32]), ('conformance_module', [52])].

[18-02-2021_12-56-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.106123s.

[18-02-2021_12-56-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 1.101080s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 32
End step max = None

[18-02-2021_12-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 32]), ('conformance_module', [53])].

[18-02-2021_12-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.107746s.

[18-02-2021_12-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 1.626154s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 32
End step max = None

[18-02-2021_12-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 32]), ('conformance_module', [54])].

[18-02-2021_12-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.110619s.

[18-02-2021_12-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 2.068215s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 32
End step max = None

[18-02-2021_12-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 32]), ('conformance_module', [55])].

[18-02-2021_12-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.112193s.

[18-02-2021_12-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 3.262389s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [24]:
Current step bound = 56
End step min = 32
End step max = None

[18-02-2021_12-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 32]), ('conformance_module', [56])].

[18-02-2021_12-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.112829s.

[18-02-2021_12-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 4.652015s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Beginning Incremental call [25]:
Current step bound = 57
End step min = 32
End step max = None

[18-02-2021_12-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 32]), ('conformance_module', [57])].

[18-02-2021_12-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Grounding completed in 0.114942s.

[18-02-2021_12-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving started.

[18-02-2021_12-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Model found:
Model :: Total atoms = 12490, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Solving completed in 0.640240s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Incremental solving completed in 18.265836s because STOP_CON_REACHED.

[18-02-2021_12-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.740944s, Solving time = 15.315413s, Total time = 18.265836s
Final Model :: Total atoms = 12490, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #105 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.374813s, Solving time = 0.042062s, Total time = 0.416875s
2 : Statistics :: Grounding time = 0.074543s, Solving time = 0.008054s, Total time = 0.082597s
3 : Statistics :: Grounding time = 0.078784s, Solving time = 0.011354s, Total time = 0.090138s
4 : Statistics :: Grounding time = 0.080572s, Solving time = 0.015558s, Total time = 0.096130s
5 : Statistics :: Grounding time = 0.083385s, Solving time = 0.015715s, Total time = 0.099100s
6 : Statistics :: Grounding time = 0.087821s, Solving time = 0.018302s, Total time = 0.106123s
7 : Statistics :: Grounding time = 0.101987s, Solving time = 0.019768s, Total time = 0.121755s
8 : Statistics :: Grounding time = 0.087973s, Solving time = 0.022105s, Total time = 0.110078s
9 : Statistics :: Grounding time = 0.088582s, Solving time = 0.021081s, Total time = 0.109663s
10 : Statistics :: Grounding time = 0.090767s, Solving time = 0.028517s, Total time = 0.119284s
11 : Statistics :: Grounding time = 0.091340s, Solving time = 0.030332s, Total time = 0.121672s
12 : Statistics :: Grounding time = 0.100419s, Solving time = 0.028050s, Total time = 0.128469s
13 : Statistics :: Grounding time = 0.095614s, Solving time = 0.039706s, Total time = 0.135319s
14 : Statistics :: Grounding time = 0.098223s, Solving time = 0.053417s, Total time = 0.151640s
15 : Statistics :: Grounding time = 0.099598s, Solving time = 0.085467s, Total time = 0.185065s
16 : Statistics :: Grounding time = 0.102282s, Solving time = 0.114283s, Total time = 0.216565s
17 : Statistics :: Grounding time = 0.101405s, Solving time = 0.214025s, Total time = 0.315430s
18 : Statistics :: Grounding time = 0.106728s, Solving time = 0.474154s, Total time = 0.580881s
19 : Statistics :: Grounding time = 0.106040s, Solving time = 0.719792s, Total time = 0.825832s
20 : Statistics :: Grounding time = 0.106123s, Solving time = 1.101080s, Total time = 1.207203s
21 : Statistics :: Grounding time = 0.107746s, Solving time = 1.626154s, Total time = 1.733901s
22 : Statistics :: Grounding time = 0.110619s, Solving time = 2.068215s, Total time = 2.178833s
23 : Statistics :: Grounding time = 0.112193s, Solving time = 3.262389s, Total time = 3.374581s
24 : Statistics :: Grounding time = 0.112829s, Solving time = 4.652015s, Total time = 4.764845s
25 : Statistics :: Grounding time = 0.114942s, Solving time = 0.640240s, Total time = 0.755183s

[18-02-2021_12-56-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.740944s, Solving time = 15.315413s, Total time = 18.265836s
Model :: Total atoms = 12490, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),25)
occurs(1,talos,release(manipulator_end_1,(block,5)),26)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),29)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,lift(manipulator_end_1,(block,4)),33)
occurs(1,talos,release(manipulator_end_1,(block,4)),34)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),35)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),38)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),39)
occurs(1,talos,release(manipulator_end_2,(block,3)),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),41)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,2)),42)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),43)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),44)
occurs(1,talos,release(manipulator_end_2,(block,6)),45)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,release(manipulator_end_1,(block,5)),52)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),53)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),54)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),55)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),56)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),57)

[18-02-2021_12-56-24] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    18.265836s : Steps =    57 : Actions =    57 |  
  ====================================================================  

[18-02-2021_12-56-24] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-56-24] INFO :: Experiment >> 

      ================================================      
           Experimental run 13 : Time 27.850026s            
      ================================================      

[18-02-2021_12-56-24] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-56-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-56-24] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-56-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-56-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Instantiated.

[18-02-2021_12-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Program building started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Program building completed.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding base program parts.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.013743s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving base program parts.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.002170s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Incremental solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.040702s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.005774s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.031091s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.003758s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.030945s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.004554s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.034187s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.005577s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.033920s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.005693s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.035763s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.006595s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.038226s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.006677s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.037733s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.008837s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.038675s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.009650s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.039453s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.012026s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.039358s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.014499s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.040866s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.019000s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.041146s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.032342s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.041894s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.049419s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.042154s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.075554s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.077398s.

[18-02-2021_12-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.139599s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.086810s.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.252251s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Grounding completed in 0.088411s.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving started.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Solving completed in 0.109617s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Incremental solving completed in 1.639691s because STOP_CON_REACHED.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.832475s, Solving time = 0.763594s, Total time = 1.639691s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #106 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040702s, Solving time = 0.005774s, Total time = 0.046475s
2 : Statistics :: Grounding time = 0.031091s, Solving time = 0.003758s, Total time = 0.034849s
3 : Statistics :: Grounding time = 0.030945s, Solving time = 0.004554s, Total time = 0.035499s
4 : Statistics :: Grounding time = 0.034187s, Solving time = 0.005577s, Total time = 0.039764s
5 : Statistics :: Grounding time = 0.033920s, Solving time = 0.005693s, Total time = 0.039613s
6 : Statistics :: Grounding time = 0.035763s, Solving time = 0.006595s, Total time = 0.042358s
7 : Statistics :: Grounding time = 0.038226s, Solving time = 0.006677s, Total time = 0.044904s
8 : Statistics :: Grounding time = 0.037733s, Solving time = 0.008837s, Total time = 0.046570s
9 : Statistics :: Grounding time = 0.038675s, Solving time = 0.009650s, Total time = 0.048325s
10 : Statistics :: Grounding time = 0.039453s, Solving time = 0.012026s, Total time = 0.051480s
11 : Statistics :: Grounding time = 0.039358s, Solving time = 0.014499s, Total time = 0.053857s
12 : Statistics :: Grounding time = 0.040866s, Solving time = 0.019000s, Total time = 0.059866s
13 : Statistics :: Grounding time = 0.041146s, Solving time = 0.032342s, Total time = 0.073488s
14 : Statistics :: Grounding time = 0.041894s, Solving time = 0.049419s, Total time = 0.091313s
15 : Statistics :: Grounding time = 0.042154s, Solving time = 0.075554s, Total time = 0.117708s
16 : Statistics :: Grounding time = 0.077398s, Solving time = 0.139599s, Total time = 0.216997s
17 : Statistics :: Grounding time = 0.086810s, Solving time = 0.252251s, Total time = 0.339061s
18 : Statistics :: Grounding time = 0.088411s, Solving time = 0.109617s, Total time = 0.198029s

[18-02-2021_12-56-26] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.832475s, Solving time = 0.763594s, Total time = 1.639691s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-26] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[18-02-2021_12-56-26] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-26] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-56-26] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-56-26] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-56-26] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-56-26] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Instantiated.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Program building started.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Program building completed.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding base program parts.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.014290s.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving base program parts.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.002679s.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Incremental solving started.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.061658s.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.005834s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.043395s.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.004001s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.045207s.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.004132s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.046251s.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.007025s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.051525s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.007531s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.051033s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.008401s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.053557s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.009668s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.054729s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.010275s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.055933s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.010484s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.056093s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.010862s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.061142s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.013479s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.059738s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.018505s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.061324s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.021695s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.061266s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.023280s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.063848s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.028474s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.063595s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.036265s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Grounding completed in 0.066710s.

[18-02-2021_12-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving started.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Solving completed in 0.062611s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Incremental solving completed in 1.299696s because STOP_CON_REACHED.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.971295s, Solving time = 0.285202s, Total time = 1.299696s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #107 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061658s, Solving time = 0.005834s, Total time = 0.067492s
2 : Statistics :: Grounding time = 0.043395s, Solving time = 0.004001s, Total time = 0.047396s
3 : Statistics :: Grounding time = 0.045207s, Solving time = 0.004132s, Total time = 0.049339s
4 : Statistics :: Grounding time = 0.046251s, Solving time = 0.007025s, Total time = 0.053276s
5 : Statistics :: Grounding time = 0.051525s, Solving time = 0.007531s, Total time = 0.059056s
6 : Statistics :: Grounding time = 0.051033s, Solving time = 0.008401s, Total time = 0.059434s
7 : Statistics :: Grounding time = 0.053557s, Solving time = 0.009668s, Total time = 0.063226s
8 : Statistics :: Grounding time = 0.054729s, Solving time = 0.010275s, Total time = 0.065004s
9 : Statistics :: Grounding time = 0.055933s, Solving time = 0.010484s, Total time = 0.066417s
10 : Statistics :: Grounding time = 0.056093s, Solving time = 0.010862s, Total time = 0.066955s
11 : Statistics :: Grounding time = 0.061142s, Solving time = 0.013479s, Total time = 0.074621s
12 : Statistics :: Grounding time = 0.059738s, Solving time = 0.018505s, Total time = 0.078243s
13 : Statistics :: Grounding time = 0.061324s, Solving time = 0.021695s, Total time = 0.083020s
14 : Statistics :: Grounding time = 0.061266s, Solving time = 0.023280s, Total time = 0.084546s
15 : Statistics :: Grounding time = 0.063848s, Solving time = 0.028474s, Total time = 0.092321s
16 : Statistics :: Grounding time = 0.063595s, Solving time = 0.036265s, Total time = 0.099860s
17 : Statistics :: Grounding time = 0.066710s, Solving time = 0.062611s, Total time = 0.129321s

[18-02-2021_12-56-28] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.971295s, Solving time = 0.285202s, Total time = 1.299696s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-56-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_1,retracted),5)
occurs(2,talos,configure(manipulator_arm_2,extended),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_1,(block,5)),17)

[18-02-2021_12-56-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-28] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-56-28] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-56-28] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-56-28] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-56-28] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Instantiated.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Program building started.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Program building completed.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding base program parts.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.017453s.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving base program parts.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.002769s.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Incremental solving started.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.183682s.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.008036s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.063449s.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.005694s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.062853s.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.006948s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.065791s.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.009943s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.067848s.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.011930s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.072243s.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.013382s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.073833s.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.014698s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.076469s.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.014704s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.076769s.

[18-02-2021_12-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.016790s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.082042s.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.022423s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.079942s.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.026459s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.080503s.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.026487s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Grounding completed in 0.087174s.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving started.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Solving completed in 0.030671s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Incremental solving completed in 1.342382s because STOP_CON_REACHED.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.090051s, Solving time = 0.210932s, Total time = 1.342382s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #108 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.183682s, Solving time = 0.008036s, Total time = 0.191717s
2 : Statistics :: Grounding time = 0.063449s, Solving time = 0.005694s, Total time = 0.069143s
3 : Statistics :: Grounding time = 0.062853s, Solving time = 0.006948s, Total time = 0.069801s
4 : Statistics :: Grounding time = 0.065791s, Solving time = 0.009943s, Total time = 0.075733s
5 : Statistics :: Grounding time = 0.067848s, Solving time = 0.011930s, Total time = 0.079778s
6 : Statistics :: Grounding time = 0.072243s, Solving time = 0.013382s, Total time = 0.085625s
7 : Statistics :: Grounding time = 0.073833s, Solving time = 0.014698s, Total time = 0.088531s
8 : Statistics :: Grounding time = 0.076469s, Solving time = 0.014704s, Total time = 0.091173s
9 : Statistics :: Grounding time = 0.076769s, Solving time = 0.016790s, Total time = 0.093558s
10 : Statistics :: Grounding time = 0.082042s, Solving time = 0.022423s, Total time = 0.104465s
11 : Statistics :: Grounding time = 0.079942s, Solving time = 0.026459s, Total time = 0.106402s
12 : Statistics :: Grounding time = 0.080503s, Solving time = 0.026487s, Total time = 0.106990s
13 : Statistics :: Grounding time = 0.087174s, Solving time = 0.030671s, Total time = 0.117845s

[18-02-2021_12-56-29] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.090051s, Solving time = 0.210932s, Total time = 1.342382s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-29] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)

[18-02-2021_12-56-29] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.639691s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.299696s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.342382s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-56-29] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-56-29] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-56-29] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-29] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-56-29] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-56-29] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-56-29] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-56-29] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Instantiated.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Program building started.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Program building completed.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding base program parts.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.019736s.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving base program parts.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.003510s.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Incremental solving started.

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-56-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.289054s.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.019475s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.066904s.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.006190s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.067699s.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.007968s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.070854s.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.008902s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.071519s.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.011605s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.074219s.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.013138s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.076307s.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.014834s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.078339s.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.015439s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.079227s.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.016207s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.082494s.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.017866s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-56-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.083817s.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.023332s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.085836s.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.024184s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.086256s.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.028385s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Grounding completed in 0.087319s.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving started.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Solving completed in 0.044497s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Incremental solving completed in 1.625701s because STOP_CON_REACHED.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.319580s, Solving time = 0.255532s, Total time = 1.625701s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #109 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.289054s, Solving time = 0.019475s, Total time = 0.308529s
2 : Statistics :: Grounding time = 0.066904s, Solving time = 0.006190s, Total time = 0.073094s
3 : Statistics :: Grounding time = 0.067699s, Solving time = 0.007968s, Total time = 0.075667s
4 : Statistics :: Grounding time = 0.070854s, Solving time = 0.008902s, Total time = 0.079756s
5 : Statistics :: Grounding time = 0.071519s, Solving time = 0.011605s, Total time = 0.083124s
6 : Statistics :: Grounding time = 0.074219s, Solving time = 0.013138s, Total time = 0.087357s
7 : Statistics :: Grounding time = 0.076307s, Solving time = 0.014834s, Total time = 0.091140s
8 : Statistics :: Grounding time = 0.078339s, Solving time = 0.015439s, Total time = 0.093779s
9 : Statistics :: Grounding time = 0.079227s, Solving time = 0.016207s, Total time = 0.095434s
10 : Statistics :: Grounding time = 0.082494s, Solving time = 0.017866s, Total time = 0.100360s
11 : Statistics :: Grounding time = 0.083817s, Solving time = 0.023332s, Total time = 0.107149s
12 : Statistics :: Grounding time = 0.085836s, Solving time = 0.024184s, Total time = 0.110020s
13 : Statistics :: Grounding time = 0.086256s, Solving time = 0.028385s, Total time = 0.114641s
14 : Statistics :: Grounding time = 0.087319s, Solving time = 0.044497s, Total time = 0.131815s

[18-02-2021_12-56-31] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.319580s, Solving time = 0.255532s, Total time = 1.625701s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-56-31] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)

[18-02-2021_12-56-31] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.625701s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-56-31] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-56-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-56-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-31] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-56-31] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-56-31] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-56-31] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-56-31] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Instantiated.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Program building started.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Program building completed.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding base program parts.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.019052s.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving base program parts.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.002982s.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Incremental solving started.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.110855s.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.014125s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.050901s.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.006013s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.055734s.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.008002s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.055297s.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.009460s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.057091s.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.010249s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.058605s.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.010321s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.065325s.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.010899s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.060373s.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.011262s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Grounding completed in 0.062872s.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving started.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Model found:
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Solving completed in 0.015135s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Incremental solving completed in 0.713623s because STOP_CON_REACHED.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.596103s, Solving time = 0.098448s, Total time = 0.713623s
Final Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #110 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.110855s, Solving time = 0.014125s, Total time = 0.124980s
2 : Statistics :: Grounding time = 0.050901s, Solving time = 0.006013s, Total time = 0.056914s
3 : Statistics :: Grounding time = 0.055734s, Solving time = 0.008002s, Total time = 0.063736s
4 : Statistics :: Grounding time = 0.055297s, Solving time = 0.009460s, Total time = 0.064757s
5 : Statistics :: Grounding time = 0.057091s, Solving time = 0.010249s, Total time = 0.067339s
6 : Statistics :: Grounding time = 0.058605s, Solving time = 0.010321s, Total time = 0.068925s
7 : Statistics :: Grounding time = 0.065325s, Solving time = 0.010899s, Total time = 0.076224s
8 : Statistics :: Grounding time = 0.060373s, Solving time = 0.011262s, Total time = 0.071634s
9 : Statistics :: Grounding time = 0.062872s, Solving time = 0.015135s, Total time = 0.078008s

[18-02-2021_12-56-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.596103s, Solving time = 0.098448s, Total time = 0.713623s
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-56-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_1,retracted),5)
occurs(2,talos,configure(manipulator_arm_2,extended),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_1,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),18)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[18-02-2021_12-56-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-32] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-56-32] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-56-32] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-56-32] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-56-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Instantiated.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Program building started.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Program building completed.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding base program parts.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding completed in 0.024179s.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving base program parts.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving completed in 0.003672s.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Incremental solving started.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding completed in 0.340732s.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving started.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving completed in 0.035799s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding completed in 0.072783s.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving started.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving completed in 0.007783s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding completed in 0.071588s.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving started.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving completed in 0.010855s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding completed in 0.076669s.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving started.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving completed in 0.013787s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Grounding completed in 0.077425s.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving started.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Solving completed in 0.016630s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Incremental solving completed in 0.765893s because STOP_CON_REACHED.

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.663376s, Solving time = 0.088526s, Total time = 0.765893s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #111 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.340732s, Solving time = 0.035799s, Total time = 0.376531s
2 : Statistics :: Grounding time = 0.072783s, Solving time = 0.007783s, Total time = 0.080566s
3 : Statistics :: Grounding time = 0.071588s, Solving time = 0.010855s, Total time = 0.082443s
4 : Statistics :: Grounding time = 0.076669s, Solving time = 0.013787s, Total time = 0.090455s
5 : Statistics :: Grounding time = 0.077425s, Solving time = 0.016630s, Total time = 0.094055s

[18-02-2021_12-56-33] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.663376s, Solving time = 0.088526s, Total time = 0.765893s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-33] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),29)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)

[18-02-2021_12-56-33] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.713623s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.765893s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-56-33] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-56-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-56-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-33] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-56-33] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-56-33] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-56-33] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-56-33] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Instantiated.

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Program building started.

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Program building completed.

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding base program parts.

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.025200s.

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving base program parts.

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.003529s.

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Incremental solving started.

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.402661s.

[18-02-2021_12-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.041721s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.073185s.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.008304s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.077480s.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.012418s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.080217s.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.015620s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.085680s.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.016239s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.083391s.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.016436s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.087203s.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.021411s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.089766s.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.022132s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.089190s.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.026192s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.092056s.

[18-02-2021_12-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.040399s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Grounding completed in 0.097319s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Model found:
Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Solving completed in 0.047300s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Incremental solving completed in 1.601034s because STOP_CON_REACHED.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.283348s, Solving time = 0.271700s, Total time = 1.601034s
Final Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #112 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.402661s, Solving time = 0.041721s, Total time = 0.444382s
2 : Statistics :: Grounding time = 0.073185s, Solving time = 0.008304s, Total time = 0.081489s
3 : Statistics :: Grounding time = 0.077480s, Solving time = 0.012418s, Total time = 0.089898s
4 : Statistics :: Grounding time = 0.080217s, Solving time = 0.015620s, Total time = 0.095837s
5 : Statistics :: Grounding time = 0.085680s, Solving time = 0.016239s, Total time = 0.101919s
6 : Statistics :: Grounding time = 0.083391s, Solving time = 0.016436s, Total time = 0.099827s
7 : Statistics :: Grounding time = 0.087203s, Solving time = 0.021411s, Total time = 0.108613s
8 : Statistics :: Grounding time = 0.089766s, Solving time = 0.022132s, Total time = 0.111897s
9 : Statistics :: Grounding time = 0.089190s, Solving time = 0.026192s, Total time = 0.115382s
10 : Statistics :: Grounding time = 0.092056s, Solving time = 0.040399s, Total time = 0.132455s
11 : Statistics :: Grounding time = 0.097319s, Solving time = 0.047300s, Total time = 0.144618s

[18-02-2021_12-56-36] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.283348s, Solving time = 0.271700s, Total time = 1.601034s
Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),29)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),34)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),35)
occurs(1,talos,release(manipulator_end_2,(block,3)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),38)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),39)
occurs(1,talos,release(manipulator_end_2,(block,2)),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),41)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),42)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),43)

[18-02-2021_12-56-36] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.601034s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[18-02-2021_12-56-36] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-56-36] INFO :: Experiment >> 

      ================================================      
           Experimental run 14 : Time 11.287981s            
      ================================================      

[18-02-2021_12-56-36] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-56-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-56-36] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-56-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-56-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-36] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Instantiated.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Program building started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Program building completed.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding base program parts.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.014532s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving base program parts.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.001845s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Incremental solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.039527s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.004801s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.030847s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.002816s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.032889s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.004033s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.037793s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.005088s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.039572s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.005695s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.044905s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.006424s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.040256s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.006886s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.040074s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.008732s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.042642s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.010408s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.043160s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.011736s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.040042s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.014207s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.040788s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.021163s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.040258s.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.030559s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.043469s.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.049870s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.042217s.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.067180s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.076724s.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.106515s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.081687s.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.221173s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Grounding completed in 0.082199s.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving started.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Solving completed in 0.057219s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Incremental solving completed in 1.534289s because STOP_CON_REACHED.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.853581s, Solving time = 0.636350s, Total time = 1.534289s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #113 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039527s, Solving time = 0.004801s, Total time = 0.044328s
2 : Statistics :: Grounding time = 0.030847s, Solving time = 0.002816s, Total time = 0.033663s
3 : Statistics :: Grounding time = 0.032889s, Solving time = 0.004033s, Total time = 0.036922s
4 : Statistics :: Grounding time = 0.037793s, Solving time = 0.005088s, Total time = 0.042881s
5 : Statistics :: Grounding time = 0.039572s, Solving time = 0.005695s, Total time = 0.045267s
6 : Statistics :: Grounding time = 0.044905s, Solving time = 0.006424s, Total time = 0.051328s
7 : Statistics :: Grounding time = 0.040256s, Solving time = 0.006886s, Total time = 0.047142s
8 : Statistics :: Grounding time = 0.040074s, Solving time = 0.008732s, Total time = 0.048806s
9 : Statistics :: Grounding time = 0.042642s, Solving time = 0.010408s, Total time = 0.053050s
10 : Statistics :: Grounding time = 0.043160s, Solving time = 0.011736s, Total time = 0.054896s
11 : Statistics :: Grounding time = 0.040042s, Solving time = 0.014207s, Total time = 0.054249s
12 : Statistics :: Grounding time = 0.040788s, Solving time = 0.021163s, Total time = 0.061951s
13 : Statistics :: Grounding time = 0.040258s, Solving time = 0.030559s, Total time = 0.070817s
14 : Statistics :: Grounding time = 0.043469s, Solving time = 0.049870s, Total time = 0.093339s
15 : Statistics :: Grounding time = 0.042217s, Solving time = 0.067180s, Total time = 0.109398s
16 : Statistics :: Grounding time = 0.076724s, Solving time = 0.106515s, Total time = 0.183238s
17 : Statistics :: Grounding time = 0.081687s, Solving time = 0.221173s, Total time = 0.302860s
18 : Statistics :: Grounding time = 0.082199s, Solving time = 0.057219s, Total time = 0.139418s

[18-02-2021_12-56-37] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.853581s, Solving time = 0.636350s, Total time = 1.534289s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-56-37] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),10)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[18-02-2021_12-56-37] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-37] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-56-37] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-56-37] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-56-37] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-56-37] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Instantiated.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Program building started.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Program building completed.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding base program parts.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.014170s.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving base program parts.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.002205s.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Incremental solving started.

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.061315s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.005187s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.061506s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.006488s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.046393s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.005088s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.045096s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.006939s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.053343s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.007983s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.052074s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.008422s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.054781s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.009935s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.053162s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.009959s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.055568s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.010700s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.056962s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.011104s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.058406s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.013984s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.059117s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.019141s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.060969s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.018082s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.061847s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.022830s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.064714s.

[18-02-2021_12-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.027653s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.063809s.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.036560s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Grounding completed in 0.067789s.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving started.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Solving completed in 0.049262s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Incremental solving completed in 1.306997s because STOP_CON_REACHED.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.991021s, Solving time = 0.271522s, Total time = 1.306997s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #114 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061315s, Solving time = 0.005187s, Total time = 0.066502s
2 : Statistics :: Grounding time = 0.061506s, Solving time = 0.006488s, Total time = 0.067994s
3 : Statistics :: Grounding time = 0.046393s, Solving time = 0.005088s, Total time = 0.051481s
4 : Statistics :: Grounding time = 0.045096s, Solving time = 0.006939s, Total time = 0.052035s
5 : Statistics :: Grounding time = 0.053343s, Solving time = 0.007983s, Total time = 0.061325s
6 : Statistics :: Grounding time = 0.052074s, Solving time = 0.008422s, Total time = 0.060496s
7 : Statistics :: Grounding time = 0.054781s, Solving time = 0.009935s, Total time = 0.064716s
8 : Statistics :: Grounding time = 0.053162s, Solving time = 0.009959s, Total time = 0.063122s
9 : Statistics :: Grounding time = 0.055568s, Solving time = 0.010700s, Total time = 0.066269s
10 : Statistics :: Grounding time = 0.056962s, Solving time = 0.011104s, Total time = 0.068066s
11 : Statistics :: Grounding time = 0.058406s, Solving time = 0.013984s, Total time = 0.072391s
12 : Statistics :: Grounding time = 0.059117s, Solving time = 0.019141s, Total time = 0.078258s
13 : Statistics :: Grounding time = 0.060969s, Solving time = 0.018082s, Total time = 0.079051s
14 : Statistics :: Grounding time = 0.061847s, Solving time = 0.022830s, Total time = 0.084677s
15 : Statistics :: Grounding time = 0.064714s, Solving time = 0.027653s, Total time = 0.092367s
16 : Statistics :: Grounding time = 0.063809s, Solving time = 0.036560s, Total time = 0.100369s
17 : Statistics :: Grounding time = 0.067789s, Solving time = 0.049262s, Total time = 0.117050s

[18-02-2021_12-56-39] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.991021s, Solving time = 0.271522s, Total time = 1.306997s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-56-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,configure(manipulator_arm_1,retracted),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),15)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)

[18-02-2021_12-56-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-39] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-56-39] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-56-39] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-56-39] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-56-39] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Instantiated.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Program building started.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Program building completed.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding base program parts.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.016324s.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving base program parts.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.002840s.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Incremental solving started.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.194007s.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.008939s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.062766s.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.005056s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.064594s.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.006921s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.067602s.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.010288s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.068133s.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.011943s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.071535s.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.012933s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.078661s.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.014495s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.077240s.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.015365s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.078260s.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.017048s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.089156s.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.020980s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.080902s.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.027143s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.081029s.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.028246s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Grounding completed in 0.084156s.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving started.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Solving completed in 0.025545s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Incremental solving completed in 1.364799s because STOP_CON_REACHED.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.114366s, Solving time = 0.207742s, Total time = 1.364799s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #115 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.194007s, Solving time = 0.008939s, Total time = 0.202946s
2 : Statistics :: Grounding time = 0.062766s, Solving time = 0.005056s, Total time = 0.067822s
3 : Statistics :: Grounding time = 0.064594s, Solving time = 0.006921s, Total time = 0.071515s
4 : Statistics :: Grounding time = 0.067602s, Solving time = 0.010288s, Total time = 0.077890s
5 : Statistics :: Grounding time = 0.068133s, Solving time = 0.011943s, Total time = 0.080076s
6 : Statistics :: Grounding time = 0.071535s, Solving time = 0.012933s, Total time = 0.084468s
7 : Statistics :: Grounding time = 0.078661s, Solving time = 0.014495s, Total time = 0.093156s
8 : Statistics :: Grounding time = 0.077240s, Solving time = 0.015365s, Total time = 0.092605s
9 : Statistics :: Grounding time = 0.078260s, Solving time = 0.017048s, Total time = 0.095307s
10 : Statistics :: Grounding time = 0.089156s, Solving time = 0.020980s, Total time = 0.110136s
11 : Statistics :: Grounding time = 0.080902s, Solving time = 0.027143s, Total time = 0.108045s
12 : Statistics :: Grounding time = 0.081029s, Solving time = 0.028246s, Total time = 0.109275s
13 : Statistics :: Grounding time = 0.084156s, Solving time = 0.025545s, Total time = 0.109701s

[18-02-2021_12-56-40] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.114366s, Solving time = 0.207742s, Total time = 1.364799s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-56-40] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)

[18-02-2021_12-56-40] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.534289s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.306997s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.364799s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-56-40] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-56-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-56-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-40] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-56-40] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-56-40] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-56-40] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-56-40] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Instantiated.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Program building started.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Program building completed.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding base program parts.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.020201s.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving base program parts.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.003717s.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Incremental solving started.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.260525s.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.019524s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.067532s.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.006437s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.068762s.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.008373s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.071150s.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.009497s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.073343s.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.011793s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.074348s.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.014856s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.076128s.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.014629s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.078791s.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.015915s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.079412s.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.017044s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.082560s.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.018356s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.084409s.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.024438s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.085424s.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.024034s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.087040s.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.028630s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Grounding completed in 0.087943s.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving started.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Model found:
Model :: Total atoms = 7107, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Solving completed in 0.043137s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Incremental solving completed in 1.605632s because STOP_CON_REACHED.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.297567s, Solving time = 0.260380s, Total time = 1.605632s
Final Model :: Total atoms = 7107, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #116 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.260525s, Solving time = 0.019524s, Total time = 0.280049s
2 : Statistics :: Grounding time = 0.067532s, Solving time = 0.006437s, Total time = 0.073969s
3 : Statistics :: Grounding time = 0.068762s, Solving time = 0.008373s, Total time = 0.077135s
4 : Statistics :: Grounding time = 0.071150s, Solving time = 0.009497s, Total time = 0.080647s
5 : Statistics :: Grounding time = 0.073343s, Solving time = 0.011793s, Total time = 0.085136s
6 : Statistics :: Grounding time = 0.074348s, Solving time = 0.014856s, Total time = 0.089204s
7 : Statistics :: Grounding time = 0.076128s, Solving time = 0.014629s, Total time = 0.090756s
8 : Statistics :: Grounding time = 0.078791s, Solving time = 0.015915s, Total time = 0.094706s
9 : Statistics :: Grounding time = 0.079412s, Solving time = 0.017044s, Total time = 0.096456s
10 : Statistics :: Grounding time = 0.082560s, Solving time = 0.018356s, Total time = 0.100916s
11 : Statistics :: Grounding time = 0.084409s, Solving time = 0.024438s, Total time = 0.108848s
12 : Statistics :: Grounding time = 0.085424s, Solving time = 0.024034s, Total time = 0.109458s
13 : Statistics :: Grounding time = 0.087040s, Solving time = 0.028630s, Total time = 0.115670s
14 : Statistics :: Grounding time = 0.087943s, Solving time = 0.043137s, Total time = 0.131080s

[18-02-2021_12-56-42] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.297567s, Solving time = 0.260380s, Total time = 1.605632s
Model :: Total atoms = 7107, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-42] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)

[18-02-2021_12-56-42] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.605632s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-56-42] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-56-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-56-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-42] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-56-42] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-56-42] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-56-42] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-56-42] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Instantiated.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Program building started.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Program building completed.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding base program parts.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.018963s.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving base program parts.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.002900s.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Incremental solving started.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.111167s.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.014708s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.050594s.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.006089s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.053553s.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.007895s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.056366s.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.009558s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.056394s.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.010111s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.059512s.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.010411s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.058853s.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.010805s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.062151s.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.011987s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Grounding completed in 0.061751s.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving started.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Model found:
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Solving completed in 0.014156s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Incremental solving completed in 0.706471s because STOP_CON_REACHED.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.589304s, Solving time = 0.098618s, Total time = 0.706471s
Final Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #117 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.111167s, Solving time = 0.014708s, Total time = 0.125874s
2 : Statistics :: Grounding time = 0.050594s, Solving time = 0.006089s, Total time = 0.056683s
3 : Statistics :: Grounding time = 0.053553s, Solving time = 0.007895s, Total time = 0.061448s
4 : Statistics :: Grounding time = 0.056366s, Solving time = 0.009558s, Total time = 0.065924s
5 : Statistics :: Grounding time = 0.056394s, Solving time = 0.010111s, Total time = 0.066505s
6 : Statistics :: Grounding time = 0.059512s, Solving time = 0.010411s, Total time = 0.069923s
7 : Statistics :: Grounding time = 0.058853s, Solving time = 0.010805s, Total time = 0.069659s
8 : Statistics :: Grounding time = 0.062151s, Solving time = 0.011987s, Total time = 0.074138s
9 : Statistics :: Grounding time = 0.061751s, Solving time = 0.014156s, Total time = 0.075907s

[18-02-2021_12-56-43] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.589304s, Solving time = 0.098618s, Total time = 0.706471s
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-56-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,configure(manipulator_arm_1,retracted),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),15)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),18)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[18-02-2021_12-56-43] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-43] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-56-43] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-56-43] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-56-43] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-56-43] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Instantiated.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Program building started.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Program building completed.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding base program parts.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding completed in 0.025780s.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving base program parts.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving completed in 0.003303s.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Incremental solving started.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding completed in 0.346123s.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving started.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving completed in 0.036022s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding completed in 0.071684s.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving started.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving completed in 0.007593s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding completed in 0.071824s.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving started.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving completed in 0.011097s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding completed in 0.077598s.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving started.

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving completed in 0.013329s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Grounding completed in 0.077468s.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving started.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Solving completed in 0.016540s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Incremental solving completed in 0.772115s because STOP_CON_REACHED.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.670477s, Solving time = 0.087884s, Total time = 0.772115s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #118 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.346123s, Solving time = 0.036022s, Total time = 0.382145s
2 : Statistics :: Grounding time = 0.071684s, Solving time = 0.007593s, Total time = 0.079277s
3 : Statistics :: Grounding time = 0.071824s, Solving time = 0.011097s, Total time = 0.082921s
4 : Statistics :: Grounding time = 0.077598s, Solving time = 0.013329s, Total time = 0.090928s
5 : Statistics :: Grounding time = 0.077468s, Solving time = 0.016540s, Total time = 0.094008s

[18-02-2021_12-56-45] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.670477s, Solving time = 0.087884s, Total time = 0.772115s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-56-45] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),29)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)

[18-02-2021_12-56-45] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.706471s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.772115s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-56-45] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-56-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-56-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-56-45] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-56-45] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-56-45] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-56-45] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-56-45] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Instantiated.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Program building started.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Program building completed.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding base program parts.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.025378s.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving base program parts.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.003772s.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Incremental solving started.

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.421194s.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.042370s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.073454s.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.008253s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.076861s.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.012137s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.081160s.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.015071s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.085344s.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.015663s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.085415s.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.017016s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.085950s.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.020032s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.090180s.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.020789s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.091273s.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.024146s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.092758s.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.030186s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.092754s.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.030404s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 32
End step max = None

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 32]), ('conformance_module', [44])].

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.097378s.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.040862s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 32
End step max = None

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 32]), ('conformance_module', [45])].

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.096103s.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.038698s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 32
End step max = None

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 32]), ('conformance_module', [46])].

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.098668s.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.048136s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 32
End step max = None

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 32]), ('conformance_module', [47])].

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.099304s.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.071894s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 32
End step max = None

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 32]), ('conformance_module', [48])].

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.102310s.

[18-02-2021_12-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.108106s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 32
End step max = None

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 32]), ('conformance_module', [49])].

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.109512s.

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.234664s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 32
End step max = None

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 32]), ('conformance_module', [50])].

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.106579s.

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.429807s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 32
End step max = None

[18-02-2021_12-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 32]), ('conformance_module', [51])].

[18-02-2021_12-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.103934s.

[18-02-2021_12-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 0.657296s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 32
End step max = None

[18-02-2021_12-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 32]), ('conformance_module', [52])].

[18-02-2021_12-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.106716s.

[18-02-2021_12-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 1.124905s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 32
End step max = None

[18-02-2021_12-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 32]), ('conformance_module', [53])].

[18-02-2021_12-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.107993s.

[18-02-2021_12-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 1.643351s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 32
End step max = None

[18-02-2021_12-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 32]), ('conformance_module', [54])].

[18-02-2021_12-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.116831s.

[18-02-2021_12-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 2.214080s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 32
End step max = None

[18-02-2021_12-56-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 32]), ('conformance_module', [55])].

[18-02-2021_12-56-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.111280s.

[18-02-2021_12-56-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 2.802624s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [24]:
Current step bound = 56
End step min = 32
End step max = None

[18-02-2021_12-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 32]), ('conformance_module', [56])].

[18-02-2021_12-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.113500s.

[18-02-2021_12-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 5.505122s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Beginning Incremental call [25]:
Current step bound = 57
End step min = 32
End step max = None

[18-02-2021_12-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 32]), ('conformance_module', [57])].

[18-02-2021_12-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Grounding completed in 0.130473s.

[18-02-2021_12-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving started.

[18-02-2021_12-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Model found:
Model :: Total atoms = 12502, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Solving completed in 1.043137s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Incremental solving completed in 19.218171s because STOP_CON_REACHED.

[18-02-2021_12-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.802304s, Solving time = 16.202520s, Total time = 19.218171s
Final Model :: Total atoms = 12502, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #119 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.421194s, Solving time = 0.042370s, Total time = 0.463564s
2 : Statistics :: Grounding time = 0.073454s, Solving time = 0.008253s, Total time = 0.081707s
3 : Statistics :: Grounding time = 0.076861s, Solving time = 0.012137s, Total time = 0.088998s
4 : Statistics :: Grounding time = 0.081160s, Solving time = 0.015071s, Total time = 0.096231s
5 : Statistics :: Grounding time = 0.085344s, Solving time = 0.015663s, Total time = 0.101006s
6 : Statistics :: Grounding time = 0.085415s, Solving time = 0.017016s, Total time = 0.102431s
7 : Statistics :: Grounding time = 0.085950s, Solving time = 0.020032s, Total time = 0.105982s
8 : Statistics :: Grounding time = 0.090180s, Solving time = 0.020789s, Total time = 0.110969s
9 : Statistics :: Grounding time = 0.091273s, Solving time = 0.024146s, Total time = 0.115419s
10 : Statistics :: Grounding time = 0.092758s, Solving time = 0.030186s, Total time = 0.122944s
11 : Statistics :: Grounding time = 0.092754s, Solving time = 0.030404s, Total time = 0.123158s
12 : Statistics :: Grounding time = 0.097378s, Solving time = 0.040862s, Total time = 0.138240s
13 : Statistics :: Grounding time = 0.096103s, Solving time = 0.038698s, Total time = 0.134802s
14 : Statistics :: Grounding time = 0.098668s, Solving time = 0.048136s, Total time = 0.146805s
15 : Statistics :: Grounding time = 0.099304s, Solving time = 0.071894s, Total time = 0.171198s
16 : Statistics :: Grounding time = 0.102310s, Solving time = 0.108106s, Total time = 0.210416s
17 : Statistics :: Grounding time = 0.109512s, Solving time = 0.234664s, Total time = 0.344176s
18 : Statistics :: Grounding time = 0.106579s, Solving time = 0.429807s, Total time = 0.536385s
19 : Statistics :: Grounding time = 0.103934s, Solving time = 0.657296s, Total time = 0.761230s
20 : Statistics :: Grounding time = 0.106716s, Solving time = 1.124905s, Total time = 1.231621s
21 : Statistics :: Grounding time = 0.107993s, Solving time = 1.643351s, Total time = 1.751344s
22 : Statistics :: Grounding time = 0.116831s, Solving time = 2.214080s, Total time = 2.330911s
23 : Statistics :: Grounding time = 0.111280s, Solving time = 2.802624s, Total time = 2.913905s
24 : Statistics :: Grounding time = 0.113500s, Solving time = 5.505122s, Total time = 5.618622s
25 : Statistics :: Grounding time = 0.130473s, Solving time = 1.043137s, Total time = 1.173610s

[18-02-2021_12-57-04] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.802304s, Solving time = 16.202520s, Total time = 19.218171s
Model :: Total atoms = 12502, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-57-04] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),29)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),33)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,2)),34)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),35)
occurs(1,talos,release(manipulator_end_1,(block,4)),36)
occurs(1,talos,put(manipulator_end_2,(block,5),puzzle_room_table_right),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),38)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),39)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),40)
occurs(1,talos,release(manipulator_end_1,(block,6)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),43)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),44)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),45)
occurs(1,talos,release(manipulator_end_2,(block,5)),46)
occurs(1,talos,release(manipulator_end_1,(block,3)),47)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),48)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),50)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),51)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),52)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),53)
occurs(1,talos,release(manipulator_end_2,(block,2)),54)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),55)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),56)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),57)

[18-02-2021_12-57-05] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    19.218171s : Steps =    57 : Actions =    57 |  
  ====================================================================  

[18-02-2021_12-57-05] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-57-05] INFO :: Experiment >> 

      ================================================      
           Experimental run 15 : Time 28.816103s            
      ================================================      

[18-02-2021_12-57-05] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-57-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-57-05] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-57-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-57-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-05] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Instantiated.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Program building started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Program building completed.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding base program parts.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.017634s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving base program parts.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.001769s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Incremental solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.040299s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.005312s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.031488s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.003272s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.032262s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.003851s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.035301s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.005140s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.038235s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.005273s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.037077s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.006048s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.038273s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.006577s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.038392s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.008135s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.041258s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.011030s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.044392s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.010866s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.039348s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.014814s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.040478s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.016261s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.041106s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.025738s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.041900s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.041373s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.042609s.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.064508s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.078797s.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.107544s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.081491s.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.150109s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Grounding completed in 0.083055s.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving started.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Solving completed in 0.092523s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Incremental solving completed in 1.466019s because STOP_CON_REACHED.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.843395s, Solving time = 0.580144s, Total time = 1.466019s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #120 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040299s, Solving time = 0.005312s, Total time = 0.045611s
2 : Statistics :: Grounding time = 0.031488s, Solving time = 0.003272s, Total time = 0.034760s
3 : Statistics :: Grounding time = 0.032262s, Solving time = 0.003851s, Total time = 0.036113s
4 : Statistics :: Grounding time = 0.035301s, Solving time = 0.005140s, Total time = 0.040440s
5 : Statistics :: Grounding time = 0.038235s, Solving time = 0.005273s, Total time = 0.043508s
6 : Statistics :: Grounding time = 0.037077s, Solving time = 0.006048s, Total time = 0.043125s
7 : Statistics :: Grounding time = 0.038273s, Solving time = 0.006577s, Total time = 0.044850s
8 : Statistics :: Grounding time = 0.038392s, Solving time = 0.008135s, Total time = 0.046527s
9 : Statistics :: Grounding time = 0.041258s, Solving time = 0.011030s, Total time = 0.052288s
10 : Statistics :: Grounding time = 0.044392s, Solving time = 0.010866s, Total time = 0.055259s
11 : Statistics :: Grounding time = 0.039348s, Solving time = 0.014814s, Total time = 0.054162s
12 : Statistics :: Grounding time = 0.040478s, Solving time = 0.016261s, Total time = 0.056740s
13 : Statistics :: Grounding time = 0.041106s, Solving time = 0.025738s, Total time = 0.066844s
14 : Statistics :: Grounding time = 0.041900s, Solving time = 0.041373s, Total time = 0.083273s
15 : Statistics :: Grounding time = 0.042609s, Solving time = 0.064508s, Total time = 0.107118s
16 : Statistics :: Grounding time = 0.078797s, Solving time = 0.107544s, Total time = 0.186341s
17 : Statistics :: Grounding time = 0.081491s, Solving time = 0.150109s, Total time = 0.231600s
18 : Statistics :: Grounding time = 0.083055s, Solving time = 0.092523s, Total time = 0.175578s

[18-02-2021_12-57-06] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.843395s, Solving time = 0.580144s, Total time = 1.466019s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-06] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[18-02-2021_12-57-06] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-06] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-57-06] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-57-06] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-57-06] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-57-06] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Instantiated.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Program building started.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Program building completed.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding base program parts.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.014081s.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving base program parts.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.002100s.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Incremental solving started.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.061463s.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.005651s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.043076s.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.003494s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.045877s.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.005094s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.044086s.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.006718s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.049639s.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.008764s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.051340s.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.009093s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.052746s.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.009846s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.076771s.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.009678s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.056361s.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.011133s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.056070s.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.010974s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.075346s.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.013644s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.060578s.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.018701s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.061069s.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.020045s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.061011s.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.020093s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.064194s.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.032427s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.071253s.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.037503s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Grounding completed in 0.065803s.

[18-02-2021_12-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving started.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Solving completed in 0.080049s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Incremental solving completed in 1.359303s because STOP_CON_REACHED.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.010764s, Solving time = 0.305006s, Total time = 1.359303s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #121 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061463s, Solving time = 0.005651s, Total time = 0.067114s
2 : Statistics :: Grounding time = 0.043076s, Solving time = 0.003494s, Total time = 0.046570s
3 : Statistics :: Grounding time = 0.045877s, Solving time = 0.005094s, Total time = 0.050970s
4 : Statistics :: Grounding time = 0.044086s, Solving time = 0.006718s, Total time = 0.050804s
5 : Statistics :: Grounding time = 0.049639s, Solving time = 0.008764s, Total time = 0.058403s
6 : Statistics :: Grounding time = 0.051340s, Solving time = 0.009093s, Total time = 0.060433s
7 : Statistics :: Grounding time = 0.052746s, Solving time = 0.009846s, Total time = 0.062592s
8 : Statistics :: Grounding time = 0.076771s, Solving time = 0.009678s, Total time = 0.086449s
9 : Statistics :: Grounding time = 0.056361s, Solving time = 0.011133s, Total time = 0.067494s
10 : Statistics :: Grounding time = 0.056070s, Solving time = 0.010974s, Total time = 0.067044s
11 : Statistics :: Grounding time = 0.075346s, Solving time = 0.013644s, Total time = 0.088989s
12 : Statistics :: Grounding time = 0.060578s, Solving time = 0.018701s, Total time = 0.079279s
13 : Statistics :: Grounding time = 0.061069s, Solving time = 0.020045s, Total time = 0.081114s
14 : Statistics :: Grounding time = 0.061011s, Solving time = 0.020093s, Total time = 0.081104s
15 : Statistics :: Grounding time = 0.064194s, Solving time = 0.032427s, Total time = 0.096621s
16 : Statistics :: Grounding time = 0.071253s, Solving time = 0.037503s, Total time = 0.108755s
17 : Statistics :: Grounding time = 0.065803s, Solving time = 0.080049s, Total time = 0.145853s

[18-02-2021_12-57-08] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.010764s, Solving time = 0.305006s, Total time = 1.359303s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-57-08] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_2,retracted),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),15)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)

[18-02-2021_12-57-08] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-08] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-57-08] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-57-08] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-57-08] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-57-08] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Instantiated.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Program building started.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Program building completed.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding base program parts.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.016469s.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving base program parts.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.002859s.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Incremental solving started.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.183380s.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.009052s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.067710s.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.005652s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.064207s.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.007032s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.068129s.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.010230s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.087521s.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.012467s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.071314s.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.013188s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.079243s.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.014283s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.077365s.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.015080s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.080225s.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.019195s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.080324s.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.021072s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.080180s.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.023202s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.080503s.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.023538s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Grounding completed in 0.082891s.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving started.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Model found:
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Solving completed in 0.033692s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Incremental solving completed in 1.369835s because STOP_CON_REACHED.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.119458s, Solving time = 0.210543s, Total time = 1.369835s
Final Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #122 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.183380s, Solving time = 0.009052s, Total time = 0.192432s
2 : Statistics :: Grounding time = 0.067710s, Solving time = 0.005652s, Total time = 0.073362s
3 : Statistics :: Grounding time = 0.064207s, Solving time = 0.007032s, Total time = 0.071238s
4 : Statistics :: Grounding time = 0.068129s, Solving time = 0.010230s, Total time = 0.078358s
5 : Statistics :: Grounding time = 0.087521s, Solving time = 0.012467s, Total time = 0.099988s
6 : Statistics :: Grounding time = 0.071314s, Solving time = 0.013188s, Total time = 0.084502s
7 : Statistics :: Grounding time = 0.079243s, Solving time = 0.014283s, Total time = 0.093526s
8 : Statistics :: Grounding time = 0.077365s, Solving time = 0.015080s, Total time = 0.092445s
9 : Statistics :: Grounding time = 0.080225s, Solving time = 0.019195s, Total time = 0.099420s
10 : Statistics :: Grounding time = 0.080324s, Solving time = 0.021072s, Total time = 0.101396s
11 : Statistics :: Grounding time = 0.080180s, Solving time = 0.023202s, Total time = 0.103382s
12 : Statistics :: Grounding time = 0.080503s, Solving time = 0.023538s, Total time = 0.104041s
13 : Statistics :: Grounding time = 0.082891s, Solving time = 0.033692s, Total time = 0.116583s

[18-02-2021_12-57-09] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.119458s, Solving time = 0.210543s, Total time = 1.369835s
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-57-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)

[18-02-2021_12-57-09] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.466019s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.359303s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.369835s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-57-09] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-57-09] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-57-09] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-09] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-57-09] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-57-09] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-57-09] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-57-09] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Instantiated.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Program building started.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Program building completed.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding base program parts.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.019836s.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving base program parts.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.003670s.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Incremental solving started.

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.264066s.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.020793s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.067990s.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.006225s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.067812s.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.007504s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.071311s.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.008903s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.071638s.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.011992s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.075927s.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.014319s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.095908s.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.014667s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.078013s.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.015710s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.079280s.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.016358s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.081981s.

[18-02-2021_12-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.017506s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.087770s.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.020013s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.086313s.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.026071s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.087634s.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.028931s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Grounding completed in 0.088082s.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving started.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Model found:
Model :: Total atoms = 7107, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Solving completed in 0.042612s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Incremental solving completed in 1.626100s because STOP_CON_REACHED.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.323561s, Solving time = 0.255271s, Total time = 1.626100s
Final Model :: Total atoms = 7107, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #123 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.264066s, Solving time = 0.020793s, Total time = 0.284858s
2 : Statistics :: Grounding time = 0.067990s, Solving time = 0.006225s, Total time = 0.074215s
3 : Statistics :: Grounding time = 0.067812s, Solving time = 0.007504s, Total time = 0.075315s
4 : Statistics :: Grounding time = 0.071311s, Solving time = 0.008903s, Total time = 0.080214s
5 : Statistics :: Grounding time = 0.071638s, Solving time = 0.011992s, Total time = 0.083630s
6 : Statistics :: Grounding time = 0.075927s, Solving time = 0.014319s, Total time = 0.090246s
7 : Statistics :: Grounding time = 0.095908s, Solving time = 0.014667s, Total time = 0.110575s
8 : Statistics :: Grounding time = 0.078013s, Solving time = 0.015710s, Total time = 0.093723s
9 : Statistics :: Grounding time = 0.079280s, Solving time = 0.016358s, Total time = 0.095638s
10 : Statistics :: Grounding time = 0.081981s, Solving time = 0.017506s, Total time = 0.099487s
11 : Statistics :: Grounding time = 0.087770s, Solving time = 0.020013s, Total time = 0.107783s
12 : Statistics :: Grounding time = 0.086313s, Solving time = 0.026071s, Total time = 0.112384s
13 : Statistics :: Grounding time = 0.087634s, Solving time = 0.028931s, Total time = 0.116564s
14 : Statistics :: Grounding time = 0.088082s, Solving time = 0.042612s, Total time = 0.130693s

[18-02-2021_12-57-11] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.323561s, Solving time = 0.255271s, Total time = 1.626100s
Model :: Total atoms = 7107, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-11] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)

[18-02-2021_12-57-11] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.626100s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-57-11] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-57-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-57-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-11] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-57-11] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-57-11] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-57-11] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-57-11] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Instantiated.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Program building started.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Program building completed.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding base program parts.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.019622s.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving base program parts.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.003068s.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Incremental solving started.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.110498s.

[18-02-2021_12-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.014297s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.050605s.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.005908s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.058867s.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.007831s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.055784s.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.009576s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.056002s.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.009945s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.058425s.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.010359s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.059638s.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.011321s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.061047s.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.011574s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Grounding completed in 0.061865s.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving started.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Model found:
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Solving completed in 0.014497s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Incremental solving completed in 0.709196s because STOP_CON_REACHED.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.592352s, Solving time = 0.098376s, Total time = 0.709196s
Final Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #124 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.110498s, Solving time = 0.014297s, Total time = 0.124794s
2 : Statistics :: Grounding time = 0.050605s, Solving time = 0.005908s, Total time = 0.056514s
3 : Statistics :: Grounding time = 0.058867s, Solving time = 0.007831s, Total time = 0.066698s
4 : Statistics :: Grounding time = 0.055784s, Solving time = 0.009576s, Total time = 0.065360s
5 : Statistics :: Grounding time = 0.056002s, Solving time = 0.009945s, Total time = 0.065947s
6 : Statistics :: Grounding time = 0.058425s, Solving time = 0.010359s, Total time = 0.068783s
7 : Statistics :: Grounding time = 0.059638s, Solving time = 0.011321s, Total time = 0.070959s
8 : Statistics :: Grounding time = 0.061047s, Solving time = 0.011574s, Total time = 0.072622s
9 : Statistics :: Grounding time = 0.061865s, Solving time = 0.014497s, Total time = 0.076361s

[18-02-2021_12-57-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.592352s, Solving time = 0.098376s, Total time = 0.709196s
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_2,retracted),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),15)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),18)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[18-02-2021_12-57-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-12] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-57-12] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-57-12] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-57-12] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-57-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Instantiated.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Program building started.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Program building completed.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding base program parts.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding completed in 0.024088s.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving base program parts.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving completed in 0.003546s.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Incremental solving started.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding completed in 0.344247s.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving started.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving completed in 0.036897s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding completed in 0.075454s.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving started.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving completed in 0.007671s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding completed in 0.070799s.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving started.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving completed in 0.010444s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding completed in 0.076793s.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving started.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving completed in 0.013779s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Grounding completed in 0.078365s.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving started.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Solving completed in 0.017163s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Incremental solving completed in 0.773065s because STOP_CON_REACHED.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.669746s, Solving time = 0.089500s, Total time = 0.773065s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #125 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.344247s, Solving time = 0.036897s, Total time = 0.381144s
2 : Statistics :: Grounding time = 0.075454s, Solving time = 0.007671s, Total time = 0.083124s
3 : Statistics :: Grounding time = 0.070799s, Solving time = 0.010444s, Total time = 0.081243s
4 : Statistics :: Grounding time = 0.076793s, Solving time = 0.013779s, Total time = 0.090572s
5 : Statistics :: Grounding time = 0.078365s, Solving time = 0.017163s, Total time = 0.095528s

[18-02-2021_12-57-13] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.669746s, Solving time = 0.089500s, Total time = 0.773065s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-13] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)

[18-02-2021_12-57-13] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.709196s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.773065s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-57-13] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-57-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-57-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-13] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-57-13] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-57-13] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-57-13] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-57-13] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Instantiated.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Program building started.

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Program building completed.

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding base program parts.

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.025526s.

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving base program parts.

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.003673s.

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Incremental solving started.

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.371913s.

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.044260s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.074027s.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.008324s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.077084s.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.011400s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.080499s.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.015554s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.083097s.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.016019s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.091149s.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.016230s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.086448s.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.021274s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.086021s.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.021051s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.088823s.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.026598s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.092336s.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.036470s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Grounding completed in 0.093432s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Model found:
Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Solving completed in 0.041975s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Incremental solving completed in 1.558753s because STOP_CON_REACHED.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.250354s, Solving time = 0.262827s, Total time = 1.558753s
Final Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #126 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.371913s, Solving time = 0.044260s, Total time = 0.416173s
2 : Statistics :: Grounding time = 0.074027s, Solving time = 0.008324s, Total time = 0.082352s
3 : Statistics :: Grounding time = 0.077084s, Solving time = 0.011400s, Total time = 0.088484s
4 : Statistics :: Grounding time = 0.080499s, Solving time = 0.015554s, Total time = 0.096052s
5 : Statistics :: Grounding time = 0.083097s, Solving time = 0.016019s, Total time = 0.099116s
6 : Statistics :: Grounding time = 0.091149s, Solving time = 0.016230s, Total time = 0.107379s
7 : Statistics :: Grounding time = 0.086448s, Solving time = 0.021274s, Total time = 0.107722s
8 : Statistics :: Grounding time = 0.086021s, Solving time = 0.021051s, Total time = 0.107071s
9 : Statistics :: Grounding time = 0.088823s, Solving time = 0.026598s, Total time = 0.115421s
10 : Statistics :: Grounding time = 0.092336s, Solving time = 0.036470s, Total time = 0.128806s
11 : Statistics :: Grounding time = 0.093432s, Solving time = 0.041975s, Total time = 0.135407s

[18-02-2021_12-57-16] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.250354s, Solving time = 0.262827s, Total time = 1.558753s
Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-16] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),34)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),35)
occurs(1,talos,release(manipulator_end_1,(block,3)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),38)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),39)
occurs(1,talos,release(manipulator_end_1,(block,2)),40)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),41)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),42)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),43)

[18-02-2021_12-57-16] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.558753s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[18-02-2021_12-57-16] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-57-16] INFO :: Experiment >> 

      ================================================      
           Experimental run 16 : Time 11.115656s            
      ================================================      

[18-02-2021_12-57-16] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-57-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-57-16] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-57-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-57-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-16] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Instantiated.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Program building started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Program building completed.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding base program parts.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.013791s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving base program parts.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.002975s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Incremental solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.039460s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.005626s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.030753s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.003502s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.031080s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.004639s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.037624s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.005621s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.035193s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.005505s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.036222s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.006822s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.037944s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.006393s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.038340s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.008418s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.038350s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.010906s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.039928s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.012387s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.038523s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.013608s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.040949s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.017548s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.040893s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.024623s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.042249s.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.038198s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.041355s.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.057402s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.078909s.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.133435s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.081290s.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.215575s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Grounding completed in 0.084028s.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving started.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Solving completed in 0.122996s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Incremental solving completed in 1.565444s because STOP_CON_REACHED.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.826881s, Solving time = 0.696179s, Total time = 1.565444s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #127 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039460s, Solving time = 0.005626s, Total time = 0.045086s
2 : Statistics :: Grounding time = 0.030753s, Solving time = 0.003502s, Total time = 0.034254s
3 : Statistics :: Grounding time = 0.031080s, Solving time = 0.004639s, Total time = 0.035719s
4 : Statistics :: Grounding time = 0.037624s, Solving time = 0.005621s, Total time = 0.043245s
5 : Statistics :: Grounding time = 0.035193s, Solving time = 0.005505s, Total time = 0.040698s
6 : Statistics :: Grounding time = 0.036222s, Solving time = 0.006822s, Total time = 0.043044s
7 : Statistics :: Grounding time = 0.037944s, Solving time = 0.006393s, Total time = 0.044337s
8 : Statistics :: Grounding time = 0.038340s, Solving time = 0.008418s, Total time = 0.046758s
9 : Statistics :: Grounding time = 0.038350s, Solving time = 0.010906s, Total time = 0.049256s
10 : Statistics :: Grounding time = 0.039928s, Solving time = 0.012387s, Total time = 0.052315s
11 : Statistics :: Grounding time = 0.038523s, Solving time = 0.013608s, Total time = 0.052131s
12 : Statistics :: Grounding time = 0.040949s, Solving time = 0.017548s, Total time = 0.058497s
13 : Statistics :: Grounding time = 0.040893s, Solving time = 0.024623s, Total time = 0.065517s
14 : Statistics :: Grounding time = 0.042249s, Solving time = 0.038198s, Total time = 0.080447s
15 : Statistics :: Grounding time = 0.041355s, Solving time = 0.057402s, Total time = 0.098757s
16 : Statistics :: Grounding time = 0.078909s, Solving time = 0.133435s, Total time = 0.212344s
17 : Statistics :: Grounding time = 0.081290s, Solving time = 0.215575s, Total time = 0.296865s
18 : Statistics :: Grounding time = 0.084028s, Solving time = 0.122996s, Total time = 0.207024s

[18-02-2021_12-57-17] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.826881s, Solving time = 0.696179s, Total time = 1.565444s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-57-17] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[18-02-2021_12-57-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-17] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-57-17] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-57-17] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-57-17] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-57-17] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Instantiated.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Program building started.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Program building completed.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding base program parts.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.015904s.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving base program parts.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.002622s.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Incremental solving started.

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.063350s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.005400s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.043289s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.004216s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.046830s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.005940s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.046205s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.006318s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.049474s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.007677s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.049889s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.008591s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.053520s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.009960s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.053153s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.009719s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.055483s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.010469s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.058302s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.010613s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.059186s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.013271s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.059752s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.016432s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.060986s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.018322s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.061051s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.022805s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.064227s.

[18-02-2021_12-57-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.028320s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.063891s.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.042186s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Grounding completed in 0.069853s.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving started.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Solving completed in 0.046402s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Incremental solving completed in 1.285307s because STOP_CON_REACHED.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.974343s, Solving time = 0.269264s, Total time = 1.285307s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #128 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.063350s, Solving time = 0.005400s, Total time = 0.068750s
2 : Statistics :: Grounding time = 0.043289s, Solving time = 0.004216s, Total time = 0.047505s
3 : Statistics :: Grounding time = 0.046830s, Solving time = 0.005940s, Total time = 0.052769s
4 : Statistics :: Grounding time = 0.046205s, Solving time = 0.006318s, Total time = 0.052523s
5 : Statistics :: Grounding time = 0.049474s, Solving time = 0.007677s, Total time = 0.057151s
6 : Statistics :: Grounding time = 0.049889s, Solving time = 0.008591s, Total time = 0.058480s
7 : Statistics :: Grounding time = 0.053520s, Solving time = 0.009960s, Total time = 0.063480s
8 : Statistics :: Grounding time = 0.053153s, Solving time = 0.009719s, Total time = 0.062872s
9 : Statistics :: Grounding time = 0.055483s, Solving time = 0.010469s, Total time = 0.065952s
10 : Statistics :: Grounding time = 0.058302s, Solving time = 0.010613s, Total time = 0.068915s
11 : Statistics :: Grounding time = 0.059186s, Solving time = 0.013271s, Total time = 0.072457s
12 : Statistics :: Grounding time = 0.059752s, Solving time = 0.016432s, Total time = 0.076184s
13 : Statistics :: Grounding time = 0.060986s, Solving time = 0.018322s, Total time = 0.079308s
14 : Statistics :: Grounding time = 0.061051s, Solving time = 0.022805s, Total time = 0.083856s
15 : Statistics :: Grounding time = 0.064227s, Solving time = 0.028320s, Total time = 0.092547s
16 : Statistics :: Grounding time = 0.063891s, Solving time = 0.042186s, Total time = 0.106077s
17 : Statistics :: Grounding time = 0.069853s, Solving time = 0.046402s, Total time = 0.116255s

[18-02-2021_12-57-19] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.974343s, Solving time = 0.269264s, Total time = 1.285307s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-57-19] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,configure(manipulator_arm_1,retracted),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_1,(block,5)),17)

[18-02-2021_12-57-19] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-19] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-57-19] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-57-19] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-57-19] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-57-19] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Instantiated.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Program building started.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Program building completed.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding base program parts.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.015989s.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving base program parts.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.002794s.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Incremental solving started.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.184178s.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.009070s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.062424s.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.005681s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.063232s.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.007144s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.065658s.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.009492s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.069475s.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.011805s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-57-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.071986s.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.013077s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.074614s.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.014376s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.080025s.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.015764s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.077709s.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.017284s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.078758s.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.021145s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.084404s.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.022220s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.087828s.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.029722s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Grounding completed in 0.090063s.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving started.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Solving completed in 0.031929s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Incremental solving completed in 1.356927s because STOP_CON_REACHED.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.106342s, Solving time = 0.211501s, Total time = 1.356927s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #129 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.184178s, Solving time = 0.009070s, Total time = 0.193248s
2 : Statistics :: Grounding time = 0.062424s, Solving time = 0.005681s, Total time = 0.068104s
3 : Statistics :: Grounding time = 0.063232s, Solving time = 0.007144s, Total time = 0.070376s
4 : Statistics :: Grounding time = 0.065658s, Solving time = 0.009492s, Total time = 0.075149s
5 : Statistics :: Grounding time = 0.069475s, Solving time = 0.011805s, Total time = 0.081280s
6 : Statistics :: Grounding time = 0.071986s, Solving time = 0.013077s, Total time = 0.085063s
7 : Statistics :: Grounding time = 0.074614s, Solving time = 0.014376s, Total time = 0.088990s
8 : Statistics :: Grounding time = 0.080025s, Solving time = 0.015764s, Total time = 0.095788s
9 : Statistics :: Grounding time = 0.077709s, Solving time = 0.017284s, Total time = 0.094994s
10 : Statistics :: Grounding time = 0.078758s, Solving time = 0.021145s, Total time = 0.099903s
11 : Statistics :: Grounding time = 0.084404s, Solving time = 0.022220s, Total time = 0.106624s
12 : Statistics :: Grounding time = 0.087828s, Solving time = 0.029722s, Total time = 0.117549s
13 : Statistics :: Grounding time = 0.090063s, Solving time = 0.031929s, Total time = 0.121992s

[18-02-2021_12-57-20] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.106342s, Solving time = 0.211501s, Total time = 1.356927s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-20] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)

[18-02-2021_12-57-20] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.565444s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.285307s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.356927s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-57-20] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-57-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-57-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-20] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-57-20] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-57-20] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-57-20] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-57-20] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Instantiated.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Program building started.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Program building completed.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding base program parts.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.019770s.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving base program parts.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.003176s.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Incremental solving started.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.274472s.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.019482s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.067846s.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.006523s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.068257s.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.008021s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.071951s.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.009221s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.096303s.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.013354s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.073176s.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.013270s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.079942s.

[18-02-2021_12-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.014391s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.085693s.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.015136s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.084724s.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.016782s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.086591s.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.018478s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.103697s.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.019872s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.091205s.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.024512s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.087062s.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.031984s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Grounding completed in 0.087263s.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving started.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Solving completed in 0.041921s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Incremental solving completed in 1.680501s because STOP_CON_REACHED.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.377952s, Solving time = 0.256124s, Total time = 1.680501s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #130 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.274472s, Solving time = 0.019482s, Total time = 0.293954s
2 : Statistics :: Grounding time = 0.067846s, Solving time = 0.006523s, Total time = 0.074370s
3 : Statistics :: Grounding time = 0.068257s, Solving time = 0.008021s, Total time = 0.076278s
4 : Statistics :: Grounding time = 0.071951s, Solving time = 0.009221s, Total time = 0.081172s
5 : Statistics :: Grounding time = 0.096303s, Solving time = 0.013354s, Total time = 0.109657s
6 : Statistics :: Grounding time = 0.073176s, Solving time = 0.013270s, Total time = 0.086446s
7 : Statistics :: Grounding time = 0.079942s, Solving time = 0.014391s, Total time = 0.094333s
8 : Statistics :: Grounding time = 0.085693s, Solving time = 0.015136s, Total time = 0.100830s
9 : Statistics :: Grounding time = 0.084724s, Solving time = 0.016782s, Total time = 0.101507s
10 : Statistics :: Grounding time = 0.086591s, Solving time = 0.018478s, Total time = 0.105068s
11 : Statistics :: Grounding time = 0.103697s, Solving time = 0.019872s, Total time = 0.123569s
12 : Statistics :: Grounding time = 0.091205s, Solving time = 0.024512s, Total time = 0.115717s
13 : Statistics :: Grounding time = 0.087062s, Solving time = 0.031984s, Total time = 0.119046s
14 : Statistics :: Grounding time = 0.087263s, Solving time = 0.041921s, Total time = 0.129184s

[18-02-2021_12-57-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.377952s, Solving time = 0.256124s, Total time = 1.680501s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)

[18-02-2021_12-57-22] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.680501s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-57-22] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-57-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-57-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-22] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-57-22] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-57-22] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-57-22] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-57-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Instantiated.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Program building started.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Program building completed.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding base program parts.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.019074s.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving base program parts.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.002843s.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Incremental solving started.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.110418s.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.015057s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.050885s.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.006187s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.054887s.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.007910s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.074930s.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.010227s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.059553s.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.010110s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.062275s.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.011253s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.059000s.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.011082s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.061900s.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.011703s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Grounding completed in 0.062708s.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving started.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Model found:
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Solving completed in 0.014516s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Incremental solving completed in 0.735133s because STOP_CON_REACHED.

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.615631s, Solving time = 0.100887s, Total time = 0.735133s
Final Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #131 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.110418s, Solving time = 0.015057s, Total time = 0.125474s
2 : Statistics :: Grounding time = 0.050885s, Solving time = 0.006187s, Total time = 0.057072s
3 : Statistics :: Grounding time = 0.054887s, Solving time = 0.007910s, Total time = 0.062798s
4 : Statistics :: Grounding time = 0.074930s, Solving time = 0.010227s, Total time = 0.085158s
5 : Statistics :: Grounding time = 0.059553s, Solving time = 0.010110s, Total time = 0.069663s
6 : Statistics :: Grounding time = 0.062275s, Solving time = 0.011253s, Total time = 0.073528s
7 : Statistics :: Grounding time = 0.059000s, Solving time = 0.011082s, Total time = 0.070081s
8 : Statistics :: Grounding time = 0.061900s, Solving time = 0.011703s, Total time = 0.073603s
9 : Statistics :: Grounding time = 0.062708s, Solving time = 0.014516s, Total time = 0.077224s

[18-02-2021_12-57-23] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.615631s, Solving time = 0.100887s, Total time = 0.735133s
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-23] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,configure(manipulator_arm_1,retracted),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_1,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),18)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[18-02-2021_12-57-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-24] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-57-24] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-57-24] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-57-24] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-57-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Instantiated.

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Program building started.

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Program building completed.

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding base program parts.

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding completed in 0.024603s.

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving base program parts.

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving completed in 0.003552s.

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Incremental solving started.

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding completed in 0.340193s.

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving started.

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving completed in 0.036176s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding completed in 0.072550s.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving started.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving completed in 0.007164s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding completed in 0.071535s.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving started.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving completed in 0.009878s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding completed in 0.081708s.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving started.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving completed in 0.013389s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Grounding completed in 0.080387s.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving started.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Solving completed in 0.016429s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Incremental solving completed in 0.772047s because STOP_CON_REACHED.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.670976s, Solving time = 0.086588s, Total time = 0.772047s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #132 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.340193s, Solving time = 0.036176s, Total time = 0.376369s
2 : Statistics :: Grounding time = 0.072550s, Solving time = 0.007164s, Total time = 0.079714s
3 : Statistics :: Grounding time = 0.071535s, Solving time = 0.009878s, Total time = 0.081412s
4 : Statistics :: Grounding time = 0.081708s, Solving time = 0.013389s, Total time = 0.095098s
5 : Statistics :: Grounding time = 0.080387s, Solving time = 0.016429s, Total time = 0.096816s

[18-02-2021_12-57-25] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.670976s, Solving time = 0.086588s, Total time = 0.772047s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),29)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)

[18-02-2021_12-57-25] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.735133s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.772047s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-57-25] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-57-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-57-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-25] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-57-25] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-57-25] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-57-25] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-57-25] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Instantiated.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Program building started.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Program building completed.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding base program parts.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.026306s.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving base program parts.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.002433s.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Incremental solving started.

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.382930s.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.043011s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.074036s.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.008312s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.073368s.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.010936s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.085215s.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.015106s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.083493s.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.016104s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.088542s.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.017761s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.085758s.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.021465s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.091410s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.022832s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.088994s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.026101s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.093086s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.041663s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Grounding completed in 0.092706s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Model found:
Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Solving completed in 0.041299s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Incremental solving completed in 1.578573s because STOP_CON_REACHED.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.265844s, Solving time = 0.267023s, Total time = 1.578573s
Final Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #133 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.382930s, Solving time = 0.043011s, Total time = 0.425940s
2 : Statistics :: Grounding time = 0.074036s, Solving time = 0.008312s, Total time = 0.082348s
3 : Statistics :: Grounding time = 0.073368s, Solving time = 0.010936s, Total time = 0.084303s
4 : Statistics :: Grounding time = 0.085215s, Solving time = 0.015106s, Total time = 0.100321s
5 : Statistics :: Grounding time = 0.083493s, Solving time = 0.016104s, Total time = 0.099597s
6 : Statistics :: Grounding time = 0.088542s, Solving time = 0.017761s, Total time = 0.106303s
7 : Statistics :: Grounding time = 0.085758s, Solving time = 0.021465s, Total time = 0.107223s
8 : Statistics :: Grounding time = 0.091410s, Solving time = 0.022832s, Total time = 0.114242s
9 : Statistics :: Grounding time = 0.088994s, Solving time = 0.026101s, Total time = 0.115095s
10 : Statistics :: Grounding time = 0.093086s, Solving time = 0.041663s, Total time = 0.134750s
11 : Statistics :: Grounding time = 0.092706s, Solving time = 0.041299s, Total time = 0.134005s

[18-02-2021_12-57-27] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.265844s, Solving time = 0.267023s, Total time = 1.578573s
Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-27] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),29)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),34)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),35)
occurs(1,talos,release(manipulator_end_2,(block,3)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),38)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),39)
occurs(1,talos,release(manipulator_end_2,(block,2)),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),41)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),42)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),43)

[18-02-2021_12-57-27] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.578573s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[18-02-2021_12-57-27] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-57-27] INFO :: Experiment >> 

      ================================================      
           Experimental run 17 : Time 11.431752s            
      ================================================      

[18-02-2021_12-57-27] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-57-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-57-27] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-57-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-57-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-27] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Instantiated.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Program building started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Program building completed.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding base program parts.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.013567s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving base program parts.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.002856s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Incremental solving started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.039297s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.005773s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.031284s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.003747s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.031165s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.004707s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.034055s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.005183s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.034831s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.005455s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.036092s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.006544s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.040553s.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.007222s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.037657s.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.008840s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.038278s.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.009239s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.040132s.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.010983s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.040072s.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.017387s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.041474s.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.023012s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.043673s.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.032546s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.041810s.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.051836s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.042650s.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.084823s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.078144s.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.124659s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.079543s.

[18-02-2021_12-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.207460s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Grounding completed in 0.084616s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Solving completed in 0.086604s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Incremental solving completed in 1.572331s because STOP_CON_REACHED.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.828893s, Solving time = 0.698878s, Total time = 1.572331s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #134 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039297s, Solving time = 0.005773s, Total time = 0.045070s
2 : Statistics :: Grounding time = 0.031284s, Solving time = 0.003747s, Total time = 0.035031s
3 : Statistics :: Grounding time = 0.031165s, Solving time = 0.004707s, Total time = 0.035872s
4 : Statistics :: Grounding time = 0.034055s, Solving time = 0.005183s, Total time = 0.039239s
5 : Statistics :: Grounding time = 0.034831s, Solving time = 0.005455s, Total time = 0.040286s
6 : Statistics :: Grounding time = 0.036092s, Solving time = 0.006544s, Total time = 0.042636s
7 : Statistics :: Grounding time = 0.040553s, Solving time = 0.007222s, Total time = 0.047775s
8 : Statistics :: Grounding time = 0.037657s, Solving time = 0.008840s, Total time = 0.046497s
9 : Statistics :: Grounding time = 0.038278s, Solving time = 0.009239s, Total time = 0.047517s
10 : Statistics :: Grounding time = 0.040132s, Solving time = 0.010983s, Total time = 0.051115s
11 : Statistics :: Grounding time = 0.040072s, Solving time = 0.017387s, Total time = 0.057460s
12 : Statistics :: Grounding time = 0.041474s, Solving time = 0.023012s, Total time = 0.064486s
13 : Statistics :: Grounding time = 0.043673s, Solving time = 0.032546s, Total time = 0.076219s
14 : Statistics :: Grounding time = 0.041810s, Solving time = 0.051836s, Total time = 0.093647s
15 : Statistics :: Grounding time = 0.042650s, Solving time = 0.084823s, Total time = 0.127473s
16 : Statistics :: Grounding time = 0.078144s, Solving time = 0.124659s, Total time = 0.202803s
17 : Statistics :: Grounding time = 0.079543s, Solving time = 0.207460s, Total time = 0.287003s
18 : Statistics :: Grounding time = 0.084616s, Solving time = 0.086604s, Total time = 0.171220s

[18-02-2021_12-57-29] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.828893s, Solving time = 0.698878s, Total time = 1.572331s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-57-29] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_1,(block,5)),8)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[18-02-2021_12-57-29] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-29] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-57-29] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-57-29] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-57-29] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-57-29] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Instantiated.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Program building started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Program building completed.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding base program parts.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.014389s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving base program parts.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.001903s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Incremental solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.062574s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.004999s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.043968s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.003599s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.064475s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.005115s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.048402s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.006987s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.048111s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.007823s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.048394s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.008756s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.053709s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.010045s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.054160s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.010132s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.055260s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.010513s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.056817s.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.010919s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.058410s.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.013771s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.060191s.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.019698s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.061940s.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.018369s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.067741s.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.022006s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.064736s.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.035359s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.071100s.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.043152s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Grounding completed in 0.074415s.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving started.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Solving completed in 0.071759s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Incremental solving completed in 1.356340s because STOP_CON_REACHED.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.008792s, Solving time = 0.304905s, Total time = 1.356340s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #135 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.062574s, Solving time = 0.004999s, Total time = 0.067573s
2 : Statistics :: Grounding time = 0.043968s, Solving time = 0.003599s, Total time = 0.047567s
3 : Statistics :: Grounding time = 0.064475s, Solving time = 0.005115s, Total time = 0.069590s
4 : Statistics :: Grounding time = 0.048402s, Solving time = 0.006987s, Total time = 0.055389s
5 : Statistics :: Grounding time = 0.048111s, Solving time = 0.007823s, Total time = 0.055934s
6 : Statistics :: Grounding time = 0.048394s, Solving time = 0.008756s, Total time = 0.057150s
7 : Statistics :: Grounding time = 0.053709s, Solving time = 0.010045s, Total time = 0.063754s
8 : Statistics :: Grounding time = 0.054160s, Solving time = 0.010132s, Total time = 0.064292s
9 : Statistics :: Grounding time = 0.055260s, Solving time = 0.010513s, Total time = 0.065773s
10 : Statistics :: Grounding time = 0.056817s, Solving time = 0.010919s, Total time = 0.067736s
11 : Statistics :: Grounding time = 0.058410s, Solving time = 0.013771s, Total time = 0.072181s
12 : Statistics :: Grounding time = 0.060191s, Solving time = 0.019698s, Total time = 0.079889s
13 : Statistics :: Grounding time = 0.061940s, Solving time = 0.018369s, Total time = 0.080308s
14 : Statistics :: Grounding time = 0.067741s, Solving time = 0.022006s, Total time = 0.089747s
15 : Statistics :: Grounding time = 0.064736s, Solving time = 0.035359s, Total time = 0.100095s
16 : Statistics :: Grounding time = 0.071100s, Solving time = 0.043152s, Total time = 0.114252s
17 : Statistics :: Grounding time = 0.074415s, Solving time = 0.071759s, Total time = 0.146174s

[18-02-2021_12-57-30] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.008792s, Solving time = 0.304905s, Total time = 1.356340s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-30] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,configure(manipulator_arm_1,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_2,retracted),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),15)
occurs(2,talos,release(manipulator_arm_1,(block,5)),16)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),17)

[18-02-2021_12-57-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-30] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-57-30] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-57-30] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-57-30] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-57-30] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Instantiated.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Program building started.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Program building completed.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding base program parts.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.016281s.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving base program parts.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.002862s.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Incremental solving started.

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.185595s.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.008964s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.081298s.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.005929s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.062495s.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.006946s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.073261s.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.010070s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.072130s.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.012030s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.073727s.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.013086s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.075361s.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.015085s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.079889s.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.016122s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.078453s.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.016574s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.079200s.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.021460s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.080359s.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.021978s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.083618s.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.031727s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Grounding completed in 0.088420s.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving started.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Model found:
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Solving completed in 0.022719s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Incremental solving completed in 1.375882s because STOP_CON_REACHED.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.130090s, Solving time = 0.205554s, Total time = 1.375882s
Final Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #136 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.185595s, Solving time = 0.008964s, Total time = 0.194559s
2 : Statistics :: Grounding time = 0.081298s, Solving time = 0.005929s, Total time = 0.087227s
3 : Statistics :: Grounding time = 0.062495s, Solving time = 0.006946s, Total time = 0.069441s
4 : Statistics :: Grounding time = 0.073261s, Solving time = 0.010070s, Total time = 0.083331s
5 : Statistics :: Grounding time = 0.072130s, Solving time = 0.012030s, Total time = 0.084161s
6 : Statistics :: Grounding time = 0.073727s, Solving time = 0.013086s, Total time = 0.086813s
7 : Statistics :: Grounding time = 0.075361s, Solving time = 0.015085s, Total time = 0.090447s
8 : Statistics :: Grounding time = 0.079889s, Solving time = 0.016122s, Total time = 0.096011s
9 : Statistics :: Grounding time = 0.078453s, Solving time = 0.016574s, Total time = 0.095028s
10 : Statistics :: Grounding time = 0.079200s, Solving time = 0.021460s, Total time = 0.100660s
11 : Statistics :: Grounding time = 0.080359s, Solving time = 0.021978s, Total time = 0.102337s
12 : Statistics :: Grounding time = 0.083618s, Solving time = 0.031727s, Total time = 0.115345s
13 : Statistics :: Grounding time = 0.088420s, Solving time = 0.022719s, Total time = 0.111139s

[18-02-2021_12-57-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.130090s, Solving time = 0.205554s, Total time = 1.375882s
Model :: Total atoms = 4848, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-57-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)

[18-02-2021_12-57-32] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.572331s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.356340s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.375882s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-57-32] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-57-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-57-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-32] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-57-32] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-57-32] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-57-32] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-57-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Instantiated.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Program building started.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Program building completed.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding base program parts.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.019847s.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving base program parts.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.003581s.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Incremental solving started.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.256013s.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.020245s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.067584s.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.007819s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.069314s.

[18-02-2021_12-57-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.008210s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.070961s.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.008769s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.072092s.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.011935s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.074262s.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.013368s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.078319s.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.014811s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.078764s.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.015165s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.088767s.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.016876s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.085763s.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.018691s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.083869s.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.020524s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.086340s.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.023073s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.086773s.

[18-02-2021_12-57-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.026769s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Grounding completed in 0.086773s.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving started.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Model found:
Model :: Total atoms = 7110, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Solving completed in 0.051227s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Incremental solving completed in 1.616390s because STOP_CON_REACHED.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.305440s, Solving time = 0.261062s, Total time = 1.616390s
Final Model :: Total atoms = 7110, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #137 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.256013s, Solving time = 0.020245s, Total time = 0.276257s
2 : Statistics :: Grounding time = 0.067584s, Solving time = 0.007819s, Total time = 0.075403s
3 : Statistics :: Grounding time = 0.069314s, Solving time = 0.008210s, Total time = 0.077524s
4 : Statistics :: Grounding time = 0.070961s, Solving time = 0.008769s, Total time = 0.079729s
5 : Statistics :: Grounding time = 0.072092s, Solving time = 0.011935s, Total time = 0.084027s
6 : Statistics :: Grounding time = 0.074262s, Solving time = 0.013368s, Total time = 0.087629s
7 : Statistics :: Grounding time = 0.078319s, Solving time = 0.014811s, Total time = 0.093130s
8 : Statistics :: Grounding time = 0.078764s, Solving time = 0.015165s, Total time = 0.093929s
9 : Statistics :: Grounding time = 0.088767s, Solving time = 0.016876s, Total time = 0.105643s
10 : Statistics :: Grounding time = 0.085763s, Solving time = 0.018691s, Total time = 0.104454s
11 : Statistics :: Grounding time = 0.083869s, Solving time = 0.020524s, Total time = 0.104393s
12 : Statistics :: Grounding time = 0.086340s, Solving time = 0.023073s, Total time = 0.109413s
13 : Statistics :: Grounding time = 0.086773s, Solving time = 0.026769s, Total time = 0.113541s
14 : Statistics :: Grounding time = 0.086773s, Solving time = 0.051227s, Total time = 0.138000s

[18-02-2021_12-57-34] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.305440s, Solving time = 0.261062s, Total time = 1.616390s
Model :: Total atoms = 7110, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-57-34] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),27)

[18-02-2021_12-57-34] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.616390s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-57-34] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-57-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-57-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-34] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-57-34] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-57-34] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-57-34] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-57-34] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Instantiated.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Program building started.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Program building completed.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding base program parts.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.019564s.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving base program parts.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.003063s.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Incremental solving started.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.127646s.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.014226s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.050596s.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.005941s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.050295s.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.007771s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.055071s.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.009673s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.056217s.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.010363s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.058795s.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.010350s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.061028s.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.011335s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.061934s.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.011972s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Grounding completed in 0.061444s.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving started.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Model found:
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Solving completed in 0.015295s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Incremental solving completed in 0.721140s because STOP_CON_REACHED.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.602591s, Solving time = 0.099989s, Total time = 0.721140s
Final Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #138 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.127646s, Solving time = 0.014226s, Total time = 0.141872s
2 : Statistics :: Grounding time = 0.050596s, Solving time = 0.005941s, Total time = 0.056538s
3 : Statistics :: Grounding time = 0.050295s, Solving time = 0.007771s, Total time = 0.058066s
4 : Statistics :: Grounding time = 0.055071s, Solving time = 0.009673s, Total time = 0.064745s
5 : Statistics :: Grounding time = 0.056217s, Solving time = 0.010363s, Total time = 0.066580s
6 : Statistics :: Grounding time = 0.058795s, Solving time = 0.010350s, Total time = 0.069146s
7 : Statistics :: Grounding time = 0.061028s, Solving time = 0.011335s, Total time = 0.072362s
8 : Statistics :: Grounding time = 0.061934s, Solving time = 0.011972s, Total time = 0.073905s
9 : Statistics :: Grounding time = 0.061444s, Solving time = 0.015295s, Total time = 0.076739s

[18-02-2021_12-57-35] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.602591s, Solving time = 0.099989s, Total time = 0.721140s
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-35] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,configure(manipulator_arm_1,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_2,retracted),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),15)
occurs(2,talos,release(manipulator_arm_1,(block,5)),16)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),18)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[18-02-2021_12-57-35] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-35] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-57-35] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-57-35] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-57-35] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-57-35] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Instantiated.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Program building started.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Program building completed.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding base program parts.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding completed in 0.023069s.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving base program parts.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving completed in 0.003785s.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Incremental solving started.

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding completed in 0.342866s.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving started.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving completed in 0.036544s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding completed in 0.076517s.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving started.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving completed in 0.007644s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding completed in 0.071977s.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving started.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving completed in 0.010644s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding completed in 0.080544s.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving started.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving completed in 0.013425s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Grounding completed in 0.077689s.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving started.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Model found:
Model :: Total atoms = 7845, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Solving completed in 0.016466s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Incremental solving completed in 0.775052s because STOP_CON_REACHED.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.672661s, Solving time = 0.088507s, Total time = 0.775052s
Final Model :: Total atoms = 7845, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #139 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.342866s, Solving time = 0.036544s, Total time = 0.379409s
2 : Statistics :: Grounding time = 0.076517s, Solving time = 0.007644s, Total time = 0.084161s
3 : Statistics :: Grounding time = 0.071977s, Solving time = 0.010644s, Total time = 0.082621s
4 : Statistics :: Grounding time = 0.080544s, Solving time = 0.013425s, Total time = 0.093969s
5 : Statistics :: Grounding time = 0.077689s, Solving time = 0.016466s, Total time = 0.094155s

[18-02-2021_12-57-36] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.672661s, Solving time = 0.088507s, Total time = 0.775052s
Model :: Total atoms = 7845, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)

[18-02-2021_12-57-36] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.721140s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.775052s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-57-36] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-57-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-57-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-36] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-57-36] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-57-36] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-57-36] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-57-36] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Instantiated.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Program building started.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Program building completed.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding base program parts.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.025612s.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving base program parts.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.003659s.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Incremental solving started.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.401441s.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.042721s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.076953s.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.008374s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.074589s.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.011708s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.081783s.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.015922s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.083007s.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.016490s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.088329s.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.017348s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.087284s.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.021682s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.087626s.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.020112s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.093853s.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.029681s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.091317s.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.038763s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Grounding completed in 0.093843s.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving started.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Model found:
Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Solving completed in 0.045221s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Incremental solving completed in 1.602168s because STOP_CON_REACHED.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.285637s, Solving time = 0.271679s, Total time = 1.602168s
Final Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #140 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.401441s, Solving time = 0.042721s, Total time = 0.444162s
2 : Statistics :: Grounding time = 0.076953s, Solving time = 0.008374s, Total time = 0.085327s
3 : Statistics :: Grounding time = 0.074589s, Solving time = 0.011708s, Total time = 0.086297s
4 : Statistics :: Grounding time = 0.081783s, Solving time = 0.015922s, Total time = 0.097705s
5 : Statistics :: Grounding time = 0.083007s, Solving time = 0.016490s, Total time = 0.099497s
6 : Statistics :: Grounding time = 0.088329s, Solving time = 0.017348s, Total time = 0.105677s
7 : Statistics :: Grounding time = 0.087284s, Solving time = 0.021682s, Total time = 0.108966s
8 : Statistics :: Grounding time = 0.087626s, Solving time = 0.020112s, Total time = 0.107738s
9 : Statistics :: Grounding time = 0.093853s, Solving time = 0.029681s, Total time = 0.123534s
10 : Statistics :: Grounding time = 0.091317s, Solving time = 0.038763s, Total time = 0.130079s
11 : Statistics :: Grounding time = 0.093843s, Solving time = 0.045221s, Total time = 0.139064s

[18-02-2021_12-57-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.285637s, Solving time = 0.271679s, Total time = 1.602168s
Model :: Total atoms = 9939, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),34)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),35)
occurs(1,talos,release(manipulator_end_1,(block,3)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),38)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),39)
occurs(1,talos,release(manipulator_end_1,(block,2)),40)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),41)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),42)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),43)

[18-02-2021_12-57-38] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.602168s : Steps =    43 : Actions =    43 |  
  ====================================================================  

[18-02-2021_12-57-38] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-57-38] INFO :: Experiment >> 

      ================================================      
           Experimental run 18 : Time 11.241287s            
      ================================================      

[18-02-2021_12-57-38] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-57-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-57-38] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-57-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-57-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Instantiated.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Program building started.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Program building completed.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding base program parts.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.013729s.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving base program parts.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.002421s.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Incremental solving started.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.039492s.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.005907s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.030908s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.003689s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.031514s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.004509s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.034086s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.005585s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.036111s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.005788s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.035577s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.006506s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.038482s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.007480s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.037858s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.008243s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.038788s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.010773s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.040248s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.011667s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.044198s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.016944s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.040684s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.016990s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.040569s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.025780s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.041592s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.042587s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.041465s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.066546s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.076410s.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.120924s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.080621s.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.296074s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Grounding completed in 0.088331s.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving started.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Solving completed in 0.090409s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Incremental solving completed in 1.621861s because STOP_CON_REACHED.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.830665s, Solving time = 0.748823s, Total time = 1.621861s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #141 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039492s, Solving time = 0.005907s, Total time = 0.045400s
2 : Statistics :: Grounding time = 0.030908s, Solving time = 0.003689s, Total time = 0.034597s
3 : Statistics :: Grounding time = 0.031514s, Solving time = 0.004509s, Total time = 0.036023s
4 : Statistics :: Grounding time = 0.034086s, Solving time = 0.005585s, Total time = 0.039671s
5 : Statistics :: Grounding time = 0.036111s, Solving time = 0.005788s, Total time = 0.041899s
6 : Statistics :: Grounding time = 0.035577s, Solving time = 0.006506s, Total time = 0.042083s
7 : Statistics :: Grounding time = 0.038482s, Solving time = 0.007480s, Total time = 0.045962s
8 : Statistics :: Grounding time = 0.037858s, Solving time = 0.008243s, Total time = 0.046101s
9 : Statistics :: Grounding time = 0.038788s, Solving time = 0.010773s, Total time = 0.049561s
10 : Statistics :: Grounding time = 0.040248s, Solving time = 0.011667s, Total time = 0.051915s
11 : Statistics :: Grounding time = 0.044198s, Solving time = 0.016944s, Total time = 0.061142s
12 : Statistics :: Grounding time = 0.040684s, Solving time = 0.016990s, Total time = 0.057675s
13 : Statistics :: Grounding time = 0.040569s, Solving time = 0.025780s, Total time = 0.066349s
14 : Statistics :: Grounding time = 0.041592s, Solving time = 0.042587s, Total time = 0.084179s
15 : Statistics :: Grounding time = 0.041465s, Solving time = 0.066546s, Total time = 0.108011s
16 : Statistics :: Grounding time = 0.076410s, Solving time = 0.120924s, Total time = 0.197334s
17 : Statistics :: Grounding time = 0.080621s, Solving time = 0.296074s, Total time = 0.376695s
18 : Statistics :: Grounding time = 0.088331s, Solving time = 0.090409s, Total time = 0.178740s

[18-02-2021_12-57-40] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.830665s, Solving time = 0.748823s, Total time = 1.621861s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-40] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[18-02-2021_12-57-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-40] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-57-40] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-57-40] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-57-40] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-57-40] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Instantiated.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Program building started.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Program building completed.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding base program parts.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.014404s.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving base program parts.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.003426s.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Incremental solving started.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.061199s.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.006038s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.043494s.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.004329s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.045343s.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.004190s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.045979s.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.006206s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.053356s.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.008254s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.051041s.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.009246s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.053766s.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.010407s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.054271s.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.010119s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.055311s.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.010216s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.054933s.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.010503s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.064643s.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.013577s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.062837s.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.016444s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.061811s.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.025640s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.060865s.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.018886s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.062944s.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.026992s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.063059s.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.044333s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Grounding completed in 0.066119s.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving started.

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Solving completed in 0.057817s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Incremental solving completed in 1.303310s because STOP_CON_REACHED.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.975375s, Solving time = 0.286623s, Total time = 1.303310s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #142 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.061199s, Solving time = 0.006038s, Total time = 0.067238s
2 : Statistics :: Grounding time = 0.043494s, Solving time = 0.004329s, Total time = 0.047822s
3 : Statistics :: Grounding time = 0.045343s, Solving time = 0.004190s, Total time = 0.049533s
4 : Statistics :: Grounding time = 0.045979s, Solving time = 0.006206s, Total time = 0.052185s
5 : Statistics :: Grounding time = 0.053356s, Solving time = 0.008254s, Total time = 0.061610s
6 : Statistics :: Grounding time = 0.051041s, Solving time = 0.009246s, Total time = 0.060287s
7 : Statistics :: Grounding time = 0.053766s, Solving time = 0.010407s, Total time = 0.064173s
8 : Statistics :: Grounding time = 0.054271s, Solving time = 0.010119s, Total time = 0.064389s
9 : Statistics :: Grounding time = 0.055311s, Solving time = 0.010216s, Total time = 0.065528s
10 : Statistics :: Grounding time = 0.054933s, Solving time = 0.010503s, Total time = 0.065435s
11 : Statistics :: Grounding time = 0.064643s, Solving time = 0.013577s, Total time = 0.078220s
12 : Statistics :: Grounding time = 0.062837s, Solving time = 0.016444s, Total time = 0.079281s
13 : Statistics :: Grounding time = 0.061811s, Solving time = 0.025640s, Total time = 0.087451s
14 : Statistics :: Grounding time = 0.060865s, Solving time = 0.018886s, Total time = 0.079751s
15 : Statistics :: Grounding time = 0.062944s, Solving time = 0.026992s, Total time = 0.089936s
16 : Statistics :: Grounding time = 0.063059s, Solving time = 0.044333s, Total time = 0.107391s
17 : Statistics :: Grounding time = 0.066119s, Solving time = 0.057817s, Total time = 0.123936s

[18-02-2021_12-57-42] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.975375s, Solving time = 0.286623s, Total time = 1.303310s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-57-42] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),6)
occurs(2,talos,configure(manipulator_arm_2,retracted),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)

[18-02-2021_12-57-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-42] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-57-42] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-57-42] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-57-42] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-57-42] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Instantiated.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Program building started.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Program building completed.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding base program parts.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.017013s.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving base program parts.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.003683s.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Incremental solving started.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.182578s.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.008271s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.064297s.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.005805s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.063495s.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.006823s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.069097s.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.010077s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.069059s.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.012063s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.072034s.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.013167s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.074066s.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.014437s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.076589s.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.015223s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.076864s.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.016380s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.080093s.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.021349s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.084450s.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.021503s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.080829s.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.027469s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Grounding completed in 0.082866s.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving started.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Model found:
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Solving completed in 0.024562s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Incremental solving completed in 1.333082s because STOP_CON_REACHED.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.093330s, Solving time = 0.200813s, Total time = 1.333082s
Final Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #143 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.182578s, Solving time = 0.008271s, Total time = 0.190849s
2 : Statistics :: Grounding time = 0.064297s, Solving time = 0.005805s, Total time = 0.070102s
3 : Statistics :: Grounding time = 0.063495s, Solving time = 0.006823s, Total time = 0.070318s
4 : Statistics :: Grounding time = 0.069097s, Solving time = 0.010077s, Total time = 0.079174s
5 : Statistics :: Grounding time = 0.069059s, Solving time = 0.012063s, Total time = 0.081122s
6 : Statistics :: Grounding time = 0.072034s, Solving time = 0.013167s, Total time = 0.085201s
7 : Statistics :: Grounding time = 0.074066s, Solving time = 0.014437s, Total time = 0.088503s
8 : Statistics :: Grounding time = 0.076589s, Solving time = 0.015223s, Total time = 0.091811s
9 : Statistics :: Grounding time = 0.076864s, Solving time = 0.016380s, Total time = 0.093244s
10 : Statistics :: Grounding time = 0.080093s, Solving time = 0.021349s, Total time = 0.101442s
11 : Statistics :: Grounding time = 0.084450s, Solving time = 0.021503s, Total time = 0.105953s
12 : Statistics :: Grounding time = 0.080829s, Solving time = 0.027469s, Total time = 0.108298s
13 : Statistics :: Grounding time = 0.082866s, Solving time = 0.024562s, Total time = 0.107428s

[18-02-2021_12-57-43] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.093330s, Solving time = 0.200813s, Total time = 1.333082s
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[18-02-2021_12-57-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)

[18-02-2021_12-57-43] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.621861s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.303310s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.333082s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-57-43] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-57-43] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-57-43] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-43] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-57-43] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-57-43] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-57-43] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-57-43] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Instantiated.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Program building started.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Program building completed.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding base program parts.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.019740s.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving base program parts.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.003646s.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Incremental solving started.

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.275961s.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.019273s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.067969s.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.006465s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.069800s.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.008262s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.070785s.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.009066s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.071509s.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.011788s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.074138s.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.013782s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.076993s.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.014247s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.084427s.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.016363s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.082004s.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.017017s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.081609s.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.017843s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.083681s.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.020937s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.085344s.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.023824s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.087723s.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.030885s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Grounding completed in 0.088874s.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving started.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Solving completed in 0.047580s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Incremental solving completed in 1.630253s because STOP_CON_REACHED.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.320556s, Solving time = 0.260979s, Total time = 1.630253s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #144 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.275961s, Solving time = 0.019273s, Total time = 0.295235s
2 : Statistics :: Grounding time = 0.067969s, Solving time = 0.006465s, Total time = 0.074434s
3 : Statistics :: Grounding time = 0.069800s, Solving time = 0.008262s, Total time = 0.078062s
4 : Statistics :: Grounding time = 0.070785s, Solving time = 0.009066s, Total time = 0.079851s
5 : Statistics :: Grounding time = 0.071509s, Solving time = 0.011788s, Total time = 0.083297s
6 : Statistics :: Grounding time = 0.074138s, Solving time = 0.013782s, Total time = 0.087920s
7 : Statistics :: Grounding time = 0.076993s, Solving time = 0.014247s, Total time = 0.091240s
8 : Statistics :: Grounding time = 0.084427s, Solving time = 0.016363s, Total time = 0.100790s
9 : Statistics :: Grounding time = 0.082004s, Solving time = 0.017017s, Total time = 0.099021s
10 : Statistics :: Grounding time = 0.081609s, Solving time = 0.017843s, Total time = 0.099452s
11 : Statistics :: Grounding time = 0.083681s, Solving time = 0.020937s, Total time = 0.104618s
12 : Statistics :: Grounding time = 0.085344s, Solving time = 0.023824s, Total time = 0.109168s
13 : Statistics :: Grounding time = 0.087723s, Solving time = 0.030885s, Total time = 0.118608s
14 : Statistics :: Grounding time = 0.088874s, Solving time = 0.047580s, Total time = 0.136454s

[18-02-2021_12-57-45] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.320556s, Solving time = 0.260979s, Total time = 1.630253s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-45] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)

[18-02-2021_12-57-45] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.630253s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-57-45] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-57-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-57-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-45] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-57-45] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-57-45] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-57-45] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-57-45] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Instantiated.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Program building started.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Program building completed.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding base program parts.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.019159s.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving base program parts.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.003057s.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Incremental solving started.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.111151s.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.014736s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.050532s.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.005774s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.050867s.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.008350s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-57-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.054918s.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.009540s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.056924s.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.009947s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.059114s.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.010451s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.059687s.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.011244s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.062532s.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.011472s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Grounding completed in 0.068514s.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving started.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Model found:
Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Solving completed in 0.014294s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Incremental solving completed in 0.711541s because STOP_CON_REACHED.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.593398s, Solving time = 0.098864s, Total time = 0.711541s
Final Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #145 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.111151s, Solving time = 0.014736s, Total time = 0.125887s
2 : Statistics :: Grounding time = 0.050532s, Solving time = 0.005774s, Total time = 0.056306s
3 : Statistics :: Grounding time = 0.050867s, Solving time = 0.008350s, Total time = 0.059216s
4 : Statistics :: Grounding time = 0.054918s, Solving time = 0.009540s, Total time = 0.064457s
5 : Statistics :: Grounding time = 0.056924s, Solving time = 0.009947s, Total time = 0.066871s
6 : Statistics :: Grounding time = 0.059114s, Solving time = 0.010451s, Total time = 0.069565s
7 : Statistics :: Grounding time = 0.059687s, Solving time = 0.011244s, Total time = 0.070932s
8 : Statistics :: Grounding time = 0.062532s, Solving time = 0.011472s, Total time = 0.074004s
9 : Statistics :: Grounding time = 0.068514s, Solving time = 0.014294s, Total time = 0.082807s

[18-02-2021_12-57-46] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.593398s, Solving time = 0.098864s, Total time = 0.711541s
Model :: Total atoms = 6407, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-57-46] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),6)
occurs(2,talos,configure(manipulator_arm_2,retracted),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_1,(block,5)),18)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),19)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[18-02-2021_12-57-46] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-46] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-57-46] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-57-46] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-57-46] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-57-46] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Instantiated.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Program building started.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Program building completed.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding base program parts.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding completed in 0.023950s.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving base program parts.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving completed in 0.003740s.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Incremental solving started.

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding completed in 0.348413s.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving started.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving completed in 0.038719s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding completed in 0.072320s.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving started.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving completed in 0.008108s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding completed in 0.081413s.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving started.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving completed in 0.010246s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding completed in 0.075860s.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving started.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving completed in 0.013638s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Grounding completed in 0.078947s.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving started.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Solving completed in 0.018126s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Incremental solving completed in 0.786972s because STOP_CON_REACHED.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.680904s, Solving time = 0.092577s, Total time = 0.786972s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #146 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.348413s, Solving time = 0.038719s, Total time = 0.387132s
2 : Statistics :: Grounding time = 0.072320s, Solving time = 0.008108s, Total time = 0.080429s
3 : Statistics :: Grounding time = 0.081413s, Solving time = 0.010246s, Total time = 0.091660s
4 : Statistics :: Grounding time = 0.075860s, Solving time = 0.013638s, Total time = 0.089497s
5 : Statistics :: Grounding time = 0.078947s, Solving time = 0.018126s, Total time = 0.097073s

[18-02-2021_12-57-47] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.680904s, Solving time = 0.092577s, Total time = 0.786972s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-57-47] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)

[18-02-2021_12-57-47] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.711541s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.786972s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-57-47] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-57-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-57-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-57-47] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-57-47] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-57-47] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-57-47] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-57-47] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Instantiated.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Program building started.

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Program building completed.

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding base program parts.

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.025539s.

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving base program parts.

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.003409s.

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Incremental solving started.

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.391006s.

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.042827s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.074061s.

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.008425s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.080841s.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.011237s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.085399s.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.014759s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.082630s.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.015233s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.084733s.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.016294s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.087845s.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.020128s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.104229s.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.021551s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.089602s.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.024547s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.090620s.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.024331s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.092921s.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.026329s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 32
End step max = None

[18-02-2021_12-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 32]), ('conformance_module', [44])].

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.096274s.

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.039714s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 32
End step max = None

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 32]), ('conformance_module', [45])].

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.098529s.

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.040398s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 32
End step max = None

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 32]), ('conformance_module', [46])].

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.098012s.

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.058996s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 32
End step max = None

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 32]), ('conformance_module', [47])].

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.106574s.

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.092506s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 32
End step max = None

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 32]), ('conformance_module', [48])].

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.100618s.

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.128029s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 32
End step max = None

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 32]), ('conformance_module', [49])].

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.101548s.

[18-02-2021_12-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.230728s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 32
End step max = None

[18-02-2021_12-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 32]), ('conformance_module', [50])].

[18-02-2021_12-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.102998s.

[18-02-2021_12-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.415551s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 32
End step max = None

[18-02-2021_12-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 32]), ('conformance_module', [51])].

[18-02-2021_12-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.107263s.

[18-02-2021_12-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.616499s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 32
End step max = None

[18-02-2021_12-57-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 32]), ('conformance_module', [52])].

[18-02-2021_12-57-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.111029s.

[18-02-2021_12-57-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.926406s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 32
End step max = None

[18-02-2021_12-57-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 32]), ('conformance_module', [53])].

[18-02-2021_12-57-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.111117s.

[18-02-2021_12-57-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 1.301667s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 32
End step max = None

[18-02-2021_12-57-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 32]), ('conformance_module', [54])].

[18-02-2021_12-57-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.109937s.

[18-02-2021_12-57-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 1.799330s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 32
End step max = None

[18-02-2021_12-57-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 32]), ('conformance_module', [55])].

[18-02-2021_12-57-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.111911s.

[18-02-2021_12-57-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-57-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 2.394339s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-57-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [24]:
Current step bound = 56
End step min = 32
End step max = None

[18-02-2021_12-57-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 32]), ('conformance_module', [56])].

[18-02-2021_12-57-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.114777s.

[18-02-2021_12-57-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-58-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 4.429274s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Beginning Incremental call [25]:
Current step bound = 57
End step min = 32
End step max = None

[18-02-2021_12-58-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 32]), ('conformance_module', [57])].

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Grounding completed in 0.115683s.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving started.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Model found:
Model :: Total atoms = 12504, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Solving completed in 0.407666s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Incremental solving completed in 16.103186s because STOP_CON_REACHED.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.775692s, Solving time = 13.110173s, Total time = 16.103186s
Final Model :: Total atoms = 12504, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #147 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.391006s, Solving time = 0.042827s, Total time = 0.433833s
2 : Statistics :: Grounding time = 0.074061s, Solving time = 0.008425s, Total time = 0.082486s
3 : Statistics :: Grounding time = 0.080841s, Solving time = 0.011237s, Total time = 0.092078s
4 : Statistics :: Grounding time = 0.085399s, Solving time = 0.014759s, Total time = 0.100158s
5 : Statistics :: Grounding time = 0.082630s, Solving time = 0.015233s, Total time = 0.097863s
6 : Statistics :: Grounding time = 0.084733s, Solving time = 0.016294s, Total time = 0.101027s
7 : Statistics :: Grounding time = 0.087845s, Solving time = 0.020128s, Total time = 0.107973s
8 : Statistics :: Grounding time = 0.104229s, Solving time = 0.021551s, Total time = 0.125780s
9 : Statistics :: Grounding time = 0.089602s, Solving time = 0.024547s, Total time = 0.114149s
10 : Statistics :: Grounding time = 0.090620s, Solving time = 0.024331s, Total time = 0.114952s
11 : Statistics :: Grounding time = 0.092921s, Solving time = 0.026329s, Total time = 0.119250s
12 : Statistics :: Grounding time = 0.096274s, Solving time = 0.039714s, Total time = 0.135988s
13 : Statistics :: Grounding time = 0.098529s, Solving time = 0.040398s, Total time = 0.138927s
14 : Statistics :: Grounding time = 0.098012s, Solving time = 0.058996s, Total time = 0.157008s
15 : Statistics :: Grounding time = 0.106574s, Solving time = 0.092506s, Total time = 0.199080s
16 : Statistics :: Grounding time = 0.100618s, Solving time = 0.128029s, Total time = 0.228646s
17 : Statistics :: Grounding time = 0.101548s, Solving time = 0.230728s, Total time = 0.332275s
18 : Statistics :: Grounding time = 0.102998s, Solving time = 0.415551s, Total time = 0.518548s
19 : Statistics :: Grounding time = 0.107263s, Solving time = 0.616499s, Total time = 0.723761s
20 : Statistics :: Grounding time = 0.111029s, Solving time = 0.926406s, Total time = 1.037435s
21 : Statistics :: Grounding time = 0.111117s, Solving time = 1.301667s, Total time = 1.412783s
22 : Statistics :: Grounding time = 0.109937s, Solving time = 1.799330s, Total time = 1.909267s
23 : Statistics :: Grounding time = 0.111911s, Solving time = 2.394339s, Total time = 2.506250s
24 : Statistics :: Grounding time = 0.114777s, Solving time = 4.429274s, Total time = 4.544051s
25 : Statistics :: Grounding time = 0.115683s, Solving time = 0.407666s, Total time = 0.523349s

[18-02-2021_12-58-04] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.775692s, Solving time = 13.110173s, Total time = 16.103186s
Model :: Total atoms = 12504, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[18-02-2021_12-58-04] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_right),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),33)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,2)),34)
occurs(1,talos,release(manipulator_end_1,(block,4)),35)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),36)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),37)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),38)
occurs(1,talos,lift(manipulator_end_2,(block,5)),39)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),40)
occurs(1,talos,release(manipulator_end_1,(block,3)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),43)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),44)
occurs(1,talos,release(manipulator_end_1,(block,6)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),46)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),47)
occurs(1,talos,release(manipulator_end_2,(block,5)),48)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),50)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),51)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),52)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),53)
occurs(1,talos,release(manipulator_end_2,(block,2)),54)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),55)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),56)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),57)

[18-02-2021_12-58-04] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    16.103186s : Steps =    57 : Actions =    57 |  
  ====================================================================  

[18-02-2021_12-58-04] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-58-04] INFO :: Experiment >> 

      ================================================      
           Experimental run 19 : Time 25.825408s            
      ================================================      

[18-02-2021_12-58-04] INFO :: ASH Planner Main #1 >> Online planning started : LEVELS [1-3]

[18-02-2021_12-58-04] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('look_back', 0)
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})

[18-02-2021_12-58-04] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[18-02-2021_12-58-04] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[18-02-2021_12-58-04] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', 10)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-58-04] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Instantiated.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Program building started.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Program building completed.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding base program parts.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.013774s.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving base program parts.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.002060s.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Incremental solving started.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.040562s.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.005719s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.031050s.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.003603s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.032898s.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.004547s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.034709s.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.005610s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.034626s.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.005708s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-58-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.036452s.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.006825s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.038268s.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.007002s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.038720s.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.008854s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.037926s.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.009733s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.040141s.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.011488s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.038770s.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.016122s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.043358s.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.020763s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.041645s.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.027759s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.042825s.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.038790s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.042035s.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.055998s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.076390s.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.075803s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.080246s.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.129937s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[18-02-2021_12-58-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Grounding completed in 0.086691s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Solving completed in 0.144338s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Incremental solving completed in 1.451909s because STOP_CON_REACHED.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.831087s, Solving time = 0.580658s, Total time = 1.451909s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #148 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040562s, Solving time = 0.005719s, Total time = 0.046282s
2 : Statistics :: Grounding time = 0.031050s, Solving time = 0.003603s, Total time = 0.034653s
3 : Statistics :: Grounding time = 0.032898s, Solving time = 0.004547s, Total time = 0.037445s
4 : Statistics :: Grounding time = 0.034709s, Solving time = 0.005610s, Total time = 0.040319s
5 : Statistics :: Grounding time = 0.034626s, Solving time = 0.005708s, Total time = 0.040334s
6 : Statistics :: Grounding time = 0.036452s, Solving time = 0.006825s, Total time = 0.043277s
7 : Statistics :: Grounding time = 0.038268s, Solving time = 0.007002s, Total time = 0.045270s
8 : Statistics :: Grounding time = 0.038720s, Solving time = 0.008854s, Total time = 0.047574s
9 : Statistics :: Grounding time = 0.037926s, Solving time = 0.009733s, Total time = 0.047658s
10 : Statistics :: Grounding time = 0.040141s, Solving time = 0.011488s, Total time = 0.051629s
11 : Statistics :: Grounding time = 0.038770s, Solving time = 0.016122s, Total time = 0.054893s
12 : Statistics :: Grounding time = 0.043358s, Solving time = 0.020763s, Total time = 0.064121s
13 : Statistics :: Grounding time = 0.041645s, Solving time = 0.027759s, Total time = 0.069403s
14 : Statistics :: Grounding time = 0.042825s, Solving time = 0.038790s, Total time = 0.081615s
15 : Statistics :: Grounding time = 0.042035s, Solving time = 0.055998s, Total time = 0.098032s
16 : Statistics :: Grounding time = 0.076390s, Solving time = 0.075803s, Total time = 0.152193s
17 : Statistics :: Grounding time = 0.080246s, Solving time = 0.129937s, Total time = 0.210183s
18 : Statistics :: Grounding time = 0.086691s, Solving time = 0.144338s, Total time = 0.231028s

[18-02-2021_12-58-06] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.831087s, Solving time = 0.580658s, Total time = 1.451909s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[18-02-2021_12-58-06] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[18-02-2021_12-58-06] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-58-06] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-58-06] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 18

[18-02-2021_12-58-06] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-58-06] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 9

[18-02-2021_12-58-06] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Instantiated.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> The logic program was extended with 9 rules into program part conformance_module(step).

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Program building started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Program building completed.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding base program parts.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.014557s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving base program parts.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.001859s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Incremental solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.063721s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.005318s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.044256s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.003644s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.046710s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.004320s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.045789s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.006877s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.049475s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.008347s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.048817s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.009068s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.052627s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.010416s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.052435s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.010046s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.055656s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.010722s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.060239s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.010913s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.058853s.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.013959s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-58-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.060089s.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.020268s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.062220s.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.020845s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14])].

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.061743s.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.023988s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15])].

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.063532s.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.032412s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16])].

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.065660s.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.042194s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Grounding completed in 0.066623s.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving started.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Model found:
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Solving completed in 0.065441s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Incremental solving completed in 1.316729s because STOP_CON_REACHED.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.973004s, Solving time = 0.300638s, Total time = 1.316729s
Final Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #149 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.063721s, Solving time = 0.005318s, Total time = 0.069039s
2 : Statistics :: Grounding time = 0.044256s, Solving time = 0.003644s, Total time = 0.047900s
3 : Statistics :: Grounding time = 0.046710s, Solving time = 0.004320s, Total time = 0.051030s
4 : Statistics :: Grounding time = 0.045789s, Solving time = 0.006877s, Total time = 0.052667s
5 : Statistics :: Grounding time = 0.049475s, Solving time = 0.008347s, Total time = 0.057822s
6 : Statistics :: Grounding time = 0.048817s, Solving time = 0.009068s, Total time = 0.057885s
7 : Statistics :: Grounding time = 0.052627s, Solving time = 0.010416s, Total time = 0.063043s
8 : Statistics :: Grounding time = 0.052435s, Solving time = 0.010046s, Total time = 0.062481s
9 : Statistics :: Grounding time = 0.055656s, Solving time = 0.010722s, Total time = 0.066379s
10 : Statistics :: Grounding time = 0.060239s, Solving time = 0.010913s, Total time = 0.071152s
11 : Statistics :: Grounding time = 0.058853s, Solving time = 0.013959s, Total time = 0.072812s
12 : Statistics :: Grounding time = 0.060089s, Solving time = 0.020268s, Total time = 0.080357s
13 : Statistics :: Grounding time = 0.062220s, Solving time = 0.020845s, Total time = 0.083066s
14 : Statistics :: Grounding time = 0.061743s, Solving time = 0.023988s, Total time = 0.085730s
15 : Statistics :: Grounding time = 0.063532s, Solving time = 0.032412s, Total time = 0.095944s
16 : Statistics :: Grounding time = 0.065660s, Solving time = 0.042194s, Total time = 0.107855s
17 : Statistics :: Grounding time = 0.066623s, Solving time = 0.065441s, Total time = 0.132064s

[18-02-2021_12-58-07] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.973004s, Solving time = 0.300638s, Total time = 1.316729s
Model :: Total atoms = 4938, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-58-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)

[18-02-2021_12-58-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-58-07] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 0

[18-02-2021_12-58-07] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 17

[18-02-2021_12-58-07] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 8

[18-02-2021_12-58-07] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 8

[18-02-2021_12-58-07] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Instantiated.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> The logic program was extended with 8 rules into program part conformance_module(step).

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Program building started.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Program building completed.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding base program parts.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.016400s.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving base program parts.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.003478s.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Incremental solving started.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1])].

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.178556s.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.008684s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2])].

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.064317s.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.005280s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[18-02-2021_12-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3])].

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.065258s.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.007190s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4])].

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.067727s.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.009585s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5])].

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.069140s.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.012201s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6])].

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.071661s.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.012782s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7])].

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.075125s.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.014948s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8])].

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.078418s.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.015700s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9])].

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.077370s.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.017747s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10])].

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.080056s.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.021374s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11])].

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.078290s.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.031036s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12])].

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.083084s.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.025849s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13])].

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Grounding completed in 0.083149s.

[18-02-2021_12-58-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving started.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Model found:
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Solving completed in 0.024796s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Incremental solving completed in 1.341310s because STOP_CON_REACHED.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.088550s, Solving time = 0.210652s, Total time = 1.341310s
Final Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #150 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.178556s, Solving time = 0.008684s, Total time = 0.187241s
2 : Statistics :: Grounding time = 0.064317s, Solving time = 0.005280s, Total time = 0.069596s
3 : Statistics :: Grounding time = 0.065258s, Solving time = 0.007190s, Total time = 0.072448s
4 : Statistics :: Grounding time = 0.067727s, Solving time = 0.009585s, Total time = 0.077312s
5 : Statistics :: Grounding time = 0.069140s, Solving time = 0.012201s, Total time = 0.081341s
6 : Statistics :: Grounding time = 0.071661s, Solving time = 0.012782s, Total time = 0.084443s
7 : Statistics :: Grounding time = 0.075125s, Solving time = 0.014948s, Total time = 0.090073s
8 : Statistics :: Grounding time = 0.078418s, Solving time = 0.015700s, Total time = 0.094117s
9 : Statistics :: Grounding time = 0.077370s, Solving time = 0.017747s, Total time = 0.095117s
10 : Statistics :: Grounding time = 0.080056s, Solving time = 0.021374s, Total time = 0.101430s
11 : Statistics :: Grounding time = 0.078290s, Solving time = 0.031036s, Total time = 0.109327s
12 : Statistics :: Grounding time = 0.083084s, Solving time = 0.025849s, Total time = 0.108932s
13 : Statistics :: Grounding time = 0.083149s, Solving time = 0.024796s, Total time = 0.107944s

[18-02-2021_12-58-09] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.088550s, Solving time = 0.210652s, Total time = 1.341310s
Model :: Total atoms = 4847, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-58-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)

[18-02-2021_12-58-09] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.451909s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.316729s : Steps =    17 : Actions =    17 |  
  | Level 1 : Time =     1.341310s : Steps =    13 : Actions =    13 |  
  ====================================================================  

[18-02-2021_12-58-09] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-58-09] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 0.5, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-58-09] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-58-09] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 8

[18-02-2021_12-58-09] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-58-09] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-58-09] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 17

[18-02-2021_12-58-09] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Instantiated.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> The logic program was extended with 17 rules into program part conformance_module(step).

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> The logic program was extended with 13 rules into program part plan_module(step, start).

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> The logic program was extended with 2252 rules into program part state_module(step).

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=13, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 13], range_=IncRange(start=13, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 13, Max end step = None
Step inc = 1, Step inc init = 15, Stop con = StopCondition.Satisfiable

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Program building started.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Program building completed.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding base program parts.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.021158s.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving base program parts.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.002990s.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Incremental solving started.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [1]:
Current step bound = 14
End step min = 13
End step max = None

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [14]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 13]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 13]), ('conformance_module', [14])].

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.260265s.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.019913s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [2]:
Current step bound = 15
End step min = 13
End step max = None

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 13]), ('conformance_module', [15])].

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.068364s.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.006831s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [3]:
Current step bound = 16
End step min = 13
End step max = None

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 13]), ('conformance_module', [16])].

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.073476s.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.008366s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [4]:
Current step bound = 17
End step min = 13
End step max = None

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 13]), ('conformance_module', [17])].

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.075511s.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.009035s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [5]:
Current step bound = 18
End step min = 13
End step max = None

[18-02-2021_12-58-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 13]), ('conformance_module', [18])].

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.073020s.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.012519s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [6]:
Current step bound = 19
End step min = 13
End step max = None

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 13]), ('conformance_module', [19])].

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.074065s.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.013782s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [7]:
Current step bound = 20
End step min = 13
End step max = None

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 13]), ('conformance_module', [20])].

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.075299s.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.014625s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [8]:
Current step bound = 21
End step min = 13
End step max = None

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 13]), ('conformance_module', [21])].

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.080094s.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.015643s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [9]:
Current step bound = 22
End step min = 13
End step max = None

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 13]), ('conformance_module', [22])].

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.080213s.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.017267s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [10]:
Current step bound = 23
End step min = 13
End step max = None

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 13]), ('conformance_module', [23])].

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.081871s.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.018301s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [11]:
Current step bound = 24
End step min = 13
End step max = None

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 13]), ('conformance_module', [24])].

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.084530s.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.021954s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [12]:
Current step bound = 25
End step min = 13
End step max = None

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 13]), ('conformance_module', [25])].

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.085499s.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.023515s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [13]:
Current step bound = 26
End step min = 13
End step max = None

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 13]), ('conformance_module', [26])].

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.086324s.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.029504s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Beginning Incremental call [14]:
Current step bound = 27
End step min = 13
End step max = None

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 13]), ('conformance_module', [27])].

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Grounding completed in 0.093102s.

[18-02-2021_12-58-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving started.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Model found:
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Solving completed in 0.062618s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Incremental solving completed in 1.634096s because STOP_CON_REACHED.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.312791s, Solving time = 0.276863s, Total time = 1.634096s
Final Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #151 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.260265s, Solving time = 0.019913s, Total time = 0.280178s
2 : Statistics :: Grounding time = 0.068364s, Solving time = 0.006831s, Total time = 0.075195s
3 : Statistics :: Grounding time = 0.073476s, Solving time = 0.008366s, Total time = 0.081841s
4 : Statistics :: Grounding time = 0.075511s, Solving time = 0.009035s, Total time = 0.084547s
5 : Statistics :: Grounding time = 0.073020s, Solving time = 0.012519s, Total time = 0.085540s
6 : Statistics :: Grounding time = 0.074065s, Solving time = 0.013782s, Total time = 0.087847s
7 : Statistics :: Grounding time = 0.075299s, Solving time = 0.014625s, Total time = 0.089924s
8 : Statistics :: Grounding time = 0.080094s, Solving time = 0.015643s, Total time = 0.095738s
9 : Statistics :: Grounding time = 0.080213s, Solving time = 0.017267s, Total time = 0.097480s
10 : Statistics :: Grounding time = 0.081871s, Solving time = 0.018301s, Total time = 0.100172s
11 : Statistics :: Grounding time = 0.084530s, Solving time = 0.021954s, Total time = 0.106484s
12 : Statistics :: Grounding time = 0.085499s, Solving time = 0.023515s, Total time = 0.109014s
13 : Statistics :: Grounding time = 0.086324s, Solving time = 0.029504s, Total time = 0.115828s
14 : Statistics :: Grounding time = 0.093102s, Solving time = 0.062618s, Total time = 0.155721s

[18-02-2021_12-58-11] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 1.312791s, Solving time = 0.276863s, Total time = 1.634096s
Model :: Total atoms = 7106, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[18-02-2021_12-58-11] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)

[18-02-2021_12-58-11] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =     1.634096s : Steps =    27 : Actions =    27 |  
  ====================================================================  

[18-02-2021_12-58-11] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-2]

[18-02-2021_12-58-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 2)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 0.5})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 3))

[18-02-2021_12-58-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-58-11] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 9

[18-02-2021_12-58-11] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-58-11] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 9

[18-02-2021_12-58-11] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 18

[18-02-2021_12-58-11] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Instantiated.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> The logic program was extended with 18 rules into program part conformance_module(step).

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> The logic program was extended with 17 rules into program part plan_module(step, start).

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> The logic program was extended with 2621 rules into program part state_module(step).

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=17, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 17], range_=IncRange(start=17, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 17, Max end step = None
Step inc = 1, Step inc init = 19, Stop con = StopCondition.Satisfiable

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Program building started.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Program building completed.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding base program parts.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.019222s.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving base program parts.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.003090s.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Incremental solving started.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [1]:
Current step bound = 18
End step min = 17
End step max = None

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [18]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 17]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 17]), ('conformance_module', [18])].

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.111809s.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.014513s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [2]:
Current step bound = 19
End step min = 17
End step max = None

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 17]), ('conformance_module', [19])].

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.050422s.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.005600s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [3]:
Current step bound = 20
End step min = 17
End step max = None

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 17]), ('conformance_module', [20])].

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.053057s.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.008123s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [4]:
Current step bound = 21
End step min = 17
End step max = None

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 17]), ('conformance_module', [21])].

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.054902s.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.009802s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [5]:
Current step bound = 22
End step min = 17
End step max = None

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 17]), ('conformance_module', [22])].

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.056345s.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.010347s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [6]:
Current step bound = 23
End step min = 17
End step max = None

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 17]), ('conformance_module', [23])].

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.058557s.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.010768s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [7]:
Current step bound = 24
End step min = 17
End step max = None

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 17]), ('conformance_module', [24])].

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.062503s.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.010979s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [8]:
Current step bound = 25
End step min = 17
End step max = None

[18-02-2021_12-58-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 17]), ('conformance_module', [25])].

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.062124s.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.011804s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Beginning Incremental call [9]:
Current step bound = 26
End step min = 17
End step max = None

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 17]), ('conformance_module', [26])].

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Grounding completed in 0.062198s.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving started.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Model found:
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Solving completed in 0.014724s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Incremental solving completed in 0.709911s because STOP_CON_REACHED.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.591138s, Solving time = 0.099751s, Total time = 0.709911s
Final Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #152 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.111809s, Solving time = 0.014513s, Total time = 0.126322s
2 : Statistics :: Grounding time = 0.050422s, Solving time = 0.005600s, Total time = 0.056022s
3 : Statistics :: Grounding time = 0.053057s, Solving time = 0.008123s, Total time = 0.061180s
4 : Statistics :: Grounding time = 0.054902s, Solving time = 0.009802s, Total time = 0.064704s
5 : Statistics :: Grounding time = 0.056345s, Solving time = 0.010347s, Total time = 0.066691s
6 : Statistics :: Grounding time = 0.058557s, Solving time = 0.010768s, Total time = 0.069325s
7 : Statistics :: Grounding time = 0.062503s, Solving time = 0.010979s, Total time = 0.073482s
8 : Statistics :: Grounding time = 0.062124s, Solving time = 0.011804s, Total time = 0.073927s
9 : Statistics :: Grounding time = 0.062198s, Solving time = 0.014724s, Total time = 0.076922s

[18-02-2021_12-58-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.591138s, Solving time = 0.099751s, Total time = 0.709911s
Model :: Total atoms = 6403, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[18-02-2021_12-58-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),18)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),19)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[18-02-2021_12-58-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 0.5)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-58-12] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 17

[18-02-2021_12-58-12] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 9

[18-02-2021_12-58-12] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 4

[18-02-2021_12-58-12] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 21

[18-02-2021_12-58-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : PARTIAL PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Instantiated.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> The logic program was extended with 21 rules into program part conformance_module(step).

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> The logic program was extended with 27 rules into program part plan_module(step, start).

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> The logic program was extended with 4436 rules into program part state_module(step).

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=27, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 27], range_=IncRange(start=27, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 27, Max end step = None
Step inc = 1, Step inc init = 29, Stop con = StopCondition.Satisfiable

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Program building started.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Program building completed.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding base program parts.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding completed in 0.023899s.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving base program parts.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving completed in 0.003496s.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Incremental solving started.

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Beginning Incremental call [1]:
Current step bound = 28
End step min = 27
End step max = None

[18-02-2021_12-58-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding program parts: [('check', [28]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 27]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 27]), ('conformance_module', [28])].

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding completed in 0.347448s.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving started.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving completed in 0.036541s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Beginning Incremental call [2]:
Current step bound = 29
End step min = 27
End step max = None

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 27]), ('conformance_module', [29])].

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding completed in 0.071070s.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving started.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving completed in 0.007620s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Beginning Incremental call [3]:
Current step bound = 30
End step min = 27
End step max = None

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 27]), ('conformance_module', [30])].

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding completed in 0.072354s.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving started.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving completed in 0.010589s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Beginning Incremental call [4]:
Current step bound = 31
End step min = 27
End step max = None

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 27]), ('conformance_module', [31])].

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding completed in 0.078002s.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving started.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving completed in 0.013480s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Beginning Incremental call [5]:
Current step bound = 32
End step min = 27
End step max = None

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 27]), ('conformance_module', [32])].

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Grounding completed in 0.077820s.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving started.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Model found:
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Solving completed in 0.016778s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Incremental solving completed in 0.773226s because STOP_CON_REACHED.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.670593s, Solving time = 0.088502s, Total time = 0.773226s
Final Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #153 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.347448s, Solving time = 0.036541s, Total time = 0.383988s
2 : Statistics :: Grounding time = 0.071070s, Solving time = 0.007620s, Total time = 0.078690s
3 : Statistics :: Grounding time = 0.072354s, Solving time = 0.010589s, Total time = 0.082943s
4 : Statistics :: Grounding time = 0.078002s, Solving time = 0.013480s, Total time = 0.091481s
5 : Statistics :: Grounding time = 0.077820s, Solving time = 0.016778s, Total time = 0.094598s

[18-02-2021_12-58-13] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN GENERATED
Statistics :: Grounding time = 0.670593s, Solving time = 0.088502s, Total time = 0.773226s
Model :: Total atoms = 7843, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[18-02-2021_12-58-13] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),30)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)

[18-02-2021_12-58-13] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 2 : Time =     0.709911s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     0.773226s : Steps =    32 : Actions =    32 |  
  ====================================================================  

[18-02-2021_12-58-13] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-1]

[18-02-2021_12-58-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 1)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {3: 10, 2: 1.0, 1: 1.0})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 2))

[18-02-2021_12-58-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', 1.0)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[18-02-2021_12-58-13] DEBUG :: ASH Planner Main #1 >> Number of completed sub-goals: 21

[18-02-2021_12-58-13] DEBUG :: ASH Planner Main #1 >> Number of sub-goals yet to be completed: 5

[18-02-2021_12-58-13] DEBUG :: ASH Planner Main #1 >> Number of additional sub-goals completed this iteration: 5

[18-02-2021_12-58-13] DEBUG :: ASH Planner Main #1 >> Maximum sub-goal index: 26

[18-02-2021_12-58-13] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Instantiated.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> The logic program was extended with 224 rules into program part ash_initial_state.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> The logic program was extended with 56 rules into program part ash_goal_state.

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> The logic program was extended with 26 rules into program part conformance_module(step).

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> The logic program was extended with 32 rules into program part plan_module(step, start).

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> The logic program was extended with 5216 rules into program part state_module(step).

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=32, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 32], range_=IncRange(start=32, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 32, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[18-02-2021_12-58-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Program building started.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Program building completed.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding base program parts.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.025227s.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving base program parts.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.003495s.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Incremental solving started.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 32
End step max = None

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [33]), ('state_module', [0]), ('conformance_module', [0]), ('state_module', [1]), ('conformance_module', [1]), ('state_module', [2]), ('conformance_module', [2]), ('state_module', [3]), ('conformance_module', [3]), ('state_module', [4]), ('conformance_module', [4]), ('state_module', [5]), ('conformance_module', [5]), ('state_module', [6]), ('conformance_module', [6]), ('state_module', [7]), ('conformance_module', [7]), ('state_module', [8]), ('conformance_module', [8]), ('state_module', [9]), ('conformance_module', [9]), ('state_module', [10]), ('conformance_module', [10]), ('state_module', [11]), ('conformance_module', [11]), ('state_module', [12]), ('conformance_module', [12]), ('state_module', [13]), ('conformance_module', [13]), ('state_module', [14]), ('conformance_module', [14]), ('state_module', [15]), ('conformance_module', [15]), ('state_module', [16]), ('conformance_module', [16]), ('state_module', [17]), ('conformance_module', [17]), ('state_module', [18]), ('conformance_module', [18]), ('state_module', [19]), ('conformance_module', [19]), ('state_module', [20]), ('conformance_module', [20]), ('state_module', [21]), ('conformance_module', [21]), ('state_module', [22]), ('conformance_module', [22]), ('state_module', [23]), ('conformance_module', [23]), ('state_module', [24]), ('conformance_module', [24]), ('state_module', [25]), ('conformance_module', [25]), ('state_module', [26]), ('conformance_module', [26]), ('state_module', [27]), ('conformance_module', [27]), ('state_module', [28]), ('conformance_module', [28]), ('state_module', [29]), ('conformance_module', [29]), ('state_module', [30]), ('conformance_module', [30]), ('state_module', [31]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 32]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 32]), ('conformance_module', [33])].

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.380352s.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.043516s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 32
End step max = None

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 32]), ('conformance_module', [34])].

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.073294s.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.008899s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 32
End step max = None

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 32]), ('conformance_module', [35])].

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.074110s.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.011960s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 32
End step max = None

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 32]), ('conformance_module', [36])].

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.080318s.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.015541s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 32
End step max = None

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 32]), ('conformance_module', [37])].

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.084016s.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.015350s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 32
End step max = None

[18-02-2021_12-58-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 32]), ('conformance_module', [38])].

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.089047s.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.017341s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 32
End step max = None

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 32]), ('conformance_module', [39])].

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.091789s.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.022085s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 32
End step max = None

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 32]), ('conformance_module', [40])].

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.094829s.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.021207s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 32
End step max = None

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 32]), ('conformance_module', [41])].

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.089945s.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.023662s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 32
End step max = None

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 32]), ('conformance_module', [42])].

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.091835s.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.024173s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 32
End step max = None

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 32]), ('conformance_module', [43])].

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.092081s.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.025754s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 32
End step max = None

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 32]), ('conformance_module', [44])].

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.093468s.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.024998s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 32
End step max = None

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 32]), ('conformance_module', [45])].

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.095576s.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.039894s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 32
End step max = None

[18-02-2021_12-58-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 32]), ('conformance_module', [46])].

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.100363s.

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.062594s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 32
End step max = None

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 32]), ('conformance_module', [47])].

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.099103s.

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.097822s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 32
End step max = None

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 32]), ('conformance_module', [48])].

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.114033s.

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.178422s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 32
End step max = None

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 32]), ('conformance_module', [49])].

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.107951s.

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.217779s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 32
End step max = None

[18-02-2021_12-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 32]), ('conformance_module', [50])].

[18-02-2021_12-58-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.109415s.

[18-02-2021_12-58-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.332727s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 32
End step max = None

[18-02-2021_12-58-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 32]), ('conformance_module', [51])].

[18-02-2021_12-58-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.114434s.

[18-02-2021_12-58-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.619969s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 32
End step max = None

[18-02-2021_12-58-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 32]), ('conformance_module', [52])].

[18-02-2021_12-58-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.108136s.

[18-02-2021_12-58-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.762440s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 32
End step max = None

[18-02-2021_12-58-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 32]), ('conformance_module', [53])].

[18-02-2021_12-58-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.115499s.

[18-02-2021_12-58-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 1.308366s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 32
End step max = None

[18-02-2021_12-58-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 32]), ('conformance_module', [54])].

[18-02-2021_12-58-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.110764s.

[18-02-2021_12-58-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 1.888920s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 32
End step max = None

[18-02-2021_12-58-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 32]), ('conformance_module', [55])].

[18-02-2021_12-58-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.113513s.

[18-02-2021_12-58-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 2.231082s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [24]:
Current step bound = 56
End step min = 32
End step max = None

[18-02-2021_12-58-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 32]), ('conformance_module', [56])].

[18-02-2021_12-58-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.112768s.

[18-02-2021_12-58-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 3.937167s:
Result = UNSAT, Stop condition = SAT

[18-02-2021_12-58-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Beginning Incremental call [25]:
Current step bound = 57
End step min = 32
End step max = None

[18-02-2021_12-58-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 32]), ('conformance_module', [57])].

[18-02-2021_12-58-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Grounding completed in 0.116400s.

[18-02-2021_12-58-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving started.

[18-02-2021_12-58-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Model found:
Model :: Total atoms = 12490, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-58-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Solving completed in 0.417635s:
Result = SAT, Stop condition = SAT

[18-02-2021_12-58-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Incremental solving completed in 15.339637s because STOP_CON_REACHED.

[18-02-2021_12-58-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.778267s, Solving time = 12.352801s, Total time = 15.339637s
Final Model :: Total atoms = 12490, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-58-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #154 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.380352s, Solving time = 0.043516s, Total time = 0.423869s
2 : Statistics :: Grounding time = 0.073294s, Solving time = 0.008899s, Total time = 0.082193s
3 : Statistics :: Grounding time = 0.074110s, Solving time = 0.011960s, Total time = 0.086070s
4 : Statistics :: Grounding time = 0.080318s, Solving time = 0.015541s, Total time = 0.095859s
5 : Statistics :: Grounding time = 0.084016s, Solving time = 0.015350s, Total time = 0.099367s
6 : Statistics :: Grounding time = 0.089047s, Solving time = 0.017341s, Total time = 0.106388s
7 : Statistics :: Grounding time = 0.091789s, Solving time = 0.022085s, Total time = 0.113874s
8 : Statistics :: Grounding time = 0.094829s, Solving time = 0.021207s, Total time = 0.116036s
9 : Statistics :: Grounding time = 0.089945s, Solving time = 0.023662s, Total time = 0.113606s
10 : Statistics :: Grounding time = 0.091835s, Solving time = 0.024173s, Total time = 0.116008s
11 : Statistics :: Grounding time = 0.092081s, Solving time = 0.025754s, Total time = 0.117836s
12 : Statistics :: Grounding time = 0.093468s, Solving time = 0.024998s, Total time = 0.118466s
13 : Statistics :: Grounding time = 0.095576s, Solving time = 0.039894s, Total time = 0.135471s
14 : Statistics :: Grounding time = 0.100363s, Solving time = 0.062594s, Total time = 0.162958s
15 : Statistics :: Grounding time = 0.099103s, Solving time = 0.097822s, Total time = 0.196924s
16 : Statistics :: Grounding time = 0.114033s, Solving time = 0.178422s, Total time = 0.292455s
17 : Statistics :: Grounding time = 0.107951s, Solving time = 0.217779s, Total time = 0.325730s
18 : Statistics :: Grounding time = 0.109415s, Solving time = 0.332727s, Total time = 0.442142s
19 : Statistics :: Grounding time = 0.114434s, Solving time = 0.619969s, Total time = 0.734404s
20 : Statistics :: Grounding time = 0.108136s, Solving time = 0.762440s, Total time = 0.870576s
21 : Statistics :: Grounding time = 0.115499s, Solving time = 1.308366s, Total time = 1.423865s
22 : Statistics :: Grounding time = 0.110764s, Solving time = 1.888920s, Total time = 1.999685s
23 : Statistics :: Grounding time = 0.113513s, Solving time = 2.231082s, Total time = 2.344595s
24 : Statistics :: Grounding time = 0.112768s, Solving time = 3.937167s, Total time = 4.049935s
25 : Statistics :: Grounding time = 0.116400s, Solving time = 0.417635s, Total time = 0.534035s

[18-02-2021_12-58-29] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.778267s, Solving time = 12.352801s, Total time = 15.339637s
Model :: Total atoms = 12490, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[18-02-2021_12-58-29] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_left),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_right),30)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,2)),33)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),34)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),35)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,3)),36)
occurs(1,talos,release(manipulator_end_2,(block,4)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),38)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),39)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),40)
occurs(1,talos,release(manipulator_end_2,(block,6)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),43)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),44)
occurs(1,talos,release(manipulator_end_1,(block,5)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),46)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),47)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),48)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),49)
occurs(1,talos,release(manipulator_end_1,(block,3)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),52)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),53)
occurs(1,talos,release(manipulator_end_1,(block,2)),54)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),55)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),56)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),57)

[18-02-2021_12-58-29] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 1 : Time =    15.339637s : Steps =    57 : Actions =    57 |  
  ====================================================================  

[18-02-2021_12-58-29] INFO :: ASH Planner Main #1 >> Propagated partial planning finished:

    ====================    
    |  Level : Iters  |     
    |      3 : 1      |     
    |      2 : 2      |     
    |      1 : 4      |     
    ====================    

[18-02-2021_12-58-29] INFO :: Experiment >> 

      ================================================      
           Experimental run 20 : Time 24.893535s            
      ================================================      

[18-02-2021_12-58-29] INFO :: Experiment >> 

  ################################################################################################  
      All 20 experimental runs complete : Real time 326.475229s, Proccessing time 1017.312500s      
  ################################################################################################  

[18-02-2021_12-58-29] INFO :: Experiment >> 

          ========================================          
                     Experimental Data                      
          ========================================          

 RU  IT  AL        GT         ST         TT   S   A
  0   1   3  0.825822   0.714978   1.582879  18  18
  0   1   2  0.992920   0.268924   1.303768  17  17
  0   1   1  1.104151   0.212784   1.357764  13  13
  0   2   1  1.315593   0.256418   1.622238  27  27
  0   3   2  0.593091   0.098729   0.710305  26  26
  0   3   1  0.671435   0.093636   0.779042  32  32
  0   4   1  0.906185   0.139085   1.069004  39  39
  1   1   3  0.833597   0.641613   1.518227  18  18
  1   1   2  0.992684   0.275520   1.310716  17  17
  1   1   1  1.104954   0.217423   1.362685  13  13
  1   2   1  1.326637   0.264188   1.639299  27  27
  1   3   2  0.594979   0.100598   0.714422  26  26
  1   3   1  0.671020   0.090765   0.775735  32  32
  1   4   1  1.286496   0.249490   1.579166  43  43
  2   1   3  0.819942   0.556161   1.420490  18  18
  2   1   2  0.987524   0.310075   1.339957  17  17
  2   1   1  1.100811   0.212664   1.353738  13  13
  2   2   1  1.305078   0.264286   1.615431  27  27
  2   3   2  0.603453   0.102663   0.724611  26  26
  2   3   1  0.667141   0.091118   0.772874  32  32
  2   4   1  2.302692   2.876994   5.308811  53  53
  3   1   3  0.824687   0.625458   1.495446  18  18
  3   1   2  0.978920   0.318458   1.339182  17  17
  3   1   1  1.093849   0.208391   1.341290  13  13
  3   2   1  1.307351   0.273532   1.628873  27  27
  3   3   2  0.594069   0.099169   0.712753  26  26
  3   3   1  0.682956   0.088198   0.784924  32  32
  3   4   1  0.892300   0.142313   1.059356  39  39
  4   1   3  0.828112   0.619970   1.491959  18  18
  4   1   2  1.002966   0.261677   1.307191  17  17
  4   1   1  1.108560   0.197055   1.344497  13  13
  4   2   1  1.312873   0.273807   1.633538  27  27
  4   3   2  0.616772   0.098307   0.733677  26  26
  4   3   1  0.672875   0.090536   0.777346  32  32
  4   4   1  2.290306   3.461092   5.879274  53  53
  5   1   3  0.821912   0.610123   1.474810  18  18
  5   1   2  0.968339   0.265343   1.276638  17  17
  5   1   1  1.090416   0.208247   1.340282  13  13
  5   2   1  1.308053   0.257501   1.612083  27  27
  5   3   2  0.587903   0.098642   0.706580  26  26
  5   3   1  0.672408   0.090555   0.776919  32  32
  5   4   1  1.260650   0.264542   1.569451  43  43
  6   1   3  0.831355   0.712404   1.589011  18  18
  6   1   2  0.978280   0.265016   1.285045  17  17
  6   1   1  1.098649   0.208266   1.347503  13  13
  6   2   1  1.306331   0.256416   1.614576  27  27
  6   3   2  0.592345   0.101225   0.712436  26  26
  6   3   1  0.673701   0.089889   0.776802  32  32
  6   4   1  2.308695   3.503463   5.943202  53  53
  7   1   3  0.839636   0.665787   1.549872  18  18
  7   1   2  0.923347   0.211057   1.173114  16  16
  7   1   1  1.092271   0.206448   1.339938  13  13
  7   2   1  1.246514   0.215062   1.504239  26  26
  7   3   2  0.663848   0.113217   0.799024  26  26
  7   3   1  0.746641   0.104807   0.867766  32  32
  7   4   1  1.275037   0.266455   1.585621  43  43
  8   1   3  0.857644   0.696074   1.596707  18  18
  8   1   2  0.970392   0.282273   1.295174  17  17
  8   1   1  1.129722   0.222404   1.393634  13  13
  8   2   1  1.343819   0.275431   1.667327  27  27
  8   3   2  0.588745   0.098928   0.706529  26  26
  8   3   1  0.670522   0.090271   0.774638  32  32
  8   4   1  2.293277   2.990515   5.417238  53  53
  9   1   3  0.824543   0.672369   1.538817  18  18
  9   1   2  0.984758   0.264988   1.291420  17  17
  9   1   1  1.096976   0.214255   1.349669  13  13
  9   2   1  1.378835   0.259505   1.684498  27  27
  9   3   2  0.592916   0.098285   0.709772  26  26
  9   3   1  0.673308   0.089155   0.775904  32  32
  9   4   1  2.296153   3.293576   5.723278  53  53
 10   1   3  0.826855   0.726954   1.596053  18  18
 10   1   2  0.973051   0.255662   1.270886  17  17
 10   1   1  1.090762   0.203532   1.336090  13  13
 10   2   1  1.306372   0.253270   1.606000  27  27
 10   3   2  0.595474   0.099762   0.713969  26  26
 10   3   1  0.693331   0.096708   0.803868  32  32
 10   4   1  2.307663   3.842273   6.286040  53  53
 11   1   3  0.840204   0.658561   1.541012  18  18
 11   1   2  1.006485   0.288621   1.337076  17  17
 11   1   1  1.085122   0.206954   1.333116  13  13
 11   2   1  1.343273   0.284264   1.674753  27  27
 11   3   2  0.612597   0.100070   0.731179  26  26
 11   3   1  0.674791   0.091090   0.780040  32  32
 11   4   1  2.741227  13.782918  16.731733  57  57
 12   1   3  0.839739   0.649367   1.532280  18  18
 12   1   2  0.976599   0.274602   1.294229  17  17
 12   1   1  1.125752   0.202904   1.368759  13  13
 12   2   1  1.299325   0.263563   1.610649  27  27
 12   3   2  0.592655   0.101313   0.713117  26  26
 12   3   1  0.691194   0.089584   0.794116  32  32
 12   4   1  2.740944  15.315413  18.265836  57  57
 13   1   3  0.832475   0.763594   1.639691  18  18
 13   1   2  0.971295   0.285202   1.299696  17  17
 13   1   1  1.090051   0.210932   1.342382  13  13
 13   2   1  1.319580   0.255532   1.625701  27  27
 13   3   2  0.596103   0.098448   0.713623  26  26
 13   3   1  0.663376   0.088526   0.765893  32  32
 13   4   1  1.283348   0.271700   1.601034  43  43
 14   1   3  0.853581   0.636350   1.534289  18  18
 14   1   2  0.991021   0.271522   1.306997  17  17
 14   1   1  1.114366   0.207742   1.364799  13  13
 14   2   1  1.297567   0.260380   1.605632  27  27
 14   3   2  0.589304   0.098618   0.706471  26  26
 14   3   1  0.670477   0.087884   0.772115  32  32
 14   4   1  2.802304  16.202520  19.218171  57  57
 15   1   3  0.843395   0.580144   1.466019  18  18
 15   1   2  1.010764   0.305006   1.359303  17  17
 15   1   1  1.119458   0.210543   1.369835  13  13
 15   2   1  1.323561   0.255271   1.626100  27  27
 15   3   2  0.592352   0.098376   0.709196  26  26
 15   3   1  0.669746   0.089500   0.773065  32  32
 15   4   1  1.250354   0.262827   1.558753  43  43
 16   1   3  0.826881   0.696179   1.565444  18  18
 16   1   2  0.974343   0.269264   1.285307  17  17
 16   1   1  1.106342   0.211501   1.356927  13  13
 16   2   1  1.377952   0.256124   1.680501  27  27
 16   3   2  0.615631   0.100887   0.735133  26  26
 16   3   1  0.670976   0.086588   0.772047  32  32
 16   4   1  1.265844   0.267023   1.578573  43  43
 17   1   3  0.828893   0.698878   1.572331  18  18
 17   1   2  1.008792   0.304905   1.356340  17  17
 17   1   1  1.130090   0.205554   1.375882  13  13
 17   2   1  1.305440   0.261062   1.616390  27  27
 17   3   2  0.602591   0.099989   0.721140  26  26
 17   3   1  0.672661   0.088507   0.775052  32  32
 17   4   1  1.285637   0.271679   1.602168  43  43
 18   1   3  0.830665   0.748823   1.621861  18  18
 18   1   2  0.975375   0.286623   1.303310  17  17
 18   1   1  1.093330   0.200813   1.333082  13  13
 18   2   1  1.320556   0.260979   1.630253  27  27
 18   3   2  0.593398   0.098864   0.711541  26  26
 18   3   1  0.680904   0.092577   0.786972  32  32
 18   4   1  2.775692  13.110173  16.103186  57  57
 19   1   3  0.831087   0.580658   1.451909  18  18
 19   1   2  0.973004   0.300638   1.316729  17  17
 19   1   1  1.088550   0.210652   1.341310  13  13
 19   2   1  1.312791   0.276863   1.634096  27  27
 19   3   2  0.591138   0.099751   0.709911  26  26
 19   3   1  0.670593   0.088502   0.773226  32  32
 19   4   1  2.778267  12.352801  15.339637  57  57

[18-02-2021_12-58-29] INFO :: __main__ >> Exiting with code 0

