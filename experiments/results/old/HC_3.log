[06-02-2021_15-20-32] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
         This program comes with ABSOLUTELY NO WARRANTY; for details type `--warranty'. This is free software,          
           and you are welcome to redistribute it under certain conditions; type `--conditions' for details.            
                                     For help and usage instructions type `--help'.                                     
                                                                                                                        
  ####################################################################################################################  

[06-02-2021_15-20-32] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[06-02-2021_15-20-32] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[06-02-2021_15-20-32] DEBUG :: __main__ >> Parsing command line arguments: ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp', '-sc', '-pm=hierarchical', '-xf', '-df', '-ir', '2', '-er', '20', '-op=False'].

[06-02-2021_15-20-32] DEBUG :: __main__ >> Parsing complete:
('domain_files', ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'])
('log_file', None)
('excel_file', './results/ASH_Excel_06-02-2021_15-20-32.xlsx')
('data_file', './results/ASH_Data_06-02-2021_15-20-32.dat')
('data_sep', ' ')
('data_end', '\n')
('silence_ash', False)
('silence_clingo', True)
('logging', 'INFO')
('threads', 8)
('time_limit', [3600])
('planning_mode', 'hierarchical')
('enforce_conformance', True)
('optimise_plan', False)
('step_max', [0])
('step_inc', [1])
('step_inc_init', [2])
('partial_planning_length', [])
('experimental_runs', 20)
('initial_runs', 2)
('warranty', False)
('conditions', False)

[06-02-2021_15-20-32] DEBUG :: planner.ASH >> Instantiating new planning domain: Name = None, Domain files = ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'].

[06-02-2021_15-20-32] DEBUG :: planner.ASH >> The domain files ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'entities': True, 'static_state': True, 'initial_state': True, 'goal_state': True}.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Anon #1 >> Instantiated.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Anon #1 >> Entering standard solve call:
Solver options = --outf=3, --warn=none, -t, 1, -c, plan_at=0
Program parts = #program instance_module()., #program domain_sorts().

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Anon #1 >> Program building started.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Anon #1 >> Program building completed.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Anon #1 >> Grounding started.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Anon #1 >> Grounding completed in 0.006236s.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Anon #1 >> Solving started.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Anon #1 >> Model found:
Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Anon #1 >> Solving completed in 0.000213s.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Anon #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.006236s, Solving time = 0.000213s, Total time = 0.006448s
Final Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-20-32] DEBUG :: planner.ASH >> Planning Domain Anon #1 : Abstraction range = [1-3] instantiated successfully

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program ASH #1 >> Instantiated.

[06-02-2021_15-20-32] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program instance_module.
al((1..abstraction_max)).
#const plan_at = 1.
pl(AL) :- AL=plan_at; al(AL).
sl(AL) :- AL>=plan_at; AL<=(plan_at+1); al(AL).
sl(AL) :- plan_at<1; al(AL).
(boolean(true);boolean(false)).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1>=AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1!=DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step).
#show is/2.
#show holds/4.
{ holds(AL,F,V,step) :  } :- fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step=0.
#false :- not 1 = { holds(AL,F,V,step) : fluent(AL,_,F,V) }; fluent(AL,_,F,_); AL>=plan_at; sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step>0.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; sl(AL).
#program plan_module(step,start).
#show occurs/4.
#show sub_goal/6.
{ occurs(AL,ROBOT,A,step) : action(AL,ROBOT,A) } :- incomplete_plan((step-1)); AL=plan_at; step>start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1!=A_2; action(AL,ROBOT,A_1); action(AL,ROBOT,A_2); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
:~ occurs(AL,step); incomplete_plan((step-1)); AL=plan_at; step>start. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); incomplete_plan((step-1)); AL=plan_at; step>start. [1@2,ROBOT,A,step]
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); AL=plan_at; step>start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); AL=plan_at; step>start.
goal_satisfied(AL,F,V,true,step) :- goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
goal_satisfied(AL,F,V,false,step) :- goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
incomplete_plan(step) :- goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); AL=plan_at; boolean(B).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#program conformance_module(step).
#show current_sub_goal/7.
current_sub_goal((AL+1),ROBOT,A,F,V,1,0) :- sub_goal((AL+1),ROBOT,A,F,V,1); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_sub_goals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); incomplete_sub_goals((AL+1),I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); AL=plan_at.
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
#program goal_abstraction_module.
#show holds/4.
#show goal/4.
holds(AL,F,V,0) :- goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) :  } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); AL>=plan_at; al(AL).
#false :- not 1 = { holds(AL,F,V,0) : fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); AL>=plan_at; al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL<reduc; al(AL).
state(AL,extensible,retracted) :- AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL<reduc; al(AL).
state(AL,door,open) :- AL<reduc; al(AL).
state(AL,door,closed) :- AL<reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ!=nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ!=SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1<redef; AL_2<redef; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; sl(AL).
action(AL,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; sl(AL).
#program domain_rules(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1!=STATE_2; AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,in(ROBO),L_1,(t-1)); not is(AL,connected(L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,configuration(D),closed,(t-1)); holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,actuate(DESC,D),t) :- not 1 = { holds(AL,grasping(DESC),H,(t-1)) : desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,ROBO,actuate(DESC,D)), fluent(AL,inertial,grasping(DESC),H) }; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); is(AL,in(OBJ,L)); action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L),t) :- holds(AL,configuration(DESC),extended,(t-1)); action(AL,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; OBJ_1!=nothing; action(AL,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(END,OBJ),t) :- not holds(AL,configuration(END),aligned_with(OBJ),(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t>0.
not occurs(AL,ROBO,release(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,configure(DESC_1,STATE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL<reduc; pl(AL).
not occurs(AL,ROBO,configure(DESC,aligned_with(OBJ)),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); action(AL,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,DESC,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ_1,BLOCK),t) :- holds(AL,on(OBJ_2),BLOCK,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; OBJ!=nothing; SURFACE!=nothing; action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
not occurs(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),t) :- holds(AL,grasping(DESC_2),OBJ_2,(t-1)); OBJ_1!=OBJ_2; DESC_1!=DESC_2; action(AL,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- holds(AL,configuration(DESC),retracted,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC_1,OBJ,SURFACE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,surface,SURFACE); pl(AL).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1!=nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1=(block,N_1); number(N_1); BLOCK_2=(block,N_2); number(N_2); BLOCK_1!=BLOCK_2; N_1>N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK : holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK : is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1!=L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_2; sl(AL_4); AL_4>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ!=nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_3; sl(AL_5); AL_5>=AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2; sl(AL_5); AL_5>=AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N<=3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N>3; N<=6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2=(X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
goal(1,on((block,3)),puzzle_room_table_left,true).
goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X<MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[06-02-2021_15-20-32] INFO :: ASH Planner Main #1 >> Generating initial state.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Instantiated.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('initial_state', []), ('instance_module', []), ('state_module', [0]), ('domain_sorts', []), ('domain_rules', [0])

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Program building started.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Program building completed.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Grounding started.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Grounding completed in 0.092202s.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Solving started.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Model found:
Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Solving completed in 0.014042s.

[06-02-2021_15-20-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.092202s, Solving time = 0.014042s, Total time = 0.106244s
Final Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-20-32] INFO :: ASH Planner Main #1 >> Initial state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.092202s, Solving time = 0.014042s, Total time = 0.106244s
Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-20-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 3            
          ========================================          

holds(3,complete(blue),false,0)
holds(3,complete(red),false,0)
holds(3,grasping(manipulator_arm_1),nothing,0)
holds(3,grasping(manipulator_arm_2),nothing,0)
holds(3,in(manipulator_arm_1),starting_room,0)
holds(3,in(manipulator_arm_2),starting_room,0)
holds(3,in(puzzle_room_table),puzzle_room,0)
holds(3,in(talos),starting_room,0)
holds(3,in((block,1)),puzzle_room,0)
holds(3,in((block,2)),puzzle_room,0)
holds(3,in((block,3)),puzzle_room,0)
holds(3,in((block,4)),store_room,0)
holds(3,in((block,5)),store_room,0)
holds(3,in((block,6)),store_room,0)
holds(3,on((block,1)),puzzle_room_table,0)
holds(3,on((block,2)),puzzle_room_table,0)
holds(3,on((block,3)),(block,1),0)
holds(3,on((block,4)),nothing,0)
holds(3,on((block,5)),nothing,0)
holds(3,on((block,6)),nothing,0)
holds(3,tower_base((block,1)),true,0)
holds(3,tower_base((block,2)),true,0)
holds(3,tower_base((block,3)),false,0)
holds(3,tower_base((block,4)),false,0)
holds(3,tower_base((block,5)),false,0)
holds(3,tower_base((block,6)),false,0)
holds(3,unordered_tower((block,1)),true,0)
holds(3,unordered_tower((block,2)),false,0)
holds(3,unordered_tower((block,3)),false,0)
holds(3,unordered_tower((block,4)),false,0)
holds(3,unordered_tower((block,5)),false,0)
holds(3,unordered_tower((block,6)),false,0)
holds(3,in_tower((block,1),(block,1)),true,0)
holds(3,in_tower((block,1),(block,2)),false,0)
holds(3,in_tower((block,1),(block,3)),true,0)
holds(3,in_tower((block,1),(block,4)),false,0)
holds(3,in_tower((block,1),(block,5)),false,0)
holds(3,in_tower((block,1),(block,6)),false,0)
holds(3,in_tower((block,2),(block,1)),false,0)
holds(3,in_tower((block,2),(block,2)),true,0)
holds(3,in_tower((block,2),(block,3)),false,0)
holds(3,in_tower((block,2),(block,4)),false,0)
holds(3,in_tower((block,2),(block,5)),false,0)
holds(3,in_tower((block,2),(block,6)),false,0)
holds(3,in_tower((block,3),(block,1)),false,0)
holds(3,in_tower((block,3),(block,2)),false,0)
holds(3,in_tower((block,3),(block,3)),false,0)
holds(3,in_tower((block,3),(block,4)),false,0)
holds(3,in_tower((block,3),(block,5)),false,0)
holds(3,in_tower((block,3),(block,6)),false,0)
holds(3,in_tower((block,4),(block,1)),false,0)
holds(3,in_tower((block,4),(block,2)),false,0)
holds(3,in_tower((block,4),(block,3)),false,0)
holds(3,in_tower((block,4),(block,4)),false,0)
holds(3,in_tower((block,4),(block,5)),false,0)
holds(3,in_tower((block,4),(block,6)),false,0)
holds(3,in_tower((block,5),(block,1)),false,0)
holds(3,in_tower((block,5),(block,2)),false,0)
holds(3,in_tower((block,5),(block,3)),false,0)
holds(3,in_tower((block,5),(block,4)),false,0)
holds(3,in_tower((block,5),(block,5)),false,0)
holds(3,in_tower((block,5),(block,6)),false,0)
holds(3,in_tower((block,6),(block,1)),false,0)
holds(3,in_tower((block,6),(block,2)),false,0)
holds(3,in_tower((block,6),(block,3)),false,0)
holds(3,in_tower((block,6),(block,4)),false,0)
holds(3,in_tower((block,6),(block,5)),false,0)
holds(3,in_tower((block,6),(block,6)),false,0)

[06-02-2021_15-20-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 2            
          ========================================          

holds(2,complete(blue),false,0)
holds(2,complete(red),false,0)
holds(2,configuration(manipulator_arm_1),retracted,0)
holds(2,configuration(manipulator_arm_2),retracted,0)
holds(2,configuration(puzzle_room_door),closed,0)
holds(2,configuration(starting_room_door),closed,0)
holds(2,configuration(store_room_door),closed,0)
holds(2,grasping(manipulator_arm_1),nothing,0)
holds(2,grasping(manipulator_arm_2),nothing,0)
holds(2,in(manipulator_arm_1),starting_room,0)
holds(2,in(manipulator_arm_2),starting_room,0)
holds(2,in(puzzle_room_table),puzzle_room,0)
holds(2,in(talos),starting_room,0)
holds(2,in((block,1)),puzzle_room,0)
holds(2,in((block,2)),puzzle_room,0)
holds(2,in((block,3)),puzzle_room,0)
holds(2,in((block,4)),store_room,0)
holds(2,in((block,5)),store_room,0)
holds(2,in((block,6)),store_room,0)
holds(2,on((block,1)),puzzle_room_table,0)
holds(2,on((block,2)),puzzle_room_table,0)
holds(2,on((block,3)),(block,1),0)
holds(2,on((block,4)),nothing,0)
holds(2,on((block,5)),nothing,0)
holds(2,on((block,6)),nothing,0)
holds(2,tower_base((block,1)),true,0)
holds(2,tower_base((block,2)),true,0)
holds(2,tower_base((block,3)),false,0)
holds(2,tower_base((block,4)),false,0)
holds(2,tower_base((block,5)),false,0)
holds(2,tower_base((block,6)),false,0)
holds(2,unordered_tower((block,1)),true,0)
holds(2,unordered_tower((block,2)),false,0)
holds(2,unordered_tower((block,3)),false,0)
holds(2,unordered_tower((block,4)),false,0)
holds(2,unordered_tower((block,5)),false,0)
holds(2,unordered_tower((block,6)),false,0)
holds(2,in_tower((block,1),(block,1)),true,0)
holds(2,in_tower((block,1),(block,2)),false,0)
holds(2,in_tower((block,1),(block,3)),true,0)
holds(2,in_tower((block,1),(block,4)),false,0)
holds(2,in_tower((block,1),(block,5)),false,0)
holds(2,in_tower((block,1),(block,6)),false,0)
holds(2,in_tower((block,2),(block,1)),false,0)
holds(2,in_tower((block,2),(block,2)),true,0)
holds(2,in_tower((block,2),(block,3)),false,0)
holds(2,in_tower((block,2),(block,4)),false,0)
holds(2,in_tower((block,2),(block,5)),false,0)
holds(2,in_tower((block,2),(block,6)),false,0)
holds(2,in_tower((block,3),(block,1)),false,0)
holds(2,in_tower((block,3),(block,2)),false,0)
holds(2,in_tower((block,3),(block,3)),false,0)
holds(2,in_tower((block,3),(block,4)),false,0)
holds(2,in_tower((block,3),(block,5)),false,0)
holds(2,in_tower((block,3),(block,6)),false,0)
holds(2,in_tower((block,4),(block,1)),false,0)
holds(2,in_tower((block,4),(block,2)),false,0)
holds(2,in_tower((block,4),(block,3)),false,0)
holds(2,in_tower((block,4),(block,4)),false,0)
holds(2,in_tower((block,4),(block,5)),false,0)
holds(2,in_tower((block,4),(block,6)),false,0)
holds(2,in_tower((block,5),(block,1)),false,0)
holds(2,in_tower((block,5),(block,2)),false,0)
holds(2,in_tower((block,5),(block,3)),false,0)
holds(2,in_tower((block,5),(block,4)),false,0)
holds(2,in_tower((block,5),(block,5)),false,0)
holds(2,in_tower((block,5),(block,6)),false,0)
holds(2,in_tower((block,6),(block,1)),false,0)
holds(2,in_tower((block,6),(block,2)),false,0)
holds(2,in_tower((block,6),(block,3)),false,0)
holds(2,in_tower((block,6),(block,4)),false,0)
holds(2,in_tower((block,6),(block,5)),false,0)
holds(2,in_tower((block,6),(block,6)),false,0)

[06-02-2021_15-20-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 1            
          ========================================          

holds(1,complete(blue),false,0)
holds(1,complete(red),false,0)
holds(1,configuration(manipulator_end_1),aligned_with(nothing),0)
holds(1,configuration(manipulator_end_2),aligned_with(nothing),0)
holds(1,configuration(manipulator_limb_1),retracted,0)
holds(1,configuration(manipulator_limb_2),retracted,0)
holds(1,configuration(puzzle_room_door),closed,0)
holds(1,configuration(starting_room_door),closed,0)
holds(1,configuration(store_room_door),closed,0)
holds(1,grasping(manipulator_arm_1),nothing,0)
holds(1,grasping(manipulator_arm_2),nothing,0)
holds(1,grasping(manipulator_end_1),nothing,0)
holds(1,grasping(manipulator_end_2),nothing,0)
holds(1,in(manipulator_arm_1),(starting_room,0),0)
holds(1,in(manipulator_arm_2),(starting_room,0),0)
holds(1,in(manipulator_end_1),(starting_room,0),0)
holds(1,in(manipulator_end_2),(starting_room,0),0)
holds(1,in(manipulator_limb_1),(starting_room,0),0)
holds(1,in(manipulator_limb_2),(starting_room,0),0)
holds(1,in(puzzle_room_table),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_left),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_right),(puzzle_room,1),0)
holds(1,in(talos),(starting_room,0),0)
holds(1,in((block,1)),(puzzle_room,1),0)
holds(1,in((block,2)),(puzzle_room,1),0)
holds(1,in((block,3)),(puzzle_room,1),0)
holds(1,in((block,4)),(store_room,0),0)
holds(1,in((block,5)),(store_room,0),0)
holds(1,in((block,6)),(store_room,0),0)
holds(1,on((block,1)),puzzle_room_table_left,0)
holds(1,on((block,2)),puzzle_room_table_right,0)
holds(1,on((block,3)),(block,1),0)
holds(1,on((block,4)),nothing,0)
holds(1,on((block,5)),nothing,0)
holds(1,on((block,6)),nothing,0)
holds(1,tower_base((block,1)),true,0)
holds(1,tower_base((block,2)),true,0)
holds(1,tower_base((block,3)),false,0)
holds(1,tower_base((block,4)),false,0)
holds(1,tower_base((block,5)),false,0)
holds(1,tower_base((block,6)),false,0)
holds(1,unordered_tower((block,1)),true,0)
holds(1,unordered_tower((block,2)),false,0)
holds(1,unordered_tower((block,3)),false,0)
holds(1,unordered_tower((block,4)),false,0)
holds(1,unordered_tower((block,5)),false,0)
holds(1,unordered_tower((block,6)),false,0)
holds(1,in_tower((block,1),(block,1)),true,0)
holds(1,in_tower((block,1),(block,2)),false,0)
holds(1,in_tower((block,1),(block,3)),true,0)
holds(1,in_tower((block,1),(block,4)),false,0)
holds(1,in_tower((block,1),(block,5)),false,0)
holds(1,in_tower((block,1),(block,6)),false,0)
holds(1,in_tower((block,2),(block,1)),false,0)
holds(1,in_tower((block,2),(block,2)),true,0)
holds(1,in_tower((block,2),(block,3)),false,0)
holds(1,in_tower((block,2),(block,4)),false,0)
holds(1,in_tower((block,2),(block,5)),false,0)
holds(1,in_tower((block,2),(block,6)),false,0)
holds(1,in_tower((block,3),(block,1)),false,0)
holds(1,in_tower((block,3),(block,2)),false,0)
holds(1,in_tower((block,3),(block,3)),false,0)
holds(1,in_tower((block,3),(block,4)),false,0)
holds(1,in_tower((block,3),(block,5)),false,0)
holds(1,in_tower((block,3),(block,6)),false,0)
holds(1,in_tower((block,4),(block,1)),false,0)
holds(1,in_tower((block,4),(block,2)),false,0)
holds(1,in_tower((block,4),(block,3)),false,0)
holds(1,in_tower((block,4),(block,4)),false,0)
holds(1,in_tower((block,4),(block,5)),false,0)
holds(1,in_tower((block,4),(block,6)),false,0)
holds(1,in_tower((block,5),(block,1)),false,0)
holds(1,in_tower((block,5),(block,2)),false,0)
holds(1,in_tower((block,5),(block,3)),false,0)
holds(1,in_tower((block,5),(block,4)),false,0)
holds(1,in_tower((block,5),(block,5)),false,0)
holds(1,in_tower((block,5),(block,6)),false,0)
holds(1,in_tower((block,6),(block,1)),false,0)
holds(1,in_tower((block,6),(block,2)),false,0)
holds(1,in_tower((block,6),(block,3)),false,0)
holds(1,in_tower((block,6),(block,4)),false,0)
holds(1,in_tower((block,6),(block,5)),false,0)
holds(1,in_tower((block,6),(block,6)),false,0)

[06-02-2021_15-20-33] INFO :: ASH Planner Main #1 >> Generating goal state.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Instantiated.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('goal_state', []), ('instance_module', []), ('goal_abstraction_module', []), ('domain_sorts', []), ('domain_rules', [0])

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Program building started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Program building completed.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Grounding started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Grounding completed in 0.036219s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Model found:
Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Solving completed in 0.004669s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.036219s, Solving time = 0.004669s, Total time = 0.040888s
Final Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-20-33] INFO :: ASH Planner Main #1 >> Goal state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.036219s, Solving time = 0.004669s, Total time = 0.040888s
Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-20-33] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 3              
          ========================================          

goal(3,complete(blue),false,false)
goal(3,complete(blue),true,true)
goal(3,complete(red),false,false)
goal(3,complete(red),true,true)
goal(3,on((block,3)),nothing,false)
goal(3,on((block,3)),puzzle_room_table,true)
goal(3,on((block,3)),(block,1),false)
goal(3,on((block,3)),(block,2),false)
goal(3,on((block,3)),(block,4),false)
goal(3,on((block,3)),(block,5),false)
goal(3,on((block,3)),(block,6),false)
goal(3,on((block,6)),nothing,false)
goal(3,on((block,6)),puzzle_room_table,true)
goal(3,on((block,6)),(block,1),false)
goal(3,on((block,6)),(block,2),false)
goal(3,on((block,6)),(block,3),false)
goal(3,on((block,6)),(block,4),false)
goal(3,on((block,6)),(block,5),false)

[06-02-2021_15-20-33] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 2              
          ========================================          

goal(2,complete(blue),false,false)
goal(2,complete(blue),true,true)
goal(2,complete(red),false,false)
goal(2,complete(red),true,true)
goal(2,on((block,3)),nothing,false)
goal(2,on((block,3)),puzzle_room_table,true)
goal(2,on((block,3)),(block,1),false)
goal(2,on((block,3)),(block,2),false)
goal(2,on((block,3)),(block,4),false)
goal(2,on((block,3)),(block,5),false)
goal(2,on((block,3)),(block,6),false)
goal(2,on((block,6)),nothing,false)
goal(2,on((block,6)),puzzle_room_table,true)
goal(2,on((block,6)),(block,1),false)
goal(2,on((block,6)),(block,2),false)
goal(2,on((block,6)),(block,3),false)
goal(2,on((block,6)),(block,4),false)
goal(2,on((block,6)),(block,5),false)

[06-02-2021_15-20-33] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 1              
          ========================================          

goal(1,complete(blue),false,false)
goal(1,complete(blue),true,true)
goal(1,complete(red),false,false)
goal(1,complete(red),true,true)
goal(1,on((block,3)),nothing,false)
goal(1,on((block,3)),puzzle_room_table_left,true)
goal(1,on((block,3)),puzzle_room_table_right,false)
goal(1,on((block,3)),(block,1),false)
goal(1,on((block,3)),(block,2),false)
goal(1,on((block,3)),(block,4),false)
goal(1,on((block,3)),(block,5),false)
goal(1,on((block,3)),(block,6),false)
goal(1,on((block,6)),nothing,false)
goal(1,on((block,6)),puzzle_room_table_left,false)
goal(1,on((block,6)),puzzle_room_table_right,true)
goal(1,on((block,6)),(block,1),false)
goal(1,on((block,6)),(block,2),false)
goal(1,on((block,6)),(block,3),false)
goal(1,on((block,6)),(block,4),false)
goal(1,on((block,6)),(block,5),false)

[06-02-2021_15-20-33] INFO :: Experiment >> 

  ################################################################################################  
                  Running experiments : Initial runs = 2 : Experimental runs = 20                   
  ################################################################################################  

[06-02-2021_15-20-33] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-20-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-20-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-20-33] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Instantiated.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building completed.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding base program parts.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.012833s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving base program parts.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.001972s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.039867s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005502s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.030712s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.002795s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.031581s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.004581s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.035560s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005724s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.035677s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005881s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.038168s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.006637s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.039412s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.007464s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.038715s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.007865s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.041473s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.009956s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.044600s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.028861s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.051829s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.020470s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.051800s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.034858s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.047927s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.038705s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.050021s.

[06-02-2021_15-20-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.078141s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.088419s.

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.129927s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.082212s.

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.275593s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.088077s.

[06-02-2021_15-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.313027s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-20-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-20-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.089744s.

[06-02-2021_15-20-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.551875s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-20-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-20-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.095477s.

[06-02-2021_15-20-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.859689s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-20-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-20-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.098408s.

[06-02-2021_15-20-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-20-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Model found:
Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-20-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.201632s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-20-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving completed in 3.807793s because STOP_CON_REACHED.

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.132513s, Solving time = 2.591155s, Total time = 3.807793s
Final Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039867s, Solving time = 0.005502s, Total time = 0.045369s
2 : Statistics :: Grounding time = 0.030712s, Solving time = 0.002795s, Total time = 0.033506s
3 : Statistics :: Grounding time = 0.031581s, Solving time = 0.004581s, Total time = 0.036162s
4 : Statistics :: Grounding time = 0.035560s, Solving time = 0.005724s, Total time = 0.041284s
5 : Statistics :: Grounding time = 0.035677s, Solving time = 0.005881s, Total time = 0.041558s
6 : Statistics :: Grounding time = 0.038168s, Solving time = 0.006637s, Total time = 0.044805s
7 : Statistics :: Grounding time = 0.039412s, Solving time = 0.007464s, Total time = 0.046876s
8 : Statistics :: Grounding time = 0.038715s, Solving time = 0.007865s, Total time = 0.046579s
9 : Statistics :: Grounding time = 0.041473s, Solving time = 0.009956s, Total time = 0.051429s
10 : Statistics :: Grounding time = 0.044600s, Solving time = 0.028861s, Total time = 0.073461s
11 : Statistics :: Grounding time = 0.051829s, Solving time = 0.020470s, Total time = 0.072299s
12 : Statistics :: Grounding time = 0.051800s, Solving time = 0.034858s, Total time = 0.086658s
13 : Statistics :: Grounding time = 0.047927s, Solving time = 0.038705s, Total time = 0.086632s
14 : Statistics :: Grounding time = 0.050021s, Solving time = 0.078141s, Total time = 0.128162s
15 : Statistics :: Grounding time = 0.088419s, Solving time = 0.129927s, Total time = 0.218346s
16 : Statistics :: Grounding time = 0.082212s, Solving time = 0.275593s, Total time = 0.357805s
17 : Statistics :: Grounding time = 0.088077s, Solving time = 0.313027s, Total time = 0.401104s
18 : Statistics :: Grounding time = 0.089744s, Solving time = 0.551875s, Total time = 0.641619s
19 : Statistics :: Grounding time = 0.095477s, Solving time = 0.859689s, Total time = 0.955166s
20 : Statistics :: Grounding time = 0.098408s, Solving time = 0.201632s, Total time = 0.300040s

[06-02-2021_15-20-37] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.132513s, Solving time = 2.591155s, Total time = 3.807793s
Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-20-37] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_1,(block,5)),8)
occurs(3,talos,move(store_room),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,move(puzzle_room),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),14)
occurs(3,talos,release(manipulator_arm_1,(block,3)),15)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),16)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),17)
occurs(3,talos,release(manipulator_arm_1,(block,2)),18)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),19)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),20)

[06-02-2021_15-20-37] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-20-37] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Instantiated.

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building started.

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building completed.

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding base program parts.

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.013992s.

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving base program parts.

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.002064s.

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving started.

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.718722s.

[06-02-2021_15-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.260092s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.072008s.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.018348s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.071441s.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.017638s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.075871s.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.022122s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.081855s.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.023729s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.082715s.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.028708s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.086651s.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.029538s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.084104s.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.035131s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.077474s.

[06-02-2021_15-20-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.034590s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.079212s.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.047328s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.080534s.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.058430s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.082761s.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.064171s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.084455s.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.097804s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.094537s.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.052735s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.089222s.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.103147s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.086304s.

[06-02-2021_15-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.179923s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.216878s.

[06-02-2021_15-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.251917s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.225145s.

[06-02-2021_15-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.211216s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-20-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-20-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.230568s.

[06-02-2021_15-20-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.376939s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-20-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-20-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.228975s.

[06-02-2021_15-20-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.593391s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-20-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-20-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.241247s.

[06-02-2021_15-20-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.044749s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-20-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-20-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.243363s.

[06-02-2021_15-20-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.269074s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-20-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-20-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.250037s.

[06-02-2021_15-20-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.874066s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-20-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-20-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.251260s.

[06-02-2021_15-20-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.857643s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-20-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-20-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.263467s.

[06-02-2021_15-20-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.008936s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-20-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-20-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.258872s.

[06-02-2021_15-20-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Model found:
Model :: Total atoms = 9728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.232335s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving completed in 13.448983s because STOP_CON_REACHED.

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.371668s, Solving time = 8.795765s, Total time = 13.448983s
Final Model :: Total atoms = 9728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.718722s, Solving time = 0.260092s, Total time = 0.978814s
2 : Statistics :: Grounding time = 0.072008s, Solving time = 0.018348s, Total time = 0.090356s
3 : Statistics :: Grounding time = 0.071441s, Solving time = 0.017638s, Total time = 0.089079s
4 : Statistics :: Grounding time = 0.075871s, Solving time = 0.022122s, Total time = 0.097993s
5 : Statistics :: Grounding time = 0.081855s, Solving time = 0.023729s, Total time = 0.105584s
6 : Statistics :: Grounding time = 0.082715s, Solving time = 0.028708s, Total time = 0.111423s
7 : Statistics :: Grounding time = 0.086651s, Solving time = 0.029538s, Total time = 0.116189s
8 : Statistics :: Grounding time = 0.084104s, Solving time = 0.035131s, Total time = 0.119235s
9 : Statistics :: Grounding time = 0.077474s, Solving time = 0.034590s, Total time = 0.112064s
10 : Statistics :: Grounding time = 0.079212s, Solving time = 0.047328s, Total time = 0.126540s
11 : Statistics :: Grounding time = 0.080534s, Solving time = 0.058430s, Total time = 0.138964s
12 : Statistics :: Grounding time = 0.082761s, Solving time = 0.064171s, Total time = 0.146931s
13 : Statistics :: Grounding time = 0.084455s, Solving time = 0.097804s, Total time = 0.182259s
14 : Statistics :: Grounding time = 0.094537s, Solving time = 0.052735s, Total time = 0.147272s
15 : Statistics :: Grounding time = 0.089222s, Solving time = 0.103147s, Total time = 0.192369s
16 : Statistics :: Grounding time = 0.086304s, Solving time = 0.179923s, Total time = 0.266227s
17 : Statistics :: Grounding time = 0.216878s, Solving time = 0.251917s, Total time = 0.468794s
18 : Statistics :: Grounding time = 0.225145s, Solving time = 0.211216s, Total time = 0.436362s
19 : Statistics :: Grounding time = 0.230568s, Solving time = 0.376939s, Total time = 0.607506s
20 : Statistics :: Grounding time = 0.228975s, Solving time = 0.593391s, Total time = 0.822367s
21 : Statistics :: Grounding time = 0.241247s, Solving time = 1.044749s, Total time = 1.285996s
22 : Statistics :: Grounding time = 0.243363s, Solving time = 1.269074s, Total time = 1.512437s
23 : Statistics :: Grounding time = 0.250037s, Solving time = 0.874066s, Total time = 1.124103s
24 : Statistics :: Grounding time = 0.251260s, Solving time = 0.857643s, Total time = 1.108903s
25 : Statistics :: Grounding time = 0.263467s, Solving time = 1.008936s, Total time = 1.272403s
26 : Statistics :: Grounding time = 0.258872s, Solving time = 1.232335s, Total time = 1.491207s

[06-02-2021_15-20-50] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.371668s, Solving time = 8.795765s, Total time = 13.448983s
Model :: Total atoms = 9728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-20-50] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,configure(manipulator_arm_2,retracted),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,configure(manipulator_arm_1,retracted),26)
occurs(2,talos,move(hallway),27)
occurs(2,talos,move(store_room),28)
occurs(2,talos,configure(manipulator_arm_2,extended),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),30)
occurs(2,talos,configure(manipulator_arm_2,retracted),31)
occurs(2,talos,move(hallway),32)
occurs(2,talos,move(puzzle_room),33)
occurs(2,talos,configure(manipulator_arm_1,extended),34)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),35)
occurs(2,talos,configure(manipulator_arm_2,extended),36)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),37)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),38)
occurs(2,talos,release(manipulator_arm_1,(block,3)),39)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),40)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),41)
occurs(2,talos,release(manipulator_arm_1,(block,2)),42)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),43)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),44)

[06-02-2021_15-20-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-20-50] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Instantiated.

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building started.

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building completed.

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding base program parts.

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.016957s.

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving base program parts.

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.002724s.

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving started.

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-20-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-20-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 5.975897s.

[06-02-2021_15-20-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-20-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.312618s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-20-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-20-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.445355s.

[06-02-2021_15-20-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-20-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.055569s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-20-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.448338s.

[06-02-2021_15-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.063187s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.460279s.

[06-02-2021_15-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.070019s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-20-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-21-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.470096s.

[06-02-2021_15-21-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.078971s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-21-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-21-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.465729s.

[06-02-2021_15-21-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.059356s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-21-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.486247s.

[06-02-2021_15-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.101037s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.478690s.

[06-02-2021_15-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.132677s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-21-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-21-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.490944s.

[06-02-2021_15-21-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.085348s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-21-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.496675s.

[06-02-2021_15-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.168132s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.496749s.

[06-02-2021_15-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.093299s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-21-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-21-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.514768s.

[06-02-2021_15-21-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.181840s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-21-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-21-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.523278s.

[06-02-2021_15-21-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.102588s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-21-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-21-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.530147s.

[06-02-2021_15-21-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.225807s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-21-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-21-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.550793s.

[06-02-2021_15-21-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.171631s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-21-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-21-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.557403s.

[06-02-2021_15-21-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.345414s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-21-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-21-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.565677s.

[06-02-2021_15-21-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.510354s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-21-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-21-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.573773s.

[06-02-2021_15-21-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.290555s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-21-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-21-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.591541s.

[06-02-2021_15-21-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.869620s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-21-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-21-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.594154s.

[06-02-2021_15-21-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.612569s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-21-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.609113s.

[06-02-2021_15-21-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.773367s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-21-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-21-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.625280s.

[06-02-2021_15-21-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.061079s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-21-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-21-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.630165s.

[06-02-2021_15-21-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.030695s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.649188s.

[06-02-2021_15-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.870804s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.657534s.

[06-02-2021_15-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 5.544550s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-21-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-21-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.670374s.

[06-02-2021_15-21-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.281864s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-21-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-21-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.674077s.

[06-02-2021_15-21-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 4.890222s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-21-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-21-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.685353s.

[06-02-2021_15-21-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 5.207886s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-21-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-21-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.710933s.

[06-02-2021_15-21-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 2.516184s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [30]:
Current step bound = 72
End step min = 0
End step max = None

[06-02-2021_15-21-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 0]), ('conformance_module', [72])].

[06-02-2021_15-21-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.688844s.

[06-02-2021_15-21-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 13.583209s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [31]:
Current step bound = 73
End step min = 0
End step max = None

[06-02-2021_15-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 0]), ('conformance_module', [73])].

[06-02-2021_15-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.706541s.

[06-02-2021_15-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Model found:
Model :: Total atoms = 16153, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 3.417383s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving completed in 70.705697s because STOP_CON_REACHED.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 23.040890s, Solving time = 46.710559s, Total time = 70.705697s
Final Model :: Total atoms = 16153, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.975897s, Solving time = 1.312618s, Total time = 7.288515s
2 : Statistics :: Grounding time = 0.445355s, Solving time = 0.055569s, Total time = 0.500924s
3 : Statistics :: Grounding time = 0.448338s, Solving time = 0.063187s, Total time = 0.511525s
4 : Statistics :: Grounding time = 0.460279s, Solving time = 0.070019s, Total time = 0.530298s
5 : Statistics :: Grounding time = 0.470096s, Solving time = 0.078971s, Total time = 0.549067s
6 : Statistics :: Grounding time = 0.465729s, Solving time = 0.059356s, Total time = 0.525085s
7 : Statistics :: Grounding time = 0.486247s, Solving time = 0.101037s, Total time = 0.587284s
8 : Statistics :: Grounding time = 0.478690s, Solving time = 0.132677s, Total time = 0.611367s
9 : Statistics :: Grounding time = 0.490944s, Solving time = 0.085348s, Total time = 0.576292s
10 : Statistics :: Grounding time = 0.496675s, Solving time = 0.168132s, Total time = 0.664807s
11 : Statistics :: Grounding time = 0.496749s, Solving time = 0.093299s, Total time = 0.590048s
12 : Statistics :: Grounding time = 0.514768s, Solving time = 0.181840s, Total time = 0.696607s
13 : Statistics :: Grounding time = 0.523278s, Solving time = 0.102588s, Total time = 0.625866s
14 : Statistics :: Grounding time = 0.530147s, Solving time = 0.225807s, Total time = 0.755954s
15 : Statistics :: Grounding time = 0.550793s, Solving time = 0.171631s, Total time = 0.722423s
16 : Statistics :: Grounding time = 0.557403s, Solving time = 0.345414s, Total time = 0.902817s
17 : Statistics :: Grounding time = 0.565677s, Solving time = 0.510354s, Total time = 1.076031s
18 : Statistics :: Grounding time = 0.573773s, Solving time = 0.290555s, Total time = 0.864328s
19 : Statistics :: Grounding time = 0.591541s, Solving time = 0.869620s, Total time = 1.461160s
20 : Statistics :: Grounding time = 0.594154s, Solving time = 0.612569s, Total time = 1.206724s
21 : Statistics :: Grounding time = 0.609113s, Solving time = 0.773367s, Total time = 1.382480s
22 : Statistics :: Grounding time = 0.625280s, Solving time = 1.061079s, Total time = 1.686359s
23 : Statistics :: Grounding time = 0.630165s, Solving time = 1.030695s, Total time = 1.660860s
24 : Statistics :: Grounding time = 0.649188s, Solving time = 1.870804s, Total time = 2.519992s
25 : Statistics :: Grounding time = 0.657534s, Solving time = 5.544550s, Total time = 6.202085s
26 : Statistics :: Grounding time = 0.670374s, Solving time = 1.281864s, Total time = 1.952238s
27 : Statistics :: Grounding time = 0.674077s, Solving time = 4.890222s, Total time = 5.564300s
28 : Statistics :: Grounding time = 0.685353s, Solving time = 5.207886s, Total time = 5.893239s
29 : Statistics :: Grounding time = 0.710933s, Solving time = 2.516184s, Total time = 3.227117s
30 : Statistics :: Grounding time = 0.688844s, Solving time = 13.583209s, Total time = 14.272053s
31 : Statistics :: Grounding time = 0.706541s, Solving time = 3.417383s, Total time = 4.123924s

[06-02-2021_15-22-01] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 23.040890s, Solving time = 46.710559s, Total time = 70.705697s
Model :: Total atoms = 16153, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-22-01] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,configure(manipulator_limb_2,extended),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_2,(block,6)),39)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),40)
occurs(1,talos,configure(manipulator_limb_2,retracted),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,configure(manipulator_limb_1,retracted),43)
occurs(1,talos,move((puzzle_room,0)),44)
occurs(1,talos,move((hallway,2)),45)
occurs(1,talos,move((hallway,1)),46)
occurs(1,talos,move((hallway,0)),47)
occurs(1,talos,move((store_room,1)),48)
occurs(1,talos,move((store_room,0)),49)
occurs(1,talos,configure(manipulator_limb_2,extended),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),52)
occurs(1,talos,configure(manipulator_limb_2,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_1,extended),60)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),61)
occurs(1,talos,configure(manipulator_limb_2,extended),62)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),63)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),64)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),65)
occurs(1,talos,release(manipulator_end_1,(block,3)),66)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),67)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),68)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),69)
occurs(1,talos,release(manipulator_end_1,(block,2)),70)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),71)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),72)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),73)

[06-02-2021_15-22-01] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.807793s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    13.448983s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    70.705697s : Steps =    73 : Actions =    73 |  
  ====================================================================  

[06-02-2021_15-22-01] INFO :: Experiment >> 

      ================================================      
              Initial run 1 : Time 88.727186s               
      ================================================      

[06-02-2021_15-22-01] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-22-01] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-22-01] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-22-01] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Instantiated.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building started.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building completed.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding base program parts.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.014062s.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving base program parts.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.002726s.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving started.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.039843s.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.007646s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.031366s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.003689s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.031559s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.004648s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.035751s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.005588s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.035543s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.005904s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.036410s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.007131s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.038254s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.007471s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.038340s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.008871s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.037761s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.011308s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.040324s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.011536s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.039496s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.016949s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.040816s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.026381s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.042603s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.039916s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.046498s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.058384s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.074806s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.079062s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.081387s.

[06-02-2021_15-22-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.147438s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.086590s.

[06-02-2021_15-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.253582s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.088251s.

[06-02-2021_15-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.461370s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.088540s.

[06-02-2021_15-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.714712s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.089931s.

[06-02-2021_15-22-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Model found:
Model :: Total atoms = 3703, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.180107s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving completed in 3.181154s because STOP_CON_REACHED.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.058132s, Solving time = 2.054418s, Total time = 3.181154s
Final Model :: Total atoms = 3703, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039843s, Solving time = 0.007646s, Total time = 0.047489s
2 : Statistics :: Grounding time = 0.031366s, Solving time = 0.003689s, Total time = 0.035055s
3 : Statistics :: Grounding time = 0.031559s, Solving time = 0.004648s, Total time = 0.036207s
4 : Statistics :: Grounding time = 0.035751s, Solving time = 0.005588s, Total time = 0.041339s
5 : Statistics :: Grounding time = 0.035543s, Solving time = 0.005904s, Total time = 0.041447s
6 : Statistics :: Grounding time = 0.036410s, Solving time = 0.007131s, Total time = 0.043541s
7 : Statistics :: Grounding time = 0.038254s, Solving time = 0.007471s, Total time = 0.045725s
8 : Statistics :: Grounding time = 0.038340s, Solving time = 0.008871s, Total time = 0.047211s
9 : Statistics :: Grounding time = 0.037761s, Solving time = 0.011308s, Total time = 0.049068s
10 : Statistics :: Grounding time = 0.040324s, Solving time = 0.011536s, Total time = 0.051859s
11 : Statistics :: Grounding time = 0.039496s, Solving time = 0.016949s, Total time = 0.056445s
12 : Statistics :: Grounding time = 0.040816s, Solving time = 0.026381s, Total time = 0.067197s
13 : Statistics :: Grounding time = 0.042603s, Solving time = 0.039916s, Total time = 0.082519s
14 : Statistics :: Grounding time = 0.046498s, Solving time = 0.058384s, Total time = 0.104882s
15 : Statistics :: Grounding time = 0.074806s, Solving time = 0.079062s, Total time = 0.153868s
16 : Statistics :: Grounding time = 0.081387s, Solving time = 0.147438s, Total time = 0.228825s
17 : Statistics :: Grounding time = 0.086590s, Solving time = 0.253582s, Total time = 0.340173s
18 : Statistics :: Grounding time = 0.088251s, Solving time = 0.461370s, Total time = 0.549621s
19 : Statistics :: Grounding time = 0.088540s, Solving time = 0.714712s, Total time = 0.803252s
20 : Statistics :: Grounding time = 0.089931s, Solving time = 0.180107s, Total time = 0.270038s

[06-02-2021_15-22-05] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.058132s, Solving time = 2.054418s, Total time = 3.181154s
Model :: Total atoms = 3703, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-22-05] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,move(puzzle_room),3)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),4)
occurs(3,talos,release(manipulator_arm_2,(block,6)),5)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),6)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),7)
occurs(3,talos,release(manipulator_arm_2,(block,3)),8)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),9)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),10)
occurs(3,talos,release(manipulator_arm_2,(block,2)),11)
occurs(3,talos,move(store_room),12)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),14)
occurs(3,talos,move(puzzle_room),15)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(3,talos,release(manipulator_arm_2,(block,5)),17)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),18)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),19)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),20)

[06-02-2021_15-22-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-22-05] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Instantiated.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building started.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building completed.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding base program parts.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.016539s.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving base program parts.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.002686s.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving started.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.696177s.

[06-02-2021_15-22-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.261427s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.072578s.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.019152s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.072901s.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.018538s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.074503s.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.022272s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.076027s.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.021718s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.076767s.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.022019s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.077174s.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.024479s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.076859s.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.025134s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.080024s.

[06-02-2021_15-22-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.035440s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.083303s.

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.048946s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.081346s.

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.098788s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.082138s.

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.051918s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.084951s.

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.075733s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.084028s.

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.067193s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.086786s.

[06-02-2021_15-22-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.184879s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.090163s.

[06-02-2021_15-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.270146s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.220173s.

[06-02-2021_15-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.432321s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-22-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-22-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.228466s.

[06-02-2021_15-22-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.834921s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-22-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-22-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.234921s.

[06-02-2021_15-22-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.566304s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-22-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-22-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.233885s.

[06-02-2021_15-22-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.398402s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-22-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-22-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.235507s.

[06-02-2021_15-22-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.369850s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-22-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-22-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.239656s.

[06-02-2021_15-22-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.987461s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-22-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-22-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.240010s.

[06-02-2021_15-22-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.643480s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-22-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-22-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.247150s.

[06-02-2021_15-22-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Model found:
Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.725429s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving completed in 11.250964s because STOP_CON_REACHED.

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.792030s, Solving time = 7.208633s, Total time = 11.250964s
Final Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.696177s, Solving time = 0.261427s, Total time = 0.957603s
2 : Statistics :: Grounding time = 0.072578s, Solving time = 0.019152s, Total time = 0.091729s
3 : Statistics :: Grounding time = 0.072901s, Solving time = 0.018538s, Total time = 0.091438s
4 : Statistics :: Grounding time = 0.074503s, Solving time = 0.022272s, Total time = 0.096775s
5 : Statistics :: Grounding time = 0.076027s, Solving time = 0.021718s, Total time = 0.097745s
6 : Statistics :: Grounding time = 0.076767s, Solving time = 0.022019s, Total time = 0.098786s
7 : Statistics :: Grounding time = 0.077174s, Solving time = 0.024479s, Total time = 0.101653s
8 : Statistics :: Grounding time = 0.076859s, Solving time = 0.025134s, Total time = 0.101993s
9 : Statistics :: Grounding time = 0.080024s, Solving time = 0.035440s, Total time = 0.115464s
10 : Statistics :: Grounding time = 0.083303s, Solving time = 0.048946s, Total time = 0.132249s
11 : Statistics :: Grounding time = 0.081346s, Solving time = 0.098788s, Total time = 0.180134s
12 : Statistics :: Grounding time = 0.082138s, Solving time = 0.051918s, Total time = 0.134056s
13 : Statistics :: Grounding time = 0.084951s, Solving time = 0.075733s, Total time = 0.160683s
14 : Statistics :: Grounding time = 0.084028s, Solving time = 0.067193s, Total time = 0.151221s
15 : Statistics :: Grounding time = 0.086786s, Solving time = 0.184879s, Total time = 0.271665s
16 : Statistics :: Grounding time = 0.090163s, Solving time = 0.270146s, Total time = 0.360309s
17 : Statistics :: Grounding time = 0.220173s, Solving time = 0.432321s, Total time = 0.652494s
18 : Statistics :: Grounding time = 0.228466s, Solving time = 0.834921s, Total time = 1.063386s
19 : Statistics :: Grounding time = 0.234921s, Solving time = 0.566304s, Total time = 0.801226s
20 : Statistics :: Grounding time = 0.233885s, Solving time = 0.398402s, Total time = 0.632286s
21 : Statistics :: Grounding time = 0.235507s, Solving time = 0.369850s, Total time = 0.605358s
22 : Statistics :: Grounding time = 0.239656s, Solving time = 0.987461s, Total time = 1.227117s
23 : Statistics :: Grounding time = 0.240010s, Solving time = 1.643480s, Total time = 1.883490s
24 : Statistics :: Grounding time = 0.247150s, Solving time = 0.725429s, Total time = 0.972578s

[06-02-2021_15-22-16] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.792030s, Solving time = 7.208633s, Total time = 11.250964s
Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-22-16] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,move(hallway),14)
occurs(2,talos,move(puzzle_room),15)
occurs(2,talos,configure(manipulator_arm_2,extended),16)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),17)
occurs(2,talos,release(manipulator_arm_2,(block,6)),18)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),19)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,configure(manipulator_arm_2,retracted),25)
occurs(2,talos,move(hallway),26)
occurs(2,talos,move(store_room),27)
occurs(2,talos,configure(manipulator_arm_1,extended),28)
occurs(2,talos,configure(manipulator_arm_2,extended),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),30)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),31)
occurs(2,talos,configure(manipulator_arm_2,retracted),32)
occurs(2,talos,configure(manipulator_arm_1,retracted),33)
occurs(2,talos,move(hallway),34)
occurs(2,talos,move(puzzle_room),35)
occurs(2,talos,configure(manipulator_arm_1,extended),36)
occurs(2,talos,configure(manipulator_arm_2,extended),37)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),38)
occurs(2,talos,release(manipulator_arm_2,(block,5)),39)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),40)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),41)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),42)

[06-02-2021_15-22-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-22-16] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Instantiated.

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 42 rules into program part conformance_module(step).

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 42, Stop con = StopCondition.Satisfiable

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building started.

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building completed.

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding base program parts.

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.016772s.

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving base program parts.

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.003739s.

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving started.

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [1]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [41]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-22-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 5.676454s.

[06-02-2021_15-22-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.254355s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [2]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-22-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-22-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.424005s.

[06-02-2021_15-22-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.053737s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [3]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-22-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-22-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.444990s.

[06-02-2021_15-22-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.059784s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [4]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-22-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-22-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.452268s.

[06-02-2021_15-22-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.061817s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [5]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-22-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-22-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.452849s.

[06-02-2021_15-22-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.083080s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [6]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-22-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.446854s.

[06-02-2021_15-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.096030s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [7]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.455096s.

[06-02-2021_15-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.073444s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [8]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-22-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-22-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.452986s.

[06-02-2021_15-22-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.120690s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [9]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-22-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-22-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.462745s.

[06-02-2021_15-22-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.127307s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [10]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-22-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-22-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.566183s.

[06-02-2021_15-22-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.097269s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [11]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-22-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-22-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.488911s.

[06-02-2021_15-22-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.132134s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [12]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-22-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-22-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.485396s.

[06-02-2021_15-22-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.185386s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [13]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-22-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-22-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.504083s.

[06-02-2021_15-22-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.160475s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [14]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-22-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-22-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.492809s.

[06-02-2021_15-22-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.529624s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [15]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-22-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-22-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.497763s.

[06-02-2021_15-22-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.274560s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [16]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-22-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-22-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.508156s.

[06-02-2021_15-22-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.129538s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [17]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-22-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-22-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.527396s.

[06-02-2021_15-22-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.356516s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [18]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-22-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-22-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.530092s.

[06-02-2021_15-22-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.774008s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [19]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-22-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-22-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.548937s.

[06-02-2021_15-22-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.284348s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [20]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-22-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-22-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.556862s.

[06-02-2021_15-22-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.383969s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [21]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.563579s.

[06-02-2021_15-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.230280s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [22]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-22-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-22-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.559485s.

[06-02-2021_15-22-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.445714s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [23]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-22-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-22-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.594496s.

[06-02-2021_15-22-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.208621s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [24]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-22-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-22-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.572803s.

[06-02-2021_15-22-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 2.974739s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [25]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-22-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-22-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.592013s.

[06-02-2021_15-22-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.084554s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [26]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-22-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-22-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.577639s.

[06-02-2021_15-22-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 4.846286s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [27]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.648202s.

[06-02-2021_15-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-22-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 3.306416s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-22-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [28]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-22-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-22-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.611619s.

[06-02-2021_15-22-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-23-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 5.832060s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [29]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-23-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-23-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.619650s.

[06-02-2021_15-23-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Model found:
Model :: Total atoms = 15471, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 6.026611s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving completed in 53.374679s because STOP_CON_REACHED.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 20.331093s, Solving time = 32.197091s, Total time = 53.374679s
Final Model :: Total atoms = 15471, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.676454s, Solving time = 1.254355s, Total time = 6.930810s
2 : Statistics :: Grounding time = 0.424005s, Solving time = 0.053737s, Total time = 0.477742s
3 : Statistics :: Grounding time = 0.444990s, Solving time = 0.059784s, Total time = 0.504773s
4 : Statistics :: Grounding time = 0.452268s, Solving time = 0.061817s, Total time = 0.514085s
5 : Statistics :: Grounding time = 0.452849s, Solving time = 0.083080s, Total time = 0.535929s
6 : Statistics :: Grounding time = 0.446854s, Solving time = 0.096030s, Total time = 0.542884s
7 : Statistics :: Grounding time = 0.455096s, Solving time = 0.073444s, Total time = 0.528540s
8 : Statistics :: Grounding time = 0.452986s, Solving time = 0.120690s, Total time = 0.573677s
9 : Statistics :: Grounding time = 0.462745s, Solving time = 0.127307s, Total time = 0.590052s
10 : Statistics :: Grounding time = 0.566183s, Solving time = 0.097269s, Total time = 0.663453s
11 : Statistics :: Grounding time = 0.488911s, Solving time = 0.132134s, Total time = 0.621045s
12 : Statistics :: Grounding time = 0.485396s, Solving time = 0.185386s, Total time = 0.670781s
13 : Statistics :: Grounding time = 0.504083s, Solving time = 0.160475s, Total time = 0.664558s
14 : Statistics :: Grounding time = 0.492809s, Solving time = 0.529624s, Total time = 1.022433s
15 : Statistics :: Grounding time = 0.497763s, Solving time = 0.274560s, Total time = 0.772323s
16 : Statistics :: Grounding time = 0.508156s, Solving time = 0.129538s, Total time = 0.637694s
17 : Statistics :: Grounding time = 0.527396s, Solving time = 1.356516s, Total time = 1.883913s
18 : Statistics :: Grounding time = 0.530092s, Solving time = 0.774008s, Total time = 1.304099s
19 : Statistics :: Grounding time = 0.548937s, Solving time = 0.284348s, Total time = 0.833285s
20 : Statistics :: Grounding time = 0.556862s, Solving time = 0.383969s, Total time = 0.940831s
21 : Statistics :: Grounding time = 0.563579s, Solving time = 0.230280s, Total time = 0.793860s
22 : Statistics :: Grounding time = 0.559485s, Solving time = 0.445714s, Total time = 1.005199s
23 : Statistics :: Grounding time = 0.594496s, Solving time = 1.208621s, Total time = 1.803117s
24 : Statistics :: Grounding time = 0.572803s, Solving time = 2.974739s, Total time = 3.547542s
25 : Statistics :: Grounding time = 0.592013s, Solving time = 1.084554s, Total time = 1.676567s
26 : Statistics :: Grounding time = 0.577639s, Solving time = 4.846286s, Total time = 5.423925s
27 : Statistics :: Grounding time = 0.648202s, Solving time = 3.306416s, Total time = 3.954618s
28 : Statistics :: Grounding time = 0.611619s, Solving time = 5.832060s, Total time = 6.443679s
29 : Statistics :: Grounding time = 0.619650s, Solving time = 6.026611s, Total time = 6.646261s

[06-02-2021_15-23-10] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 20.331093s, Solving time = 32.197091s, Total time = 53.374679s
Model :: Total atoms = 15471, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-23-10] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,move((store_room,1)),24)
occurs(1,talos,move((hallway,0)),25)
occurs(1,talos,move((hallway,1)),26)
occurs(1,talos,move((hallway,2)),27)
occurs(1,talos,move((puzzle_room,0)),28)
occurs(1,talos,move((puzzle_room,1)),29)
occurs(1,talos,configure(manipulator_limb_2,extended),30)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_2,(block,6)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),34)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),35)
occurs(1,talos,release(manipulator_end_2,(block,3)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),38)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),39)
occurs(1,talos,release(manipulator_end_2,(block,2)),40)
occurs(1,talos,configure(manipulator_limb_2,retracted),41)
occurs(1,talos,move((puzzle_room,0)),42)
occurs(1,talos,move((hallway,2)),43)
occurs(1,talos,move((hallway,1)),44)
occurs(1,talos,move((hallway,0)),45)
occurs(1,talos,move((store_room,1)),46)
occurs(1,talos,move((store_room,0)),47)
occurs(1,talos,configure(manipulator_limb_2,extended),48)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),49)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),50)
occurs(1,talos,configure(manipulator_limb_1,extended),51)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),52)
occurs(1,talos,configure(manipulator_limb_2,retracted),53)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),54)
occurs(1,talos,configure(manipulator_limb_1,retracted),55)
occurs(1,talos,move((store_room,1)),56)
occurs(1,talos,move((hallway,0)),57)
occurs(1,talos,move((hallway,1)),58)
occurs(1,talos,move((hallway,2)),59)
occurs(1,talos,move((puzzle_room,0)),60)
occurs(1,talos,move((puzzle_room,1)),61)
occurs(1,talos,configure(manipulator_limb_2,extended),62)
occurs(1,talos,configure(manipulator_limb_1,extended),63)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),64)
occurs(1,talos,release(manipulator_end_2,(block,5)),65)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),66)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),67)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),68)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),69)

[06-02-2021_15-23-10] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.181154s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    11.250964s : Steps =    42 : Actions =    42 |  
  | Level 1 : Time =    53.374679s : Steps =    69 : Actions =    69 |  
  ====================================================================  

[06-02-2021_15-23-10] INFO :: Experiment >> 

      ================================================      
              Initial run 2 : Time 68.469984s               
      ================================================      

[06-02-2021_15-23-10] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-23-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-23-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-23-10] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Instantiated.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building completed.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding base program parts.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.013996s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving base program parts.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.002427s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.040099s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.006549s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.030685s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.003625s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.031417s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.004649s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.035314s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.005762s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.035520s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.005942s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.036463s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.007404s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.038057s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.007734s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.039347s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.009644s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.039075s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.010294s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.043074s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.013003s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.040469s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.017698s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.041433s.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.024676s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.040421s.

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.040013s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.043386s.

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.052174s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.073733s.

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.073155s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.079509s.

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.139972s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.084569s.

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.299713s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-23-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.084716s.

[06-02-2021_15-23-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.525957s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-23-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-23-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.087502s.

[06-02-2021_15-23-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.809133s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.090905s.

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Model found:
Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.331182s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving completed in 3.506442s because STOP_CON_REACHED.

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.049689s, Solving time = 2.390705s, Total time = 3.506442s
Final Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040099s, Solving time = 0.006549s, Total time = 0.046648s
2 : Statistics :: Grounding time = 0.030685s, Solving time = 0.003625s, Total time = 0.034310s
3 : Statistics :: Grounding time = 0.031417s, Solving time = 0.004649s, Total time = 0.036066s
4 : Statistics :: Grounding time = 0.035314s, Solving time = 0.005762s, Total time = 0.041075s
5 : Statistics :: Grounding time = 0.035520s, Solving time = 0.005942s, Total time = 0.041462s
6 : Statistics :: Grounding time = 0.036463s, Solving time = 0.007404s, Total time = 0.043867s
7 : Statistics :: Grounding time = 0.038057s, Solving time = 0.007734s, Total time = 0.045791s
8 : Statistics :: Grounding time = 0.039347s, Solving time = 0.009644s, Total time = 0.048991s
9 : Statistics :: Grounding time = 0.039075s, Solving time = 0.010294s, Total time = 0.049369s
10 : Statistics :: Grounding time = 0.043074s, Solving time = 0.013003s, Total time = 0.056077s
11 : Statistics :: Grounding time = 0.040469s, Solving time = 0.017698s, Total time = 0.058167s
12 : Statistics :: Grounding time = 0.041433s, Solving time = 0.024676s, Total time = 0.066110s
13 : Statistics :: Grounding time = 0.040421s, Solving time = 0.040013s, Total time = 0.080434s
14 : Statistics :: Grounding time = 0.043386s, Solving time = 0.052174s, Total time = 0.095560s
15 : Statistics :: Grounding time = 0.073733s, Solving time = 0.073155s, Total time = 0.146888s
16 : Statistics :: Grounding time = 0.079509s, Solving time = 0.139972s, Total time = 0.219480s
17 : Statistics :: Grounding time = 0.084569s, Solving time = 0.299713s, Total time = 0.384281s
18 : Statistics :: Grounding time = 0.084716s, Solving time = 0.525957s, Total time = 0.610673s
19 : Statistics :: Grounding time = 0.087502s, Solving time = 0.809133s, Total time = 0.896635s
20 : Statistics :: Grounding time = 0.090905s, Solving time = 0.331182s, Total time = 0.422088s

[06-02-2021_15-23-13] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.049689s, Solving time = 2.390705s, Total time = 3.506442s
Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-23-13] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,move(puzzle_room),3)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),4)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,3)),6)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),7)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),8)
occurs(3,talos,release(manipulator_arm_1,(block,6)),9)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),10)
occurs(3,talos,release(manipulator_arm_2,(block,2)),11)
occurs(3,talos,move(store_room),12)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),14)
occurs(3,talos,move(puzzle_room),15)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(3,talos,release(manipulator_arm_1,(block,5)),17)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),18)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),19)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),20)

[06-02-2021_15-23-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-23-13] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Instantiated.

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building started.

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building completed.

[06-02-2021_15-23-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding base program parts.

[06-02-2021_15-23-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.014841s.

[06-02-2021_15-23-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving base program parts.

[06-02-2021_15-23-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.002965s.

[06-02-2021_15-23-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving started.

[06-02-2021_15-23-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-23-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-23-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.719938s.

[06-02-2021_15-23-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.259173s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-23-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.071947s.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.018859s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.072195s.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.017538s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.074345s.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.022982s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.079505s.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.021991s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.078069s.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.033677s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.075307s.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.037837s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.084204s.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.029652s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.076003s.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.031579s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.083187s.

[06-02-2021_15-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.043762s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.081919s.

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.060515s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.085236s.

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.050022s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.084921s.

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.115114s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.085746s.

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.119430s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.088223s.

[06-02-2021_15-23-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.313136s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-23-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-23-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.094082s.

[06-02-2021_15-23-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.418248s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-23-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-23-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.220033s.

[06-02-2021_15-23-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.909857s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-23-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-23-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.233099s.

[06-02-2021_15-23-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 1.099674s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-23-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-23-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.235774s.

[06-02-2021_15-23-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 1.862395s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-23-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-23-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.235462s.

[06-02-2021_15-23-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 2.732032s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-23-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-23-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.237546s.

[06-02-2021_15-23-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 3.627684s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.256087s.

[06-02-2021_15-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 1.833351s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-23-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-23-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.249595s.

[06-02-2021_15-23-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 2.115654s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-23-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-23-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.245716s.

[06-02-2021_15-23-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 2.133319s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-23-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-23-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.254253s.

[06-02-2021_15-23-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 4.741955s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-23-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-23-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.248473s.

[06-02-2021_15-23-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Model found:
Model :: Total atoms = 9754, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 6.116038s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving completed in 33.459160s because STOP_CON_REACHED.

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.365706s, Solving time = 28.768439s, Total time = 33.459160s
Final Model :: Total atoms = 9754, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.719938s, Solving time = 0.259173s, Total time = 0.979110s
2 : Statistics :: Grounding time = 0.071947s, Solving time = 0.018859s, Total time = 0.090806s
3 : Statistics :: Grounding time = 0.072195s, Solving time = 0.017538s, Total time = 0.089732s
4 : Statistics :: Grounding time = 0.074345s, Solving time = 0.022982s, Total time = 0.097327s
5 : Statistics :: Grounding time = 0.079505s, Solving time = 0.021991s, Total time = 0.101496s
6 : Statistics :: Grounding time = 0.078069s, Solving time = 0.033677s, Total time = 0.111746s
7 : Statistics :: Grounding time = 0.075307s, Solving time = 0.037837s, Total time = 0.113144s
8 : Statistics :: Grounding time = 0.084204s, Solving time = 0.029652s, Total time = 0.113856s
9 : Statistics :: Grounding time = 0.076003s, Solving time = 0.031579s, Total time = 0.107582s
10 : Statistics :: Grounding time = 0.083187s, Solving time = 0.043762s, Total time = 0.126949s
11 : Statistics :: Grounding time = 0.081919s, Solving time = 0.060515s, Total time = 0.142434s
12 : Statistics :: Grounding time = 0.085236s, Solving time = 0.050022s, Total time = 0.135258s
13 : Statistics :: Grounding time = 0.084921s, Solving time = 0.115114s, Total time = 0.200035s
14 : Statistics :: Grounding time = 0.085746s, Solving time = 0.119430s, Total time = 0.205176s
15 : Statistics :: Grounding time = 0.088223s, Solving time = 0.313136s, Total time = 0.401358s
16 : Statistics :: Grounding time = 0.094082s, Solving time = 0.418248s, Total time = 0.512330s
17 : Statistics :: Grounding time = 0.220033s, Solving time = 0.909857s, Total time = 1.129890s
18 : Statistics :: Grounding time = 0.233099s, Solving time = 1.099674s, Total time = 1.332774s
19 : Statistics :: Grounding time = 0.235774s, Solving time = 1.862395s, Total time = 2.098170s
20 : Statistics :: Grounding time = 0.235462s, Solving time = 2.732032s, Total time = 2.967494s
21 : Statistics :: Grounding time = 0.237546s, Solving time = 3.627684s, Total time = 3.865230s
22 : Statistics :: Grounding time = 0.256087s, Solving time = 1.833351s, Total time = 2.089439s
23 : Statistics :: Grounding time = 0.249595s, Solving time = 2.115654s, Total time = 2.365249s
24 : Statistics :: Grounding time = 0.245716s, Solving time = 2.133319s, Total time = 2.379035s
25 : Statistics :: Grounding time = 0.254253s, Solving time = 4.741955s, Total time = 4.996208s
26 : Statistics :: Grounding time = 0.248473s, Solving time = 6.116038s, Total time = 6.364511s

[06-02-2021_15-23-47] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.365706s, Solving time = 28.768439s, Total time = 33.459160s
Model :: Total atoms = 9754, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-23-47] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,move(hallway),14)
occurs(2,talos,move(puzzle_room),15)
occurs(2,talos,configure(manipulator_arm_2,extended),16)
occurs(2,talos,configure(manipulator_arm_1,extended),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),18)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),19)
occurs(2,talos,release(manipulator_arm_2,(block,3)),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),23)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),24)
occurs(2,talos,release(manipulator_arm_2,(block,2)),25)
occurs(2,talos,configure(manipulator_arm_2,retracted),26)
occurs(2,talos,configure(manipulator_arm_1,retracted),27)
occurs(2,talos,move(hallway),28)
occurs(2,talos,move(store_room),29)
occurs(2,talos,configure(manipulator_arm_1,extended),30)
occurs(2,talos,configure(manipulator_arm_2,extended),31)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),32)
occurs(2,talos,configure(manipulator_arm_1,retracted),33)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),34)
occurs(2,talos,configure(manipulator_arm_2,retracted),35)
occurs(2,talos,move(hallway),36)
occurs(2,talos,move(puzzle_room),37)
occurs(2,talos,configure(manipulator_arm_2,extended),38)
occurs(2,talos,configure(manipulator_arm_1,extended),39)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),40)
occurs(2,talos,release(manipulator_arm_1,(block,5)),41)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),42)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),43)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),44)

[06-02-2021_15-23-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-23-47] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Instantiated.

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building started.

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building completed.

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding base program parts.

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.017012s.

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving base program parts.

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.003093s.

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving started.

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-23-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 6.023201s.

[06-02-2021_15-23-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-23-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.342659s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-23-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-23-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.454204s.

[06-02-2021_15-23-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-23-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.056470s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-23-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.465241s.

[06-02-2021_15-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.061537s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.468578s.

[06-02-2021_15-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.060926s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-23-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.476904s.

[06-02-2021_15-23-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-23-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.065568s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-23-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-23-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.477509s.

[06-02-2021_15-23-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-23-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.087530s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-23-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-23-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.492141s.

[06-02-2021_15-23-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-23-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.078998s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-23-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-23-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.495000s.

[06-02-2021_15-23-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.102141s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.498736s.

[06-02-2021_15-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.086872s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.504769s.

[06-02-2021_15-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.136053s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.497393s.

[06-02-2021_15-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.106215s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.519351s.

[06-02-2021_15-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.107946s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.518562s.

[06-02-2021_15-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.221872s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.532301s.

[06-02-2021_15-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.203392s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.524281s.

[06-02-2021_15-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.259133s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.567141s.

[06-02-2021_15-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.303579s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-24-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.547745s.

[06-02-2021_15-24-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.397090s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-24-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-24-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.545156s.

[06-02-2021_15-24-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.457284s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-24-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-24-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.554457s.

[06-02-2021_15-24-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.748086s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-24-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-24-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.617862s.

[06-02-2021_15-24-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.168309s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-24-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-24-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.582510s.

[06-02-2021_15-24-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.693621s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-24-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-24-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.608152s.

[06-02-2021_15-24-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.274989s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-24-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-24-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.634351s.

[06-02-2021_15-24-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.591472s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-24-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-24-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.597612s.

[06-02-2021_15-24-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.528149s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-24-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-24-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.627678s.

[06-02-2021_15-24-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.814247s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-24-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-24-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.623917s.

[06-02-2021_15-24-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 5.881733s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-24-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-24-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.643504s.

[06-02-2021_15-24-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 3.246797s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.635069s.

[06-02-2021_15-24-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 6.063394s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-24-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-24-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.671861s.

[06-02-2021_15-24-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 8.566851s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [30]:
Current step bound = 72
End step min = 0
End step max = None

[06-02-2021_15-24-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 0]), ('conformance_module', [72])].

[06-02-2021_15-24-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.645323s.

[06-02-2021_15-24-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-24-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 12.931816s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-24-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [31]:
Current step bound = 73
End step min = 0
End step max = None

[06-02-2021_15-24-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 0]), ('conformance_module', [73])].

[06-02-2021_15-24-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.640964s.

[06-02-2021_15-24-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Model found:
Model :: Total atoms = 16202, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 13.042694s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving completed in 84.409138s because STOP_CON_REACHED.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 22.708484s, Solving time = 60.690515s, Total time = 84.409138s
Final Model :: Total atoms = 16202, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental statistics:
1 : Statistics :: Grounding time = 6.023201s, Solving time = 1.342659s, Total time = 7.365860s
2 : Statistics :: Grounding time = 0.454204s, Solving time = 0.056470s, Total time = 0.510674s
3 : Statistics :: Grounding time = 0.465241s, Solving time = 0.061537s, Total time = 0.526778s
4 : Statistics :: Grounding time = 0.468578s, Solving time = 0.060926s, Total time = 0.529504s
5 : Statistics :: Grounding time = 0.476904s, Solving time = 0.065568s, Total time = 0.542473s
6 : Statistics :: Grounding time = 0.477509s, Solving time = 0.087530s, Total time = 0.565038s
7 : Statistics :: Grounding time = 0.492141s, Solving time = 0.078998s, Total time = 0.571138s
8 : Statistics :: Grounding time = 0.495000s, Solving time = 0.102141s, Total time = 0.597141s
9 : Statistics :: Grounding time = 0.498736s, Solving time = 0.086872s, Total time = 0.585608s
10 : Statistics :: Grounding time = 0.504769s, Solving time = 0.136053s, Total time = 0.640821s
11 : Statistics :: Grounding time = 0.497393s, Solving time = 0.106215s, Total time = 0.603607s
12 : Statistics :: Grounding time = 0.519351s, Solving time = 0.107946s, Total time = 0.627297s
13 : Statistics :: Grounding time = 0.518562s, Solving time = 0.221872s, Total time = 0.740433s
14 : Statistics :: Grounding time = 0.532301s, Solving time = 0.203392s, Total time = 0.735694s
15 : Statistics :: Grounding time = 0.524281s, Solving time = 0.259133s, Total time = 0.783414s
16 : Statistics :: Grounding time = 0.567141s, Solving time = 0.303579s, Total time = 0.870720s
17 : Statistics :: Grounding time = 0.547745s, Solving time = 0.397090s, Total time = 0.944835s
18 : Statistics :: Grounding time = 0.545156s, Solving time = 0.457284s, Total time = 1.002440s
19 : Statistics :: Grounding time = 0.554457s, Solving time = 0.748086s, Total time = 1.302543s
20 : Statistics :: Grounding time = 0.617862s, Solving time = 1.168309s, Total time = 1.786171s
21 : Statistics :: Grounding time = 0.582510s, Solving time = 0.693621s, Total time = 1.276130s
22 : Statistics :: Grounding time = 0.608152s, Solving time = 1.274989s, Total time = 1.883141s
23 : Statistics :: Grounding time = 0.634351s, Solving time = 0.591472s, Total time = 1.225823s
24 : Statistics :: Grounding time = 0.597612s, Solving time = 0.528149s, Total time = 1.125762s
25 : Statistics :: Grounding time = 0.627678s, Solving time = 1.814247s, Total time = 2.441924s
26 : Statistics :: Grounding time = 0.623917s, Solving time = 5.881733s, Total time = 6.505650s
27 : Statistics :: Grounding time = 0.643504s, Solving time = 3.246797s, Total time = 3.890301s
28 : Statistics :: Grounding time = 0.635069s, Solving time = 6.063394s, Total time = 6.698463s
29 : Statistics :: Grounding time = 0.671861s, Solving time = 8.566851s, Total time = 9.238712s
30 : Statistics :: Grounding time = 0.645323s, Solving time = 12.931816s, Total time = 13.577139s
31 : Statistics :: Grounding time = 0.640964s, Solving time = 13.042694s, Total time = 13.683658s

[06-02-2021_15-25-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 22.708484s, Solving time = 60.690515s, Total time = 84.409138s
Model :: Total atoms = 16202, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-25-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((store_room,1)),26)
occurs(1,talos,move((hallway,0)),27)
occurs(1,talos,move((hallway,1)),28)
occurs(1,talos,move((hallway,2)),29)
occurs(1,talos,move((puzzle_room,0)),30)
occurs(1,talos,move((puzzle_room,1)),31)
occurs(1,talos,configure(manipulator_limb_1,extended),32)
occurs(1,talos,configure(manipulator_limb_2,extended),33)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_1,(block,6)),36)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),37)
occurs(1,talos,configure(manipulator_limb_1,retracted),38)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),39)
occurs(1,talos,release(manipulator_end_2,(block,3)),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),41)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),42)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),43)
occurs(1,talos,release(manipulator_end_2,(block,2)),44)
occurs(1,talos,configure(manipulator_limb_2,retracted),45)
occurs(1,talos,move((puzzle_room,0)),46)
occurs(1,talos,move((hallway,2)),47)
occurs(1,talos,move((hallway,1)),48)
occurs(1,talos,move((hallway,0)),49)
occurs(1,talos,move((store_room,1)),50)
occurs(1,talos,move((store_room,0)),51)
occurs(1,talos,configure(manipulator_limb_2,extended),52)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),53)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),54)
occurs(1,talos,configure(manipulator_limb_1,extended),55)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),56)
occurs(1,talos,configure(manipulator_limb_2,retracted),57)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),58)
occurs(1,talos,configure(manipulator_limb_1,retracted),59)
occurs(1,talos,move((store_room,1)),60)
occurs(1,talos,move((hallway,0)),61)
occurs(1,talos,move((hallway,1)),62)
occurs(1,talos,move((hallway,2)),63)
occurs(1,talos,move((puzzle_room,0)),64)
occurs(1,talos,move((puzzle_room,1)),65)
occurs(1,talos,configure(manipulator_limb_1,extended),66)
occurs(1,talos,configure(manipulator_limb_2,extended),67)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),68)
occurs(1,talos,release(manipulator_end_1,(block,5)),69)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),70)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),71)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),72)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),73)

[06-02-2021_15-25-12] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.506442s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    33.459160s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    84.409138s : Steps =    73 : Actions =    73 |  
  ====================================================================  

[06-02-2021_15-25-12] INFO :: Experiment >> 

      ================================================      
           Experimental run 1 : Time 122.074169s            
      ================================================      

[06-02-2021_15-25-12] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-25-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-25-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-25-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Instantiated.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building completed.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding base program parts.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.014097s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving base program parts.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.002146s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.039932s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.006701s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.030931s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.002616s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.031911s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.004635s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.035275s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.005789s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.036438s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.005966s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.037212s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.007158s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.042680s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.008362s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.037182s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.009044s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.039861s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.009901s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.039038s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.013046s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.040245s.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.019272s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-25-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.039929s.

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.023307s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.041226s.

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.038413s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.041939s.

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.051484s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.078582s.

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.081873s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.078682s.

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.168558s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.081091s.

[06-02-2021_15-25-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.331446s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.086301s.

[06-02-2021_15-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.490095s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.087906s.

[06-02-2021_15-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.826647s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.090875s.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Model found:
Model :: Total atoms = 3703, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.192859s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving completed in 3.419858s because STOP_CON_REACHED.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.051332s, Solving time = 2.299317s, Total time = 3.419858s
Final Model :: Total atoms = 3703, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039932s, Solving time = 0.006701s, Total time = 0.046633s
2 : Statistics :: Grounding time = 0.030931s, Solving time = 0.002616s, Total time = 0.033547s
3 : Statistics :: Grounding time = 0.031911s, Solving time = 0.004635s, Total time = 0.036546s
4 : Statistics :: Grounding time = 0.035275s, Solving time = 0.005789s, Total time = 0.041063s
5 : Statistics :: Grounding time = 0.036438s, Solving time = 0.005966s, Total time = 0.042404s
6 : Statistics :: Grounding time = 0.037212s, Solving time = 0.007158s, Total time = 0.044370s
7 : Statistics :: Grounding time = 0.042680s, Solving time = 0.008362s, Total time = 0.051042s
8 : Statistics :: Grounding time = 0.037182s, Solving time = 0.009044s, Total time = 0.046225s
9 : Statistics :: Grounding time = 0.039861s, Solving time = 0.009901s, Total time = 0.049762s
10 : Statistics :: Grounding time = 0.039038s, Solving time = 0.013046s, Total time = 0.052084s
11 : Statistics :: Grounding time = 0.040245s, Solving time = 0.019272s, Total time = 0.059518s
12 : Statistics :: Grounding time = 0.039929s, Solving time = 0.023307s, Total time = 0.063236s
13 : Statistics :: Grounding time = 0.041226s, Solving time = 0.038413s, Total time = 0.079639s
14 : Statistics :: Grounding time = 0.041939s, Solving time = 0.051484s, Total time = 0.093422s
15 : Statistics :: Grounding time = 0.078582s, Solving time = 0.081873s, Total time = 0.160455s
16 : Statistics :: Grounding time = 0.078682s, Solving time = 0.168558s, Total time = 0.247241s
17 : Statistics :: Grounding time = 0.081091s, Solving time = 0.331446s, Total time = 0.412537s
18 : Statistics :: Grounding time = 0.086301s, Solving time = 0.490095s, Total time = 0.576396s
19 : Statistics :: Grounding time = 0.087906s, Solving time = 0.826647s, Total time = 0.914553s
20 : Statistics :: Grounding time = 0.090875s, Solving time = 0.192859s, Total time = 0.283733s

[06-02-2021_15-25-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.051332s, Solving time = 2.299317s, Total time = 3.419858s
Model :: Total atoms = 3703, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-25-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,move(puzzle_room),3)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),4)
occurs(3,talos,release(manipulator_arm_2,(block,6)),5)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),6)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),7)
occurs(3,talos,release(manipulator_arm_2,(block,3)),8)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),9)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),10)
occurs(3,talos,release(manipulator_arm_2,(block,2)),11)
occurs(3,talos,move(store_room),12)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),14)
occurs(3,talos,move(puzzle_room),15)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(3,talos,release(manipulator_arm_2,(block,5)),17)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),18)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),19)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),20)

[06-02-2021_15-25-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-25-15] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Instantiated.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building started.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building completed.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding base program parts.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.015211s.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving base program parts.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.002181s.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving started.

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-25-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-25-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.710657s.

[06-02-2021_15-25-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.262282s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-25-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.074298s.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.018311s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.073185s.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.017877s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.075598s.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.020810s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.083679s.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.021493s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.078661s.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.024499s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.075393s.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.022654s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.077730s.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.024535s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.085163s.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.029760s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.079414s.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.043034s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-25-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.081361s.

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.059818s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.083306s.

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.050491s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.083433s.

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.065474s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.093145s.

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.090545s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.086698s.

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.058194s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.087765s.

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.109190s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-25-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.088935s.

[06-02-2021_15-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.099389s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.224684s.

[06-02-2021_15-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.388798s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.229471s.

[06-02-2021_15-25-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.492669s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-25-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-25-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.238940s.

[06-02-2021_15-25-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.637707s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-25-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-25-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.231120s.

[06-02-2021_15-25-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 1.069967s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-25-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-25-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.237065s.

[06-02-2021_15-25-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 1.472493s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-25-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-25-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.244041s.

[06-02-2021_15-25-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 1.572762s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-25-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-25-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.245463s.

[06-02-2021_15-25-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Model found:
Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.865576s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving completed in 11.437193s because STOP_CON_REACHED.

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.684416s, Solving time = 7.520509s, Total time = 11.437193s
Final Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.710657s, Solving time = 0.262282s, Total time = 0.972938s
2 : Statistics :: Grounding time = 0.074298s, Solving time = 0.018311s, Total time = 0.092609s
3 : Statistics :: Grounding time = 0.073185s, Solving time = 0.017877s, Total time = 0.091063s
4 : Statistics :: Grounding time = 0.075598s, Solving time = 0.020810s, Total time = 0.096408s
5 : Statistics :: Grounding time = 0.083679s, Solving time = 0.021493s, Total time = 0.105172s
6 : Statistics :: Grounding time = 0.078661s, Solving time = 0.024499s, Total time = 0.103160s
7 : Statistics :: Grounding time = 0.075393s, Solving time = 0.022654s, Total time = 0.098047s
8 : Statistics :: Grounding time = 0.077730s, Solving time = 0.024535s, Total time = 0.102265s
9 : Statistics :: Grounding time = 0.085163s, Solving time = 0.029760s, Total time = 0.114922s
10 : Statistics :: Grounding time = 0.079414s, Solving time = 0.043034s, Total time = 0.122448s
11 : Statistics :: Grounding time = 0.081361s, Solving time = 0.059818s, Total time = 0.141179s
12 : Statistics :: Grounding time = 0.083306s, Solving time = 0.050491s, Total time = 0.133797s
13 : Statistics :: Grounding time = 0.083433s, Solving time = 0.065474s, Total time = 0.148907s
14 : Statistics :: Grounding time = 0.093145s, Solving time = 0.090545s, Total time = 0.183690s
15 : Statistics :: Grounding time = 0.086698s, Solving time = 0.058194s, Total time = 0.144892s
16 : Statistics :: Grounding time = 0.087765s, Solving time = 0.109190s, Total time = 0.196955s
17 : Statistics :: Grounding time = 0.088935s, Solving time = 0.099389s, Total time = 0.188325s
18 : Statistics :: Grounding time = 0.224684s, Solving time = 0.388798s, Total time = 0.613482s
19 : Statistics :: Grounding time = 0.229471s, Solving time = 0.492669s, Total time = 0.722140s
20 : Statistics :: Grounding time = 0.238940s, Solving time = 0.637707s, Total time = 0.876647s
21 : Statistics :: Grounding time = 0.231120s, Solving time = 1.069967s, Total time = 1.301087s
22 : Statistics :: Grounding time = 0.237065s, Solving time = 1.472493s, Total time = 1.709558s
23 : Statistics :: Grounding time = 0.244041s, Solving time = 1.572762s, Total time = 1.816803s
24 : Statistics :: Grounding time = 0.245463s, Solving time = 0.865576s, Total time = 1.111039s

[06-02-2021_15-25-27] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.684416s, Solving time = 7.520509s, Total time = 11.437193s
Model :: Total atoms = 9422, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-25-27] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,move(hallway),14)
occurs(2,talos,move(puzzle_room),15)
occurs(2,talos,configure(manipulator_arm_2,extended),16)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),17)
occurs(2,talos,release(manipulator_arm_2,(block,6)),18)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),19)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,configure(manipulator_arm_2,retracted),25)
occurs(2,talos,move(hallway),26)
occurs(2,talos,move(store_room),27)
occurs(2,talos,configure(manipulator_arm_2,extended),28)
occurs(2,talos,configure(manipulator_arm_1,extended),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),30)
occurs(2,talos,configure(manipulator_arm_2,retracted),31)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),32)
occurs(2,talos,configure(manipulator_arm_1,retracted),33)
occurs(2,talos,move(hallway),34)
occurs(2,talos,move(puzzle_room),35)
occurs(2,talos,configure(manipulator_arm_2,extended),36)
occurs(2,talos,configure(manipulator_arm_1,extended),37)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),38)
occurs(2,talos,release(manipulator_arm_2,(block,5)),39)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),40)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),41)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),42)

[06-02-2021_15-25-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-25-27] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Instantiated.

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 42 rules into program part conformance_module(step).

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 42, Stop con = StopCondition.Satisfiable

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building started.

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building completed.

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding base program parts.

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.016731s.

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving base program parts.

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.002391s.

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving started.

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [1]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-25-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [41]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-25-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 5.662162s.

[06-02-2021_15-25-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.250331s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [2]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-25-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-25-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.437085s.

[06-02-2021_15-25-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.053349s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [3]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-25-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-25-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.430772s.

[06-02-2021_15-25-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.058398s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [4]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-25-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-25-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.453417s.

[06-02-2021_15-25-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.055622s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [5]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-25-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-25-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.448147s.

[06-02-2021_15-25-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.074653s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [6]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-25-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-25-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.497286s.

[06-02-2021_15-25-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.083745s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [7]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-25-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-25-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.462286s.

[06-02-2021_15-25-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.068094s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [8]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-25-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-25-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.477143s.

[06-02-2021_15-25-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.174060s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [9]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-25-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-25-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.480032s.

[06-02-2021_15-25-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.134840s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [10]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-25-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-25-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.464334s.

[06-02-2021_15-25-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.099982s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [11]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-25-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-25-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.469538s.

[06-02-2021_15-25-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.093545s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [12]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-25-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-25-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.484016s.

[06-02-2021_15-25-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.112261s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [13]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-25-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-25-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.512265s.

[06-02-2021_15-25-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.162902s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [14]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-25-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.519518s.

[06-02-2021_15-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.175342s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [15]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.505099s.

[06-02-2021_15-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.243276s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [16]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-25-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-25-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.526761s.

[06-02-2021_15-25-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.319003s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [17]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-25-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-25-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.519326s.

[06-02-2021_15-25-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.320301s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [18]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-25-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-25-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.537482s.

[06-02-2021_15-25-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.340653s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [19]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-25-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-25-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.551235s.

[06-02-2021_15-25-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.235888s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [20]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-25-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-25-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.552149s.

[06-02-2021_15-25-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.363191s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [21]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-25-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-25-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.566892s.

[06-02-2021_15-25-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.878345s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [22]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-25-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-25-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.564777s.

[06-02-2021_15-25-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.171126s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [23]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-25-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-25-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.584458s.

[06-02-2021_15-25-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.255139s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [24]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-25-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-25-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.591458s.

[06-02-2021_15-25-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.550866s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [25]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-25-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-25-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.619069s.

[06-02-2021_15-25-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.116670s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [26]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-25-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-25-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.605375s.

[06-02-2021_15-25-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-25-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.480287s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-25-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [27]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-25-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-25-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.600494s.

[06-02-2021_15-25-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-26-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.167445s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [28]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-26-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-26-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.663953s.

[06-02-2021_15-26-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-26-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 3.567547s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [29]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-26-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-26-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.615555s.

[06-02-2021_15-26-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-26-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 3.281108s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [30]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-26-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-26-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.629852s.

[06-02-2021_15-26-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-26-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 6.621971s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [31]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-26-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-26-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.636550s.

[06-02-2021_15-26-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-26-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Model found:
Model :: Total atoms = 15836, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-26-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 5.082587s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-26-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving completed in 54.194581s because STOP_CON_REACHED.

[06-02-2021_15-26-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 21.685215s, Solving time = 31.594917s, Total time = 54.194581s
Final Model :: Total atoms = 15836, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-26-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.662162s, Solving time = 1.250331s, Total time = 6.912493s
2 : Statistics :: Grounding time = 0.437085s, Solving time = 0.053349s, Total time = 0.490434s
3 : Statistics :: Grounding time = 0.430772s, Solving time = 0.058398s, Total time = 0.489170s
4 : Statistics :: Grounding time = 0.453417s, Solving time = 0.055622s, Total time = 0.509039s
5 : Statistics :: Grounding time = 0.448147s, Solving time = 0.074653s, Total time = 0.522800s
6 : Statistics :: Grounding time = 0.497286s, Solving time = 0.083745s, Total time = 0.581031s
7 : Statistics :: Grounding time = 0.462286s, Solving time = 0.068094s, Total time = 0.530380s
8 : Statistics :: Grounding time = 0.477143s, Solving time = 0.174060s, Total time = 0.651203s
9 : Statistics :: Grounding time = 0.480032s, Solving time = 0.134840s, Total time = 0.614872s
10 : Statistics :: Grounding time = 0.464334s, Solving time = 0.099982s, Total time = 0.564316s
11 : Statistics :: Grounding time = 0.469538s, Solving time = 0.093545s, Total time = 0.563082s
12 : Statistics :: Grounding time = 0.484016s, Solving time = 0.112261s, Total time = 0.596277s
13 : Statistics :: Grounding time = 0.512265s, Solving time = 0.162902s, Total time = 0.675167s
14 : Statistics :: Grounding time = 0.519518s, Solving time = 0.175342s, Total time = 0.694860s
15 : Statistics :: Grounding time = 0.505099s, Solving time = 0.243276s, Total time = 0.748374s
16 : Statistics :: Grounding time = 0.526761s, Solving time = 0.319003s, Total time = 0.845764s
17 : Statistics :: Grounding time = 0.519326s, Solving time = 0.320301s, Total time = 0.839627s
18 : Statistics :: Grounding time = 0.537482s, Solving time = 0.340653s, Total time = 0.878135s
19 : Statistics :: Grounding time = 0.551235s, Solving time = 0.235888s, Total time = 0.787123s
20 : Statistics :: Grounding time = 0.552149s, Solving time = 0.363191s, Total time = 0.915340s
21 : Statistics :: Grounding time = 0.566892s, Solving time = 0.878345s, Total time = 1.445237s
22 : Statistics :: Grounding time = 0.564777s, Solving time = 1.171126s, Total time = 1.735903s
23 : Statistics :: Grounding time = 0.584458s, Solving time = 1.255139s, Total time = 1.839598s
24 : Statistics :: Grounding time = 0.591458s, Solving time = 1.550866s, Total time = 2.142325s
25 : Statistics :: Grounding time = 0.619069s, Solving time = 1.116670s, Total time = 1.735738s
26 : Statistics :: Grounding time = 0.605375s, Solving time = 1.480287s, Total time = 2.085662s
27 : Statistics :: Grounding time = 0.600494s, Solving time = 1.167445s, Total time = 1.767938s
28 : Statistics :: Grounding time = 0.663953s, Solving time = 3.567547s, Total time = 4.231500s
29 : Statistics :: Grounding time = 0.615555s, Solving time = 3.281108s, Total time = 3.896663s
30 : Statistics :: Grounding time = 0.629852s, Solving time = 6.621971s, Total time = 7.251823s
31 : Statistics :: Grounding time = 0.636550s, Solving time = 5.082587s, Total time = 5.719137s

[06-02-2021_15-26-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 21.685215s, Solving time = 31.594917s, Total time = 54.194581s
Model :: Total atoms = 15836, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-26-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,move((store_room,1)),26)
occurs(1,talos,move((hallway,0)),27)
occurs(1,talos,move((hallway,1)),28)
occurs(1,talos,move((hallway,2)),29)
occurs(1,talos,move((puzzle_room,0)),30)
occurs(1,talos,move((puzzle_room,1)),31)
occurs(1,talos,configure(manipulator_limb_2,extended),32)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),33)
occurs(1,talos,release(manipulator_end_2,(block,6)),34)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),35)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),36)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),37)
occurs(1,talos,release(manipulator_end_2,(block,3)),38)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),39)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),40)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),41)
occurs(1,talos,release(manipulator_end_2,(block,2)),42)
occurs(1,talos,configure(manipulator_limb_2,retracted),43)
occurs(1,talos,move((puzzle_room,0)),44)
occurs(1,talos,move((hallway,2)),45)
occurs(1,talos,move((hallway,1)),46)
occurs(1,talos,move((hallway,0)),47)
occurs(1,talos,move((store_room,1)),48)
occurs(1,talos,move((store_room,0)),49)
occurs(1,talos,configure(manipulator_limb_1,extended),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),52)
occurs(1,talos,configure(manipulator_limb_2,extended),53)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),54)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),55)
occurs(1,talos,configure(manipulator_limb_1,retracted),56)
occurs(1,talos,configure(manipulator_limb_2,retracted),57)
occurs(1,talos,move((store_room,1)),58)
occurs(1,talos,move((hallway,0)),59)
occurs(1,talos,move((hallway,1)),60)
occurs(1,talos,move((hallway,2)),61)
occurs(1,talos,move((puzzle_room,0)),62)
occurs(1,talos,move((puzzle_room,1)),63)
occurs(1,talos,configure(manipulator_limb_2,extended),64)
occurs(1,talos,configure(manipulator_limb_1,extended),65)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),66)
occurs(1,talos,release(manipulator_end_2,(block,5)),67)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),68)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),69)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),70)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),71)

[06-02-2021_15-26-22] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.419858s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    11.437193s : Steps =    42 : Actions =    42 |  
  | Level 1 : Time =    54.194581s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[06-02-2021_15-26-22] INFO :: Experiment >> 

      ================================================      
            Experimental run 2 : Time 69.652799s            
      ================================================      

[06-02-2021_15-26-22] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-26-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-26-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-26-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Instantiated.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building completed.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding base program parts.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.014164s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving base program parts.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.002023s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.040704s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.009183s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.032098s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.002695s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.032573s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.005538s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.036143s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.006324s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.038529s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.005744s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.037185s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.006692s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.038030s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.008326s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.038108s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.008932s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.038466s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.010533s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.040377s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.013528s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.040236s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.018660s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.041394s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.025301s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.040242s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.036573s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.042784s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.058403s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.073977s.

[06-02-2021_15-26-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.079909s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.079450s.

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.152995s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.081966s.

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.254958s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.086648s.

[06-02-2021_15-26-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.464963s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-26-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-26-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.091262s.

[06-02-2021_15-26-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 1.044914s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.093834s.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Model found:
Model :: Total atoms = 3689, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.218700s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving completed in 3.562078s because STOP_CON_REACHED.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.058168s, Solving time = 2.434894s, Total time = 3.562078s
Final Model :: Total atoms = 3689, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040704s, Solving time = 0.009183s, Total time = 0.049887s
2 : Statistics :: Grounding time = 0.032098s, Solving time = 0.002695s, Total time = 0.034793s
3 : Statistics :: Grounding time = 0.032573s, Solving time = 0.005538s, Total time = 0.038110s
4 : Statistics :: Grounding time = 0.036143s, Solving time = 0.006324s, Total time = 0.042466s
5 : Statistics :: Grounding time = 0.038529s, Solving time = 0.005744s, Total time = 0.044273s
6 : Statistics :: Grounding time = 0.037185s, Solving time = 0.006692s, Total time = 0.043878s
7 : Statistics :: Grounding time = 0.038030s, Solving time = 0.008326s, Total time = 0.046356s
8 : Statistics :: Grounding time = 0.038108s, Solving time = 0.008932s, Total time = 0.047039s
9 : Statistics :: Grounding time = 0.038466s, Solving time = 0.010533s, Total time = 0.048999s
10 : Statistics :: Grounding time = 0.040377s, Solving time = 0.013528s, Total time = 0.053904s
11 : Statistics :: Grounding time = 0.040236s, Solving time = 0.018660s, Total time = 0.058896s
12 : Statistics :: Grounding time = 0.041394s, Solving time = 0.025301s, Total time = 0.066695s
13 : Statistics :: Grounding time = 0.040242s, Solving time = 0.036573s, Total time = 0.076815s
14 : Statistics :: Grounding time = 0.042784s, Solving time = 0.058403s, Total time = 0.101187s
15 : Statistics :: Grounding time = 0.073977s, Solving time = 0.079909s, Total time = 0.153886s
16 : Statistics :: Grounding time = 0.079450s, Solving time = 0.152995s, Total time = 0.232445s
17 : Statistics :: Grounding time = 0.081966s, Solving time = 0.254958s, Total time = 0.336925s
18 : Statistics :: Grounding time = 0.086648s, Solving time = 0.464963s, Total time = 0.551610s
19 : Statistics :: Grounding time = 0.091262s, Solving time = 1.044914s, Total time = 1.136176s
20 : Statistics :: Grounding time = 0.093834s, Solving time = 0.218700s, Total time = 0.312534s

[06-02-2021_15-26-25] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.058168s, Solving time = 2.434894s, Total time = 3.562078s
Model :: Total atoms = 3689, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-26-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,move(store_room),7)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),8)
occurs(3,talos,move(puzzle_room),9)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),10)
occurs(3,talos,release(manipulator_arm_1,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),12)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),13)
occurs(3,talos,release(manipulator_arm_1,(block,3)),14)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),15)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),16)
occurs(3,talos,release(manipulator_arm_1,(block,2)),17)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),18)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),19)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),20)

[06-02-2021_15-26-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-26-25] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Instantiated.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building started.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building completed.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding base program parts.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.015383s.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving base program parts.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.003424s.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving started.

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-26-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.707138s.

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.255417s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.071554s.

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.017674s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.072475s.

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.017573s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-26-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.074626s.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.022261s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.074376s.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.022630s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.076155s.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.024534s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.078409s.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.029609s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.077737s.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.029063s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.079050s.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.035360s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.080981s.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.040675s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.083170s.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.027095s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.082650s.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.055706s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.087638s.

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.078428s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.101262s.

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.060068s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.089142s.

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.117193s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.096359s.

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.113009s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-26-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.237632s.

[06-02-2021_15-26-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.137896s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-26-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-26-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.240310s.

[06-02-2021_15-26-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.265028s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-26-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-26-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.238037s.

[06-02-2021_15-26-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.586784s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.235962s.

[06-02-2021_15-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.686915s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-26-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-26-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.242065s.

[06-02-2021_15-26-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.705819s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-26-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-26-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.293736s.

[06-02-2021_15-26-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 1.010929s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-26-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-26-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.276846s.

[06-02-2021_15-26-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.907693s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-26-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-26-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.277980s.

[06-02-2021_15-26-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Model found:
Model :: Total atoms = 9386, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 1.256522s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving completed in 10.734818s because STOP_CON_REACHED.

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.990671s, Solving time = 6.507302s, Total time = 10.734818s
Final Model :: Total atoms = 9386, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.707138s, Solving time = 0.255417s, Total time = 0.962555s
2 : Statistics :: Grounding time = 0.071554s, Solving time = 0.017674s, Total time = 0.089228s
3 : Statistics :: Grounding time = 0.072475s, Solving time = 0.017573s, Total time = 0.090048s
4 : Statistics :: Grounding time = 0.074626s, Solving time = 0.022261s, Total time = 0.096887s
5 : Statistics :: Grounding time = 0.074376s, Solving time = 0.022630s, Total time = 0.097005s
6 : Statistics :: Grounding time = 0.076155s, Solving time = 0.024534s, Total time = 0.100689s
7 : Statistics :: Grounding time = 0.078409s, Solving time = 0.029609s, Total time = 0.108018s
8 : Statistics :: Grounding time = 0.077737s, Solving time = 0.029063s, Total time = 0.106800s
9 : Statistics :: Grounding time = 0.079050s, Solving time = 0.035360s, Total time = 0.114410s
10 : Statistics :: Grounding time = 0.080981s, Solving time = 0.040675s, Total time = 0.121655s
11 : Statistics :: Grounding time = 0.083170s, Solving time = 0.027095s, Total time = 0.110264s
12 : Statistics :: Grounding time = 0.082650s, Solving time = 0.055706s, Total time = 0.138356s
13 : Statistics :: Grounding time = 0.087638s, Solving time = 0.078428s, Total time = 0.166066s
14 : Statistics :: Grounding time = 0.101262s, Solving time = 0.060068s, Total time = 0.161330s
15 : Statistics :: Grounding time = 0.089142s, Solving time = 0.117193s, Total time = 0.206335s
16 : Statistics :: Grounding time = 0.096359s, Solving time = 0.113009s, Total time = 0.209367s
17 : Statistics :: Grounding time = 0.237632s, Solving time = 0.137896s, Total time = 0.375527s
18 : Statistics :: Grounding time = 0.240310s, Solving time = 0.265028s, Total time = 0.505338s
19 : Statistics :: Grounding time = 0.238037s, Solving time = 0.586784s, Total time = 0.824820s
20 : Statistics :: Grounding time = 0.235962s, Solving time = 0.686915s, Total time = 0.922877s
21 : Statistics :: Grounding time = 0.242065s, Solving time = 0.705819s, Total time = 0.947884s
22 : Statistics :: Grounding time = 0.293736s, Solving time = 1.010929s, Total time = 1.304665s
23 : Statistics :: Grounding time = 0.276846s, Solving time = 0.907693s, Total time = 1.184539s
24 : Statistics :: Grounding time = 0.277980s, Solving time = 1.256522s, Total time = 1.534501s

[06-02-2021_15-26-36] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.990671s, Solving time = 6.507302s, Total time = 10.734818s
Model :: Total atoms = 9386, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-26-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,6)),21)
occurs(2,talos,configure(manipulator_arm_2,retracted),22)
occurs(2,talos,move(hallway),23)
occurs(2,talos,move(store_room),24)
occurs(2,talos,configure(manipulator_arm_2,extended),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),26)
occurs(2,talos,configure(manipulator_arm_2,retracted),27)
occurs(2,talos,move(hallway),28)
occurs(2,talos,move(puzzle_room),29)
occurs(2,talos,configure(manipulator_arm_2,extended),30)
occurs(2,talos,configure(manipulator_arm_1,extended),31)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),32)
occurs(2,talos,release(manipulator_arm_1,(block,5)),33)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),34)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),35)
occurs(2,talos,release(manipulator_arm_1,(block,3)),36)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),37)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),38)
occurs(2,talos,release(manipulator_arm_1,(block,2)),39)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),40)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),41)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),42)

[06-02-2021_15-26-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-26-36] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Instantiated.

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 42 rules into program part conformance_module(step).

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 42, Stop con = StopCondition.Satisfiable

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building started.

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building completed.

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding base program parts.

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.018091s.

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving base program parts.

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.004069s.

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving started.

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [1]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-26-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [41]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-26-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 5.657236s.

[06-02-2021_15-26-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.264047s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [2]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-26-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-26-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.421312s.

[06-02-2021_15-26-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.053135s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [3]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-26-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-26-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.430946s.

[06-02-2021_15-26-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.057556s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [4]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-26-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.446694s.

[06-02-2021_15-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.056986s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [5]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.443221s.

[06-02-2021_15-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.062273s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [6]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-26-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.454694s.

[06-02-2021_15-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.081626s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [7]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.466326s.

[06-02-2021_15-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.058721s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [8]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-26-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.470596s.

[06-02-2021_15-26-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.059729s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [9]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-26-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-26-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.493426s.

[06-02-2021_15-26-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.063982s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [10]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-26-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-26-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.491085s.

[06-02-2021_15-26-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.083486s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [11]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-26-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-26-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.492045s.

[06-02-2021_15-26-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.116985s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [12]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-26-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-26-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.501079s.

[06-02-2021_15-26-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.132075s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [13]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-26-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-26-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.493585s.

[06-02-2021_15-26-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.123145s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [14]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-26-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-26-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.508590s.

[06-02-2021_15-26-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.257653s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [15]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-26-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-26-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.512800s.

[06-02-2021_15-26-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.235442s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [16]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-26-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-26-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.516091s.

[06-02-2021_15-26-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.421438s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [17]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-26-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-26-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.516101s.

[06-02-2021_15-26-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.458681s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [18]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-26-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-26-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.520069s.

[06-02-2021_15-26-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.575020s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [19]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-26-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-26-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.537555s.

[06-02-2021_15-26-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.450954s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [20]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-26-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-26-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.538151s.

[06-02-2021_15-26-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.246494s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [21]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-26-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-26-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.552031s.

[06-02-2021_15-26-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-26-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.622882s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-26-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [22]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-26-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-26-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.566902s.

[06-02-2021_15-26-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-27-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.410286s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [23]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-27-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-27-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.568312s.

[06-02-2021_15-27-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-27-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.418512s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [24]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-27-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-27-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.579229s.

[06-02-2021_15-27-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-27-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.369032s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [25]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-27-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-27-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.589441s.

[06-02-2021_15-27-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-27-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.590033s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [26]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-27-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-27-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.596522s.

[06-02-2021_15-27-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-27-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.330978s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [27]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-27-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-27-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.598780s.

[06-02-2021_15-27-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-27-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.947794s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [28]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-27-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-27-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.599514s.

[06-02-2021_15-27-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.963821s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [29]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.620755s.

[06-02-2021_15-27-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 3.328588s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [30]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-27-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-27-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.704731s.

[06-02-2021_15-27-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 4.722725s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [31]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.636298s.

[06-02-2021_15-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Model found:
Model :: Total atoms = 15752, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 13.843197s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving completed in 57.848815s because STOP_CON_REACHED.

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 21.542209s, Solving time = 35.411346s, Total time = 57.848815s
Final Model :: Total atoms = 15752, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.657236s, Solving time = 1.264047s, Total time = 6.921283s
2 : Statistics :: Grounding time = 0.421312s, Solving time = 0.053135s, Total time = 0.474447s
3 : Statistics :: Grounding time = 0.430946s, Solving time = 0.057556s, Total time = 0.488502s
4 : Statistics :: Grounding time = 0.446694s, Solving time = 0.056986s, Total time = 0.503680s
5 : Statistics :: Grounding time = 0.443221s, Solving time = 0.062273s, Total time = 0.505494s
6 : Statistics :: Grounding time = 0.454694s, Solving time = 0.081626s, Total time = 0.536320s
7 : Statistics :: Grounding time = 0.466326s, Solving time = 0.058721s, Total time = 0.525047s
8 : Statistics :: Grounding time = 0.470596s, Solving time = 0.059729s, Total time = 0.530325s
9 : Statistics :: Grounding time = 0.493426s, Solving time = 0.063982s, Total time = 0.557408s
10 : Statistics :: Grounding time = 0.491085s, Solving time = 0.083486s, Total time = 0.574571s
11 : Statistics :: Grounding time = 0.492045s, Solving time = 0.116985s, Total time = 0.609030s
12 : Statistics :: Grounding time = 0.501079s, Solving time = 0.132075s, Total time = 0.633154s
13 : Statistics :: Grounding time = 0.493585s, Solving time = 0.123145s, Total time = 0.616730s
14 : Statistics :: Grounding time = 0.508590s, Solving time = 0.257653s, Total time = 0.766243s
15 : Statistics :: Grounding time = 0.512800s, Solving time = 0.235442s, Total time = 0.748242s
16 : Statistics :: Grounding time = 0.516091s, Solving time = 0.421438s, Total time = 0.937529s
17 : Statistics :: Grounding time = 0.516101s, Solving time = 0.458681s, Total time = 0.974782s
18 : Statistics :: Grounding time = 0.520069s, Solving time = 0.575020s, Total time = 1.095089s
19 : Statistics :: Grounding time = 0.537555s, Solving time = 0.450954s, Total time = 0.988509s
20 : Statistics :: Grounding time = 0.538151s, Solving time = 1.246494s, Total time = 1.784646s
21 : Statistics :: Grounding time = 0.552031s, Solving time = 0.622882s, Total time = 1.174913s
22 : Statistics :: Grounding time = 0.566902s, Solving time = 0.410286s, Total time = 0.977188s
23 : Statistics :: Grounding time = 0.568312s, Solving time = 0.418512s, Total time = 0.986823s
24 : Statistics :: Grounding time = 0.579229s, Solving time = 0.369032s, Total time = 0.948261s
25 : Statistics :: Grounding time = 0.589441s, Solving time = 0.590033s, Total time = 1.179474s
26 : Statistics :: Grounding time = 0.596522s, Solving time = 1.330978s, Total time = 1.927500s
27 : Statistics :: Grounding time = 0.598780s, Solving time = 1.947794s, Total time = 2.546575s
28 : Statistics :: Grounding time = 0.599514s, Solving time = 1.963821s, Total time = 2.563335s
29 : Statistics :: Grounding time = 0.620755s, Solving time = 3.328588s, Total time = 3.949343s
30 : Statistics :: Grounding time = 0.704731s, Solving time = 4.722725s, Total time = 5.427456s
31 : Statistics :: Grounding time = 0.636298s, Solving time = 13.843197s, Total time = 14.479495s

[06-02-2021_15-27-34] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 21.542209s, Solving time = 35.411346s, Total time = 57.848815s
Model :: Total atoms = 15752, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-27-34] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),26)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),27)
occurs(1,talos,configure(manipulator_limb_1,retracted),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),37)
occurs(1,talos,release(manipulator_end_2,(block,6)),38)
occurs(1,talos,configure(manipulator_limb_2,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_2,extended),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),48)
occurs(1,talos,configure(manipulator_limb_2,retracted),49)
occurs(1,talos,move((store_room,1)),50)
occurs(1,talos,move((hallway,0)),51)
occurs(1,talos,move((hallway,1)),52)
occurs(1,talos,move((hallway,2)),53)
occurs(1,talos,move((puzzle_room,0)),54)
occurs(1,talos,move((puzzle_room,1)),55)
occurs(1,talos,configure(manipulator_limb_1,extended),56)
occurs(1,talos,configure(manipulator_limb_2,extended),57)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),58)
occurs(1,talos,release(manipulator_end_1,(block,5)),59)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),60)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),61)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),62)
occurs(1,talos,release(manipulator_end_1,(block,3)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),65)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),66)
occurs(1,talos,release(manipulator_end_1,(block,2)),67)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),68)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),69)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),70)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),71)

[06-02-2021_15-27-34] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.562078s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    10.734818s : Steps =    42 : Actions =    42 |  
  | Level 1 : Time =    57.848815s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[06-02-2021_15-27-34] INFO :: Experiment >> 

      ================================================      
            Experimental run 3 : Time 72.850486s            
      ================================================      

[06-02-2021_15-27-34] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-27-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-27-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-27-34] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Instantiated.

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building started.

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building completed.

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding base program parts.

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.015648s.

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving base program parts.

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.001906s.

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving started.

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-27-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.042710s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.006295s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.032524s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.003216s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.032928s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.005050s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.038588s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.006599s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.039097s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.007147s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.038040s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.007520s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.037771s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.007835s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.040545s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.009851s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.039934s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.010793s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.040766s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.013845s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.039646s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.021338s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.041505s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.035585s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.040757s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.057674s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.044613s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.089770s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.076068s.

[06-02-2021_15-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.147556s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.078170s.

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.208847s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.081109s.

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.461184s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-27-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.084848s.

[06-02-2021_15-27-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.553284s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-27-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-27-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.087000s.

[06-02-2021_15-27-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.787248s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.091244s.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Model found:
Model :: Total atoms = 3695, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.119745s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving completed in 3.700651s because STOP_CON_REACHED.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.063511s, Solving time = 2.562290s, Total time = 3.700651s
Final Model :: Total atoms = 3695, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.042710s, Solving time = 0.006295s, Total time = 0.049005s
2 : Statistics :: Grounding time = 0.032524s, Solving time = 0.003216s, Total time = 0.035741s
3 : Statistics :: Grounding time = 0.032928s, Solving time = 0.005050s, Total time = 0.037977s
4 : Statistics :: Grounding time = 0.038588s, Solving time = 0.006599s, Total time = 0.045187s
5 : Statistics :: Grounding time = 0.039097s, Solving time = 0.007147s, Total time = 0.046245s
6 : Statistics :: Grounding time = 0.038040s, Solving time = 0.007520s, Total time = 0.045560s
7 : Statistics :: Grounding time = 0.037771s, Solving time = 0.007835s, Total time = 0.045606s
8 : Statistics :: Grounding time = 0.040545s, Solving time = 0.009851s, Total time = 0.050396s
9 : Statistics :: Grounding time = 0.039934s, Solving time = 0.010793s, Total time = 0.050727s
10 : Statistics :: Grounding time = 0.040766s, Solving time = 0.013845s, Total time = 0.054612s
11 : Statistics :: Grounding time = 0.039646s, Solving time = 0.021338s, Total time = 0.060984s
12 : Statistics :: Grounding time = 0.041505s, Solving time = 0.035585s, Total time = 0.077091s
13 : Statistics :: Grounding time = 0.040757s, Solving time = 0.057674s, Total time = 0.098431s
14 : Statistics :: Grounding time = 0.044613s, Solving time = 0.089770s, Total time = 0.134382s
15 : Statistics :: Grounding time = 0.076068s, Solving time = 0.147556s, Total time = 0.223625s
16 : Statistics :: Grounding time = 0.078170s, Solving time = 0.208847s, Total time = 0.287017s
17 : Statistics :: Grounding time = 0.081109s, Solving time = 0.461184s, Total time = 0.542293s
18 : Statistics :: Grounding time = 0.084848s, Solving time = 0.553284s, Total time = 0.638132s
19 : Statistics :: Grounding time = 0.087000s, Solving time = 0.787248s, Total time = 0.874248s
20 : Statistics :: Grounding time = 0.091244s, Solving time = 0.119745s, Total time = 0.210989s

[06-02-2021_15-27-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.063511s, Solving time = 2.562290s, Total time = 3.700651s
Model :: Total atoms = 3695, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-27-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,move(puzzle_room),3)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),4)
occurs(3,talos,release(manipulator_arm_1,(block,6)),5)
occurs(3,talos,move(store_room),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),7)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),8)
occurs(3,talos,move(puzzle_room),9)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),10)
occurs(3,talos,release(manipulator_arm_2,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),12)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),13)
occurs(3,talos,release(manipulator_arm_2,(block,3)),14)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),15)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),16)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),17)
occurs(3,talos,release(manipulator_arm_2,(block,2)),18)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),19)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),20)

[06-02-2021_15-27-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-27-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Instantiated.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building started.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building completed.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding base program parts.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.014913s.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving base program parts.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.001994s.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving started.

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-27-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.714114s.

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.260388s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.070583s.

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.018225s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.074808s.

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.017839s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.074230s.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.021277s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.074585s.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.020762s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.083020s.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.022788s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.076787s.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.025571s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.076452s.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.023881s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.078059s.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.030731s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.078857s.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.032101s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.089517s.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.035710s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.085522s.

[06-02-2021_15-27-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.051997s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.085826s.

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.064895s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.085650s.

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.052164s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.090085s.

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.086905s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.088064s.

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.128131s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.089958s.

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.167017s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-27-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-27-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.226381s.

[06-02-2021_15-27-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.371279s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-27-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-27-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.230168s.

[06-02-2021_15-27-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.683327s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-27-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-27-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.233663s.

[06-02-2021_15-27-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 1.038542s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-27-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-27-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.241251s.

[06-02-2021_15-27-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.968014s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-27-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-27-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.242551s.

[06-02-2021_15-27-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 1.025596s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-27-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-27-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.248751s.

[06-02-2021_15-27-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 1.098032s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-27-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-27-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.257119s.

[06-02-2021_15-27-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Model found:
Model :: Total atoms = 9390, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 1.437950s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving completed in 11.631254s because STOP_CON_REACHED.

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.710914s, Solving time = 7.685115s, Total time = 11.631254s
Final Model :: Total atoms = 9390, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.714114s, Solving time = 0.260388s, Total time = 0.974502s
2 : Statistics :: Grounding time = 0.070583s, Solving time = 0.018225s, Total time = 0.088808s
3 : Statistics :: Grounding time = 0.074808s, Solving time = 0.017839s, Total time = 0.092648s
4 : Statistics :: Grounding time = 0.074230s, Solving time = 0.021277s, Total time = 0.095506s
5 : Statistics :: Grounding time = 0.074585s, Solving time = 0.020762s, Total time = 0.095347s
6 : Statistics :: Grounding time = 0.083020s, Solving time = 0.022788s, Total time = 0.105808s
7 : Statistics :: Grounding time = 0.076787s, Solving time = 0.025571s, Total time = 0.102358s
8 : Statistics :: Grounding time = 0.076452s, Solving time = 0.023881s, Total time = 0.100333s
9 : Statistics :: Grounding time = 0.078059s, Solving time = 0.030731s, Total time = 0.108790s
10 : Statistics :: Grounding time = 0.078857s, Solving time = 0.032101s, Total time = 0.110958s
11 : Statistics :: Grounding time = 0.089517s, Solving time = 0.035710s, Total time = 0.125228s
12 : Statistics :: Grounding time = 0.085522s, Solving time = 0.051997s, Total time = 0.137519s
13 : Statistics :: Grounding time = 0.085826s, Solving time = 0.064895s, Total time = 0.150720s
14 : Statistics :: Grounding time = 0.085650s, Solving time = 0.052164s, Total time = 0.137814s
15 : Statistics :: Grounding time = 0.090085s, Solving time = 0.086905s, Total time = 0.176990s
16 : Statistics :: Grounding time = 0.088064s, Solving time = 0.128131s, Total time = 0.216195s
17 : Statistics :: Grounding time = 0.089958s, Solving time = 0.167017s, Total time = 0.256975s
18 : Statistics :: Grounding time = 0.226381s, Solving time = 0.371279s, Total time = 0.597660s
19 : Statistics :: Grounding time = 0.230168s, Solving time = 0.683327s, Total time = 0.913496s
20 : Statistics :: Grounding time = 0.233663s, Solving time = 1.038542s, Total time = 1.272204s
21 : Statistics :: Grounding time = 0.241251s, Solving time = 0.968014s, Total time = 1.209265s
22 : Statistics :: Grounding time = 0.242551s, Solving time = 1.025596s, Total time = 1.268147s
23 : Statistics :: Grounding time = 0.248751s, Solving time = 1.098032s, Total time = 1.346783s
24 : Statistics :: Grounding time = 0.257119s, Solving time = 1.437950s, Total time = 1.695069s

[06-02-2021_15-27-50] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.710914s, Solving time = 7.685115s, Total time = 11.631254s
Model :: Total atoms = 9390, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-27-50] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),14)
occurs(2,talos,configure(manipulator_arm_2,retracted),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,6)),21)
occurs(2,talos,configure(manipulator_arm_1,retracted),22)
occurs(2,talos,move(hallway),23)
occurs(2,talos,move(store_room),24)
occurs(2,talos,configure(manipulator_arm_1,extended),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),26)
occurs(2,talos,configure(manipulator_arm_1,retracted),27)
occurs(2,talos,move(hallway),28)
occurs(2,talos,move(puzzle_room),29)
occurs(2,talos,configure(manipulator_arm_1,extended),30)
occurs(2,talos,configure(manipulator_arm_2,extended),31)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),32)
occurs(2,talos,release(manipulator_arm_2,(block,5)),33)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),34)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),35)
occurs(2,talos,release(manipulator_arm_2,(block,3)),36)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),37)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),38)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),39)
occurs(2,talos,release(manipulator_arm_2,(block,2)),40)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),41)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),42)

[06-02-2021_15-27-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-27-50] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Instantiated.

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 42 rules into program part conformance_module(step).

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 42, Stop con = StopCondition.Satisfiable

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building started.

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building completed.

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding base program parts.

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.017186s.

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving base program parts.

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.003583s.

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving started.

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [1]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [41]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-27-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 5.716457s.

[06-02-2021_15-27-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-27-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 1.250054s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [2]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-27-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-27-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.438392s.

[06-02-2021_15-27-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.054758s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [3]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.440775s.

[06-02-2021_15-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.059105s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [4]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-27-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.443751s.

[06-02-2021_15-27-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-27-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.061134s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [5]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-27-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-27-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.452082s.

[06-02-2021_15-27-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-27-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.084404s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-27-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [6]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-27-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-28-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.449797s.

[06-02-2021_15-28-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.066562s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [7]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-28-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-28-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.457195s.

[06-02-2021_15-28-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.070814s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [8]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-28-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-28-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.469970s.

[06-02-2021_15-28-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.094722s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [9]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-28-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-28-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.468839s.

[06-02-2021_15-28-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.108876s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [10]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-28-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-28-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.479782s.

[06-02-2021_15-28-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.132997s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [11]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-28-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-28-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.494767s.

[06-02-2021_15-28-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.122884s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [12]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-28-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-28-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.485507s.

[06-02-2021_15-28-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.098517s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [13]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-28-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-28-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.483322s.

[06-02-2021_15-28-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.184244s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [14]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-28-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-28-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.490619s.

[06-02-2021_15-28-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.174039s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [15]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-28-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-28-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.506149s.

[06-02-2021_15-28-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.277977s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [16]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-28-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-28-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.508563s.

[06-02-2021_15-28-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.343489s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [17]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-28-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-28-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.514314s.

[06-02-2021_15-28-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.542379s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [18]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-28-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-28-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.539341s.

[06-02-2021_15-28-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.440606s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [19]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-28-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-28-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.530740s.

[06-02-2021_15-28-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.774357s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [20]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-28-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-28-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.543298s.

[06-02-2021_15-28-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.285879s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [21]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-28-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-28-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.548547s.

[06-02-2021_15-28-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.880030s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [22]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-28-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-28-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.580188s.

[06-02-2021_15-28-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.470237s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [23]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-28-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-28-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.568236s.

[06-02-2021_15-28-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.420132s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [24]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-28-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-28-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.571782s.

[06-02-2021_15-28-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.702915s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [25]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-28-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-28-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.589084s.

[06-02-2021_15-28-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 1.700914s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [26]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-28-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-28-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.604828s.

[06-02-2021_15-28-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.860927s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [27]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-28-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-28-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.601049s.

[06-02-2021_15-28-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 2.368617s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [28]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-28-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-28-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.624794s.

[06-02-2021_15-28-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 2.575012s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [29]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-28-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-28-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.617730s.

[06-02-2021_15-28-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 3.792262s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [30]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-28-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-28-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.626560s.

[06-02-2021_15-28-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 6.410743s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [31]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-28-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-28-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.633230s.

[06-02-2021_15-28-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Model found:
Model :: Total atoms = 15767, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 8.791992s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving completed in 56.584535s because STOP_CON_REACHED.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 21.496877s, Solving time = 34.205161s, Total time = 56.584535s
Final Model :: Total atoms = 15767, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.716457s, Solving time = 1.250054s, Total time = 6.966511s
2 : Statistics :: Grounding time = 0.438392s, Solving time = 0.054758s, Total time = 0.493150s
3 : Statistics :: Grounding time = 0.440775s, Solving time = 0.059105s, Total time = 0.499880s
4 : Statistics :: Grounding time = 0.443751s, Solving time = 0.061134s, Total time = 0.504885s
5 : Statistics :: Grounding time = 0.452082s, Solving time = 0.084404s, Total time = 0.536486s
6 : Statistics :: Grounding time = 0.449797s, Solving time = 0.066562s, Total time = 0.516359s
7 : Statistics :: Grounding time = 0.457195s, Solving time = 0.070814s, Total time = 0.528009s
8 : Statistics :: Grounding time = 0.469970s, Solving time = 0.094722s, Total time = 0.564692s
9 : Statistics :: Grounding time = 0.468839s, Solving time = 0.108876s, Total time = 0.577715s
10 : Statistics :: Grounding time = 0.479782s, Solving time = 0.132997s, Total time = 0.612779s
11 : Statistics :: Grounding time = 0.494767s, Solving time = 0.122884s, Total time = 0.617651s
12 : Statistics :: Grounding time = 0.485507s, Solving time = 0.098517s, Total time = 0.584024s
13 : Statistics :: Grounding time = 0.483322s, Solving time = 0.184244s, Total time = 0.667565s
14 : Statistics :: Grounding time = 0.490619s, Solving time = 0.174039s, Total time = 0.664658s
15 : Statistics :: Grounding time = 0.506149s, Solving time = 0.277977s, Total time = 0.784126s
16 : Statistics :: Grounding time = 0.508563s, Solving time = 0.343489s, Total time = 0.852052s
17 : Statistics :: Grounding time = 0.514314s, Solving time = 0.542379s, Total time = 1.056693s
18 : Statistics :: Grounding time = 0.539341s, Solving time = 0.440606s, Total time = 0.979948s
19 : Statistics :: Grounding time = 0.530740s, Solving time = 0.774357s, Total time = 1.305096s
20 : Statistics :: Grounding time = 0.543298s, Solving time = 0.285879s, Total time = 0.829177s
21 : Statistics :: Grounding time = 0.548547s, Solving time = 0.880030s, Total time = 1.428577s
22 : Statistics :: Grounding time = 0.580188s, Solving time = 0.470237s, Total time = 1.050426s
23 : Statistics :: Grounding time = 0.568236s, Solving time = 0.420132s, Total time = 0.988368s
24 : Statistics :: Grounding time = 0.571782s, Solving time = 0.702915s, Total time = 1.274698s
25 : Statistics :: Grounding time = 0.589084s, Solving time = 1.700914s, Total time = 2.289998s
26 : Statistics :: Grounding time = 0.604828s, Solving time = 0.860927s, Total time = 1.465755s
27 : Statistics :: Grounding time = 0.601049s, Solving time = 2.368617s, Total time = 2.969667s
28 : Statistics :: Grounding time = 0.624794s, Solving time = 2.575012s, Total time = 3.199806s
29 : Statistics :: Grounding time = 0.617730s, Solving time = 3.792262s, Total time = 4.409992s
30 : Statistics :: Grounding time = 0.626560s, Solving time = 6.410743s, Total time = 7.037304s
31 : Statistics :: Grounding time = 0.633230s, Solving time = 8.791992s, Total time = 9.425223s

[06-02-2021_15-28-47] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 21.496877s, Solving time = 34.205161s, Total time = 56.584535s
Model :: Total atoms = 15767, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-28-47] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),37)
occurs(1,talos,release(manipulator_end_1,(block,6)),38)
occurs(1,talos,configure(manipulator_limb_1,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_1,extended),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),48)
occurs(1,talos,configure(manipulator_limb_1,retracted),49)
occurs(1,talos,move((store_room,1)),50)
occurs(1,talos,move((hallway,0)),51)
occurs(1,talos,move((hallway,1)),52)
occurs(1,talos,move((hallway,2)),53)
occurs(1,talos,move((puzzle_room,0)),54)
occurs(1,talos,move((puzzle_room,1)),55)
occurs(1,talos,configure(manipulator_limb_2,extended),56)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),57)
occurs(1,talos,configure(manipulator_limb_1,extended),58)
occurs(1,talos,release(manipulator_end_2,(block,5)),59)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),60)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),61)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),62)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),63)
occurs(1,talos,release(manipulator_end_2,(block,3)),64)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),65)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),66)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),67)
occurs(1,talos,release(manipulator_end_2,(block,2)),68)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),69)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),70)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),71)

[06-02-2021_15-28-47] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.700651s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    11.631254s : Steps =    42 : Actions =    42 |  
  | Level 1 : Time =    56.584535s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[06-02-2021_15-28-47] INFO :: Experiment >> 

      ================================================      
            Experimental run 4 : Time 72.517384s            
      ================================================      

[06-02-2021_15-28-47] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-28-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-28-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-28-47] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Instantiated.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building completed.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding base program parts.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.014286s.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving base program parts.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.002834s.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.039184s.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.006414s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.030615s.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.003450s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.032711s.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.005422s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.035545s.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.006205s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.036494s.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.006477s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.036132s.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.006716s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.038550s.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.007733s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.037992s.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.009562s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.038129s.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.010845s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.040588s.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.012191s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-28-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.039589s.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.019236s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.040653s.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.025346s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.040849s.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.042031s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.052585s.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.082717s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.073912s.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.102460s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.076695s.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.156751s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.080285s.

[06-02-2021_15-28-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.214633s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-28-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-28-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.084841s.

[06-02-2021_15-28-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.390657s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-28-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-28-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.088069s.

[06-02-2021_15-28-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.704314s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.091314s.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Model found:
Model :: Total atoms = 3703, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.047127s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving completed in 2.979674s because STOP_CON_REACHED.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.049017s, Solving time = 1.863121s, Total time = 2.979674s
Final Model :: Total atoms = 3703, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039184s, Solving time = 0.006414s, Total time = 0.045597s
2 : Statistics :: Grounding time = 0.030615s, Solving time = 0.003450s, Total time = 0.034064s
3 : Statistics :: Grounding time = 0.032711s, Solving time = 0.005422s, Total time = 0.038133s
4 : Statistics :: Grounding time = 0.035545s, Solving time = 0.006205s, Total time = 0.041750s
5 : Statistics :: Grounding time = 0.036494s, Solving time = 0.006477s, Total time = 0.042970s
6 : Statistics :: Grounding time = 0.036132s, Solving time = 0.006716s, Total time = 0.042848s
7 : Statistics :: Grounding time = 0.038550s, Solving time = 0.007733s, Total time = 0.046283s
8 : Statistics :: Grounding time = 0.037992s, Solving time = 0.009562s, Total time = 0.047554s
9 : Statistics :: Grounding time = 0.038129s, Solving time = 0.010845s, Total time = 0.048974s
10 : Statistics :: Grounding time = 0.040588s, Solving time = 0.012191s, Total time = 0.052779s
11 : Statistics :: Grounding time = 0.039589s, Solving time = 0.019236s, Total time = 0.058825s
12 : Statistics :: Grounding time = 0.040653s, Solving time = 0.025346s, Total time = 0.066000s
13 : Statistics :: Grounding time = 0.040849s, Solving time = 0.042031s, Total time = 0.082880s
14 : Statistics :: Grounding time = 0.052585s, Solving time = 0.082717s, Total time = 0.135302s
15 : Statistics :: Grounding time = 0.073912s, Solving time = 0.102460s, Total time = 0.176372s
16 : Statistics :: Grounding time = 0.076695s, Solving time = 0.156751s, Total time = 0.233446s
17 : Statistics :: Grounding time = 0.080285s, Solving time = 0.214633s, Total time = 0.294918s
18 : Statistics :: Grounding time = 0.084841s, Solving time = 0.390657s, Total time = 0.475498s
19 : Statistics :: Grounding time = 0.088069s, Solving time = 0.704314s, Total time = 0.792383s
20 : Statistics :: Grounding time = 0.091314s, Solving time = 0.047127s, Total time = 0.138442s

[06-02-2021_15-28-50] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.049017s, Solving time = 1.863121s, Total time = 2.979674s
Model :: Total atoms = 3703, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-28-50] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,move(puzzle_room),3)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),6)
occurs(3,talos,release(manipulator_arm_2,(block,3)),7)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),8)
occurs(3,talos,release(manipulator_arm_1,(block,6)),9)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),10)
occurs(3,talos,release(manipulator_arm_2,(block,2)),11)
occurs(3,talos,move(store_room),12)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),14)
occurs(3,talos,move(puzzle_room),15)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(3,talos,release(manipulator_arm_1,(block,5)),17)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),18)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),19)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),20)

[06-02-2021_15-28-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-28-50] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Instantiated.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building started.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building completed.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding base program parts.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.016210s.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving base program parts.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.002402s.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving started.

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-28-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.712059s.

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.258907s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.088977s.

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.018222s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.079959s.

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.017690s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.074168s.

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.024373s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.075650s.

[06-02-2021_15-28-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.022933s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.082883s.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.024696s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.075826s.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.025523s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.078523s.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.031564s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.078444s.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.027715s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.079176s.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.034357s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.090118s.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.058539s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.084475s.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.120531s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-28-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.083659s.

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.060185s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.091399s.

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.095994s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.085565s.

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.176365s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.087573s.

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.306363s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-28-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.221186s.

[06-02-2021_15-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.687896s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-28-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.224039s.

[06-02-2021_15-28-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.074301s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-28-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-28-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.241121s.

[06-02-2021_15-28-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 2.020201s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.234443s.

[06-02-2021_15-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-29-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 3.163385s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-29-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-29-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.238494s.

[06-02-2021_15-29-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-29-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 4.679790s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-29-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-29-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.244561s.

[06-02-2021_15-29-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-29-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 3.345086s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-29-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-29-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.245355s.

[06-02-2021_15-29-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-29-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 4.928733s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-29-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-29-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.252600s.

[06-02-2021_15-29-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-29-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 2.953017s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-29-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-29-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.253574s.

[06-02-2021_15-29-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-29-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 2.782638s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-29-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-29-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.255198s.

[06-02-2021_15-29-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Model found:
Model :: Total atoms = 9756, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 2.185661s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving completed in 33.817694s because STOP_CON_REACHED.

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.375234s, Solving time = 29.127066s, Total time = 33.817694s
Final Model :: Total atoms = 9756, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.712059s, Solving time = 0.258907s, Total time = 0.970966s
2 : Statistics :: Grounding time = 0.088977s, Solving time = 0.018222s, Total time = 0.107199s
3 : Statistics :: Grounding time = 0.079959s, Solving time = 0.017690s, Total time = 0.097649s
4 : Statistics :: Grounding time = 0.074168s, Solving time = 0.024373s, Total time = 0.098541s
5 : Statistics :: Grounding time = 0.075650s, Solving time = 0.022933s, Total time = 0.098583s
6 : Statistics :: Grounding time = 0.082883s, Solving time = 0.024696s, Total time = 0.107579s
7 : Statistics :: Grounding time = 0.075826s, Solving time = 0.025523s, Total time = 0.101349s
8 : Statistics :: Grounding time = 0.078523s, Solving time = 0.031564s, Total time = 0.110087s
9 : Statistics :: Grounding time = 0.078444s, Solving time = 0.027715s, Total time = 0.106159s
10 : Statistics :: Grounding time = 0.079176s, Solving time = 0.034357s, Total time = 0.113533s
11 : Statistics :: Grounding time = 0.090118s, Solving time = 0.058539s, Total time = 0.148656s
12 : Statistics :: Grounding time = 0.084475s, Solving time = 0.120531s, Total time = 0.205006s
13 : Statistics :: Grounding time = 0.083659s, Solving time = 0.060185s, Total time = 0.143844s
14 : Statistics :: Grounding time = 0.091399s, Solving time = 0.095994s, Total time = 0.187392s
15 : Statistics :: Grounding time = 0.085565s, Solving time = 0.176365s, Total time = 0.261930s
16 : Statistics :: Grounding time = 0.087573s, Solving time = 0.306363s, Total time = 0.393936s
17 : Statistics :: Grounding time = 0.221186s, Solving time = 0.687896s, Total time = 0.909082s
18 : Statistics :: Grounding time = 0.224039s, Solving time = 1.074301s, Total time = 1.298341s
19 : Statistics :: Grounding time = 0.241121s, Solving time = 2.020201s, Total time = 2.261321s
20 : Statistics :: Grounding time = 0.234443s, Solving time = 3.163385s, Total time = 3.397828s
21 : Statistics :: Grounding time = 0.238494s, Solving time = 4.679790s, Total time = 4.918284s
22 : Statistics :: Grounding time = 0.244561s, Solving time = 3.345086s, Total time = 3.589647s
23 : Statistics :: Grounding time = 0.245355s, Solving time = 4.928733s, Total time = 5.174087s
24 : Statistics :: Grounding time = 0.252600s, Solving time = 2.953017s, Total time = 3.205617s
25 : Statistics :: Grounding time = 0.253574s, Solving time = 2.782638s, Total time = 3.036212s
26 : Statistics :: Grounding time = 0.255198s, Solving time = 2.185661s, Total time = 2.440859s

[06-02-2021_15-29-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.375234s, Solving time = 29.127066s, Total time = 33.817694s
Model :: Total atoms = 9756, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-29-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,move(hallway),14)
occurs(2,talos,move(puzzle_room),15)
occurs(2,talos,configure(manipulator_arm_1,extended),16)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),17)
occurs(2,talos,release(manipulator_arm_1,(block,6)),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),20)
occurs(2,talos,configure(manipulator_arm_1,retracted),21)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),22)
occurs(2,talos,release(manipulator_arm_2,(block,3)),23)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),24)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),25)
occurs(2,talos,release(manipulator_arm_2,(block,2)),26)
occurs(2,talos,configure(manipulator_arm_2,retracted),27)
occurs(2,talos,move(hallway),28)
occurs(2,talos,move(store_room),29)
occurs(2,talos,configure(manipulator_arm_2,extended),30)
occurs(2,talos,configure(manipulator_arm_1,extended),31)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),32)
occurs(2,talos,configure(manipulator_arm_1,retracted),33)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),34)
occurs(2,talos,configure(manipulator_arm_2,retracted),35)
occurs(2,talos,move(hallway),36)
occurs(2,talos,move(puzzle_room),37)
occurs(2,talos,configure(manipulator_arm_2,extended),38)
occurs(2,talos,configure(manipulator_arm_1,extended),39)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),40)
occurs(2,talos,release(manipulator_arm_1,(block,5)),41)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),42)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),43)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),44)

[06-02-2021_15-29-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-29-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Instantiated.

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building started.

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building completed.

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding base program parts.

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.017455s.

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving base program parts.

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.003684s.

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving started.

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-29-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-29-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 6.005034s.

[06-02-2021_15-29-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 1.310226s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-29-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-29-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.451074s.

[06-02-2021_15-29-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.057462s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-29-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-29-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.462863s.

[06-02-2021_15-29-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.059931s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-29-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-29-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.457585s.

[06-02-2021_15-29-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.061944s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-29-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-29-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.476436s.

[06-02-2021_15-29-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.063219s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-29-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-29-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.467515s.

[06-02-2021_15-29-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.067677s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-29-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-29-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.489865s.

[06-02-2021_15-29-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.077756s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-29-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-29-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.496783s.

[06-02-2021_15-29-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.098316s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-29-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-29-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.504222s.

[06-02-2021_15-29-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.136258s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-29-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-29-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.498420s.

[06-02-2021_15-29-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.112374s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-29-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-29-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.532614s.

[06-02-2021_15-29-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.091012s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-29-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-29-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.519364s.

[06-02-2021_15-29-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.240288s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-29-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-29-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.508473s.

[06-02-2021_15-29-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.094864s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-29-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-29-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.517649s.

[06-02-2021_15-29-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.323439s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-29-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-29-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.524588s.

[06-02-2021_15-29-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.190285s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-29-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-29-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.526616s.

[06-02-2021_15-29-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.132621s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-29-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-29-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.537570s.

[06-02-2021_15-29-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.183963s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-29-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-29-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.547504s.

[06-02-2021_15-29-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.758837s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-29-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-29-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.561727s.

[06-02-2021_15-29-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.436651s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-29-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-29-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.583978s.

[06-02-2021_15-29-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.906187s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-29-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-29-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.588786s.

[06-02-2021_15-29-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.391230s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-29-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-29-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.580386s.

[06-02-2021_15-29-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.778255s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-29-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-29-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.599303s.

[06-02-2021_15-29-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 1.039608s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-29-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-29-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.600195s.

[06-02-2021_15-29-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.492528s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.608688s.

[06-02-2021_15-29-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 1.061472s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.625333s.

[06-02-2021_15-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 2.439660s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-29-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-29-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.632763s.

[06-02-2021_15-29-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-29-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 2.460772s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-29-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-29-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-29-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.636328s.

[06-02-2021_15-29-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-30-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 4.092069s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-30-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-30-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.660186s.

[06-02-2021_15-30-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-30-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 5.213042s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [30]:
Current step bound = 72
End step min = 0
End step max = None

[06-02-2021_15-30-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 0]), ('conformance_module', [72])].

[06-02-2021_15-30-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.657777s.

[06-02-2021_15-30-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-30-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 8.194723s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [31]:
Current step bound = 73
End step min = 0
End step max = None

[06-02-2021_15-30-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 0]), ('conformance_module', [73])].

[06-02-2021_15-30-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.672283s.

[06-02-2021_15-30-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Model found:
Model :: Total atoms = 16203, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 10.961573s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving completed in 66.001520s because STOP_CON_REACHED.

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 22.549364s, Solving time = 42.531923s, Total time = 66.001520s
Final Model :: Total atoms = 16203, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental statistics:
1 : Statistics :: Grounding time = 6.005034s, Solving time = 1.310226s, Total time = 7.315260s
2 : Statistics :: Grounding time = 0.451074s, Solving time = 0.057462s, Total time = 0.508536s
3 : Statistics :: Grounding time = 0.462863s, Solving time = 0.059931s, Total time = 0.522793s
4 : Statistics :: Grounding time = 0.457585s, Solving time = 0.061944s, Total time = 0.519529s
5 : Statistics :: Grounding time = 0.476436s, Solving time = 0.063219s, Total time = 0.539655s
6 : Statistics :: Grounding time = 0.467515s, Solving time = 0.067677s, Total time = 0.535192s
7 : Statistics :: Grounding time = 0.489865s, Solving time = 0.077756s, Total time = 0.567621s
8 : Statistics :: Grounding time = 0.496783s, Solving time = 0.098316s, Total time = 0.595100s
9 : Statistics :: Grounding time = 0.504222s, Solving time = 0.136258s, Total time = 0.640480s
10 : Statistics :: Grounding time = 0.498420s, Solving time = 0.112374s, Total time = 0.610794s
11 : Statistics :: Grounding time = 0.532614s, Solving time = 0.091012s, Total time = 0.623625s
12 : Statistics :: Grounding time = 0.519364s, Solving time = 0.240288s, Total time = 0.759651s
13 : Statistics :: Grounding time = 0.508473s, Solving time = 0.094864s, Total time = 0.603337s
14 : Statistics :: Grounding time = 0.517649s, Solving time = 0.323439s, Total time = 0.841088s
15 : Statistics :: Grounding time = 0.524588s, Solving time = 0.190285s, Total time = 0.714873s
16 : Statistics :: Grounding time = 0.526616s, Solving time = 0.132621s, Total time = 0.659237s
17 : Statistics :: Grounding time = 0.537570s, Solving time = 0.183963s, Total time = 0.721533s
18 : Statistics :: Grounding time = 0.547504s, Solving time = 0.758837s, Total time = 1.306341s
19 : Statistics :: Grounding time = 0.561727s, Solving time = 0.436651s, Total time = 0.998378s
20 : Statistics :: Grounding time = 0.583978s, Solving time = 0.906187s, Total time = 1.490165s
21 : Statistics :: Grounding time = 0.588786s, Solving time = 0.391230s, Total time = 0.980016s
22 : Statistics :: Grounding time = 0.580386s, Solving time = 0.778255s, Total time = 1.358640s
23 : Statistics :: Grounding time = 0.599303s, Solving time = 1.039608s, Total time = 1.638911s
24 : Statistics :: Grounding time = 0.600195s, Solving time = 0.492528s, Total time = 1.092722s
25 : Statistics :: Grounding time = 0.608688s, Solving time = 1.061472s, Total time = 1.670160s
26 : Statistics :: Grounding time = 0.625333s, Solving time = 2.439660s, Total time = 3.064994s
27 : Statistics :: Grounding time = 0.632763s, Solving time = 2.460772s, Total time = 3.093535s
28 : Statistics :: Grounding time = 0.636328s, Solving time = 4.092069s, Total time = 4.728397s
29 : Statistics :: Grounding time = 0.660186s, Solving time = 5.213042s, Total time = 5.873228s
30 : Statistics :: Grounding time = 0.657777s, Solving time = 8.194723s, Total time = 8.852500s
31 : Statistics :: Grounding time = 0.672283s, Solving time = 10.961573s, Total time = 11.633856s

[06-02-2021_15-30-30] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 22.549364s, Solving time = 42.531923s, Total time = 66.001520s
Model :: Total atoms = 16203, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-30-30] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((store_room,1)),26)
occurs(1,talos,move((hallway,0)),27)
occurs(1,talos,move((hallway,1)),28)
occurs(1,talos,move((hallway,2)),29)
occurs(1,talos,move((puzzle_room,0)),30)
occurs(1,talos,move((puzzle_room,1)),31)
occurs(1,talos,configure(manipulator_limb_2,extended),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_1,(block,6)),36)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),37)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),38)
occurs(1,talos,configure(manipulator_limb_1,retracted),39)
occurs(1,talos,release(manipulator_end_2,(block,3)),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),41)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),42)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),43)
occurs(1,talos,release(manipulator_end_2,(block,2)),44)
occurs(1,talos,configure(manipulator_limb_2,retracted),45)
occurs(1,talos,move((puzzle_room,0)),46)
occurs(1,talos,move((hallway,2)),47)
occurs(1,talos,move((hallway,1)),48)
occurs(1,talos,move((hallway,0)),49)
occurs(1,talos,move((store_room,1)),50)
occurs(1,talos,move((store_room,0)),51)
occurs(1,talos,configure(manipulator_limb_1,extended),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),54)
occurs(1,talos,configure(manipulator_limb_2,extended),55)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),56)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),57)
occurs(1,talos,configure(manipulator_limb_2,retracted),58)
occurs(1,talos,configure(manipulator_limb_1,retracted),59)
occurs(1,talos,move((store_room,1)),60)
occurs(1,talos,move((hallway,0)),61)
occurs(1,talos,move((hallway,1)),62)
occurs(1,talos,move((hallway,2)),63)
occurs(1,talos,move((puzzle_room,0)),64)
occurs(1,talos,move((puzzle_room,1)),65)
occurs(1,talos,configure(manipulator_limb_1,extended),66)
occurs(1,talos,configure(manipulator_limb_2,extended),67)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),68)
occurs(1,talos,release(manipulator_end_1,(block,5)),69)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),70)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),71)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),72)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),73)

[06-02-2021_15-30-30] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     2.979674s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    33.817694s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    66.001520s : Steps =    73 : Actions =    73 |  
  ====================================================================  

[06-02-2021_15-30-30] INFO :: Experiment >> 

      ================================================      
           Experimental run 5 : Time 103.491793s            
      ================================================      

[06-02-2021_15-30-30] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-30-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-30-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-30-30] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Instantiated.

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Program building started.

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Program building completed.

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding base program parts.

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.013865s.

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving base program parts.

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.001913s.

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental solving started.

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.039695s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.006570s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.031448s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.003701s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.030926s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.004699s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.036116s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.006261s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.035606s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.006328s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.036411s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.007153s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.038564s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.008655s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.037731s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.009815s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.040874s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.011274s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.045720s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.024247s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.050489s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.021939s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.063692s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.027760s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.041857s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.040210s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.042900s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.080411s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.043327s.

[06-02-2021_15-30-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.134042s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.077691s.

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.230999s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.081313s.

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.351576s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.084819s.

[06-02-2021_15-30-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.426596s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-30-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-30-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.088521s.

[06-02-2021_15-30-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.618516s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.092756s.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Model found:
Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.352200s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental solving completed in 3.504502s because STOP_CON_REACHED.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.054322s, Solving time = 2.374866s, Total time = 3.504502s
Final Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039695s, Solving time = 0.006570s, Total time = 0.046265s
2 : Statistics :: Grounding time = 0.031448s, Solving time = 0.003701s, Total time = 0.035149s
3 : Statistics :: Grounding time = 0.030926s, Solving time = 0.004699s, Total time = 0.035625s
4 : Statistics :: Grounding time = 0.036116s, Solving time = 0.006261s, Total time = 0.042378s
5 : Statistics :: Grounding time = 0.035606s, Solving time = 0.006328s, Total time = 0.041934s
6 : Statistics :: Grounding time = 0.036411s, Solving time = 0.007153s, Total time = 0.043564s
7 : Statistics :: Grounding time = 0.038564s, Solving time = 0.008655s, Total time = 0.047219s
8 : Statistics :: Grounding time = 0.037731s, Solving time = 0.009815s, Total time = 0.047546s
9 : Statistics :: Grounding time = 0.040874s, Solving time = 0.011274s, Total time = 0.052148s
10 : Statistics :: Grounding time = 0.045720s, Solving time = 0.024247s, Total time = 0.069967s
11 : Statistics :: Grounding time = 0.050489s, Solving time = 0.021939s, Total time = 0.072428s
12 : Statistics :: Grounding time = 0.063692s, Solving time = 0.027760s, Total time = 0.091451s
13 : Statistics :: Grounding time = 0.041857s, Solving time = 0.040210s, Total time = 0.082067s
14 : Statistics :: Grounding time = 0.042900s, Solving time = 0.080411s, Total time = 0.123311s
15 : Statistics :: Grounding time = 0.043327s, Solving time = 0.134042s, Total time = 0.177369s
16 : Statistics :: Grounding time = 0.077691s, Solving time = 0.230999s, Total time = 0.308690s
17 : Statistics :: Grounding time = 0.081313s, Solving time = 0.351576s, Total time = 0.432889s
18 : Statistics :: Grounding time = 0.084819s, Solving time = 0.426596s, Total time = 0.511415s
19 : Statistics :: Grounding time = 0.088521s, Solving time = 0.618516s, Total time = 0.707037s
20 : Statistics :: Grounding time = 0.092756s, Solving time = 0.352200s, Total time = 0.444957s

[06-02-2021_15-30-34] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.054322s, Solving time = 2.374866s, Total time = 3.504502s
Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-30-34] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,release(manipulator_arm_2,(block,3)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),10)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),11)
occurs(3,talos,release(manipulator_arm_2,(block,2)),12)
occurs(3,talos,move(store_room),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),14)
occurs(3,talos,move(puzzle_room),15)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(3,talos,release(manipulator_arm_1,(block,5)),17)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),18)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),19)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),20)

[06-02-2021_15-30-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-30-34] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Instantiated.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Program building started.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Program building completed.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding base program parts.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.014720s.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving base program parts.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.002242s.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental solving started.

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-30-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.715595s.

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.264639s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.076359s.

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.018300s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.074581s.

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.018389s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.072879s.

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.023702s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.075948s.

[06-02-2021_15-30-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.024226s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.076485s.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.029150s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.076197s.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.029745s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.076634s.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.024916s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.078987s.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.027691s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.085194s.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.039855s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.080918s.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.037514s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.082408s.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.057479s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.084797s.

[06-02-2021_15-30-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.077334s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.086298s.

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.081531s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.086752s.

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.048797s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.088046s.

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.170147s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.089617s.

[06-02-2021_15-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.290945s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-30-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-30-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.222943s.

[06-02-2021_15-30-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.483420s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-30-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-30-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.231855s.

[06-02-2021_15-30-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.837862s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-30-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-30-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.244962s.

[06-02-2021_15-30-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.789546s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-30-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-30-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.239821s.

[06-02-2021_15-30-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 1.101580s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-30-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-30-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.245839s.

[06-02-2021_15-30-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 1.159082s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-30-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-30-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.248545s.

[06-02-2021_15-30-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 1.380036s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-30-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-30-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.251906s.

[06-02-2021_15-30-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Model found:
Model :: Total atoms = 9410, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 1.892843s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental solving completed in 12.859768s because STOP_CON_REACHED.

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.708286s, Solving time = 8.910968s, Total time = 12.859768s
Final Model :: Total atoms = 9410, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.715595s, Solving time = 0.264639s, Total time = 0.980234s
2 : Statistics :: Grounding time = 0.076359s, Solving time = 0.018300s, Total time = 0.094659s
3 : Statistics :: Grounding time = 0.074581s, Solving time = 0.018389s, Total time = 0.092969s
4 : Statistics :: Grounding time = 0.072879s, Solving time = 0.023702s, Total time = 0.096581s
5 : Statistics :: Grounding time = 0.075948s, Solving time = 0.024226s, Total time = 0.100174s
6 : Statistics :: Grounding time = 0.076485s, Solving time = 0.029150s, Total time = 0.105635s
7 : Statistics :: Grounding time = 0.076197s, Solving time = 0.029745s, Total time = 0.105942s
8 : Statistics :: Grounding time = 0.076634s, Solving time = 0.024916s, Total time = 0.101551s
9 : Statistics :: Grounding time = 0.078987s, Solving time = 0.027691s, Total time = 0.106678s
10 : Statistics :: Grounding time = 0.085194s, Solving time = 0.039855s, Total time = 0.125049s
11 : Statistics :: Grounding time = 0.080918s, Solving time = 0.037514s, Total time = 0.118432s
12 : Statistics :: Grounding time = 0.082408s, Solving time = 0.057479s, Total time = 0.139887s
13 : Statistics :: Grounding time = 0.084797s, Solving time = 0.077334s, Total time = 0.162131s
14 : Statistics :: Grounding time = 0.086298s, Solving time = 0.081531s, Total time = 0.167828s
15 : Statistics :: Grounding time = 0.086752s, Solving time = 0.048797s, Total time = 0.135548s
16 : Statistics :: Grounding time = 0.088046s, Solving time = 0.170147s, Total time = 0.258193s
17 : Statistics :: Grounding time = 0.089617s, Solving time = 0.290945s, Total time = 0.380562s
18 : Statistics :: Grounding time = 0.222943s, Solving time = 0.483420s, Total time = 0.706363s
19 : Statistics :: Grounding time = 0.231855s, Solving time = 0.837862s, Total time = 1.069717s
20 : Statistics :: Grounding time = 0.244962s, Solving time = 0.789546s, Total time = 1.034508s
21 : Statistics :: Grounding time = 0.239821s, Solving time = 1.101580s, Total time = 1.341401s
22 : Statistics :: Grounding time = 0.245839s, Solving time = 1.159082s, Total time = 1.404921s
23 : Statistics :: Grounding time = 0.248545s, Solving time = 1.380036s, Total time = 1.628581s
24 : Statistics :: Grounding time = 0.251906s, Solving time = 1.892843s, Total time = 2.144749s

[06-02-2021_15-30-47] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.708286s, Solving time = 8.910968s, Total time = 12.859768s
Model :: Total atoms = 9410, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-30-47] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,configure(manipulator_arm_2,extended),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,6)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),22)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),23)
occurs(2,talos,release(manipulator_arm_2,(block,3)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),25)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),26)
occurs(2,talos,release(manipulator_arm_2,(block,2)),27)
occurs(2,talos,configure(manipulator_arm_2,retracted),28)
occurs(2,talos,move(hallway),29)
occurs(2,talos,move(store_room),30)
occurs(2,talos,configure(manipulator_arm_2,extended),31)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),32)
occurs(2,talos,configure(manipulator_arm_2,retracted),33)
occurs(2,talos,move(hallway),34)
occurs(2,talos,move(puzzle_room),35)
occurs(2,talos,configure(manipulator_arm_2,extended),36)
occurs(2,talos,configure(manipulator_arm_1,extended),37)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),38)
occurs(2,talos,release(manipulator_arm_1,(block,5)),39)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),40)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),41)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),42)

[06-02-2021_15-30-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-30-47] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Instantiated.

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 42 rules into program part conformance_module(step).

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 42, Stop con = StopCondition.Satisfiable

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Program building started.

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Program building completed.

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding base program parts.

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.016493s.

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving base program parts.

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.003466s.

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental solving started.

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [1]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [41]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-30-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 5.775213s.

[06-02-2021_15-30-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-30-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 1.252270s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [2]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-30-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-30-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.429427s.

[06-02-2021_15-30-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-30-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.053782s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [3]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-30-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-30-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.441119s.

[06-02-2021_15-30-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-30-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.057854s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [4]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-30-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-30-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.452939s.

[06-02-2021_15-30-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-30-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.055402s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [5]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-30-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-30-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.452799s.

[06-02-2021_15-30-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-30-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.097467s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [6]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-30-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-30-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.461582s.

[06-02-2021_15-30-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-30-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.088729s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [7]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-30-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-30-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.453632s.

[06-02-2021_15-30-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-30-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.074838s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [8]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-30-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-30-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.461406s.

[06-02-2021_15-30-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-30-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.113550s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [9]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-30-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-30-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.481635s.

[06-02-2021_15-30-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-30-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.094972s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [10]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-30-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-30-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.476991s.

[06-02-2021_15-30-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-30-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.084986s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-30-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [11]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-30-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-31-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.482421s.

[06-02-2021_15-31-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.130537s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [12]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-31-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-31-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.484489s.

[06-02-2021_15-31-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.173826s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [13]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-31-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-31-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.491469s.

[06-02-2021_15-31-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.243297s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [14]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-31-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-31-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.503364s.

[06-02-2021_15-31-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.163869s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [15]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-31-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.498260s.

[06-02-2021_15-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.153815s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [16]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.514057s.

[06-02-2021_15-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.184587s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [17]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-31-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.522372s.

[06-02-2021_15-31-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.272301s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [18]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-31-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-31-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.536247s.

[06-02-2021_15-31-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.180552s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [19]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-31-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-31-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.520676s.

[06-02-2021_15-31-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.997485s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [20]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-31-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-31-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.544450s.

[06-02-2021_15-31-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.326284s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [21]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-31-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-31-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.553349s.

[06-02-2021_15-31-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.250609s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [22]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-31-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-31-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.568387s.

[06-02-2021_15-31-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.366012s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [23]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-31-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-31-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.579065s.

[06-02-2021_15-31-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.392801s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [24]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-31-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-31-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.578021s.

[06-02-2021_15-31-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.337878s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [25]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-31-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-31-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.588422s.

[06-02-2021_15-31-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.498467s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [26]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-31-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-31-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.592501s.

[06-02-2021_15-31-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.479874s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [27]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-31-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-31-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.620806s.

[06-02-2021_15-31-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.898759s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [28]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-31-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-31-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.607408s.

[06-02-2021_15-31-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 4.053524s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [29]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-31-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-31-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.665818s.

[06-02-2021_15-31-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 1.884917s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [30]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.632432s.

[06-02-2021_15-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 2.946955s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [31]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-31-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-31-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.650839s.

[06-02-2021_15-31-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Model found:
Model :: Total atoms = 15795, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 5.506478s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental solving completed in 44.896825s because STOP_CON_REACHED.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 21.638088s, Solving time = 22.420138s, Total time = 44.896825s
Final Model :: Total atoms = 15795, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.775213s, Solving time = 1.252270s, Total time = 7.027483s
2 : Statistics :: Grounding time = 0.429427s, Solving time = 0.053782s, Total time = 0.483209s
3 : Statistics :: Grounding time = 0.441119s, Solving time = 0.057854s, Total time = 0.498973s
4 : Statistics :: Grounding time = 0.452939s, Solving time = 0.055402s, Total time = 0.508341s
5 : Statistics :: Grounding time = 0.452799s, Solving time = 0.097467s, Total time = 0.550266s
6 : Statistics :: Grounding time = 0.461582s, Solving time = 0.088729s, Total time = 0.550311s
7 : Statistics :: Grounding time = 0.453632s, Solving time = 0.074838s, Total time = 0.528469s
8 : Statistics :: Grounding time = 0.461406s, Solving time = 0.113550s, Total time = 0.574956s
9 : Statistics :: Grounding time = 0.481635s, Solving time = 0.094972s, Total time = 0.576607s
10 : Statistics :: Grounding time = 0.476991s, Solving time = 0.084986s, Total time = 0.561977s
11 : Statistics :: Grounding time = 0.482421s, Solving time = 0.130537s, Total time = 0.612957s
12 : Statistics :: Grounding time = 0.484489s, Solving time = 0.173826s, Total time = 0.658315s
13 : Statistics :: Grounding time = 0.491469s, Solving time = 0.243297s, Total time = 0.734766s
14 : Statistics :: Grounding time = 0.503364s, Solving time = 0.163869s, Total time = 0.667233s
15 : Statistics :: Grounding time = 0.498260s, Solving time = 0.153815s, Total time = 0.652075s
16 : Statistics :: Grounding time = 0.514057s, Solving time = 0.184587s, Total time = 0.698644s
17 : Statistics :: Grounding time = 0.522372s, Solving time = 0.272301s, Total time = 0.794672s
18 : Statistics :: Grounding time = 0.536247s, Solving time = 0.180552s, Total time = 0.716799s
19 : Statistics :: Grounding time = 0.520676s, Solving time = 0.997485s, Total time = 1.518161s
20 : Statistics :: Grounding time = 0.544450s, Solving time = 0.326284s, Total time = 0.870734s
21 : Statistics :: Grounding time = 0.553349s, Solving time = 0.250609s, Total time = 0.803958s
22 : Statistics :: Grounding time = 0.568387s, Solving time = 0.366012s, Total time = 0.934399s
23 : Statistics :: Grounding time = 0.579065s, Solving time = 0.392801s, Total time = 0.971867s
24 : Statistics :: Grounding time = 0.578021s, Solving time = 0.337878s, Total time = 0.915899s
25 : Statistics :: Grounding time = 0.588422s, Solving time = 0.498467s, Total time = 1.086889s
26 : Statistics :: Grounding time = 0.592501s, Solving time = 0.479874s, Total time = 1.072375s
27 : Statistics :: Grounding time = 0.620806s, Solving time = 0.898759s, Total time = 1.519565s
28 : Statistics :: Grounding time = 0.607408s, Solving time = 4.053524s, Total time = 4.660932s
29 : Statistics :: Grounding time = 0.665818s, Solving time = 1.884917s, Total time = 2.550734s
30 : Statistics :: Grounding time = 0.632432s, Solving time = 2.946955s, Total time = 3.579387s
31 : Statistics :: Grounding time = 0.650839s, Solving time = 5.506478s, Total time = 6.157317s

[06-02-2021_15-31-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 21.638088s, Solving time = 22.420138s, Total time = 44.896825s
Model :: Total atoms = 15795, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-31-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),37)
occurs(1,talos,release(manipulator_end_2,(block,6)),38)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),39)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),40)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),41)
occurs(1,talos,release(manipulator_end_2,(block,3)),42)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),43)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),44)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),45)
occurs(1,talos,release(manipulator_end_2,(block,2)),46)
occurs(1,talos,configure(manipulator_limb_2,retracted),47)
occurs(1,talos,move((puzzle_room,0)),48)
occurs(1,talos,move((hallway,2)),49)
occurs(1,talos,move((hallway,1)),50)
occurs(1,talos,move((hallway,0)),51)
occurs(1,talos,move((store_room,1)),52)
occurs(1,talos,move((store_room,0)),53)
occurs(1,talos,configure(manipulator_limb_2,extended),54)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),55)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),56)
occurs(1,talos,configure(manipulator_limb_2,retracted),57)
occurs(1,talos,move((store_room,1)),58)
occurs(1,talos,move((hallway,0)),59)
occurs(1,talos,move((hallway,1)),60)
occurs(1,talos,move((hallway,2)),61)
occurs(1,talos,move((puzzle_room,0)),62)
occurs(1,talos,move((puzzle_room,1)),63)
occurs(1,talos,configure(manipulator_limb_2,extended),64)
occurs(1,talos,configure(manipulator_limb_1,extended),65)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),66)
occurs(1,talos,release(manipulator_end_1,(block,5)),67)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),68)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),69)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),70)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),71)

[06-02-2021_15-31-32] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.504502s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    12.859768s : Steps =    42 : Actions =    42 |  
  | Level 1 : Time =    44.896825s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[06-02-2021_15-31-32] INFO :: Experiment >> 

      ================================================      
            Experimental run 6 : Time 61.934926s            
      ================================================      

[06-02-2021_15-31-32] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-31-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-31-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-31-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Instantiated.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Program building started.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Program building completed.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding base program parts.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.013963s.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving base program parts.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.002160s.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental solving started.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.040526s.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.005861s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.031171s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.003578s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.031114s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.005109s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.035169s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.005815s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.035236s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.006180s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.038931s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.006818s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.042277s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.008457s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.037792s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.009071s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.039207s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.010870s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.038831s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.012428s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.040072s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.015397s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.040605s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.021276s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.041436s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.032551s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.041120s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.059463s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.042770s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.083226s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.077573s.

[06-02-2021_15-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.130448s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.081035s.

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.214609s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.083471s.

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.494257s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-31-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.088634s.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.689810s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.090499s.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Model found:
Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.052189s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental solving completed in 2.945549s because STOP_CON_REACHED.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.011433s, Solving time = 1.869574s, Total time = 2.945549s
Final Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040526s, Solving time = 0.005861s, Total time = 0.046387s
2 : Statistics :: Grounding time = 0.031171s, Solving time = 0.003578s, Total time = 0.034750s
3 : Statistics :: Grounding time = 0.031114s, Solving time = 0.005109s, Total time = 0.036223s
4 : Statistics :: Grounding time = 0.035169s, Solving time = 0.005815s, Total time = 0.040984s
5 : Statistics :: Grounding time = 0.035236s, Solving time = 0.006180s, Total time = 0.041416s
6 : Statistics :: Grounding time = 0.038931s, Solving time = 0.006818s, Total time = 0.045749s
7 : Statistics :: Grounding time = 0.042277s, Solving time = 0.008457s, Total time = 0.050734s
8 : Statistics :: Grounding time = 0.037792s, Solving time = 0.009071s, Total time = 0.046863s
9 : Statistics :: Grounding time = 0.039207s, Solving time = 0.010870s, Total time = 0.050077s
10 : Statistics :: Grounding time = 0.038831s, Solving time = 0.012428s, Total time = 0.051260s
11 : Statistics :: Grounding time = 0.040072s, Solving time = 0.015397s, Total time = 0.055469s
12 : Statistics :: Grounding time = 0.040605s, Solving time = 0.021276s, Total time = 0.061881s
13 : Statistics :: Grounding time = 0.041436s, Solving time = 0.032551s, Total time = 0.073987s
14 : Statistics :: Grounding time = 0.041120s, Solving time = 0.059463s, Total time = 0.100582s
15 : Statistics :: Grounding time = 0.042770s, Solving time = 0.083226s, Total time = 0.125996s
16 : Statistics :: Grounding time = 0.077573s, Solving time = 0.130448s, Total time = 0.208022s
17 : Statistics :: Grounding time = 0.081035s, Solving time = 0.214609s, Total time = 0.295644s
18 : Statistics :: Grounding time = 0.083471s, Solving time = 0.494257s, Total time = 0.577728s
19 : Statistics :: Grounding time = 0.088634s, Solving time = 0.689810s, Total time = 0.778444s
20 : Statistics :: Grounding time = 0.090499s, Solving time = 0.052189s, Total time = 0.142688s

[06-02-2021_15-31-35] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.011433s, Solving time = 1.869574s, Total time = 2.945549s
Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-31-35] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,release(manipulator_arm_2,(block,3)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),10)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),11)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),12)
occurs(3,talos,release(manipulator_arm_1,(block,5)),13)
occurs(3,talos,release(manipulator_arm_2,(block,2)),14)
occurs(3,talos,move(store_room),15)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),16)
occurs(3,talos,move(puzzle_room),17)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),18)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),19)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),20)

[06-02-2021_15-31-35] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-31-35] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Instantiated.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Program building started.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Program building completed.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding base program parts.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.016133s.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving base program parts.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.002983s.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental solving started.

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-31-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-31-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.704756s.

[06-02-2021_15-31-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.260938s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-31-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.072844s.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.018878s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.073663s.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.017932s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.074035s.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.023966s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.075919s.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.024947s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.077926s.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.030956s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.078714s.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.027411s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.077647s.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.030203s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.080086s.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.044512s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.085132s.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.051772s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-31-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.082829s.

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.033288s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.084606s.

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.090492s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.085938s.

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.048553s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.086384s.

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.149941s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.087032s.

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.115748s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.088597s.

[06-02-2021_15-31-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.357602s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.221260s.

[06-02-2021_15-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.204730s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-31-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.229966s.

[06-02-2021_15-31-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.609078s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-31-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-31-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.245187s.

[06-02-2021_15-31-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 1.206614s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.237036s.

[06-02-2021_15-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 1.611634s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-31-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-31-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.244620s.

[06-02-2021_15-31-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 2.657458s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-31-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-31-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.248041s.

[06-02-2021_15-31-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 2.559178s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-31-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-31-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.243477s.

[06-02-2021_15-31-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 2.287406s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-31-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-31-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.249518s.

[06-02-2021_15-31-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 3.150839s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-31-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-31-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.249359s.

[06-02-2021_15-31-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 3.706389s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.263379s.

[06-02-2021_15-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-32-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Model found:
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-32-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 2.023392s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-32-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental solving completed in 26.035415s because STOP_CON_REACHED.

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.364082s, Solving time = 21.346840s, Total time = 26.035415s
Final Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.704756s, Solving time = 0.260938s, Total time = 0.965693s
2 : Statistics :: Grounding time = 0.072844s, Solving time = 0.018878s, Total time = 0.091722s
3 : Statistics :: Grounding time = 0.073663s, Solving time = 0.017932s, Total time = 0.091595s
4 : Statistics :: Grounding time = 0.074035s, Solving time = 0.023966s, Total time = 0.098002s
5 : Statistics :: Grounding time = 0.075919s, Solving time = 0.024947s, Total time = 0.100866s
6 : Statistics :: Grounding time = 0.077926s, Solving time = 0.030956s, Total time = 0.108882s
7 : Statistics :: Grounding time = 0.078714s, Solving time = 0.027411s, Total time = 0.106124s
8 : Statistics :: Grounding time = 0.077647s, Solving time = 0.030203s, Total time = 0.107851s
9 : Statistics :: Grounding time = 0.080086s, Solving time = 0.044512s, Total time = 0.124598s
10 : Statistics :: Grounding time = 0.085132s, Solving time = 0.051772s, Total time = 0.136904s
11 : Statistics :: Grounding time = 0.082829s, Solving time = 0.033288s, Total time = 0.116117s
12 : Statistics :: Grounding time = 0.084606s, Solving time = 0.090492s, Total time = 0.175098s
13 : Statistics :: Grounding time = 0.085938s, Solving time = 0.048553s, Total time = 0.134491s
14 : Statistics :: Grounding time = 0.086384s, Solving time = 0.149941s, Total time = 0.236325s
15 : Statistics :: Grounding time = 0.087032s, Solving time = 0.115748s, Total time = 0.202780s
16 : Statistics :: Grounding time = 0.088597s, Solving time = 0.357602s, Total time = 0.446199s
17 : Statistics :: Grounding time = 0.221260s, Solving time = 0.204730s, Total time = 0.425990s
18 : Statistics :: Grounding time = 0.229966s, Solving time = 0.609078s, Total time = 0.839044s
19 : Statistics :: Grounding time = 0.245187s, Solving time = 1.206614s, Total time = 1.451800s
20 : Statistics :: Grounding time = 0.237036s, Solving time = 1.611634s, Total time = 1.848670s
21 : Statistics :: Grounding time = 0.244620s, Solving time = 2.657458s, Total time = 2.902078s
22 : Statistics :: Grounding time = 0.248041s, Solving time = 2.559178s, Total time = 2.807219s
23 : Statistics :: Grounding time = 0.243477s, Solving time = 2.287406s, Total time = 2.530884s
24 : Statistics :: Grounding time = 0.249518s, Solving time = 3.150839s, Total time = 3.400357s
25 : Statistics :: Grounding time = 0.249359s, Solving time = 3.706389s, Total time = 3.955747s
26 : Statistics :: Grounding time = 0.263379s, Solving time = 2.023392s, Total time = 2.286771s

[06-02-2021_15-32-02] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.364082s, Solving time = 21.346840s, Total time = 26.035415s
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-32-02] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,configure(manipulator_arm_1,extended),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,6)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),22)
occurs(2,talos,configure(manipulator_arm_1,extended),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),25)
occurs(2,talos,release(manipulator_arm_2,(block,3)),26)
occurs(2,talos,release(manipulator_arm_1,(block,5)),27)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),28)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),29)
occurs(2,talos,configure(manipulator_arm_1,retracted),30)
occurs(2,talos,release(manipulator_arm_2,(block,2)),31)
occurs(2,talos,configure(manipulator_arm_2,retracted),32)
occurs(2,talos,move(hallway),33)
occurs(2,talos,move(store_room),34)
occurs(2,talos,configure(manipulator_arm_2,extended),35)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),36)
occurs(2,talos,configure(manipulator_arm_2,retracted),37)
occurs(2,talos,move(hallway),38)
occurs(2,talos,move(puzzle_room),39)
occurs(2,talos,configure(manipulator_arm_2,extended),40)
occurs(2,talos,configure(manipulator_arm_1,extended),41)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),42)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),43)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),44)

[06-02-2021_15-32-02] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-32-02] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Instantiated.

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Program building started.

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Program building completed.

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding base program parts.

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.017335s.

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving base program parts.

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.002674s.

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental solving started.

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-32-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-32-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 5.957154s.

[06-02-2021_15-32-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 1.327808s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-32-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-32-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.460911s.

[06-02-2021_15-32-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.055462s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-32-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-32-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.458344s.

[06-02-2021_15-32-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.064822s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-32-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.483107s.

[06-02-2021_15-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.056334s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.477281s.

[06-02-2021_15-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.074675s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-32-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.488942s.

[06-02-2021_15-32-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.078543s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-32-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-32-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.496115s.

[06-02-2021_15-32-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.088178s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-32-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-32-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.474439s.

[06-02-2021_15-32-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.083968s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-32-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-32-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.489433s.

[06-02-2021_15-32-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.081009s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-32-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-32-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.493131s.

[06-02-2021_15-32-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.166775s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-32-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.498916s.

[06-02-2021_15-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.156434s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.516048s.

[06-02-2021_15-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.131855s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-32-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-32-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.510156s.

[06-02-2021_15-32-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.186590s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-32-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-32-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.538492s.

[06-02-2021_15-32-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.236046s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-32-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-32-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.527005s.

[06-02-2021_15-32-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.387518s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-32-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-32-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.544053s.

[06-02-2021_15-32-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.240249s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-32-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-32-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.558410s.

[06-02-2021_15-32-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.346102s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-32-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-32-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.552803s.

[06-02-2021_15-32-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.467755s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-32-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-32-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.565397s.

[06-02-2021_15-32-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.633702s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-32-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-32-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.578744s.

[06-02-2021_15-32-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 1.043285s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.589138s.

[06-02-2021_15-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 1.992941s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-32-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.579868s.

[06-02-2021_15-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.267804s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-32-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-32-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.591527s.

[06-02-2021_15-32-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.299290s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-32-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.603744s.

[06-02-2021_15-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.352344s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-32-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-32-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.612211s.

[06-02-2021_15-32-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.468483s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-32-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-32-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.626506s.

[06-02-2021_15-32-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 3.548307s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-32-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-32-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.624353s.

[06-02-2021_15-32-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 1.272369s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-32-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.637209s.

[06-02-2021_15-32-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 4.499727s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-32-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-32-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.632752s.

[06-02-2021_15-32-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-32-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 7.967967s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-32-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [30]:
Current step bound = 72
End step min = 0
End step max = None

[06-02-2021_15-32-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 0]), ('conformance_module', [72])].

[06-02-2021_15-32-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.653030s.

[06-02-2021_15-32-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-33-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 16.982251s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [31]:
Current step bound = 73
End step min = 0
End step max = None

[06-02-2021_15-33-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 0]), ('conformance_module', [73])].

[06-02-2021_15-33-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.651529s.

[06-02-2021_15-33-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-33-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Model found:
Model :: Total atoms = 16190, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-33-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 9.707362s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-33-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental solving completed in 76.716837s because STOP_CON_REACHED.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 22.488082s, Solving time = 53.268627s, Total time = 76.716837s
Final Model :: Total atoms = 16190, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.957154s, Solving time = 1.327808s, Total time = 7.284962s
2 : Statistics :: Grounding time = 0.460911s, Solving time = 0.055462s, Total time = 0.516372s
3 : Statistics :: Grounding time = 0.458344s, Solving time = 0.064822s, Total time = 0.523166s
4 : Statistics :: Grounding time = 0.483107s, Solving time = 0.056334s, Total time = 0.539440s
5 : Statistics :: Grounding time = 0.477281s, Solving time = 0.074675s, Total time = 0.551956s
6 : Statistics :: Grounding time = 0.488942s, Solving time = 0.078543s, Total time = 0.567485s
7 : Statistics :: Grounding time = 0.496115s, Solving time = 0.088178s, Total time = 0.584293s
8 : Statistics :: Grounding time = 0.474439s, Solving time = 0.083968s, Total time = 0.558407s
9 : Statistics :: Grounding time = 0.489433s, Solving time = 0.081009s, Total time = 0.570442s
10 : Statistics :: Grounding time = 0.493131s, Solving time = 0.166775s, Total time = 0.659906s
11 : Statistics :: Grounding time = 0.498916s, Solving time = 0.156434s, Total time = 0.655350s
12 : Statistics :: Grounding time = 0.516048s, Solving time = 0.131855s, Total time = 0.647903s
13 : Statistics :: Grounding time = 0.510156s, Solving time = 0.186590s, Total time = 0.696746s
14 : Statistics :: Grounding time = 0.538492s, Solving time = 0.236046s, Total time = 0.774538s
15 : Statistics :: Grounding time = 0.527005s, Solving time = 0.387518s, Total time = 0.914524s
16 : Statistics :: Grounding time = 0.544053s, Solving time = 0.240249s, Total time = 0.784302s
17 : Statistics :: Grounding time = 0.558410s, Solving time = 0.346102s, Total time = 0.904512s
18 : Statistics :: Grounding time = 0.552803s, Solving time = 0.467755s, Total time = 1.020558s
19 : Statistics :: Grounding time = 0.565397s, Solving time = 0.633702s, Total time = 1.199099s
20 : Statistics :: Grounding time = 0.578744s, Solving time = 1.043285s, Total time = 1.622029s
21 : Statistics :: Grounding time = 0.589138s, Solving time = 1.992941s, Total time = 2.582079s
22 : Statistics :: Grounding time = 0.579868s, Solving time = 0.267804s, Total time = 0.847672s
23 : Statistics :: Grounding time = 0.591527s, Solving time = 0.299290s, Total time = 0.890817s
24 : Statistics :: Grounding time = 0.603744s, Solving time = 0.352344s, Total time = 0.956087s
25 : Statistics :: Grounding time = 0.612211s, Solving time = 0.468483s, Total time = 1.080694s
26 : Statistics :: Grounding time = 0.626506s, Solving time = 3.548307s, Total time = 4.174813s
27 : Statistics :: Grounding time = 0.624353s, Solving time = 1.272369s, Total time = 1.896721s
28 : Statistics :: Grounding time = 0.637209s, Solving time = 4.499727s, Total time = 5.136936s
29 : Statistics :: Grounding time = 0.632752s, Solving time = 7.967967s, Total time = 8.600720s
30 : Statistics :: Grounding time = 0.653030s, Solving time = 16.982251s, Total time = 17.635281s
31 : Statistics :: Grounding time = 0.651529s, Solving time = 9.707362s, Total time = 10.358891s

[06-02-2021_15-33-19] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 22.488082s, Solving time = 53.268627s, Total time = 76.716837s
Model :: Total atoms = 16190, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-33-19] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,configure(manipulator_limb_1,extended),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),27)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),37)
occurs(1,talos,release(manipulator_end_2,(block,6)),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_1,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),44)
occurs(1,talos,configure(manipulator_limb_1,retracted),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_limb_2,retracted),51)
occurs(1,talos,move((puzzle_room,0)),52)
occurs(1,talos,move((hallway,2)),53)
occurs(1,talos,move((hallway,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((store_room,1)),56)
occurs(1,talos,move((store_room,0)),57)
occurs(1,talos,configure(manipulator_limb_2,extended),58)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),59)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),60)
occurs(1,talos,configure(manipulator_limb_2,retracted),61)
occurs(1,talos,move((store_room,1)),62)
occurs(1,talos,move((hallway,0)),63)
occurs(1,talos,move((hallway,1)),64)
occurs(1,talos,move((hallway,2)),65)
occurs(1,talos,move((puzzle_room,0)),66)
occurs(1,talos,move((puzzle_room,1)),67)
occurs(1,talos,configure(manipulator_limb_2,extended),68)
occurs(1,talos,configure(manipulator_limb_1,extended),69)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),70)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),71)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),72)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),73)

[06-02-2021_15-33-19] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     2.945549s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    26.035415s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    76.716837s : Steps =    73 : Actions =    73 |  
  ====================================================================  

[06-02-2021_15-33-19] INFO :: Experiment >> 

      ================================================      
           Experimental run 7 : Time 106.372888s            
      ================================================      

[06-02-2021_15-33-19] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-33-19] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-33-19] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-33-19] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Instantiated.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Program building started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Program building completed.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding base program parts.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.013816s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving base program parts.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.002640s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.039517s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.005552s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.030460s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.002852s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.031968s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.004591s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.037490s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.006286s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.036193s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.005967s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.036788s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.006929s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.037955s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.007219s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.038200s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.008923s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.038225s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.010083s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.040291s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.013324s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.039598s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.020056s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.040563s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.029215s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.040406s.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.038269s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.041838s.

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.052752s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.073717s.

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.090165s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.078140s.

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.120628s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.083219s.

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.207828s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.084946s.

[06-02-2021_15-33-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.364336s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-33-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-33-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.088465s.

[06-02-2021_15-33-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.690461s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-33-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.091944s.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Model found:
Model :: Total atoms = 3697, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.034250s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental solving completed in 2.830019s because STOP_CON_REACHED.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.043737s, Solving time = 1.722328s, Total time = 2.830019s
Final Model :: Total atoms = 3697, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039517s, Solving time = 0.005552s, Total time = 0.045069s
2 : Statistics :: Grounding time = 0.030460s, Solving time = 0.002852s, Total time = 0.033312s
3 : Statistics :: Grounding time = 0.031968s, Solving time = 0.004591s, Total time = 0.036559s
4 : Statistics :: Grounding time = 0.037490s, Solving time = 0.006286s, Total time = 0.043777s
5 : Statistics :: Grounding time = 0.036193s, Solving time = 0.005967s, Total time = 0.042161s
6 : Statistics :: Grounding time = 0.036788s, Solving time = 0.006929s, Total time = 0.043717s
7 : Statistics :: Grounding time = 0.037955s, Solving time = 0.007219s, Total time = 0.045173s
8 : Statistics :: Grounding time = 0.038200s, Solving time = 0.008923s, Total time = 0.047123s
9 : Statistics :: Grounding time = 0.038225s, Solving time = 0.010083s, Total time = 0.048308s
10 : Statistics :: Grounding time = 0.040291s, Solving time = 0.013324s, Total time = 0.053615s
11 : Statistics :: Grounding time = 0.039598s, Solving time = 0.020056s, Total time = 0.059654s
12 : Statistics :: Grounding time = 0.040563s, Solving time = 0.029215s, Total time = 0.069777s
13 : Statistics :: Grounding time = 0.040406s, Solving time = 0.038269s, Total time = 0.078675s
14 : Statistics :: Grounding time = 0.041838s, Solving time = 0.052752s, Total time = 0.094590s
15 : Statistics :: Grounding time = 0.073717s, Solving time = 0.090165s, Total time = 0.163882s
16 : Statistics :: Grounding time = 0.078140s, Solving time = 0.120628s, Total time = 0.198768s
17 : Statistics :: Grounding time = 0.083219s, Solving time = 0.207828s, Total time = 0.291047s
18 : Statistics :: Grounding time = 0.084946s, Solving time = 0.364336s, Total time = 0.449282s
19 : Statistics :: Grounding time = 0.088465s, Solving time = 0.690461s, Total time = 0.778926s
20 : Statistics :: Grounding time = 0.091944s, Solving time = 0.034250s, Total time = 0.126194s

[06-02-2021_15-33-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.043737s, Solving time = 1.722328s, Total time = 2.830019s
Model :: Total atoms = 3697, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-33-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,release(manipulator_arm_2,(block,3)),11)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),12)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),13)
occurs(3,talos,release(manipulator_arm_2,(block,2)),14)
occurs(3,talos,move(store_room),15)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),16)
occurs(3,talos,move(puzzle_room),17)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),18)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),19)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),20)

[06-02-2021_15-33-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-33-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Instantiated.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Program building started.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Program building completed.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding base program parts.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.014921s.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving base program parts.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.002144s.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental solving started.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.707743s.

[06-02-2021_15-33-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.259231s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.072579s.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.018450s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.072369s.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.017810s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.074251s.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.024093s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.083078s.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.025160s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.075423s.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.024992s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.076528s.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.030235s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.077220s.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.035268s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-33-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.080507s.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.042673s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.080515s.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.039342s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.088918s.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.032621s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.083642s.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.073840s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.092307s.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.041665s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.087025s.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.047221s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.097238s.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.079621s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.088729s.

[06-02-2021_15-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.242080s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.228081s.

[06-02-2021_15-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.242497s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-33-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.226659s.

[06-02-2021_15-33-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.373708s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-33-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-33-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.238231s.

[06-02-2021_15-33-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.685400s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-33-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-33-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.232011s.

[06-02-2021_15-33-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 1.026396s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-33-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-33-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.239990s.

[06-02-2021_15-33-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.923439s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-33-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-33-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.246416s.

[06-02-2021_15-33-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.489098s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-33-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-33-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.249782s.

[06-02-2021_15-33-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.638118s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-33-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-33-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.253287s.

[06-02-2021_15-33-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 1.080039s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-33-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-33-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.256450s.

[06-02-2021_15-33-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 1.081645s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-33-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-33-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.263607s.

[06-02-2021_15-33-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Model found:
Model :: Total atoms = 9740, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 1.980101s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental solving completed in 14.231084s because STOP_CON_REACHED.

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.387507s, Solving time = 9.556886s, Total time = 14.231084s
Final Model :: Total atoms = 9740, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.707743s, Solving time = 0.259231s, Total time = 0.966974s
2 : Statistics :: Grounding time = 0.072579s, Solving time = 0.018450s, Total time = 0.091029s
3 : Statistics :: Grounding time = 0.072369s, Solving time = 0.017810s, Total time = 0.090179s
4 : Statistics :: Grounding time = 0.074251s, Solving time = 0.024093s, Total time = 0.098343s
5 : Statistics :: Grounding time = 0.083078s, Solving time = 0.025160s, Total time = 0.108238s
6 : Statistics :: Grounding time = 0.075423s, Solving time = 0.024992s, Total time = 0.100416s
7 : Statistics :: Grounding time = 0.076528s, Solving time = 0.030235s, Total time = 0.106763s
8 : Statistics :: Grounding time = 0.077220s, Solving time = 0.035268s, Total time = 0.112488s
9 : Statistics :: Grounding time = 0.080507s, Solving time = 0.042673s, Total time = 0.123179s
10 : Statistics :: Grounding time = 0.080515s, Solving time = 0.039342s, Total time = 0.119857s
11 : Statistics :: Grounding time = 0.088918s, Solving time = 0.032621s, Total time = 0.121538s
12 : Statistics :: Grounding time = 0.083642s, Solving time = 0.073840s, Total time = 0.157482s
13 : Statistics :: Grounding time = 0.092307s, Solving time = 0.041665s, Total time = 0.133972s
14 : Statistics :: Grounding time = 0.087025s, Solving time = 0.047221s, Total time = 0.134246s
15 : Statistics :: Grounding time = 0.097238s, Solving time = 0.079621s, Total time = 0.176859s
16 : Statistics :: Grounding time = 0.088729s, Solving time = 0.242080s, Total time = 0.330809s
17 : Statistics :: Grounding time = 0.228081s, Solving time = 0.242497s, Total time = 0.470578s
18 : Statistics :: Grounding time = 0.226659s, Solving time = 0.373708s, Total time = 0.600367s
19 : Statistics :: Grounding time = 0.238231s, Solving time = 0.685400s, Total time = 0.923631s
20 : Statistics :: Grounding time = 0.232011s, Solving time = 1.026396s, Total time = 1.258407s
21 : Statistics :: Grounding time = 0.239990s, Solving time = 0.923439s, Total time = 1.163429s
22 : Statistics :: Grounding time = 0.246416s, Solving time = 0.489098s, Total time = 0.735514s
23 : Statistics :: Grounding time = 0.249782s, Solving time = 0.638118s, Total time = 0.887901s
24 : Statistics :: Grounding time = 0.253287s, Solving time = 1.080039s, Total time = 1.333326s
25 : Statistics :: Grounding time = 0.256450s, Solving time = 1.081645s, Total time = 1.338095s
26 : Statistics :: Grounding time = 0.263607s, Solving time = 1.980101s, Total time = 2.243708s

[06-02-2021_15-33-36] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.387507s, Solving time = 9.556886s, Total time = 14.231084s
Model :: Total atoms = 9740, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-33-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,configure(manipulator_arm_2,extended),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),26)
occurs(2,talos,configure(manipulator_arm_1,retracted),27)
occurs(2,talos,release(manipulator_arm_2,(block,3)),28)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),29)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),30)
occurs(2,talos,release(manipulator_arm_2,(block,2)),31)
occurs(2,talos,configure(manipulator_arm_2,retracted),32)
occurs(2,talos,move(hallway),33)
occurs(2,talos,move(store_room),34)
occurs(2,talos,configure(manipulator_arm_1,extended),35)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),36)
occurs(2,talos,configure(manipulator_arm_1,retracted),37)
occurs(2,talos,move(hallway),38)
occurs(2,talos,move(puzzle_room),39)
occurs(2,talos,configure(manipulator_arm_2,extended),40)
occurs(2,talos,configure(manipulator_arm_1,extended),41)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),42)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),43)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),44)

[06-02-2021_15-33-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-33-36] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Instantiated.

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Program building started.

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Program building completed.

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding base program parts.

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.018623s.

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving base program parts.

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.003662s.

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental solving started.

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-33-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-33-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 5.972852s.

[06-02-2021_15-33-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 1.337193s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-33-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-33-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.442106s.

[06-02-2021_15-33-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.056261s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-33-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-33-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.458631s.

[06-02-2021_15-33-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.060075s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-33-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-33-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.468265s.

[06-02-2021_15-33-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.057448s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-33-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-33-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.475642s.

[06-02-2021_15-33-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.075458s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-33-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-33-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.474182s.

[06-02-2021_15-33-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.102930s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-33-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.482586s.

[06-02-2021_15-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.070233s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.473899s.

[06-02-2021_15-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.065338s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-33-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.483702s.

[06-02-2021_15-33-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.118774s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-33-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.495691s.

[06-02-2021_15-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.110709s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.494368s.

[06-02-2021_15-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.173363s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-33-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.518878s.

[06-02-2021_15-33-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.226405s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-33-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-33-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.552286s.

[06-02-2021_15-33-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.077289s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-33-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-33-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.540311s.

[06-02-2021_15-33-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.285140s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-33-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-33-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.518624s.

[06-02-2021_15-33-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.277098s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-33-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-33-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.548248s.

[06-02-2021_15-33-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.244927s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-33-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-33-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.545984s.

[06-02-2021_15-33-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.247405s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-33-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-33-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.554244s.

[06-02-2021_15-33-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.214074s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-33-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-33-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.558368s.

[06-02-2021_15-33-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.324042s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-33-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-33-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.569068s.

[06-02-2021_15-33-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.931565s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-33-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-33-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.576530s.

[06-02-2021_15-33-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-33-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.771176s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-33-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-33-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-33-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.583933s.

[06-02-2021_15-33-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-34-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.225368s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-34-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-34-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.604317s.

[06-02-2021_15-34-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-34-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.896217s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-34-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-34-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.602296s.

[06-02-2021_15-34-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-34-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 2.293600s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-34-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-34-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.602891s.

[06-02-2021_15-34-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-34-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 1.215680s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-34-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-34-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.617992s.

[06-02-2021_15-34-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-34-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 2.537394s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-34-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-34-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.626590s.

[06-02-2021_15-34-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-34-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 1.403877s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-34-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-34-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.634147s.

[06-02-2021_15-34-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-34-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 3.345377s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-34-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-34-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.640498s.

[06-02-2021_15-34-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-34-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 12.255062s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [30]:
Current step bound = 72
End step min = 0
End step max = None

[06-02-2021_15-34-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 0]), ('conformance_module', [72])].

[06-02-2021_15-34-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.664285s.

[06-02-2021_15-34-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-34-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 9.237846s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [31]:
Current step bound = 73
End step min = 0
End step max = None

[06-02-2021_15-34-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 0]), ('conformance_module', [73])].

[06-02-2021_15-34-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.665561s.

[06-02-2021_15-34-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-34-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Model found:
Model :: Total atoms = 16184, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-34-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 8.506706s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-34-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental solving completed in 71.185924s because STOP_CON_REACHED.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 22.465600s, Solving time = 47.747691s, Total time = 71.185924s
Final Model :: Total atoms = 16184, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.972852s, Solving time = 1.337193s, Total time = 7.310045s
2 : Statistics :: Grounding time = 0.442106s, Solving time = 0.056261s, Total time = 0.498367s
3 : Statistics :: Grounding time = 0.458631s, Solving time = 0.060075s, Total time = 0.518706s
4 : Statistics :: Grounding time = 0.468265s, Solving time = 0.057448s, Total time = 0.525713s
5 : Statistics :: Grounding time = 0.475642s, Solving time = 0.075458s, Total time = 0.551100s
6 : Statistics :: Grounding time = 0.474182s, Solving time = 0.102930s, Total time = 0.577113s
7 : Statistics :: Grounding time = 0.482586s, Solving time = 0.070233s, Total time = 0.552819s
8 : Statistics :: Grounding time = 0.473899s, Solving time = 0.065338s, Total time = 0.539236s
9 : Statistics :: Grounding time = 0.483702s, Solving time = 0.118774s, Total time = 0.602476s
10 : Statistics :: Grounding time = 0.495691s, Solving time = 0.110709s, Total time = 0.606400s
11 : Statistics :: Grounding time = 0.494368s, Solving time = 0.173363s, Total time = 0.667731s
12 : Statistics :: Grounding time = 0.518878s, Solving time = 0.226405s, Total time = 0.745283s
13 : Statistics :: Grounding time = 0.552286s, Solving time = 0.077289s, Total time = 0.629575s
14 : Statistics :: Grounding time = 0.540311s, Solving time = 0.285140s, Total time = 0.825451s
15 : Statistics :: Grounding time = 0.518624s, Solving time = 0.277098s, Total time = 0.795722s
16 : Statistics :: Grounding time = 0.548248s, Solving time = 0.244927s, Total time = 0.793175s
17 : Statistics :: Grounding time = 0.545984s, Solving time = 0.247405s, Total time = 0.793389s
18 : Statistics :: Grounding time = 0.554244s, Solving time = 0.214074s, Total time = 0.768318s
19 : Statistics :: Grounding time = 0.558368s, Solving time = 0.324042s, Total time = 0.882409s
20 : Statistics :: Grounding time = 0.569068s, Solving time = 0.931565s, Total time = 1.500633s
21 : Statistics :: Grounding time = 0.576530s, Solving time = 0.771176s, Total time = 1.347706s
22 : Statistics :: Grounding time = 0.583933s, Solving time = 0.225368s, Total time = 0.809301s
23 : Statistics :: Grounding time = 0.604317s, Solving time = 0.896217s, Total time = 1.500534s
24 : Statistics :: Grounding time = 0.602296s, Solving time = 2.293600s, Total time = 2.895897s
25 : Statistics :: Grounding time = 0.602891s, Solving time = 1.215680s, Total time = 1.818571s
26 : Statistics :: Grounding time = 0.617992s, Solving time = 2.537394s, Total time = 3.155386s
27 : Statistics :: Grounding time = 0.626590s, Solving time = 1.403877s, Total time = 2.030467s
28 : Statistics :: Grounding time = 0.634147s, Solving time = 3.345377s, Total time = 3.979524s
29 : Statistics :: Grounding time = 0.640498s, Solving time = 12.255062s, Total time = 12.895561s
30 : Statistics :: Grounding time = 0.664285s, Solving time = 9.237846s, Total time = 9.902132s
31 : Statistics :: Grounding time = 0.665561s, Solving time = 8.506706s, Total time = 9.172267s

[06-02-2021_15-34-48] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 22.465600s, Solving time = 47.747691s, Total time = 71.185924s
Model :: Total atoms = 16184, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-34-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_2,(block,6)),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),40)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),41)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),42)
occurs(1,talos,release(manipulator_end_1,(block,5)),43)
occurs(1,talos,configure(manipulator_limb_1,retracted),44)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_limb_2,retracted),51)
occurs(1,talos,move((puzzle_room,0)),52)
occurs(1,talos,move((hallway,2)),53)
occurs(1,talos,move((hallway,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((store_room,1)),56)
occurs(1,talos,move((store_room,0)),57)
occurs(1,talos,configure(manipulator_limb_1,extended),58)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),59)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),60)
occurs(1,talos,configure(manipulator_limb_1,retracted),61)
occurs(1,talos,move((store_room,1)),62)
occurs(1,talos,move((hallway,0)),63)
occurs(1,talos,move((hallway,1)),64)
occurs(1,talos,move((hallway,2)),65)
occurs(1,talos,move((puzzle_room,0)),66)
occurs(1,talos,move((puzzle_room,1)),67)
occurs(1,talos,configure(manipulator_limb_1,extended),68)
occurs(1,talos,configure(manipulator_limb_2,extended),69)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),70)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),71)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),72)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),73)

[06-02-2021_15-34-48] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     2.830019s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    14.231084s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    71.185924s : Steps =    73 : Actions =    73 |  
  ====================================================================  

[06-02-2021_15-34-48] INFO :: Experiment >> 

      ================================================      
            Experimental run 8 : Time 88.939740s            
      ================================================      

[06-02-2021_15-34-48] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-34-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-34-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-34-48] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Instantiated.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Program building started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Program building completed.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding base program parts.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.014372s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving base program parts.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.002017s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.040251s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.006126s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.031155s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.003674s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.030911s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.005313s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.035531s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.006278s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.035213s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.006772s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.036647s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.007692s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.038363s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.009226s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.039419s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.010798s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.039545s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.011858s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.041806s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.012433s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.040847s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.016003s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.040201s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.023709s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.041855s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.033632s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.040556s.

[06-02-2021_15-34-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.058768s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.043497s.

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.106365s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.077810s.

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.183107s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.084309s.

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.315882s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.085234s.

[06-02-2021_15-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.467698s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-34-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-34-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.088329s.

[06-02-2021_15-34-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.787935s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.092540s.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Model found:
Model :: Total atoms = 3691, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.285276s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental solving completed in 3.446495s because STOP_CON_REACHED.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.018391s, Solving time = 2.360562s, Total time = 3.446495s
Final Model :: Total atoms = 3691, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040251s, Solving time = 0.006126s, Total time = 0.046376s
2 : Statistics :: Grounding time = 0.031155s, Solving time = 0.003674s, Total time = 0.034829s
3 : Statistics :: Grounding time = 0.030911s, Solving time = 0.005313s, Total time = 0.036224s
4 : Statistics :: Grounding time = 0.035531s, Solving time = 0.006278s, Total time = 0.041809s
5 : Statistics :: Grounding time = 0.035213s, Solving time = 0.006772s, Total time = 0.041985s
6 : Statistics :: Grounding time = 0.036647s, Solving time = 0.007692s, Total time = 0.044339s
7 : Statistics :: Grounding time = 0.038363s, Solving time = 0.009226s, Total time = 0.047589s
8 : Statistics :: Grounding time = 0.039419s, Solving time = 0.010798s, Total time = 0.050218s
9 : Statistics :: Grounding time = 0.039545s, Solving time = 0.011858s, Total time = 0.051403s
10 : Statistics :: Grounding time = 0.041806s, Solving time = 0.012433s, Total time = 0.054239s
11 : Statistics :: Grounding time = 0.040847s, Solving time = 0.016003s, Total time = 0.056850s
12 : Statistics :: Grounding time = 0.040201s, Solving time = 0.023709s, Total time = 0.063910s
13 : Statistics :: Grounding time = 0.041855s, Solving time = 0.033632s, Total time = 0.075488s
14 : Statistics :: Grounding time = 0.040556s, Solving time = 0.058768s, Total time = 0.099324s
15 : Statistics :: Grounding time = 0.043497s, Solving time = 0.106365s, Total time = 0.149861s
16 : Statistics :: Grounding time = 0.077810s, Solving time = 0.183107s, Total time = 0.260917s
17 : Statistics :: Grounding time = 0.084309s, Solving time = 0.315882s, Total time = 0.400191s
18 : Statistics :: Grounding time = 0.085234s, Solving time = 0.467698s, Total time = 0.552932s
19 : Statistics :: Grounding time = 0.088329s, Solving time = 0.787935s, Total time = 0.876264s
20 : Statistics :: Grounding time = 0.092540s, Solving time = 0.285276s, Total time = 0.377815s

[06-02-2021_15-34-51] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.018391s, Solving time = 2.360562s, Total time = 3.446495s
Model :: Total atoms = 3691, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-34-51] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,move(puzzle_room),3)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),4)
occurs(3,talos,release(manipulator_arm_1,(block,6)),5)
occurs(3,talos,move(store_room),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),8)
occurs(3,talos,move(puzzle_room),9)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),10)
occurs(3,talos,release(manipulator_arm_1,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),12)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),13)
occurs(3,talos,release(manipulator_arm_1,(block,3)),14)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),15)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),16)
occurs(3,talos,release(manipulator_arm_1,(block,2)),17)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),18)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),19)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),20)

[06-02-2021_15-34-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-34-51] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Instantiated.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Program building started.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Program building completed.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding base program parts.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.015831s.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving base program parts.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.002239s.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental solving started.

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.702614s.

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.264869s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.073930s.

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.019017s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.074146s.

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.018469s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-34-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.074143s.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.021266s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.076028s.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.020752s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.076816s.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.024228s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.077019s.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.024013s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.086020s.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.030772s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.078624s.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.032656s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.083561s.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.034695s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.081446s.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.044655s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.089507s.

[06-02-2021_15-34-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.042494s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.085969s.

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.057042s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.088499s.

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.087154s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.087457s.

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.147581s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.092239s.

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.212310s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-34-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.218657s.

[06-02-2021_15-34-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.396324s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-34-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-34-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.237388s.

[06-02-2021_15-34-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.626659s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-34-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-34-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.234005s.

[06-02-2021_15-34-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.966798s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.236151s.

[06-02-2021_15-34-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.495000s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.244953s.

[06-02-2021_15-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.692540s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.246035s.

[06-02-2021_15-34-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 1.019139s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.254443s.

[06-02-2021_15-35-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-35-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 1.352239s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-35-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-35-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.249473s.

[06-02-2021_15-35-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Model found:
Model :: Total atoms = 9386, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.964535s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental solving completed in 11.704027s because STOP_CON_REACHED.

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.864955s, Solving time = 7.597446s, Total time = 11.704027s
Final Model :: Total atoms = 9386, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.702614s, Solving time = 0.264869s, Total time = 0.967484s
2 : Statistics :: Grounding time = 0.073930s, Solving time = 0.019017s, Total time = 0.092947s
3 : Statistics :: Grounding time = 0.074146s, Solving time = 0.018469s, Total time = 0.092615s
4 : Statistics :: Grounding time = 0.074143s, Solving time = 0.021266s, Total time = 0.095409s
5 : Statistics :: Grounding time = 0.076028s, Solving time = 0.020752s, Total time = 0.096780s
6 : Statistics :: Grounding time = 0.076816s, Solving time = 0.024228s, Total time = 0.101044s
7 : Statistics :: Grounding time = 0.077019s, Solving time = 0.024013s, Total time = 0.101032s
8 : Statistics :: Grounding time = 0.086020s, Solving time = 0.030772s, Total time = 0.116792s
9 : Statistics :: Grounding time = 0.078624s, Solving time = 0.032656s, Total time = 0.111280s
10 : Statistics :: Grounding time = 0.083561s, Solving time = 0.034695s, Total time = 0.118255s
11 : Statistics :: Grounding time = 0.081446s, Solving time = 0.044655s, Total time = 0.126101s
12 : Statistics :: Grounding time = 0.089507s, Solving time = 0.042494s, Total time = 0.132001s
13 : Statistics :: Grounding time = 0.085969s, Solving time = 0.057042s, Total time = 0.143012s
14 : Statistics :: Grounding time = 0.088499s, Solving time = 0.087154s, Total time = 0.175653s
15 : Statistics :: Grounding time = 0.087457s, Solving time = 0.147581s, Total time = 0.235038s
16 : Statistics :: Grounding time = 0.092239s, Solving time = 0.212310s, Total time = 0.304548s
17 : Statistics :: Grounding time = 0.218657s, Solving time = 0.396324s, Total time = 0.614981s
18 : Statistics :: Grounding time = 0.237388s, Solving time = 0.626659s, Total time = 0.864048s
19 : Statistics :: Grounding time = 0.234005s, Solving time = 0.966798s, Total time = 1.200804s
20 : Statistics :: Grounding time = 0.236151s, Solving time = 0.495000s, Total time = 0.731151s
21 : Statistics :: Grounding time = 0.244953s, Solving time = 0.692540s, Total time = 0.937493s
22 : Statistics :: Grounding time = 0.246035s, Solving time = 1.019139s, Total time = 1.265175s
23 : Statistics :: Grounding time = 0.254443s, Solving time = 1.352239s, Total time = 1.606682s
24 : Statistics :: Grounding time = 0.249473s, Solving time = 0.964535s, Total time = 1.214008s

[06-02-2021_15-35-03] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.864955s, Solving time = 7.597446s, Total time = 11.704027s
Model :: Total atoms = 9386, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-35-03] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),14)
occurs(2,talos,configure(manipulator_arm_1,retracted),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,6)),21)
occurs(2,talos,configure(manipulator_arm_1,retracted),22)
occurs(2,talos,move(hallway),23)
occurs(2,talos,move(store_room),24)
occurs(2,talos,configure(manipulator_arm_1,extended),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),26)
occurs(2,talos,configure(manipulator_arm_1,retracted),27)
occurs(2,talos,move(hallway),28)
occurs(2,talos,move(puzzle_room),29)
occurs(2,talos,configure(manipulator_arm_2,extended),30)
occurs(2,talos,configure(manipulator_arm_1,extended),31)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),32)
occurs(2,talos,release(manipulator_arm_1,(block,5)),33)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),34)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),35)
occurs(2,talos,release(manipulator_arm_1,(block,3)),36)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),37)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),38)
occurs(2,talos,release(manipulator_arm_1,(block,2)),39)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),40)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),41)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),42)

[06-02-2021_15-35-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-35-03] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Instantiated.

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 42 rules into program part conformance_module(step).

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 42, Stop con = StopCondition.Satisfiable

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Program building started.

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Program building completed.

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding base program parts.

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.017374s.

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving base program parts.

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.003777s.

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental solving started.

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [1]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-35-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [41]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-35-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 5.698589s.

[06-02-2021_15-35-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 1.256007s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [2]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-35-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.456804s.

[06-02-2021_15-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.055463s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [3]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.435887s.

[06-02-2021_15-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.057317s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [4]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.449305s.

[06-02-2021_15-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.057468s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [5]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.447327s.

[06-02-2021_15-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.062013s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [6]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.470856s.

[06-02-2021_15-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.082482s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [7]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.454395s.

[06-02-2021_15-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.096052s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [8]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-35-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.473127s.

[06-02-2021_15-35-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.101034s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [9]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-35-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-35-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.482153s.

[06-02-2021_15-35-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.092293s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [10]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.481054s.

[06-02-2021_15-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.109111s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [11]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-35-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.491974s.

[06-02-2021_15-35-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.080048s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [12]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-35-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-35-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.484137s.

[06-02-2021_15-35-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.157394s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [13]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-35-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-35-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.496200s.

[06-02-2021_15-35-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.192297s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [14]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-35-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-35-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.511634s.

[06-02-2021_15-35-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.170978s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [15]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-35-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-35-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.492761s.

[06-02-2021_15-35-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.201641s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [16]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-35-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-35-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.510221s.

[06-02-2021_15-35-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.340128s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [17]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-35-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-35-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.519974s.

[06-02-2021_15-35-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.393561s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [18]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-35-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-35-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.533613s.

[06-02-2021_15-35-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.102984s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [19]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-35-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-35-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.536451s.

[06-02-2021_15-35-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.564583s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [20]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-35-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-35-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.550119s.

[06-02-2021_15-35-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.543278s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [21]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-35-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-35-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.555345s.

[06-02-2021_15-35-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 1.075562s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [22]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-35-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-35-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.573941s.

[06-02-2021_15-35-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.689962s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [23]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-35-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-35-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.571695s.

[06-02-2021_15-35-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.651576s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [24]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-35-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-35-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.612450s.

[06-02-2021_15-35-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 1.625122s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [25]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-35-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-35-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.582361s.

[06-02-2021_15-35-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 1.477712s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [26]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-35-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-35-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.603168s.

[06-02-2021_15-35-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 2.660565s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [27]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-35-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-35-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.617166s.

[06-02-2021_15-35-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 1.306520s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [28]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-35-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-35-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.625022s.

[06-02-2021_15-35-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 2.302977s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [29]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-35-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-35-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.620330s.

[06-02-2021_15-35-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 3.122932s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [30]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-35-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-35-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.638586s.

[06-02-2021_15-35-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 3.457076s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [31]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-35-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-35-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.646404s.

[06-02-2021_15-35-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Model found:
Model :: Total atoms = 15752, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 3.200095s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental solving completed in 48.844311s because STOP_CON_REACHED.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 21.640421s, Solving time = 26.290009s, Total time = 48.844311s
Final Model :: Total atoms = 15752, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.698589s, Solving time = 1.256007s, Total time = 6.954595s
2 : Statistics :: Grounding time = 0.456804s, Solving time = 0.055463s, Total time = 0.512267s
3 : Statistics :: Grounding time = 0.435887s, Solving time = 0.057317s, Total time = 0.493204s
4 : Statistics :: Grounding time = 0.449305s, Solving time = 0.057468s, Total time = 0.506774s
5 : Statistics :: Grounding time = 0.447327s, Solving time = 0.062013s, Total time = 0.509340s
6 : Statistics :: Grounding time = 0.470856s, Solving time = 0.082482s, Total time = 0.553338s
7 : Statistics :: Grounding time = 0.454395s, Solving time = 0.096052s, Total time = 0.550447s
8 : Statistics :: Grounding time = 0.473127s, Solving time = 0.101034s, Total time = 0.574160s
9 : Statistics :: Grounding time = 0.482153s, Solving time = 0.092293s, Total time = 0.574446s
10 : Statistics :: Grounding time = 0.481054s, Solving time = 0.109111s, Total time = 0.590165s
11 : Statistics :: Grounding time = 0.491974s, Solving time = 0.080048s, Total time = 0.572022s
12 : Statistics :: Grounding time = 0.484137s, Solving time = 0.157394s, Total time = 0.641532s
13 : Statistics :: Grounding time = 0.496200s, Solving time = 0.192297s, Total time = 0.688497s
14 : Statistics :: Grounding time = 0.511634s, Solving time = 0.170978s, Total time = 0.682612s
15 : Statistics :: Grounding time = 0.492761s, Solving time = 0.201641s, Total time = 0.694402s
16 : Statistics :: Grounding time = 0.510221s, Solving time = 0.340128s, Total time = 0.850350s
17 : Statistics :: Grounding time = 0.519974s, Solving time = 0.393561s, Total time = 0.913535s
18 : Statistics :: Grounding time = 0.533613s, Solving time = 0.102984s, Total time = 0.636597s
19 : Statistics :: Grounding time = 0.536451s, Solving time = 0.564583s, Total time = 1.101034s
20 : Statistics :: Grounding time = 0.550119s, Solving time = 0.543278s, Total time = 1.093397s
21 : Statistics :: Grounding time = 0.555345s, Solving time = 1.075562s, Total time = 1.630907s
22 : Statistics :: Grounding time = 0.573941s, Solving time = 0.689962s, Total time = 1.263902s
23 : Statistics :: Grounding time = 0.571695s, Solving time = 0.651576s, Total time = 1.223271s
24 : Statistics :: Grounding time = 0.612450s, Solving time = 1.625122s, Total time = 2.237572s
25 : Statistics :: Grounding time = 0.582361s, Solving time = 1.477712s, Total time = 2.060073s
26 : Statistics :: Grounding time = 0.603168s, Solving time = 2.660565s, Total time = 3.263734s
27 : Statistics :: Grounding time = 0.617166s, Solving time = 1.306520s, Total time = 1.923685s
28 : Statistics :: Grounding time = 0.625022s, Solving time = 2.302977s, Total time = 2.927999s
29 : Statistics :: Grounding time = 0.620330s, Solving time = 3.122932s, Total time = 3.743262s
30 : Statistics :: Grounding time = 0.638586s, Solving time = 3.457076s, Total time = 4.095662s
31 : Statistics :: Grounding time = 0.646404s, Solving time = 3.200095s, Total time = 3.846499s

[06-02-2021_15-35-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 21.640421s, Solving time = 26.290009s, Total time = 48.844311s
Model :: Total atoms = 15752, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-35-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),37)
occurs(1,talos,release(manipulator_end_1,(block,6)),38)
occurs(1,talos,configure(manipulator_limb_1,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_1,extended),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),48)
occurs(1,talos,configure(manipulator_limb_1,retracted),49)
occurs(1,talos,move((store_room,1)),50)
occurs(1,talos,move((hallway,0)),51)
occurs(1,talos,move((hallway,1)),52)
occurs(1,talos,move((hallway,2)),53)
occurs(1,talos,move((puzzle_room,0)),54)
occurs(1,talos,move((puzzle_room,1)),55)
occurs(1,talos,configure(manipulator_limb_1,extended),56)
occurs(1,talos,configure(manipulator_limb_2,extended),57)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),58)
occurs(1,talos,release(manipulator_end_1,(block,5)),59)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),60)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),61)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),62)
occurs(1,talos,release(manipulator_end_1,(block,3)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),65)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),66)
occurs(1,talos,release(manipulator_end_1,(block,2)),67)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),68)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),69)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),70)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),71)

[06-02-2021_15-35-52] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.446495s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    11.704027s : Steps =    42 : Actions =    42 |  
  | Level 1 : Time =    48.844311s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[06-02-2021_15-35-52] INFO :: Experiment >> 

      ================================================      
            Experimental run 9 : Time 64.596495s            
      ================================================      

[06-02-2021_15-35-52] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-35-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-35-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-35-52] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Instantiated.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Program building started.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Program building completed.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding base program parts.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.014110s.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving base program parts.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.001832s.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental solving started.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.040424s.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.005340s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.030904s.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.002988s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.031037s.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.004524s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.040412s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.006001s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.036266s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.005788s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.040685s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.006859s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.040384s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.008078s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.037941s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.009089s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.039104s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.011994s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.040063s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.013407s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.039574s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.020043s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.041726s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.023753s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.041666s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.039932s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.041483s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.057431s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.076009s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.069855s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.077954s.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.105105s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.083435s.

[06-02-2021_15-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.221492s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.084442s.

[06-02-2021_15-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.437944s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.087497s.

[06-02-2021_15-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.753068s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.091572s.

[06-02-2021_15-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Model found:
Model :: Total atoms = 3703, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.353655s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental solving completed in 3.280047s because STOP_CON_REACHED.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.056688s, Solving time = 2.158178s, Total time = 3.280047s
Final Model :: Total atoms = 3703, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040424s, Solving time = 0.005340s, Total time = 0.045764s
2 : Statistics :: Grounding time = 0.030904s, Solving time = 0.002988s, Total time = 0.033892s
3 : Statistics :: Grounding time = 0.031037s, Solving time = 0.004524s, Total time = 0.035561s
4 : Statistics :: Grounding time = 0.040412s, Solving time = 0.006001s, Total time = 0.046413s
5 : Statistics :: Grounding time = 0.036266s, Solving time = 0.005788s, Total time = 0.042054s
6 : Statistics :: Grounding time = 0.040685s, Solving time = 0.006859s, Total time = 0.047544s
7 : Statistics :: Grounding time = 0.040384s, Solving time = 0.008078s, Total time = 0.048462s
8 : Statistics :: Grounding time = 0.037941s, Solving time = 0.009089s, Total time = 0.047031s
9 : Statistics :: Grounding time = 0.039104s, Solving time = 0.011994s, Total time = 0.051098s
10 : Statistics :: Grounding time = 0.040063s, Solving time = 0.013407s, Total time = 0.053470s
11 : Statistics :: Grounding time = 0.039574s, Solving time = 0.020043s, Total time = 0.059617s
12 : Statistics :: Grounding time = 0.041726s, Solving time = 0.023753s, Total time = 0.065480s
13 : Statistics :: Grounding time = 0.041666s, Solving time = 0.039932s, Total time = 0.081598s
14 : Statistics :: Grounding time = 0.041483s, Solving time = 0.057431s, Total time = 0.098914s
15 : Statistics :: Grounding time = 0.076009s, Solving time = 0.069855s, Total time = 0.145863s
16 : Statistics :: Grounding time = 0.077954s, Solving time = 0.105105s, Total time = 0.183059s
17 : Statistics :: Grounding time = 0.083435s, Solving time = 0.221492s, Total time = 0.304927s
18 : Statistics :: Grounding time = 0.084442s, Solving time = 0.437944s, Total time = 0.522386s
19 : Statistics :: Grounding time = 0.087497s, Solving time = 0.753068s, Total time = 0.840564s
20 : Statistics :: Grounding time = 0.091572s, Solving time = 0.353655s, Total time = 0.445227s

[06-02-2021_15-35-56] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.056688s, Solving time = 2.158178s, Total time = 3.280047s
Model :: Total atoms = 3703, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-35-56] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,move(puzzle_room),3)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),4)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),5)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),6)
occurs(3,talos,release(manipulator_arm_2,(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),8)
occurs(3,talos,release(manipulator_arm_1,(block,3)),9)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),10)
occurs(3,talos,release(manipulator_arm_2,(block,2)),11)
occurs(3,talos,move(store_room),12)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),14)
occurs(3,talos,move(puzzle_room),15)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(3,talos,release(manipulator_arm_2,(block,5)),17)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),18)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),19)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),20)

[06-02-2021_15-35-56] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-35-56] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Instantiated.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Program building started.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Program building completed.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding base program parts.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.015115s.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving base program parts.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.002343s.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental solving started.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.703276s.

[06-02-2021_15-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.265352s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.072928s.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.018883s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.070350s.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.017724s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.074082s.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.023415s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.079182s.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.022628s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.076369s.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.025704s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.082106s.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.026335s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.078144s.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.031146s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.078162s.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.033421s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.084378s.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.036697s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.081308s.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.039234s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.081858s.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.042336s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.083948s.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.054422s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.085479s.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.051201s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.093896s.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.113088s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.087669s.

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.167086s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.090535s.

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.131189s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.223965s.

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.193471s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.235718s.

[06-02-2021_15-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.476384s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.239643s.

[06-02-2021_15-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-36-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.802466s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-36-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-36-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.242329s.

[06-02-2021_15-36-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-36-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 1.135456s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-36-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-36-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.243293s.

[06-02-2021_15-36-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-36-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 1.717316s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-36-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-36-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.249348s.

[06-02-2021_15-36-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-36-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 1.858995s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-36-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-36-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.255675s.

[06-02-2021_15-36-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-36-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 2.531816s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-36-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-36-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.255215s.

[06-02-2021_15-36-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-36-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 3.172949s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-36-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-36-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.265768s.

[06-02-2021_15-36-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Model found:
Model :: Total atoms = 9756, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 1.548731s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental solving completed in 19.052435s because STOP_CON_REACHED.

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.229741s, Solving time = 14.539791s, Total time = 19.052435s
Final Model :: Total atoms = 9756, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.703276s, Solving time = 0.265352s, Total time = 0.968628s
2 : Statistics :: Grounding time = 0.072928s, Solving time = 0.018883s, Total time = 0.091812s
3 : Statistics :: Grounding time = 0.070350s, Solving time = 0.017724s, Total time = 0.088074s
4 : Statistics :: Grounding time = 0.074082s, Solving time = 0.023415s, Total time = 0.097497s
5 : Statistics :: Grounding time = 0.079182s, Solving time = 0.022628s, Total time = 0.101810s
6 : Statistics :: Grounding time = 0.076369s, Solving time = 0.025704s, Total time = 0.102073s
7 : Statistics :: Grounding time = 0.082106s, Solving time = 0.026335s, Total time = 0.108442s
8 : Statistics :: Grounding time = 0.078144s, Solving time = 0.031146s, Total time = 0.109290s
9 : Statistics :: Grounding time = 0.078162s, Solving time = 0.033421s, Total time = 0.111583s
10 : Statistics :: Grounding time = 0.084378s, Solving time = 0.036697s, Total time = 0.121075s
11 : Statistics :: Grounding time = 0.081308s, Solving time = 0.039234s, Total time = 0.120542s
12 : Statistics :: Grounding time = 0.081858s, Solving time = 0.042336s, Total time = 0.124195s
13 : Statistics :: Grounding time = 0.083948s, Solving time = 0.054422s, Total time = 0.138370s
14 : Statistics :: Grounding time = 0.085479s, Solving time = 0.051201s, Total time = 0.136680s
15 : Statistics :: Grounding time = 0.093896s, Solving time = 0.113088s, Total time = 0.206985s
16 : Statistics :: Grounding time = 0.087669s, Solving time = 0.167086s, Total time = 0.254756s
17 : Statistics :: Grounding time = 0.090535s, Solving time = 0.131189s, Total time = 0.221725s
18 : Statistics :: Grounding time = 0.223965s, Solving time = 0.193471s, Total time = 0.417436s
19 : Statistics :: Grounding time = 0.235718s, Solving time = 0.476384s, Total time = 0.712102s
20 : Statistics :: Grounding time = 0.239643s, Solving time = 0.802466s, Total time = 1.042108s
21 : Statistics :: Grounding time = 0.242329s, Solving time = 1.135456s, Total time = 1.377785s
22 : Statistics :: Grounding time = 0.243293s, Solving time = 1.717316s, Total time = 1.960609s
23 : Statistics :: Grounding time = 0.249348s, Solving time = 1.858995s, Total time = 2.108343s
24 : Statistics :: Grounding time = 0.255675s, Solving time = 2.531816s, Total time = 2.787492s
25 : Statistics :: Grounding time = 0.255215s, Solving time = 3.172949s, Total time = 3.428165s
26 : Statistics :: Grounding time = 0.265768s, Solving time = 1.548731s, Total time = 1.814498s

[06-02-2021_15-36-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.229741s, Solving time = 14.539791s, Total time = 19.052435s
Model :: Total atoms = 9756, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-36-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,move(hallway),14)
occurs(2,talos,move(puzzle_room),15)
occurs(2,talos,configure(manipulator_arm_1,extended),16)
occurs(2,talos,configure(manipulator_arm_2,extended),17)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),18)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,6)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,release(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),24)
occurs(2,talos,configure(manipulator_arm_1,retracted),25)
occurs(2,talos,release(manipulator_arm_2,(block,2)),26)
occurs(2,talos,configure(manipulator_arm_2,retracted),27)
occurs(2,talos,move(hallway),28)
occurs(2,talos,move(store_room),29)
occurs(2,talos,configure(manipulator_arm_1,extended),30)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),31)
occurs(2,talos,configure(manipulator_arm_2,extended),32)
occurs(2,talos,configure(manipulator_arm_1,retracted),33)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),34)
occurs(2,talos,configure(manipulator_arm_2,retracted),35)
occurs(2,talos,move(hallway),36)
occurs(2,talos,move(puzzle_room),37)
occurs(2,talos,configure(manipulator_arm_2,extended),38)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),39)
occurs(2,talos,release(manipulator_arm_2,(block,5)),40)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),41)
occurs(2,talos,configure(manipulator_arm_1,extended),42)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),43)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),44)

[06-02-2021_15-36-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-36-15] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Instantiated.

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Program building started.

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Program building completed.

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding base program parts.

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.016741s.

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving base program parts.

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.003616s.

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental solving started.

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-36-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 6.101437s.

[06-02-2021_15-36-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 1.321848s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-36-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-36-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.447954s.

[06-02-2021_15-36-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.055630s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-36-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-36-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.468775s.

[06-02-2021_15-36-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.059847s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-36-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-36-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.465616s.

[06-02-2021_15-36-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.062685s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-36-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.472764s.

[06-02-2021_15-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.103094s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.461330s.

[06-02-2021_15-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.093890s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-36-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-36-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.467636s.

[06-02-2021_15-36-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.073490s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-36-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-36-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.491120s.

[06-02-2021_15-36-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.079905s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-36-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-36-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.483797s.

[06-02-2021_15-36-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.107038s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-36-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-36-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.502831s.

[06-02-2021_15-36-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.132931s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-36-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-36-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.497359s.

[06-02-2021_15-36-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.133278s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-36-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-36-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.512206s.

[06-02-2021_15-36-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.167943s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-36-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.522041s.

[06-02-2021_15-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.360571s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.518066s.

[06-02-2021_15-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.127481s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-36-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-36-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.519876s.

[06-02-2021_15-36-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.198851s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-36-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-36-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.524371s.

[06-02-2021_15-36-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.354966s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-36-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-36-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.548193s.

[06-02-2021_15-36-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.412261s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-36-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-36-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.552637s.

[06-02-2021_15-36-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.798934s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-36-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-36-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.551027s.

[06-02-2021_15-36-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.640156s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-36-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-36-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.560676s.

[06-02-2021_15-36-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.573816s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-36-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-36-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.569848s.

[06-02-2021_15-36-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 1.467667s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-36-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-36-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.575803s.

[06-02-2021_15-36-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.424659s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-36-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-36-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.585994s.

[06-02-2021_15-36-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.696926s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-36-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-36-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.593942s.

[06-02-2021_15-36-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 2.978570s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-36-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-36-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.613918s.

[06-02-2021_15-36-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 2.995297s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.613306s.

[06-02-2021_15-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 6.495905s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.631345s.

[06-02-2021_15-36-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 9.046704s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.664247s.

[06-02-2021_15-37-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 11.936802s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-37-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.635847s.

[06-02-2021_15-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Model found:
Model :: Total atoms = 15844, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 11.985819s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental solving completed in 75.937656s because STOP_CON_REACHED.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 21.170705s, Solving time = 53.890578s, Total time = 75.937656s
Final Model :: Total atoms = 15844, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental statistics:
1 : Statistics :: Grounding time = 6.101437s, Solving time = 1.321848s, Total time = 7.423285s
2 : Statistics :: Grounding time = 0.447954s, Solving time = 0.055630s, Total time = 0.503585s
3 : Statistics :: Grounding time = 0.468775s, Solving time = 0.059847s, Total time = 0.528622s
4 : Statistics :: Grounding time = 0.465616s, Solving time = 0.062685s, Total time = 0.528301s
5 : Statistics :: Grounding time = 0.472764s, Solving time = 0.103094s, Total time = 0.575857s
6 : Statistics :: Grounding time = 0.461330s, Solving time = 0.093890s, Total time = 0.555219s
7 : Statistics :: Grounding time = 0.467636s, Solving time = 0.073490s, Total time = 0.541127s
8 : Statistics :: Grounding time = 0.491120s, Solving time = 0.079905s, Total time = 0.571025s
9 : Statistics :: Grounding time = 0.483797s, Solving time = 0.107038s, Total time = 0.590835s
10 : Statistics :: Grounding time = 0.502831s, Solving time = 0.132931s, Total time = 0.635762s
11 : Statistics :: Grounding time = 0.497359s, Solving time = 0.133278s, Total time = 0.630636s
12 : Statistics :: Grounding time = 0.512206s, Solving time = 0.167943s, Total time = 0.680149s
13 : Statistics :: Grounding time = 0.522041s, Solving time = 0.360571s, Total time = 0.882612s
14 : Statistics :: Grounding time = 0.518066s, Solving time = 0.127481s, Total time = 0.645547s
15 : Statistics :: Grounding time = 0.519876s, Solving time = 0.198851s, Total time = 0.718728s
16 : Statistics :: Grounding time = 0.524371s, Solving time = 0.354966s, Total time = 0.879337s
17 : Statistics :: Grounding time = 0.548193s, Solving time = 0.412261s, Total time = 0.960454s
18 : Statistics :: Grounding time = 0.552637s, Solving time = 0.798934s, Total time = 1.351571s
19 : Statistics :: Grounding time = 0.551027s, Solving time = 0.640156s, Total time = 1.191183s
20 : Statistics :: Grounding time = 0.560676s, Solving time = 0.573816s, Total time = 1.134492s
21 : Statistics :: Grounding time = 0.569848s, Solving time = 1.467667s, Total time = 2.037515s
22 : Statistics :: Grounding time = 0.575803s, Solving time = 0.424659s, Total time = 1.000463s
23 : Statistics :: Grounding time = 0.585994s, Solving time = 0.696926s, Total time = 1.282921s
24 : Statistics :: Grounding time = 0.593942s, Solving time = 2.978570s, Total time = 3.572513s
25 : Statistics :: Grounding time = 0.613918s, Solving time = 2.995297s, Total time = 3.609214s
26 : Statistics :: Grounding time = 0.613306s, Solving time = 6.495905s, Total time = 7.109211s
27 : Statistics :: Grounding time = 0.631345s, Solving time = 9.046704s, Total time = 9.678049s
28 : Statistics :: Grounding time = 0.664247s, Solving time = 11.936802s, Total time = 12.601048s
29 : Statistics :: Grounding time = 0.635847s, Solving time = 11.985819s, Total time = 12.621666s

[06-02-2021_15-37-31] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 21.170705s, Solving time = 53.890578s, Total time = 75.937656s
Model :: Total atoms = 15844, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-37-31] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,retracted),23)
occurs(1,talos,move((store_room,1)),24)
occurs(1,talos,move((hallway,0)),25)
occurs(1,talos,move((hallway,1)),26)
occurs(1,talos,move((hallway,2)),27)
occurs(1,talos,move((puzzle_room,0)),28)
occurs(1,talos,move((puzzle_room,1)),29)
occurs(1,talos,configure(manipulator_limb_2,extended),30)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_2,(block,6)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),35)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),36)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),37)
occurs(1,talos,release(manipulator_end_1,(block,3)),38)
occurs(1,talos,configure(manipulator_limb_1,retracted),39)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),40)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),41)
occurs(1,talos,release(manipulator_end_2,(block,2)),42)
occurs(1,talos,configure(manipulator_limb_2,retracted),43)
occurs(1,talos,move((puzzle_room,0)),44)
occurs(1,talos,move((hallway,2)),45)
occurs(1,talos,move((hallway,1)),46)
occurs(1,talos,move((hallway,0)),47)
occurs(1,talos,move((store_room,1)),48)
occurs(1,talos,move((store_room,0)),49)
occurs(1,talos,configure(manipulator_limb_1,extended),50)
occurs(1,talos,configure(manipulator_limb_2,extended),51)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),52)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),53)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),54)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),55)
occurs(1,talos,configure(manipulator_limb_1,retracted),56)
occurs(1,talos,configure(manipulator_limb_2,retracted),57)
occurs(1,talos,move((store_room,1)),58)
occurs(1,talos,move((hallway,0)),59)
occurs(1,talos,move((hallway,1)),60)
occurs(1,talos,move((hallway,2)),61)
occurs(1,talos,move((puzzle_room,0)),62)
occurs(1,talos,move((puzzle_room,1)),63)
occurs(1,talos,configure(manipulator_limb_2,extended),64)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),65)
occurs(1,talos,release(manipulator_end_2,(block,5)),66)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),67)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),68)
occurs(1,talos,configure(manipulator_limb_1,extended),69)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),70)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),71)

[06-02-2021_15-37-31] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.280047s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    19.052435s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    75.937656s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[06-02-2021_15-37-31] INFO :: Experiment >> 

      ================================================      
           Experimental run 10 : Time 98.911820s            
      ================================================      

[06-02-2021_15-37-31] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-37-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-37-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-37-31] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Instantiated.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Program building started.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Program building completed.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding base program parts.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.014707s.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving base program parts.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.002124s.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental solving started.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.039610s.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.006414s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.030962s.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.003095s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.031187s.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.004843s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.035345s.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.005707s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.035394s.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.006019s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-37-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.036897s.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.007599s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.038223s.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.007591s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.037784s.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.008458s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.043259s.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.009852s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.040742s.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.012418s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.039792s.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.018088s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.041412s.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.022423s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.040938s.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.032646s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.041992s.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.045700s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.079914s.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.062469s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.078386s.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.137776s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.086101s.

[06-02-2021_15-37-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.218502s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.085285s.

[06-02-2021_15-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.360270s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.090501s.

[06-02-2021_15-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.786230s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.094351s.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Model found:
Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.071653s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental solving completed in 2.954905s because STOP_CON_REACHED.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.062782s, Solving time = 1.829879s, Total time = 2.954905s
Final Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039610s, Solving time = 0.006414s, Total time = 0.046025s
2 : Statistics :: Grounding time = 0.030962s, Solving time = 0.003095s, Total time = 0.034057s
3 : Statistics :: Grounding time = 0.031187s, Solving time = 0.004843s, Total time = 0.036029s
4 : Statistics :: Grounding time = 0.035345s, Solving time = 0.005707s, Total time = 0.041052s
5 : Statistics :: Grounding time = 0.035394s, Solving time = 0.006019s, Total time = 0.041412s
6 : Statistics :: Grounding time = 0.036897s, Solving time = 0.007599s, Total time = 0.044496s
7 : Statistics :: Grounding time = 0.038223s, Solving time = 0.007591s, Total time = 0.045815s
8 : Statistics :: Grounding time = 0.037784s, Solving time = 0.008458s, Total time = 0.046242s
9 : Statistics :: Grounding time = 0.043259s, Solving time = 0.009852s, Total time = 0.053111s
10 : Statistics :: Grounding time = 0.040742s, Solving time = 0.012418s, Total time = 0.053159s
11 : Statistics :: Grounding time = 0.039792s, Solving time = 0.018088s, Total time = 0.057880s
12 : Statistics :: Grounding time = 0.041412s, Solving time = 0.022423s, Total time = 0.063835s
13 : Statistics :: Grounding time = 0.040938s, Solving time = 0.032646s, Total time = 0.073584s
14 : Statistics :: Grounding time = 0.041992s, Solving time = 0.045700s, Total time = 0.087692s
15 : Statistics :: Grounding time = 0.079914s, Solving time = 0.062469s, Total time = 0.142384s
16 : Statistics :: Grounding time = 0.078386s, Solving time = 0.137776s, Total time = 0.216162s
17 : Statistics :: Grounding time = 0.086101s, Solving time = 0.218502s, Total time = 0.304603s
18 : Statistics :: Grounding time = 0.085285s, Solving time = 0.360270s, Total time = 0.445556s
19 : Statistics :: Grounding time = 0.090501s, Solving time = 0.786230s, Total time = 0.876730s
20 : Statistics :: Grounding time = 0.094351s, Solving time = 0.071653s, Total time = 0.166004s

[06-02-2021_15-37-34] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.062782s, Solving time = 1.829879s, Total time = 2.954905s
Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-37-34] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_2,(block,3)),10)
occurs(3,talos,release(manipulator_arm_1,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),12)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),13)
occurs(3,talos,release(manipulator_arm_2,(block,2)),14)
occurs(3,talos,move(store_room),15)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),16)
occurs(3,talos,move(puzzle_room),17)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),18)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),19)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),20)

[06-02-2021_15-37-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-37-34] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Instantiated.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Program building started.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Program building completed.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding base program parts.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.015953s.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving base program parts.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.003318s.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental solving started.

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.698555s.

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.263477s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.072390s.

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.018808s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.074007s.

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.017863s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-37-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.075299s.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.024333s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.075871s.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.025413s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.077556s.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.024079s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.076623s.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.026935s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.076279s.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.034365s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.081402s.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.028641s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.080343s.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.036785s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.082831s.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.026352s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.083002s.

[06-02-2021_15-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.042243s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.085459s.

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.049751s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.085219s.

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.037697s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.086319s.

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.123885s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.097602s.

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.081102s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.090428s.

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.050518s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-37-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.231564s.

[06-02-2021_15-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.116155s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.229585s.

[06-02-2021_15-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.206020s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.234054s.

[06-02-2021_15-37-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.440970s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-37-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-37-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.237395s.

[06-02-2021_15-37-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.629467s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-37-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-37-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.232915s.

[06-02-2021_15-37-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 1.515693s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-37-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-37-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.245013s.

[06-02-2021_15-37-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 1.289466s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-37-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-37-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.253306s.

[06-02-2021_15-37-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 2.031973s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-37-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-37-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.254362s.

[06-02-2021_15-37-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 1.970277s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-37-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-37-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.259231s.

[06-02-2021_15-37-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Model found:
Model :: Total atoms = 9742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 2.086415s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental solving completed in 15.674603s because STOP_CON_REACHED.

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.192562s, Solving time = 11.201998s, Total time = 15.674603s
Final Model :: Total atoms = 9742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.698555s, Solving time = 0.263477s, Total time = 0.962031s
2 : Statistics :: Grounding time = 0.072390s, Solving time = 0.018808s, Total time = 0.091199s
3 : Statistics :: Grounding time = 0.074007s, Solving time = 0.017863s, Total time = 0.091870s
4 : Statistics :: Grounding time = 0.075299s, Solving time = 0.024333s, Total time = 0.099632s
5 : Statistics :: Grounding time = 0.075871s, Solving time = 0.025413s, Total time = 0.101284s
6 : Statistics :: Grounding time = 0.077556s, Solving time = 0.024079s, Total time = 0.101635s
7 : Statistics :: Grounding time = 0.076623s, Solving time = 0.026935s, Total time = 0.103558s
8 : Statistics :: Grounding time = 0.076279s, Solving time = 0.034365s, Total time = 0.110644s
9 : Statistics :: Grounding time = 0.081402s, Solving time = 0.028641s, Total time = 0.110043s
10 : Statistics :: Grounding time = 0.080343s, Solving time = 0.036785s, Total time = 0.117129s
11 : Statistics :: Grounding time = 0.082831s, Solving time = 0.026352s, Total time = 0.109183s
12 : Statistics :: Grounding time = 0.083002s, Solving time = 0.042243s, Total time = 0.125245s
13 : Statistics :: Grounding time = 0.085459s, Solving time = 0.049751s, Total time = 0.135210s
14 : Statistics :: Grounding time = 0.085219s, Solving time = 0.037697s, Total time = 0.122916s
15 : Statistics :: Grounding time = 0.086319s, Solving time = 0.123885s, Total time = 0.210204s
16 : Statistics :: Grounding time = 0.097602s, Solving time = 0.081102s, Total time = 0.178704s
17 : Statistics :: Grounding time = 0.090428s, Solving time = 0.050518s, Total time = 0.140945s
18 : Statistics :: Grounding time = 0.231564s, Solving time = 0.116155s, Total time = 0.347719s
19 : Statistics :: Grounding time = 0.229585s, Solving time = 0.206020s, Total time = 0.435605s
20 : Statistics :: Grounding time = 0.234054s, Solving time = 0.440970s, Total time = 0.675023s
21 : Statistics :: Grounding time = 0.237395s, Solving time = 0.629467s, Total time = 0.866862s
22 : Statistics :: Grounding time = 0.232915s, Solving time = 1.515693s, Total time = 1.748608s
23 : Statistics :: Grounding time = 0.245013s, Solving time = 1.289466s, Total time = 1.534479s
24 : Statistics :: Grounding time = 0.253306s, Solving time = 2.031973s, Total time = 2.285279s
25 : Statistics :: Grounding time = 0.254362s, Solving time = 1.970277s, Total time = 2.224639s
26 : Statistics :: Grounding time = 0.259231s, Solving time = 2.086415s, Total time = 2.345646s

[06-02-2021_15-37-50] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.192562s, Solving time = 11.201998s, Total time = 15.674603s
Model :: Total atoms = 9742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-37-50] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),23)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),24)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),25)
occurs(2,talos,release(manipulator_arm_1,(block,5)),26)
occurs(2,talos,configure(manipulator_arm_1,retracted),27)
occurs(2,talos,release(manipulator_arm_2,(block,3)),28)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),29)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),30)
occurs(2,talos,release(manipulator_arm_2,(block,2)),31)
occurs(2,talos,configure(manipulator_arm_2,retracted),32)
occurs(2,talos,move(hallway),33)
occurs(2,talos,move(store_room),34)
occurs(2,talos,configure(manipulator_arm_2,extended),35)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),36)
occurs(2,talos,configure(manipulator_arm_2,retracted),37)
occurs(2,talos,move(hallway),38)
occurs(2,talos,move(puzzle_room),39)
occurs(2,talos,configure(manipulator_arm_2,extended),40)
occurs(2,talos,configure(manipulator_arm_1,extended),41)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),42)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),43)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),44)

[06-02-2021_15-37-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-37-50] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Instantiated.

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Program building started.

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Program building completed.

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding base program parts.

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.017323s.

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving base program parts.

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.003788s.

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental solving started.

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-37-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 5.969890s.

[06-02-2021_15-37-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 1.326731s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.452076s.

[06-02-2021_15-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.057380s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.449524s.

[06-02-2021_15-37-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.059602s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.468341s.

[06-02-2021_15-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.057346s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-37-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.476835s.

[06-02-2021_15-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.074042s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.481232s.

[06-02-2021_15-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.109530s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-38-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.484410s.

[06-02-2021_15-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.106003s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.473365s.

[06-02-2021_15-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.074735s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-38-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.488270s.

[06-02-2021_15-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.117387s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-38-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.487794s.

[06-02-2021_15-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.136044s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.494279s.

[06-02-2021_15-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.145785s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-38-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.510702s.

[06-02-2021_15-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.180715s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-38-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.502435s.

[06-02-2021_15-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.254682s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.547547s.

[06-02-2021_15-38-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.243501s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.517067s.

[06-02-2021_15-38-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.292591s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.522501s.

[06-02-2021_15-38-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.530988s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.530281s.

[06-02-2021_15-38-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.500942s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.546691s.

[06-02-2021_15-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.251161s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.546476s.

[06-02-2021_15-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.414937s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.554134s.

[06-02-2021_15-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.302743s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-38-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-38-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.566942s.

[06-02-2021_15-38-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 1.923050s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-38-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-38-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.570211s.

[06-02-2021_15-38-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 1.294843s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-38-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-38-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.577117s.

[06-02-2021_15-38-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.393515s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-38-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-38-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.588517s.

[06-02-2021_15-38-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.369342s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-38-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-38-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.605501s.

[06-02-2021_15-38-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 1.896297s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-38-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-38-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.605328s.

[06-02-2021_15-38-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 1.160196s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-38-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-38-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.620804s.

[06-02-2021_15-38-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 6.327505s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-38-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.637583s.

[06-02-2021_15-38-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 3.867880s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.640984s.

[06-02-2021_15-38-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 3.523893s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [30]:
Current step bound = 72
End step min = 0
End step max = None

[06-02-2021_15-38-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 0]), ('conformance_module', [72])].

[06-02-2021_15-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.650477s.

[06-02-2021_15-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 6.228175s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [31]:
Current step bound = 73
End step min = 0
End step max = None

[06-02-2021_15-38-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 0]), ('conformance_module', [73])].

[06-02-2021_15-38-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.659593s.

[06-02-2021_15-38-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Model found:
Model :: Total atoms = 16187, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 6.171601s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental solving completed in 61.576974s because STOP_CON_REACHED.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 22.244228s, Solving time = 38.396930s, Total time = 61.576974s
Final Model :: Total atoms = 16187, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.969890s, Solving time = 1.326731s, Total time = 7.296621s
2 : Statistics :: Grounding time = 0.452076s, Solving time = 0.057380s, Total time = 0.509456s
3 : Statistics :: Grounding time = 0.449524s, Solving time = 0.059602s, Total time = 0.509126s
4 : Statistics :: Grounding time = 0.468341s, Solving time = 0.057346s, Total time = 0.525687s
5 : Statistics :: Grounding time = 0.476835s, Solving time = 0.074042s, Total time = 0.550877s
6 : Statistics :: Grounding time = 0.481232s, Solving time = 0.109530s, Total time = 0.590762s
7 : Statistics :: Grounding time = 0.484410s, Solving time = 0.106003s, Total time = 0.590413s
8 : Statistics :: Grounding time = 0.473365s, Solving time = 0.074735s, Total time = 0.548100s
9 : Statistics :: Grounding time = 0.488270s, Solving time = 0.117387s, Total time = 0.605657s
10 : Statistics :: Grounding time = 0.487794s, Solving time = 0.136044s, Total time = 0.623839s
11 : Statistics :: Grounding time = 0.494279s, Solving time = 0.145785s, Total time = 0.640064s
12 : Statistics :: Grounding time = 0.510702s, Solving time = 0.180715s, Total time = 0.691416s
13 : Statistics :: Grounding time = 0.502435s, Solving time = 0.254682s, Total time = 0.757117s
14 : Statistics :: Grounding time = 0.547547s, Solving time = 0.243501s, Total time = 0.791048s
15 : Statistics :: Grounding time = 0.517067s, Solving time = 0.292591s, Total time = 0.809658s
16 : Statistics :: Grounding time = 0.522501s, Solving time = 0.530988s, Total time = 1.053488s
17 : Statistics :: Grounding time = 0.530281s, Solving time = 0.500942s, Total time = 1.031222s
18 : Statistics :: Grounding time = 0.546691s, Solving time = 0.251161s, Total time = 0.797852s
19 : Statistics :: Grounding time = 0.546476s, Solving time = 0.414937s, Total time = 0.961413s
20 : Statistics :: Grounding time = 0.554134s, Solving time = 0.302743s, Total time = 0.856877s
21 : Statistics :: Grounding time = 0.566942s, Solving time = 1.923050s, Total time = 2.489991s
22 : Statistics :: Grounding time = 0.570211s, Solving time = 1.294843s, Total time = 1.865054s
23 : Statistics :: Grounding time = 0.577117s, Solving time = 0.393515s, Total time = 0.970632s
24 : Statistics :: Grounding time = 0.588517s, Solving time = 0.369342s, Total time = 0.957858s
25 : Statistics :: Grounding time = 0.605501s, Solving time = 1.896297s, Total time = 2.501798s
26 : Statistics :: Grounding time = 0.605328s, Solving time = 1.160196s, Total time = 1.765524s
27 : Statistics :: Grounding time = 0.620804s, Solving time = 6.327505s, Total time = 6.948309s
28 : Statistics :: Grounding time = 0.637583s, Solving time = 3.867880s, Total time = 4.505463s
29 : Statistics :: Grounding time = 0.640984s, Solving time = 3.523893s, Total time = 4.164877s
30 : Statistics :: Grounding time = 0.650477s, Solving time = 6.228175s, Total time = 6.878653s
31 : Statistics :: Grounding time = 0.659593s, Solving time = 6.171601s, Total time = 6.831194s

[06-02-2021_15-38-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 22.244228s, Solving time = 38.396930s, Total time = 61.576974s
Model :: Total atoms = 16187, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-38-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,configure(manipulator_limb_1,extended),37)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_2,(block,6)),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),41)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),42)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),43)
occurs(1,talos,release(manipulator_end_2,(block,3)),44)
occurs(1,talos,release(manipulator_end_1,(block,5)),45)
occurs(1,talos,configure(manipulator_limb_1,retracted),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_limb_2,retracted),51)
occurs(1,talos,move((puzzle_room,0)),52)
occurs(1,talos,move((hallway,2)),53)
occurs(1,talos,move((hallway,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((store_room,1)),56)
occurs(1,talos,move((store_room,0)),57)
occurs(1,talos,configure(manipulator_limb_2,extended),58)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),59)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),60)
occurs(1,talos,configure(manipulator_limb_2,retracted),61)
occurs(1,talos,move((store_room,1)),62)
occurs(1,talos,move((hallway,0)),63)
occurs(1,talos,move((hallway,1)),64)
occurs(1,talos,move((hallway,2)),65)
occurs(1,talos,move((puzzle_room,0)),66)
occurs(1,talos,move((puzzle_room,1)),67)
occurs(1,talos,configure(manipulator_limb_1,extended),68)
occurs(1,talos,configure(manipulator_limb_2,extended),69)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),70)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),71)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),72)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),73)

[06-02-2021_15-38-52] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     2.954905s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    15.674603s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    61.576974s : Steps =    73 : Actions =    73 |  
  ====================================================================  

[06-02-2021_15-38-52] INFO :: Experiment >> 

      ================================================      
           Experimental run 11 : Time 80.872288s            
      ================================================      

[06-02-2021_15-38-52] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-38-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-38-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-38-52] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Instantiated.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Program building started.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Program building completed.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding base program parts.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.014538s.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving base program parts.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.002765s.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental solving started.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.039498s.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.006542s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.030933s.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.003886s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.031286s.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.005296s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.035793s.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.006276s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.035816s.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.006622s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.038562s.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.007396s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.040078s.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.008349s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.037690s.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.010077s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-38-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.041855s.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.011338s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.040318s.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.013743s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.041163s.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.015751s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.041425s.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.024210s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.040549s.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.040280s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.041611s.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.069571s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.079442s.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.117224s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.082618s.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.143444s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.084798s.

[06-02-2021_15-38-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.221946s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-38-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-38-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.085855s.

[06-02-2021_15-38-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.533409s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-38-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-38-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.088627s.

[06-02-2021_15-38-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.773629s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-38-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-38-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.091424s.

[06-02-2021_15-38-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Model found:
Model :: Total atoms = 3695, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.381246s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental solving completed in 3.533805s because STOP_CON_REACHED.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.063880s, Solving time = 2.403001s, Total time = 3.533805s
Final Model :: Total atoms = 3695, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039498s, Solving time = 0.006542s, Total time = 0.046040s
2 : Statistics :: Grounding time = 0.030933s, Solving time = 0.003886s, Total time = 0.034819s
3 : Statistics :: Grounding time = 0.031286s, Solving time = 0.005296s, Total time = 0.036581s
4 : Statistics :: Grounding time = 0.035793s, Solving time = 0.006276s, Total time = 0.042070s
5 : Statistics :: Grounding time = 0.035816s, Solving time = 0.006622s, Total time = 0.042438s
6 : Statistics :: Grounding time = 0.038562s, Solving time = 0.007396s, Total time = 0.045959s
7 : Statistics :: Grounding time = 0.040078s, Solving time = 0.008349s, Total time = 0.048427s
8 : Statistics :: Grounding time = 0.037690s, Solving time = 0.010077s, Total time = 0.047767s
9 : Statistics :: Grounding time = 0.041855s, Solving time = 0.011338s, Total time = 0.053194s
10 : Statistics :: Grounding time = 0.040318s, Solving time = 0.013743s, Total time = 0.054061s
11 : Statistics :: Grounding time = 0.041163s, Solving time = 0.015751s, Total time = 0.056914s
12 : Statistics :: Grounding time = 0.041425s, Solving time = 0.024210s, Total time = 0.065635s
13 : Statistics :: Grounding time = 0.040549s, Solving time = 0.040280s, Total time = 0.080829s
14 : Statistics :: Grounding time = 0.041611s, Solving time = 0.069571s, Total time = 0.111182s
15 : Statistics :: Grounding time = 0.079442s, Solving time = 0.117224s, Total time = 0.196666s
16 : Statistics :: Grounding time = 0.082618s, Solving time = 0.143444s, Total time = 0.226063s
17 : Statistics :: Grounding time = 0.084798s, Solving time = 0.221946s, Total time = 0.306744s
18 : Statistics :: Grounding time = 0.085855s, Solving time = 0.533409s, Total time = 0.619264s
19 : Statistics :: Grounding time = 0.088627s, Solving time = 0.773629s, Total time = 0.862256s
20 : Statistics :: Grounding time = 0.091424s, Solving time = 0.381246s, Total time = 0.472671s

[06-02-2021_15-38-56] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.063880s, Solving time = 2.403001s, Total time = 3.533805s
Model :: Total atoms = 3695, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-38-56] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_2,(block,5)),8)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),9)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),11)
occurs(3,talos,release(manipulator_arm_2,(block,3)),12)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),13)
occurs(3,talos,release(manipulator_arm_1,(block,2)),14)
occurs(3,talos,move(store_room),15)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),16)
occurs(3,talos,move(puzzle_room),17)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),18)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),19)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),20)

[06-02-2021_15-38-56] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-38-56] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Instantiated.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Program building started.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Program building completed.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding base program parts.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.014635s.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving base program parts.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.002919s.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental solving started.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.706953s.

[06-02-2021_15-38-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.262497s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.073011s.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.019452s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.073918s.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.018390s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.074097s.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.024466s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.074974s.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.025145s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.076143s.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.026874s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.076245s.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.032110s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.078066s.

[06-02-2021_15-38-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.026908s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.078804s.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.032163s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.079792s.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.035839s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.079708s.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.036303s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.080231s.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.040529s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.081304s.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.043780s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.085602s.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.029191s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.085386s.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.073065s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-38-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.088634s.

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.223719s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.097931s.

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.060569s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.220732s.

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.070315s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.225232s.

[06-02-2021_15-38-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.148155s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.234662s.

[06-02-2021_15-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.579703s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-39-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.236482s.

[06-02-2021_15-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.178700s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.238943s.

[06-02-2021_15-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.303392s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-39-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.249250s.

[06-02-2021_15-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.516548s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.247691s.

[06-02-2021_15-39-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 1.216631s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.258837s.

[06-02-2021_15-39-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 1.166330s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.262646s.

[06-02-2021_15-39-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Model found:
Model :: Total atoms = 9740, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 1.450069s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental solving completed in 11.082363s because STOP_CON_REACHED.

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.179908s, Solving time = 6.643763s, Total time = 11.082363s
Final Model :: Total atoms = 9740, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.706953s, Solving time = 0.262497s, Total time = 0.969450s
2 : Statistics :: Grounding time = 0.073011s, Solving time = 0.019452s, Total time = 0.092463s
3 : Statistics :: Grounding time = 0.073918s, Solving time = 0.018390s, Total time = 0.092308s
4 : Statistics :: Grounding time = 0.074097s, Solving time = 0.024466s, Total time = 0.098562s
5 : Statistics :: Grounding time = 0.074974s, Solving time = 0.025145s, Total time = 0.100120s
6 : Statistics :: Grounding time = 0.076143s, Solving time = 0.026874s, Total time = 0.103017s
7 : Statistics :: Grounding time = 0.076245s, Solving time = 0.032110s, Total time = 0.108355s
8 : Statistics :: Grounding time = 0.078066s, Solving time = 0.026908s, Total time = 0.104973s
9 : Statistics :: Grounding time = 0.078804s, Solving time = 0.032163s, Total time = 0.110966s
10 : Statistics :: Grounding time = 0.079792s, Solving time = 0.035839s, Total time = 0.115631s
11 : Statistics :: Grounding time = 0.079708s, Solving time = 0.036303s, Total time = 0.116011s
12 : Statistics :: Grounding time = 0.080231s, Solving time = 0.040529s, Total time = 0.120760s
13 : Statistics :: Grounding time = 0.081304s, Solving time = 0.043780s, Total time = 0.125084s
14 : Statistics :: Grounding time = 0.085602s, Solving time = 0.029191s, Total time = 0.114793s
15 : Statistics :: Grounding time = 0.085386s, Solving time = 0.073065s, Total time = 0.158451s
16 : Statistics :: Grounding time = 0.088634s, Solving time = 0.223719s, Total time = 0.312353s
17 : Statistics :: Grounding time = 0.097931s, Solving time = 0.060569s, Total time = 0.158500s
18 : Statistics :: Grounding time = 0.220732s, Solving time = 0.070315s, Total time = 0.291047s
19 : Statistics :: Grounding time = 0.225232s, Solving time = 0.148155s, Total time = 0.373387s
20 : Statistics :: Grounding time = 0.234662s, Solving time = 0.579703s, Total time = 0.814365s
21 : Statistics :: Grounding time = 0.236482s, Solving time = 0.178700s, Total time = 0.415183s
22 : Statistics :: Grounding time = 0.238943s, Solving time = 0.303392s, Total time = 0.542336s
23 : Statistics :: Grounding time = 0.249250s, Solving time = 0.516548s, Total time = 0.765798s
24 : Statistics :: Grounding time = 0.247691s, Solving time = 1.216631s, Total time = 1.464322s
25 : Statistics :: Grounding time = 0.258837s, Solving time = 1.166330s, Total time = 1.425167s
26 : Statistics :: Grounding time = 0.262646s, Solving time = 1.450069s, Total time = 1.712715s

[06-02-2021_15-39-07] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.179908s, Solving time = 6.643763s, Total time = 11.082363s
Model :: Total atoms = 9740, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-39-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_2,(block,5)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),25)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),26)
occurs(2,talos,release(manipulator_arm_2,(block,3)),27)
occurs(2,talos,configure(manipulator_arm_2,retracted),28)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),29)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),30)
occurs(2,talos,release(manipulator_arm_1,(block,2)),31)
occurs(2,talos,configure(manipulator_arm_1,retracted),32)
occurs(2,talos,move(hallway),33)
occurs(2,talos,move(store_room),34)
occurs(2,talos,configure(manipulator_arm_1,extended),35)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),36)
occurs(2,talos,configure(manipulator_arm_1,retracted),37)
occurs(2,talos,move(hallway),38)
occurs(2,talos,move(puzzle_room),39)
occurs(2,talos,configure(manipulator_arm_1,extended),40)
occurs(2,talos,configure(manipulator_arm_2,extended),41)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),42)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),43)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),44)

[06-02-2021_15-39-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-39-07] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Instantiated.

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Program building started.

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Program building completed.

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding base program parts.

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.016812s.

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving base program parts.

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.003520s.

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental solving started.

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 5.999259s.

[06-02-2021_15-39-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 1.331226s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-39-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.441456s.

[06-02-2021_15-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.056967s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.462134s.

[06-02-2021_15-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.058692s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-39-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-39-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.466379s.

[06-02-2021_15-39-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.062918s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-39-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-39-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.473189s.

[06-02-2021_15-39-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.087208s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.492055s.

[06-02-2021_15-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.060542s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-39-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.474275s.

[06-02-2021_15-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.080516s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.478216s.

[06-02-2021_15-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.108602s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-39-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.481336s.

[06-02-2021_15-39-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.098593s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-39-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-39-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.485678s.

[06-02-2021_15-39-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.132099s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-39-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-39-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.499223s.

[06-02-2021_15-39-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.269879s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-39-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-39-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.502624s.

[06-02-2021_15-39-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.217600s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-39-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-39-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.503517s.

[06-02-2021_15-39-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.277999s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-39-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-39-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.518373s.

[06-02-2021_15-39-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.106801s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-39-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-39-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.535138s.

[06-02-2021_15-39-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.379576s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-39-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-39-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.534414s.

[06-02-2021_15-39-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.177410s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-39-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-39-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.534026s.

[06-02-2021_15-39-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.301965s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-39-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.561262s.

[06-02-2021_15-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.626759s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-39-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.559775s.

[06-02-2021_15-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.519638s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.568510s.

[06-02-2021_15-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.575461s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.579206s.

[06-02-2021_15-39-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 1.861529s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.594042s.

[06-02-2021_15-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 1.410995s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-39-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.597452s.

[06-02-2021_15-39-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 1.174523s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-39-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.605065s.

[06-02-2021_15-39-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 1.880775s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-39-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.619589s.

[06-02-2021_15-39-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 2.100683s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-39-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.629686s.

[06-02-2021_15-39-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 5.243653s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-39-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.624622s.

[06-02-2021_15-39-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 11.319739s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-39-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.763540s.

[06-02-2021_15-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-40-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 11.526712s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.635262s.

[06-02-2021_15-40-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Model found:
Model :: Total atoms = 15816, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 15.604003s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental solving completed in 79.778436s because STOP_CON_REACHED.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 21.236114s, Solving time = 57.656582s, Total time = 79.778436s
Final Model :: Total atoms = 15816, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.999259s, Solving time = 1.331226s, Total time = 7.330485s
2 : Statistics :: Grounding time = 0.441456s, Solving time = 0.056967s, Total time = 0.498423s
3 : Statistics :: Grounding time = 0.462134s, Solving time = 0.058692s, Total time = 0.520827s
4 : Statistics :: Grounding time = 0.466379s, Solving time = 0.062918s, Total time = 0.529296s
5 : Statistics :: Grounding time = 0.473189s, Solving time = 0.087208s, Total time = 0.560396s
6 : Statistics :: Grounding time = 0.492055s, Solving time = 0.060542s, Total time = 0.552596s
7 : Statistics :: Grounding time = 0.474275s, Solving time = 0.080516s, Total time = 0.554791s
8 : Statistics :: Grounding time = 0.478216s, Solving time = 0.108602s, Total time = 0.586818s
9 : Statistics :: Grounding time = 0.481336s, Solving time = 0.098593s, Total time = 0.579930s
10 : Statistics :: Grounding time = 0.485678s, Solving time = 0.132099s, Total time = 0.617777s
11 : Statistics :: Grounding time = 0.499223s, Solving time = 0.269879s, Total time = 0.769102s
12 : Statistics :: Grounding time = 0.502624s, Solving time = 0.217600s, Total time = 0.720224s
13 : Statistics :: Grounding time = 0.503517s, Solving time = 0.277999s, Total time = 0.781515s
14 : Statistics :: Grounding time = 0.518373s, Solving time = 0.106801s, Total time = 0.625174s
15 : Statistics :: Grounding time = 0.535138s, Solving time = 0.379576s, Total time = 0.914715s
16 : Statistics :: Grounding time = 0.534414s, Solving time = 0.177410s, Total time = 0.711824s
17 : Statistics :: Grounding time = 0.534026s, Solving time = 0.301965s, Total time = 0.835991s
18 : Statistics :: Grounding time = 0.561262s, Solving time = 0.626759s, Total time = 1.188021s
19 : Statistics :: Grounding time = 0.559775s, Solving time = 0.519638s, Total time = 1.079412s
20 : Statistics :: Grounding time = 0.568510s, Solving time = 0.575461s, Total time = 1.143970s
21 : Statistics :: Grounding time = 0.579206s, Solving time = 1.861529s, Total time = 2.440735s
22 : Statistics :: Grounding time = 0.594042s, Solving time = 1.410995s, Total time = 2.005036s
23 : Statistics :: Grounding time = 0.597452s, Solving time = 1.174523s, Total time = 1.771976s
24 : Statistics :: Grounding time = 0.605065s, Solving time = 1.880775s, Total time = 2.485840s
25 : Statistics :: Grounding time = 0.619589s, Solving time = 2.100683s, Total time = 2.720272s
26 : Statistics :: Grounding time = 0.629686s, Solving time = 5.243653s, Total time = 5.873339s
27 : Statistics :: Grounding time = 0.624622s, Solving time = 11.319739s, Total time = 11.944361s
28 : Statistics :: Grounding time = 0.763540s, Solving time = 11.526712s, Total time = 12.290252s
29 : Statistics :: Grounding time = 0.635262s, Solving time = 15.604003s, Total time = 16.239265s

[06-02-2021_15-40-27] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 21.236114s, Solving time = 57.656582s, Total time = 79.778436s
Model :: Total atoms = 15816, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-40-27] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),23)
occurs(1,talos,configure(manipulator_limb_2,retracted),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_1,(block,6)),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),39)
occurs(1,talos,release(manipulator_end_2,(block,5)),40)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),44)
occurs(1,talos,release(manipulator_end_2,(block,3)),45)
occurs(1,talos,configure(manipulator_limb_2,retracted),46)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),47)
occurs(1,talos,release(manipulator_end_1,(block,2)),48)
occurs(1,talos,configure(manipulator_limb_1,retracted),49)
occurs(1,talos,move((puzzle_room,0)),50)
occurs(1,talos,move((hallway,2)),51)
occurs(1,talos,move((hallway,1)),52)
occurs(1,talos,move((hallway,0)),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((store_room,0)),55)
occurs(1,talos,configure(manipulator_limb_1,extended),56)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),57)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),58)
occurs(1,talos,configure(manipulator_limb_1,retracted),59)
occurs(1,talos,move((store_room,1)),60)
occurs(1,talos,move((hallway,0)),61)
occurs(1,talos,move((hallway,1)),62)
occurs(1,talos,move((hallway,2)),63)
occurs(1,talos,move((puzzle_room,0)),64)
occurs(1,talos,move((puzzle_room,1)),65)
occurs(1,talos,configure(manipulator_limb_2,extended),66)
occurs(1,talos,configure(manipulator_limb_1,extended),67)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),68)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),69)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),70)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),71)

[06-02-2021_15-40-27] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.533805s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    11.082363s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    79.778436s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[06-02-2021_15-40-27] INFO :: Experiment >> 

      ================================================      
           Experimental run 12 : Time 95.038410s            
      ================================================      

[06-02-2021_15-40-27] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-40-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-40-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-40-27] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Instantiated.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Program building started.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Program building completed.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding base program parts.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.013922s.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving base program parts.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.001753s.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental solving started.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.039777s.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.005598s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.031150s.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.003598s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.031299s.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.005042s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.035695s.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.006171s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.035685s.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.006355s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.036214s.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.007086s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.037972s.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.008179s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-40-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.038547s.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.008977s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.038698s.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.010707s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.040093s.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.013299s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.039332s.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.017970s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.042621s.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.023728s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.045055s.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.042413s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.044315s.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.060422s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.074281s.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.102835s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.079354s.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.163554s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.083563s.

[06-02-2021_15-40-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.265598s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.085001s.

[06-02-2021_15-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.461797s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.087708s.

[06-02-2021_15-40-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.843229s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.090614s.

[06-02-2021_15-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Model found:
Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.161685s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-40-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental solving completed in 3.340026s because STOP_CON_REACHED.

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.050894s, Solving time = 2.219994s, Total time = 3.340026s
Final Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039777s, Solving time = 0.005598s, Total time = 0.045374s
2 : Statistics :: Grounding time = 0.031150s, Solving time = 0.003598s, Total time = 0.034748s
3 : Statistics :: Grounding time = 0.031299s, Solving time = 0.005042s, Total time = 0.036340s
4 : Statistics :: Grounding time = 0.035695s, Solving time = 0.006171s, Total time = 0.041865s
5 : Statistics :: Grounding time = 0.035685s, Solving time = 0.006355s, Total time = 0.042040s
6 : Statistics :: Grounding time = 0.036214s, Solving time = 0.007086s, Total time = 0.043300s
7 : Statistics :: Grounding time = 0.037972s, Solving time = 0.008179s, Total time = 0.046150s
8 : Statistics :: Grounding time = 0.038547s, Solving time = 0.008977s, Total time = 0.047524s
9 : Statistics :: Grounding time = 0.038698s, Solving time = 0.010707s, Total time = 0.049405s
10 : Statistics :: Grounding time = 0.040093s, Solving time = 0.013299s, Total time = 0.053392s
11 : Statistics :: Grounding time = 0.039332s, Solving time = 0.017970s, Total time = 0.057302s
12 : Statistics :: Grounding time = 0.042621s, Solving time = 0.023728s, Total time = 0.066349s
13 : Statistics :: Grounding time = 0.045055s, Solving time = 0.042413s, Total time = 0.087468s
14 : Statistics :: Grounding time = 0.044315s, Solving time = 0.060422s, Total time = 0.104737s
15 : Statistics :: Grounding time = 0.074281s, Solving time = 0.102835s, Total time = 0.177116s
16 : Statistics :: Grounding time = 0.079354s, Solving time = 0.163554s, Total time = 0.242908s
17 : Statistics :: Grounding time = 0.083563s, Solving time = 0.265598s, Total time = 0.349161s
18 : Statistics :: Grounding time = 0.085001s, Solving time = 0.461797s, Total time = 0.546799s
19 : Statistics :: Grounding time = 0.087708s, Solving time = 0.843229s, Total time = 0.930937s
20 : Statistics :: Grounding time = 0.090614s, Solving time = 0.161685s, Total time = 0.252298s

[06-02-2021_15-40-31] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.050894s, Solving time = 2.219994s, Total time = 3.340026s
Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-40-31] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_2,(block,5)),10)
occurs(3,talos,release(manipulator_arm_1,(block,3)),11)
occurs(3,talos,move(store_room),12)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),13)
occurs(3,talos,move(puzzle_room),14)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),15)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),16)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),17)
occurs(3,talos,release(manipulator_arm_1,(block,2)),18)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),19)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),20)

[06-02-2021_15-40-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-40-31] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Instantiated.

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Program building started.

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Program building completed.

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding base program parts.

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.015142s.

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving base program parts.

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.002638s.

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental solving started.

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.704473s.

[06-02-2021_15-40-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.258016s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.072816s.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.018799s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.076215s.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.017636s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.073241s.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.023648s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.079910s.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.024906s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.077543s.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.025890s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.075991s.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.024044s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.079443s.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.026931s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.076690s.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.024727s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.080613s.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.036427s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.081396s.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.041546s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.081882s.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.043264s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.084468s.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.050251s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.085605s.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.045323s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.086715s.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.074088s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.088828s.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.102604s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-40-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.220744s.

[06-02-2021_15-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.030849s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.225953s.

[06-02-2021_15-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.398497s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-40-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.225937s.

[06-02-2021_15-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.056582s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.228654s.

[06-02-2021_15-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.208646s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.237794s.

[06-02-2021_15-40-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.487918s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.240493s.

[06-02-2021_15-40-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.753312s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.245947s.

[06-02-2021_15-40-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 1.530108s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.253706s.

[06-02-2021_15-40-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 2.161936s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.262816s.

[06-02-2021_15-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 2.308757s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.261067s.

[06-02-2021_15-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Model found:
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 2.586743s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental solving completed in 15.946105s because STOP_CON_REACHED.

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.324079s, Solving time = 11.364088s, Total time = 15.946105s
Final Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.704473s, Solving time = 0.258016s, Total time = 0.962488s
2 : Statistics :: Grounding time = 0.072816s, Solving time = 0.018799s, Total time = 0.091615s
3 : Statistics :: Grounding time = 0.076215s, Solving time = 0.017636s, Total time = 0.093851s
4 : Statistics :: Grounding time = 0.073241s, Solving time = 0.023648s, Total time = 0.096889s
5 : Statistics :: Grounding time = 0.079910s, Solving time = 0.024906s, Total time = 0.104816s
6 : Statistics :: Grounding time = 0.077543s, Solving time = 0.025890s, Total time = 0.103433s
7 : Statistics :: Grounding time = 0.075991s, Solving time = 0.024044s, Total time = 0.100035s
8 : Statistics :: Grounding time = 0.079443s, Solving time = 0.026931s, Total time = 0.106374s
9 : Statistics :: Grounding time = 0.076690s, Solving time = 0.024727s, Total time = 0.101418s
10 : Statistics :: Grounding time = 0.080613s, Solving time = 0.036427s, Total time = 0.117040s
11 : Statistics :: Grounding time = 0.081396s, Solving time = 0.041546s, Total time = 0.122942s
12 : Statistics :: Grounding time = 0.081882s, Solving time = 0.043264s, Total time = 0.125145s
13 : Statistics :: Grounding time = 0.084468s, Solving time = 0.050251s, Total time = 0.134719s
14 : Statistics :: Grounding time = 0.085605s, Solving time = 0.045323s, Total time = 0.130928s
15 : Statistics :: Grounding time = 0.086715s, Solving time = 0.074088s, Total time = 0.160803s
16 : Statistics :: Grounding time = 0.088828s, Solving time = 0.102604s, Total time = 0.191432s
17 : Statistics :: Grounding time = 0.220744s, Solving time = 0.030849s, Total time = 0.251594s
18 : Statistics :: Grounding time = 0.225953s, Solving time = 0.398497s, Total time = 0.624450s
19 : Statistics :: Grounding time = 0.225937s, Solving time = 0.056582s, Total time = 0.282519s
20 : Statistics :: Grounding time = 0.228654s, Solving time = 0.208646s, Total time = 0.437299s
21 : Statistics :: Grounding time = 0.237794s, Solving time = 0.487918s, Total time = 0.725712s
22 : Statistics :: Grounding time = 0.240493s, Solving time = 0.753312s, Total time = 0.993805s
23 : Statistics :: Grounding time = 0.245947s, Solving time = 1.530108s, Total time = 1.776056s
24 : Statistics :: Grounding time = 0.253706s, Solving time = 2.161936s, Total time = 2.415643s
25 : Statistics :: Grounding time = 0.262816s, Solving time = 2.308757s, Total time = 2.571573s
26 : Statistics :: Grounding time = 0.261067s, Solving time = 2.586743s, Total time = 2.847810s

[06-02-2021_15-40-47] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.324079s, Solving time = 11.364088s, Total time = 15.946105s
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-40-47] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,6)),21)
occurs(2,talos,configure(manipulator_arm_2,extended),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_2,(block,5)),24)
occurs(2,talos,configure(manipulator_arm_2,retracted),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),26)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),27)
occurs(2,talos,release(manipulator_arm_1,(block,3)),28)
occurs(2,talos,configure(manipulator_arm_1,retracted),29)
occurs(2,talos,move(hallway),30)
occurs(2,talos,move(store_room),31)
occurs(2,talos,configure(manipulator_arm_2,extended),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),33)
occurs(2,talos,configure(manipulator_arm_2,retracted),34)
occurs(2,talos,move(hallway),35)
occurs(2,talos,move(puzzle_room),36)
occurs(2,talos,configure(manipulator_arm_2,extended),37)
occurs(2,talos,configure(manipulator_arm_1,extended),38)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),39)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),40)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),41)
occurs(2,talos,release(manipulator_arm_1,(block,2)),42)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),43)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),44)

[06-02-2021_15-40-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-40-47] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Instantiated.

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Program building started.

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Program building completed.

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding base program parts.

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.016757s.

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving base program parts.

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.003377s.

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental solving started.

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-40-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 5.954262s.

[06-02-2021_15-40-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-40-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 1.339183s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-40-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.448675s.

[06-02-2021_15-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.056666s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.457396s.

[06-02-2021_15-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.058627s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-40-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-40-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.472716s.

[06-02-2021_15-40-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-40-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.062388s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-40-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-40-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.464279s.

[06-02-2021_15-40-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-40-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.069783s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-40-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-40-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.477484s.

[06-02-2021_15-40-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-40-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.068560s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-40-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-40-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.470735s.

[06-02-2021_15-40-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-40-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.071767s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-40-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-40-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.486224s.

[06-02-2021_15-40-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-40-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.072359s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-40-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-40-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.487490s.

[06-02-2021_15-40-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-40-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.078006s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-40-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-40-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.495599s.

[06-02-2021_15-40-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-40-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.099301s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-40-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-40-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-41-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.508294s.

[06-02-2021_15-41-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.158963s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-41-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-41-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.512878s.

[06-02-2021_15-41-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.180540s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-41-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-41-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.500857s.

[06-02-2021_15-41-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.198649s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-41-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.512096s.

[06-02-2021_15-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.262097s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-41-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.522034s.

[06-02-2021_15-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.351290s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-41-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.558854s.

[06-02-2021_15-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.354681s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-41-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.540043s.

[06-02-2021_15-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.511487s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-41-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.555646s.

[06-02-2021_15-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.561485s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-41-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.554696s.

[06-02-2021_15-41-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 1.078698s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.557546s.

[06-02-2021_15-41-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 1.578478s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-41-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.563894s.

[06-02-2021_15-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.617379s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-41-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.605255s.

[06-02-2021_15-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.368910s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-41-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.627250s.

[06-02-2021_15-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.450661s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-41-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.641931s.

[06-02-2021_15-41-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 3.640180s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.624253s.

[06-02-2021_15-41-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 2.449855s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.634670s.

[06-02-2021_15-41-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.464544s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-41-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.618531s.

[06-02-2021_15-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.815158s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-41-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.635447s.

[06-02-2021_15-41-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 2.935122s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-41-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.651971s.

[06-02-2021_15-41-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 7.525088s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [30]:
Current step bound = 72
End step min = 0
End step max = None

[06-02-2021_15-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 0]), ('conformance_module', [72])].

[06-02-2021_15-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.641531s.

[06-02-2021_15-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 11.408592s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [31]:
Current step bound = 73
End step min = 0
End step max = None

[06-02-2021_15-41-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 0]), ('conformance_module', [73])].

[06-02-2021_15-41-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.652381s.

[06-02-2021_15-41-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Model found:
Model :: Total atoms = 16196, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.867195s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental solving completed in 62.195815s because STOP_CON_REACHED.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 22.451673s, Solving time = 38.759070s, Total time = 62.195815s
Final Model :: Total atoms = 16196, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.954262s, Solving time = 1.339183s, Total time = 7.293445s
2 : Statistics :: Grounding time = 0.448675s, Solving time = 0.056666s, Total time = 0.505341s
3 : Statistics :: Grounding time = 0.457396s, Solving time = 0.058627s, Total time = 0.516023s
4 : Statistics :: Grounding time = 0.472716s, Solving time = 0.062388s, Total time = 0.535103s
5 : Statistics :: Grounding time = 0.464279s, Solving time = 0.069783s, Total time = 0.534062s
6 : Statistics :: Grounding time = 0.477484s, Solving time = 0.068560s, Total time = 0.546044s
7 : Statistics :: Grounding time = 0.470735s, Solving time = 0.071767s, Total time = 0.542502s
8 : Statistics :: Grounding time = 0.486224s, Solving time = 0.072359s, Total time = 0.558583s
9 : Statistics :: Grounding time = 0.487490s, Solving time = 0.078006s, Total time = 0.565496s
10 : Statistics :: Grounding time = 0.495599s, Solving time = 0.099301s, Total time = 0.594901s
11 : Statistics :: Grounding time = 0.508294s, Solving time = 0.158963s, Total time = 0.667258s
12 : Statistics :: Grounding time = 0.512878s, Solving time = 0.180540s, Total time = 0.693418s
13 : Statistics :: Grounding time = 0.500857s, Solving time = 0.198649s, Total time = 0.699506s
14 : Statistics :: Grounding time = 0.512096s, Solving time = 0.262097s, Total time = 0.774193s
15 : Statistics :: Grounding time = 0.522034s, Solving time = 0.351290s, Total time = 0.873324s
16 : Statistics :: Grounding time = 0.558854s, Solving time = 0.354681s, Total time = 0.913535s
17 : Statistics :: Grounding time = 0.540043s, Solving time = 0.511487s, Total time = 1.051530s
18 : Statistics :: Grounding time = 0.555646s, Solving time = 0.561485s, Total time = 1.117131s
19 : Statistics :: Grounding time = 0.554696s, Solving time = 1.078698s, Total time = 1.633394s
20 : Statistics :: Grounding time = 0.557546s, Solving time = 1.578478s, Total time = 2.136024s
21 : Statistics :: Grounding time = 0.563894s, Solving time = 0.617379s, Total time = 1.181273s
22 : Statistics :: Grounding time = 0.605255s, Solving time = 0.368910s, Total time = 0.974165s
23 : Statistics :: Grounding time = 0.627250s, Solving time = 0.450661s, Total time = 1.077911s
24 : Statistics :: Grounding time = 0.641931s, Solving time = 3.640180s, Total time = 4.282111s
25 : Statistics :: Grounding time = 0.624253s, Solving time = 2.449855s, Total time = 3.074108s
26 : Statistics :: Grounding time = 0.634670s, Solving time = 0.464544s, Total time = 1.099214s
27 : Statistics :: Grounding time = 0.618531s, Solving time = 0.815158s, Total time = 1.433690s
28 : Statistics :: Grounding time = 0.635447s, Solving time = 2.935122s, Total time = 3.570569s
29 : Statistics :: Grounding time = 0.651971s, Solving time = 7.525088s, Total time = 8.177060s
30 : Statistics :: Grounding time = 0.641531s, Solving time = 11.408592s, Total time = 12.050123s
31 : Statistics :: Grounding time = 0.652381s, Solving time = 0.867195s, Total time = 1.519576s

[06-02-2021_15-41-49] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 22.451673s, Solving time = 38.759070s, Total time = 62.195815s
Model :: Total atoms = 16196, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-41-49] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,configure(manipulator_limb_1,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_2,(block,5)),42)
occurs(1,talos,configure(manipulator_limb_2,retracted),43)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),44)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)
occurs(1,talos,configure(manipulator_limb_1,retracted),47)
occurs(1,talos,move((puzzle_room,0)),48)
occurs(1,talos,move((hallway,2)),49)
occurs(1,talos,move((hallway,1)),50)
occurs(1,talos,move((hallway,0)),51)
occurs(1,talos,move((store_room,1)),52)
occurs(1,talos,move((store_room,0)),53)
occurs(1,talos,configure(manipulator_limb_2,extended),54)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),55)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),56)
occurs(1,talos,configure(manipulator_limb_2,retracted),57)
occurs(1,talos,move((store_room,1)),58)
occurs(1,talos,move((hallway,0)),59)
occurs(1,talos,move((hallway,1)),60)
occurs(1,talos,move((hallway,2)),61)
occurs(1,talos,move((puzzle_room,0)),62)
occurs(1,talos,move((puzzle_room,1)),63)
occurs(1,talos,configure(manipulator_limb_2,extended),64)
occurs(1,talos,configure(manipulator_limb_1,extended),65)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),66)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),67)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),68)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),69)
occurs(1,talos,release(manipulator_end_1,(block,2)),70)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),71)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),72)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),73)

[06-02-2021_15-41-49] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.340026s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    15.946105s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    62.195815s : Steps =    73 : Actions =    73 |  
  ====================================================================  

[06-02-2021_15-41-49] INFO :: Experiment >> 

      ================================================      
           Experimental run 13 : Time 82.183427s            
      ================================================      

[06-02-2021_15-41-49] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-41-49] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-41-49] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-41-49] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Instantiated.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Program building started.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Program building completed.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding base program parts.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.013766s.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving base program parts.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.002252s.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental solving started.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.043711s.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.006666s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.046613s.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.003639s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-41-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.032135s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.005252s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.034486s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.006145s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.034637s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.006459s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.037701s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.007332s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.036842s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.007555s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.038630s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.009217s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.039392s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.009369s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.039497s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.012636s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.040178s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.018365s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.040241s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.026454s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.041031s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.045712s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.042948s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.056957s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.075414s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.099775s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.077039s.

[06-02-2021_15-41-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.141927s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.081171s.

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.255891s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.084897s.

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.396523s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.088389s.

[06-02-2021_15-41-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.893716s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.091442s.

[06-02-2021_15-41-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Model found:
Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.075670s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental solving completed in 3.215273s because STOP_CON_REACHED.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.060159s, Solving time = 2.087513s, Total time = 3.215273s
Final Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.043711s, Solving time = 0.006666s, Total time = 0.050377s
2 : Statistics :: Grounding time = 0.046613s, Solving time = 0.003639s, Total time = 0.050253s
3 : Statistics :: Grounding time = 0.032135s, Solving time = 0.005252s, Total time = 0.037388s
4 : Statistics :: Grounding time = 0.034486s, Solving time = 0.006145s, Total time = 0.040631s
5 : Statistics :: Grounding time = 0.034637s, Solving time = 0.006459s, Total time = 0.041096s
6 : Statistics :: Grounding time = 0.037701s, Solving time = 0.007332s, Total time = 0.045033s
7 : Statistics :: Grounding time = 0.036842s, Solving time = 0.007555s, Total time = 0.044397s
8 : Statistics :: Grounding time = 0.038630s, Solving time = 0.009217s, Total time = 0.047847s
9 : Statistics :: Grounding time = 0.039392s, Solving time = 0.009369s, Total time = 0.048761s
10 : Statistics :: Grounding time = 0.039497s, Solving time = 0.012636s, Total time = 0.052133s
11 : Statistics :: Grounding time = 0.040178s, Solving time = 0.018365s, Total time = 0.058542s
12 : Statistics :: Grounding time = 0.040241s, Solving time = 0.026454s, Total time = 0.066695s
13 : Statistics :: Grounding time = 0.041031s, Solving time = 0.045712s, Total time = 0.086744s
14 : Statistics :: Grounding time = 0.042948s, Solving time = 0.056957s, Total time = 0.099905s
15 : Statistics :: Grounding time = 0.075414s, Solving time = 0.099775s, Total time = 0.175189s
16 : Statistics :: Grounding time = 0.077039s, Solving time = 0.141927s, Total time = 0.218965s
17 : Statistics :: Grounding time = 0.081171s, Solving time = 0.255891s, Total time = 0.337062s
18 : Statistics :: Grounding time = 0.084897s, Solving time = 0.396523s, Total time = 0.481420s
19 : Statistics :: Grounding time = 0.088389s, Solving time = 0.893716s, Total time = 0.982105s
20 : Statistics :: Grounding time = 0.091442s, Solving time = 0.075670s, Total time = 0.167111s

[06-02-2021_15-41-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.060159s, Solving time = 2.087513s, Total time = 3.215273s
Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-41-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_2,(block,5)),8)
occurs(3,talos,move(store_room),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,move(puzzle_room),11)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),12)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),13)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),14)
occurs(3,talos,release(manipulator_arm_1,(block,3)),15)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),16)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),17)
occurs(3,talos,release(manipulator_arm_1,(block,2)),18)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),19)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),20)

[06-02-2021_15-41-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-41-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Instantiated.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Program building started.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Program building completed.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding base program parts.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.014873s.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving base program parts.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.002094s.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental solving started.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.729773s.

[06-02-2021_15-41-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.258794s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.072742s.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.019783s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.074053s.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.018295s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.074222s.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.023467s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.075411s.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.024076s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.082239s.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.026345s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.077095s.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.032346s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.078267s.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.028414s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.078028s.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.033890s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.080163s.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.041997s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.082124s.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.036376s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.090663s.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.086114s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.085354s.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.081855s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.088629s.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.038614s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.086950s.

[06-02-2021_15-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.128371s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.088988s.

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.096170s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.220939s.

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.171828s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.230530s.

[06-02-2021_15-41-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.189524s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.237257s.

[06-02-2021_15-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.385866s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.236887s.

[06-02-2021_15-41-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.615515s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.246110s.

[06-02-2021_15-41-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.900297s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.253197s.

[06-02-2021_15-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 1.212986s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.245685s.

[06-02-2021_15-42-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 1.257317s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-42-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.258277s.

[06-02-2021_15-42-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 1.155890s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.257648s.

[06-02-2021_15-42-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 1.556131s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.268115s.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Model found:
Model :: Total atoms = 9734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.226856s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental solving completed in 13.344091s because STOP_CON_REACHED.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.414218s, Solving time = 8.649209s, Total time = 13.344091s
Final Model :: Total atoms = 9734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.729773s, Solving time = 0.258794s, Total time = 0.988567s
2 : Statistics :: Grounding time = 0.072742s, Solving time = 0.019783s, Total time = 0.092525s
3 : Statistics :: Grounding time = 0.074053s, Solving time = 0.018295s, Total time = 0.092348s
4 : Statistics :: Grounding time = 0.074222s, Solving time = 0.023467s, Total time = 0.097688s
5 : Statistics :: Grounding time = 0.075411s, Solving time = 0.024076s, Total time = 0.099487s
6 : Statistics :: Grounding time = 0.082239s, Solving time = 0.026345s, Total time = 0.108584s
7 : Statistics :: Grounding time = 0.077095s, Solving time = 0.032346s, Total time = 0.109441s
8 : Statistics :: Grounding time = 0.078267s, Solving time = 0.028414s, Total time = 0.106681s
9 : Statistics :: Grounding time = 0.078028s, Solving time = 0.033890s, Total time = 0.111918s
10 : Statistics :: Grounding time = 0.080163s, Solving time = 0.041997s, Total time = 0.122161s
11 : Statistics :: Grounding time = 0.082124s, Solving time = 0.036376s, Total time = 0.118499s
12 : Statistics :: Grounding time = 0.090663s, Solving time = 0.086114s, Total time = 0.176776s
13 : Statistics :: Grounding time = 0.085354s, Solving time = 0.081855s, Total time = 0.167209s
14 : Statistics :: Grounding time = 0.088629s, Solving time = 0.038614s, Total time = 0.127243s
15 : Statistics :: Grounding time = 0.086950s, Solving time = 0.128371s, Total time = 0.215321s
16 : Statistics :: Grounding time = 0.088988s, Solving time = 0.096170s, Total time = 0.185158s
17 : Statistics :: Grounding time = 0.220939s, Solving time = 0.171828s, Total time = 0.392767s
18 : Statistics :: Grounding time = 0.230530s, Solving time = 0.189524s, Total time = 0.420054s
19 : Statistics :: Grounding time = 0.237257s, Solving time = 0.385866s, Total time = 0.623123s
20 : Statistics :: Grounding time = 0.236887s, Solving time = 0.615515s, Total time = 0.852402s
21 : Statistics :: Grounding time = 0.246110s, Solving time = 0.900297s, Total time = 1.146407s
22 : Statistics :: Grounding time = 0.253197s, Solving time = 1.212986s, Total time = 1.466183s
23 : Statistics :: Grounding time = 0.245685s, Solving time = 1.257317s, Total time = 1.503002s
24 : Statistics :: Grounding time = 0.258277s, Solving time = 1.155890s, Total time = 1.414167s
25 : Statistics :: Grounding time = 0.257648s, Solving time = 1.556131s, Total time = 1.813779s
26 : Statistics :: Grounding time = 0.268115s, Solving time = 0.226856s, Total time = 0.494971s

[06-02-2021_15-42-06] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.414218s, Solving time = 8.649209s, Total time = 13.344091s
Model :: Total atoms = 9734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-42-06] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,configure(manipulator_arm_1,extended),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,6)),21)
occurs(2,talos,configure(manipulator_arm_2,extended),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_2,(block,5)),24)
occurs(2,talos,configure(manipulator_arm_2,retracted),25)
occurs(2,talos,configure(manipulator_arm_1,retracted),26)
occurs(2,talos,move(hallway),27)
occurs(2,talos,move(store_room),28)
occurs(2,talos,configure(manipulator_arm_2,extended),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),30)
occurs(2,talos,configure(manipulator_arm_2,retracted),31)
occurs(2,talos,move(hallway),32)
occurs(2,talos,move(puzzle_room),33)
occurs(2,talos,configure(manipulator_arm_2,extended),34)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),35)
occurs(2,talos,configure(manipulator_arm_1,extended),36)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),37)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),38)
occurs(2,talos,release(manipulator_arm_1,(block,3)),39)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),40)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),41)
occurs(2,talos,release(manipulator_arm_1,(block,2)),42)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),43)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),44)

[06-02-2021_15-42-06] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-42-06] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Instantiated.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Program building started.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Program building completed.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding base program parts.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.016753s.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving base program parts.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.002880s.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental solving started.

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-42-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 6.005338s.

[06-02-2021_15-42-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 1.363995s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.448844s.

[06-02-2021_15-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.056817s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-42-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.459697s.

[06-02-2021_15-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.059609s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.474248s.

[06-02-2021_15-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.059650s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-42-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.465101s.

[06-02-2021_15-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.065038s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.478478s.

[06-02-2021_15-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.065457s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-42-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.486008s.

[06-02-2021_15-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.065824s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.484287s.

[06-02-2021_15-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.092611s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.500819s.

[06-02-2021_15-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.091475s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-42-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.507728s.

[06-02-2021_15-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.107967s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.496899s.

[06-02-2021_15-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.172048s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.503974s.

[06-02-2021_15-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.137839s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-42-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.497806s.

[06-02-2021_15-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.238715s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.515218s.

[06-02-2021_15-42-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.126093s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.525637s.

[06-02-2021_15-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.257661s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-42-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.538053s.

[06-02-2021_15-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.284809s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-42-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.545961s.

[06-02-2021_15-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.284752s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-42-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.556618s.

[06-02-2021_15-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.187103s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.564512s.

[06-02-2021_15-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.734500s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-42-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.573763s.

[06-02-2021_15-42-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.880906s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.581073s.

[06-02-2021_15-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.153278s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-42-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.583603s.

[06-02-2021_15-42-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 1.102120s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-42-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.604730s.

[06-02-2021_15-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.410843s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-42-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.589648s.

[06-02-2021_15-42-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 1.152586s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-42-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.604156s.

[06-02-2021_15-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.866207s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-42-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.615409s.

[06-02-2021_15-42-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 3.374447s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.629402s.

[06-02-2021_15-42-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 4.918858s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-42-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.629624s.

[06-02-2021_15-42-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 1.578037s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-42-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-42-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.633706s.

[06-02-2021_15-42-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 5.593087s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [30]:
Current step bound = 72
End step min = 0
End step max = None

[06-02-2021_15-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 0]), ('conformance_module', [72])].

[06-02-2021_15-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.672757s.

[06-02-2021_15-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 5.912117s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [31]:
Current step bound = 73
End step min = 0
End step max = None

[06-02-2021_15-42-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 0]), ('conformance_module', [73])].

[06-02-2021_15-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.679656s.

[06-02-2021_15-43-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Model found:
Model :: Total atoms = 16161, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 11.588298s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental solving completed in 65.390083s because STOP_CON_REACHED.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 22.469507s, Solving time = 41.985626s, Total time = 65.390083s
Final Model :: Total atoms = 16161, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental statistics:
1 : Statistics :: Grounding time = 6.005338s, Solving time = 1.363995s, Total time = 7.369333s
2 : Statistics :: Grounding time = 0.448844s, Solving time = 0.056817s, Total time = 0.505661s
3 : Statistics :: Grounding time = 0.459697s, Solving time = 0.059609s, Total time = 0.519306s
4 : Statistics :: Grounding time = 0.474248s, Solving time = 0.059650s, Total time = 0.533898s
5 : Statistics :: Grounding time = 0.465101s, Solving time = 0.065038s, Total time = 0.530139s
6 : Statistics :: Grounding time = 0.478478s, Solving time = 0.065457s, Total time = 0.543935s
7 : Statistics :: Grounding time = 0.486008s, Solving time = 0.065824s, Total time = 0.551832s
8 : Statistics :: Grounding time = 0.484287s, Solving time = 0.092611s, Total time = 0.576898s
9 : Statistics :: Grounding time = 0.500819s, Solving time = 0.091475s, Total time = 0.592294s
10 : Statistics :: Grounding time = 0.507728s, Solving time = 0.107967s, Total time = 0.615695s
11 : Statistics :: Grounding time = 0.496899s, Solving time = 0.172048s, Total time = 0.668947s
12 : Statistics :: Grounding time = 0.503974s, Solving time = 0.137839s, Total time = 0.641813s
13 : Statistics :: Grounding time = 0.497806s, Solving time = 0.238715s, Total time = 0.736521s
14 : Statistics :: Grounding time = 0.515218s, Solving time = 0.126093s, Total time = 0.641311s
15 : Statistics :: Grounding time = 0.525637s, Solving time = 0.257661s, Total time = 0.783298s
16 : Statistics :: Grounding time = 0.538053s, Solving time = 0.284809s, Total time = 0.822862s
17 : Statistics :: Grounding time = 0.545961s, Solving time = 0.284752s, Total time = 0.830713s
18 : Statistics :: Grounding time = 0.556618s, Solving time = 0.187103s, Total time = 0.743722s
19 : Statistics :: Grounding time = 0.564512s, Solving time = 0.734500s, Total time = 1.299012s
20 : Statistics :: Grounding time = 0.573763s, Solving time = 0.880906s, Total time = 1.454669s
21 : Statistics :: Grounding time = 0.581073s, Solving time = 0.153278s, Total time = 0.734351s
22 : Statistics :: Grounding time = 0.583603s, Solving time = 1.102120s, Total time = 1.685723s
23 : Statistics :: Grounding time = 0.604730s, Solving time = 0.410843s, Total time = 1.015573s
24 : Statistics :: Grounding time = 0.589648s, Solving time = 1.152586s, Total time = 1.742234s
25 : Statistics :: Grounding time = 0.604156s, Solving time = 0.866207s, Total time = 1.470363s
26 : Statistics :: Grounding time = 0.615409s, Solving time = 3.374447s, Total time = 3.989856s
27 : Statistics :: Grounding time = 0.629402s, Solving time = 4.918858s, Total time = 5.548260s
28 : Statistics :: Grounding time = 0.629624s, Solving time = 1.578037s, Total time = 2.207661s
29 : Statistics :: Grounding time = 0.633706s, Solving time = 5.593087s, Total time = 6.226793s
30 : Statistics :: Grounding time = 0.672757s, Solving time = 5.912117s, Total time = 6.584874s
31 : Statistics :: Grounding time = 0.679656s, Solving time = 11.588298s, Total time = 12.267954s

[06-02-2021_15-43-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 22.469507s, Solving time = 41.985626s, Total time = 65.390083s
Model :: Total atoms = 16161, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-43-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_limb_2,retracted),42)
occurs(1,talos,configure(manipulator_limb_1,retracted),43)
occurs(1,talos,move((puzzle_room,0)),44)
occurs(1,talos,move((hallway,2)),45)
occurs(1,talos,move((hallway,1)),46)
occurs(1,talos,move((hallway,0)),47)
occurs(1,talos,move((store_room,1)),48)
occurs(1,talos,move((store_room,0)),49)
occurs(1,talos,configure(manipulator_limb_2,extended),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),52)
occurs(1,talos,configure(manipulator_limb_2,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_1,extended),60)
occurs(1,talos,configure(manipulator_limb_2,extended),61)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),62)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),63)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),64)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),65)
occurs(1,talos,release(manipulator_end_1,(block,3)),66)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),67)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),68)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),69)
occurs(1,talos,release(manipulator_end_1,(block,2)),70)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),71)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),72)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),73)

[06-02-2021_15-43-12] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.215273s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    13.344091s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    65.390083s : Steps =    73 : Actions =    73 |  
  ====================================================================  

[06-02-2021_15-43-12] INFO :: Experiment >> 

      ================================================      
           Experimental run 14 : Time 82.694086s            
      ================================================      

[06-02-2021_15-43-12] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-43-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-43-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-43-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Instantiated.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Program building started.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Program building completed.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding base program parts.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.013753s.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving base program parts.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.002116s.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental solving started.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.040311s.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.006267s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.031141s.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.003011s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.031376s.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.004866s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.037452s.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.006359s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.035905s.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.006818s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.037211s.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.007632s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.038545s.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.008425s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.038393s.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.009136s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.038519s.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.009377s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.040738s.

[06-02-2021_15-43-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.012150s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.039832s.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.018114s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.041621s.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.026120s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.040025s.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.044292s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.041999s.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.055138s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.043120s.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.073954s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.077742s.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.131580s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.083242s.

[06-02-2021_15-43-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.288882s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.084542s.

[06-02-2021_15-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.563962s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.092451s.

[06-02-2021_15-43-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.856034s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.092155s.

[06-02-2021_15-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Model found:
Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.199059s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental solving completed in 3.421547s because STOP_CON_REACHED.

[06-02-2021_15-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.020073s, Solving time = 2.333291s, Total time = 3.421547s
Final Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-43-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040311s, Solving time = 0.006267s, Total time = 0.046578s
2 : Statistics :: Grounding time = 0.031141s, Solving time = 0.003011s, Total time = 0.034151s
3 : Statistics :: Grounding time = 0.031376s, Solving time = 0.004866s, Total time = 0.036242s
4 : Statistics :: Grounding time = 0.037452s, Solving time = 0.006359s, Total time = 0.043811s
5 : Statistics :: Grounding time = 0.035905s, Solving time = 0.006818s, Total time = 0.042723s
6 : Statistics :: Grounding time = 0.037211s, Solving time = 0.007632s, Total time = 0.044842s
7 : Statistics :: Grounding time = 0.038545s, Solving time = 0.008425s, Total time = 0.046970s
8 : Statistics :: Grounding time = 0.038393s, Solving time = 0.009136s, Total time = 0.047529s
9 : Statistics :: Grounding time = 0.038519s, Solving time = 0.009377s, Total time = 0.047895s
10 : Statistics :: Grounding time = 0.040738s, Solving time = 0.012150s, Total time = 0.052888s
11 : Statistics :: Grounding time = 0.039832s, Solving time = 0.018114s, Total time = 0.057946s
12 : Statistics :: Grounding time = 0.041621s, Solving time = 0.026120s, Total time = 0.067741s
13 : Statistics :: Grounding time = 0.040025s, Solving time = 0.044292s, Total time = 0.084317s
14 : Statistics :: Grounding time = 0.041999s, Solving time = 0.055138s, Total time = 0.097137s
15 : Statistics :: Grounding time = 0.043120s, Solving time = 0.073954s, Total time = 0.117074s
16 : Statistics :: Grounding time = 0.077742s, Solving time = 0.131580s, Total time = 0.209323s
17 : Statistics :: Grounding time = 0.083242s, Solving time = 0.288882s, Total time = 0.372124s
18 : Statistics :: Grounding time = 0.084542s, Solving time = 0.563962s, Total time = 0.648503s
19 : Statistics :: Grounding time = 0.092451s, Solving time = 0.856034s, Total time = 0.948485s
20 : Statistics :: Grounding time = 0.092155s, Solving time = 0.199059s, Total time = 0.291214s

[06-02-2021_15-43-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.020073s, Solving time = 2.333291s, Total time = 3.421547s
Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-43-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,move(puzzle_room),3)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),4)
occurs(3,talos,release(manipulator_arm_1,(block,6)),5)
occurs(3,talos,move(store_room),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),8)
occurs(3,talos,move(puzzle_room),9)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),10)
occurs(3,talos,release(manipulator_arm_1,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),12)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),13)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),14)
occurs(3,talos,release(manipulator_arm_1,(block,3)),15)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),16)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),17)
occurs(3,talos,release(manipulator_arm_1,(block,2)),18)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),19)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),20)

[06-02-2021_15-43-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-43-16] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Instantiated.

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Program building started.

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Program building completed.

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding base program parts.

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.014381s.

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving base program parts.

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.002179s.

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental solving started.

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.705011s.

[06-02-2021_15-43-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.259230s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.073392s.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.018276s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.072401s.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.017730s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.075603s.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.021965s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.076367s.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.020968s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.075838s.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.022820s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.076825s.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.024494s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.083468s.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.023470s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.083732s.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.028440s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.080270s.

[06-02-2021_15-43-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.032651s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.081095s.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.039361s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.081550s.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.050017s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.087639s.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.040695s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.085047s.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.052436s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.086912s.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.066304s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.090302s.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.065503s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.089798s.

[06-02-2021_15-43-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.116017s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.234217s.

[06-02-2021_15-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.234432s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.228853s.

[06-02-2021_15-43-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.425693s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.236382s.

[06-02-2021_15-43-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.605832s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.237569s.

[06-02-2021_15-43-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.708514s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.242813s.

[06-02-2021_15-43-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 1.015338s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.249422s.

[06-02-2021_15-43-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 1.149909s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-43-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.250129s.

[06-02-2021_15-43-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Model found:
Model :: Total atoms = 9396, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 1.356328s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental solving completed in 10.318766s because STOP_CON_REACHED.

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.699016s, Solving time = 6.398605s, Total time = 10.318766s
Final Model :: Total atoms = 9396, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.705011s, Solving time = 0.259230s, Total time = 0.964241s
2 : Statistics :: Grounding time = 0.073392s, Solving time = 0.018276s, Total time = 0.091668s
3 : Statistics :: Grounding time = 0.072401s, Solving time = 0.017730s, Total time = 0.090130s
4 : Statistics :: Grounding time = 0.075603s, Solving time = 0.021965s, Total time = 0.097567s
5 : Statistics :: Grounding time = 0.076367s, Solving time = 0.020968s, Total time = 0.097335s
6 : Statistics :: Grounding time = 0.075838s, Solving time = 0.022820s, Total time = 0.098659s
7 : Statistics :: Grounding time = 0.076825s, Solving time = 0.024494s, Total time = 0.101319s
8 : Statistics :: Grounding time = 0.083468s, Solving time = 0.023470s, Total time = 0.106939s
9 : Statistics :: Grounding time = 0.083732s, Solving time = 0.028440s, Total time = 0.112172s
10 : Statistics :: Grounding time = 0.080270s, Solving time = 0.032651s, Total time = 0.112921s
11 : Statistics :: Grounding time = 0.081095s, Solving time = 0.039361s, Total time = 0.120456s
12 : Statistics :: Grounding time = 0.081550s, Solving time = 0.050017s, Total time = 0.131567s
13 : Statistics :: Grounding time = 0.087639s, Solving time = 0.040695s, Total time = 0.128334s
14 : Statistics :: Grounding time = 0.085047s, Solving time = 0.052436s, Total time = 0.137483s
15 : Statistics :: Grounding time = 0.086912s, Solving time = 0.066304s, Total time = 0.153216s
16 : Statistics :: Grounding time = 0.090302s, Solving time = 0.065503s, Total time = 0.155806s
17 : Statistics :: Grounding time = 0.089798s, Solving time = 0.116017s, Total time = 0.205816s
18 : Statistics :: Grounding time = 0.234217s, Solving time = 0.234432s, Total time = 0.468650s
19 : Statistics :: Grounding time = 0.228853s, Solving time = 0.425693s, Total time = 0.654546s
20 : Statistics :: Grounding time = 0.236382s, Solving time = 0.605832s, Total time = 0.842214s
21 : Statistics :: Grounding time = 0.237569s, Solving time = 0.708514s, Total time = 0.946083s
22 : Statistics :: Grounding time = 0.242813s, Solving time = 1.015338s, Total time = 1.258151s
23 : Statistics :: Grounding time = 0.249422s, Solving time = 1.149909s, Total time = 1.399332s
24 : Statistics :: Grounding time = 0.250129s, Solving time = 1.356328s, Total time = 1.606457s

[06-02-2021_15-43-26] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.699016s, Solving time = 6.398605s, Total time = 10.318766s
Model :: Total atoms = 9396, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-43-26] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),14)
occurs(2,talos,configure(manipulator_arm_2,retracted),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,6)),21)
occurs(2,talos,configure(manipulator_arm_1,retracted),22)
occurs(2,talos,move(hallway),23)
occurs(2,talos,move(store_room),24)
occurs(2,talos,configure(manipulator_arm_1,extended),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),26)
occurs(2,talos,configure(manipulator_arm_1,retracted),27)
occurs(2,talos,move(hallway),28)
occurs(2,talos,move(puzzle_room),29)
occurs(2,talos,configure(manipulator_arm_2,extended),30)
occurs(2,talos,configure(manipulator_arm_1,extended),31)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),32)
occurs(2,talos,release(manipulator_arm_1,(block,5)),33)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),34)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),35)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),36)
occurs(2,talos,release(manipulator_arm_1,(block,3)),37)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),38)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),39)
occurs(2,talos,release(manipulator_arm_1,(block,2)),40)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),41)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),42)

[06-02-2021_15-43-26] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-43-26] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Instantiated.

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 42 rules into program part conformance_module(step).

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 42, Stop con = StopCondition.Satisfiable

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Program building started.

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Program building completed.

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding base program parts.

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.018157s.

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving base program parts.

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.003875s.

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental solving started.

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [1]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-43-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [41]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 5.734542s.

[06-02-2021_15-43-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 1.242324s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [2]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.429713s.

[06-02-2021_15-43-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.053846s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [3]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.447111s.

[06-02-2021_15-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.059549s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [4]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-43-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.444215s.

[06-02-2021_15-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.062796s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [5]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.449724s.

[06-02-2021_15-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.072217s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [6]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.448425s.

[06-02-2021_15-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.056864s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [7]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.463918s.

[06-02-2021_15-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.084492s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [8]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-43-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-43-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.483958s.

[06-02-2021_15-43-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.126197s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [9]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-43-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-43-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.474810s.

[06-02-2021_15-43-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.075444s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [10]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-43-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-43-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.482448s.

[06-02-2021_15-43-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.146162s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [11]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-43-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-43-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.481007s.

[06-02-2021_15-43-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.167370s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [12]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-43-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-43-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.493755s.

[06-02-2021_15-43-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.228285s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [13]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.491183s.

[06-02-2021_15-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.201400s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [14]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-43-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-43-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.489319s.

[06-02-2021_15-43-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.439805s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [15]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-43-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-43-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.499198s.

[06-02-2021_15-43-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.317289s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [16]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-43-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-43-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.511906s.

[06-02-2021_15-43-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.325426s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [17]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-43-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-43-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.518941s.

[06-02-2021_15-43-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.737507s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [18]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-43-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-43-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.524232s.

[06-02-2021_15-43-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.730028s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [19]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-43-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.531560s.

[06-02-2021_15-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.295355s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [20]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-43-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.537210s.

[06-02-2021_15-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.530982s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [21]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-43-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.557996s.

[06-02-2021_15-43-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.937974s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [22]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-43-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.563550s.

[06-02-2021_15-43-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 1.391549s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [23]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-43-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.579507s.

[06-02-2021_15-43-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 1.233278s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [24]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.608774s.

[06-02-2021_15-43-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.969956s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [25]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-43-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.586568s.

[06-02-2021_15-43-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 1.262455s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [26]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-43-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.606006s.

[06-02-2021_15-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.232431s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [27]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-43-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.613262s.

[06-02-2021_15-43-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 3.232871s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [28]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-44-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.625098s.

[06-02-2021_15-44-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 2.561295s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [29]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-44-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-44-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.652534s.

[06-02-2021_15-44-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Model found:
Model :: Total atoms = 15404, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 4.670074s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental solving completed in 43.588604s because STOP_CON_REACHED.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 20.348627s, Solving time = 22.449098s, Total time = 43.588604s
Final Model :: Total atoms = 15404, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.734542s, Solving time = 1.242324s, Total time = 6.976866s
2 : Statistics :: Grounding time = 0.429713s, Solving time = 0.053846s, Total time = 0.483559s
3 : Statistics :: Grounding time = 0.447111s, Solving time = 0.059549s, Total time = 0.506660s
4 : Statistics :: Grounding time = 0.444215s, Solving time = 0.062796s, Total time = 0.507012s
5 : Statistics :: Grounding time = 0.449724s, Solving time = 0.072217s, Total time = 0.521941s
6 : Statistics :: Grounding time = 0.448425s, Solving time = 0.056864s, Total time = 0.505289s
7 : Statistics :: Grounding time = 0.463918s, Solving time = 0.084492s, Total time = 0.548410s
8 : Statistics :: Grounding time = 0.483958s, Solving time = 0.126197s, Total time = 0.610156s
9 : Statistics :: Grounding time = 0.474810s, Solving time = 0.075444s, Total time = 0.550254s
10 : Statistics :: Grounding time = 0.482448s, Solving time = 0.146162s, Total time = 0.628610s
11 : Statistics :: Grounding time = 0.481007s, Solving time = 0.167370s, Total time = 0.648377s
12 : Statistics :: Grounding time = 0.493755s, Solving time = 0.228285s, Total time = 0.722040s
13 : Statistics :: Grounding time = 0.491183s, Solving time = 0.201400s, Total time = 0.692583s
14 : Statistics :: Grounding time = 0.489319s, Solving time = 0.439805s, Total time = 0.929124s
15 : Statistics :: Grounding time = 0.499198s, Solving time = 0.317289s, Total time = 0.816487s
16 : Statistics :: Grounding time = 0.511906s, Solving time = 0.325426s, Total time = 0.837331s
17 : Statistics :: Grounding time = 0.518941s, Solving time = 0.737507s, Total time = 1.256448s
18 : Statistics :: Grounding time = 0.524232s, Solving time = 0.730028s, Total time = 1.254260s
19 : Statistics :: Grounding time = 0.531560s, Solving time = 0.295355s, Total time = 0.826915s
20 : Statistics :: Grounding time = 0.537210s, Solving time = 0.530982s, Total time = 1.068192s
21 : Statistics :: Grounding time = 0.557996s, Solving time = 0.937974s, Total time = 1.495970s
22 : Statistics :: Grounding time = 0.563550s, Solving time = 1.391549s, Total time = 1.955099s
23 : Statistics :: Grounding time = 0.579507s, Solving time = 1.233278s, Total time = 1.812785s
24 : Statistics :: Grounding time = 0.608774s, Solving time = 0.969956s, Total time = 1.578730s
25 : Statistics :: Grounding time = 0.586568s, Solving time = 1.262455s, Total time = 1.849023s
26 : Statistics :: Grounding time = 0.606006s, Solving time = 0.232431s, Total time = 0.838438s
27 : Statistics :: Grounding time = 0.613262s, Solving time = 3.232871s, Total time = 3.846133s
28 : Statistics :: Grounding time = 0.625098s, Solving time = 2.561295s, Total time = 3.186393s
29 : Statistics :: Grounding time = 0.652534s, Solving time = 4.670074s, Total time = 5.322607s

[06-02-2021_15-44-10] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 20.348627s, Solving time = 22.449098s, Total time = 43.588604s
Model :: Total atoms = 15404, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-44-10] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,retracted),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),25)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_1,(block,6)),36)
occurs(1,talos,configure(manipulator_limb_1,retracted),37)
occurs(1,talos,move((puzzle_room,0)),38)
occurs(1,talos,move((hallway,2)),39)
occurs(1,talos,move((hallway,1)),40)
occurs(1,talos,move((hallway,0)),41)
occurs(1,talos,move((store_room,1)),42)
occurs(1,talos,move((store_room,0)),43)
occurs(1,talos,configure(manipulator_limb_1,extended),44)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),45)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),46)
occurs(1,talos,configure(manipulator_limb_1,retracted),47)
occurs(1,talos,move((store_room,1)),48)
occurs(1,talos,move((hallway,0)),49)
occurs(1,talos,move((hallway,1)),50)
occurs(1,talos,move((hallway,2)),51)
occurs(1,talos,move((puzzle_room,0)),52)
occurs(1,talos,move((puzzle_room,1)),53)
occurs(1,talos,configure(manipulator_limb_1,extended),54)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),55)
occurs(1,talos,configure(manipulator_limb_2,extended),56)
occurs(1,talos,release(manipulator_end_1,(block,5)),57)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),58)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),59)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),60)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),61)
occurs(1,talos,release(manipulator_end_1,(block,3)),62)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),63)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),64)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),65)
occurs(1,talos,release(manipulator_end_1,(block,2)),66)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),67)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),68)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),69)

[06-02-2021_15-44-10] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.421547s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    10.318766s : Steps =    42 : Actions =    42 |  
  | Level 1 : Time =    43.588604s : Steps =    69 : Actions =    69 |  
  ====================================================================  

[06-02-2021_15-44-10] INFO :: Experiment >> 

      ================================================      
           Experimental run 15 : Time 57.961648s            
      ================================================      

[06-02-2021_15-44-10] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-44-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-44-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-44-10] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Instantiated.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Program building started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Program building completed.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding base program parts.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.013841s.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving base program parts.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.002748s.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental solving started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.039206s.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.006257s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.030654s.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.003591s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.031177s.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.004419s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.034986s.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.005890s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.036035s.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.005948s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.037381s.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.007023s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.038248s.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.008061s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.037761s.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.009682s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.038509s.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.008425s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.040969s.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.013107s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-44-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.039323s.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.017948s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.041517s.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.027386s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.040553s.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.042579s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.043609s.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.079380s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.079161s.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.115616s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.083267s.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.158505s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.081487s.

[06-02-2021_15-44-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.265066s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-44-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-44-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.084553s.

[06-02-2021_15-44-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.478118s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-44-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-44-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.095610s.

[06-02-2021_15-44-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.689298s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.093735s.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Model found:
Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.152593s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental solving completed in 3.231091s because STOP_CON_REACHED.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.061581s, Solving time = 2.101640s, Total time = 3.231091s
Final Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039206s, Solving time = 0.006257s, Total time = 0.045463s
2 : Statistics :: Grounding time = 0.030654s, Solving time = 0.003591s, Total time = 0.034245s
3 : Statistics :: Grounding time = 0.031177s, Solving time = 0.004419s, Total time = 0.035595s
4 : Statistics :: Grounding time = 0.034986s, Solving time = 0.005890s, Total time = 0.040876s
5 : Statistics :: Grounding time = 0.036035s, Solving time = 0.005948s, Total time = 0.041983s
6 : Statistics :: Grounding time = 0.037381s, Solving time = 0.007023s, Total time = 0.044404s
7 : Statistics :: Grounding time = 0.038248s, Solving time = 0.008061s, Total time = 0.046308s
8 : Statistics :: Grounding time = 0.037761s, Solving time = 0.009682s, Total time = 0.047444s
9 : Statistics :: Grounding time = 0.038509s, Solving time = 0.008425s, Total time = 0.046934s
10 : Statistics :: Grounding time = 0.040969s, Solving time = 0.013107s, Total time = 0.054076s
11 : Statistics :: Grounding time = 0.039323s, Solving time = 0.017948s, Total time = 0.057272s
12 : Statistics :: Grounding time = 0.041517s, Solving time = 0.027386s, Total time = 0.068903s
13 : Statistics :: Grounding time = 0.040553s, Solving time = 0.042579s, Total time = 0.083132s
14 : Statistics :: Grounding time = 0.043609s, Solving time = 0.079380s, Total time = 0.122989s
15 : Statistics :: Grounding time = 0.079161s, Solving time = 0.115616s, Total time = 0.194777s
16 : Statistics :: Grounding time = 0.083267s, Solving time = 0.158505s, Total time = 0.241772s
17 : Statistics :: Grounding time = 0.081487s, Solving time = 0.265066s, Total time = 0.346553s
18 : Statistics :: Grounding time = 0.084553s, Solving time = 0.478118s, Total time = 0.562671s
19 : Statistics :: Grounding time = 0.095610s, Solving time = 0.689298s, Total time = 0.784908s
20 : Statistics :: Grounding time = 0.093735s, Solving time = 0.152593s, Total time = 0.246328s

[06-02-2021_15-44-13] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.061581s, Solving time = 2.101640s, Total time = 3.231091s
Model :: Total atoms = 3699, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-44-13] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,release(manipulator_arm_2,(block,3)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),10)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),11)
occurs(3,talos,release(manipulator_arm_2,(block,2)),12)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),13)
occurs(3,talos,release(manipulator_arm_1,(block,5)),14)
occurs(3,talos,move(store_room),15)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),16)
occurs(3,talos,move(puzzle_room),17)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),18)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),19)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),20)

[06-02-2021_15-44-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-44-13] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Instantiated.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Program building started.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Program building completed.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding base program parts.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.016342s.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving base program parts.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.002509s.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental solving started.

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-44-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.709186s.

[06-02-2021_15-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.260723s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.071888s.

[06-02-2021_15-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.018489s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-44-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.072892s.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.018322s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.092336s.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.024724s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.077250s.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.024939s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.076067s.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.027984s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.074922s.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.029906s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.078507s.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.028810s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.079988s.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.037628s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.080689s.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.042873s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.082452s.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.041080s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-44-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.083169s.

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.060839s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.085534s.

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.119376s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.084975s.

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.033721s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.086953s.

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.049922s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.088102s.

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.150558s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-44-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-44-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.219520s.

[06-02-2021_15-44-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.372401s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-44-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-44-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.229849s.

[06-02-2021_15-44-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.671460s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-44-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-44-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.235704s.

[06-02-2021_15-44-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 1.072557s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-44-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-44-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.230103s.

[06-02-2021_15-44-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 2.340632s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.242125s.

[06-02-2021_15-44-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 2.698370s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.244414s.

[06-02-2021_15-44-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 3.941175s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.252597s.

[06-02-2021_15-44-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 4.013350s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-44-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.254262s.

[06-02-2021_15-44-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 2.795133s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-44-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.258259s.

[06-02-2021_15-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 2.842247s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.259238s.

[06-02-2021_15-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Model found:
Model :: Total atoms = 9748, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.665855s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-44-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental solving completed in 27.088650s because STOP_CON_REACHED.

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.367324s, Solving time = 22.385583s, Total time = 27.088650s
Final Model :: Total atoms = 9748, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.709186s, Solving time = 0.260723s, Total time = 0.969909s
2 : Statistics :: Grounding time = 0.071888s, Solving time = 0.018489s, Total time = 0.090377s
3 : Statistics :: Grounding time = 0.072892s, Solving time = 0.018322s, Total time = 0.091214s
4 : Statistics :: Grounding time = 0.092336s, Solving time = 0.024724s, Total time = 0.117060s
5 : Statistics :: Grounding time = 0.077250s, Solving time = 0.024939s, Total time = 0.102189s
6 : Statistics :: Grounding time = 0.076067s, Solving time = 0.027984s, Total time = 0.104051s
7 : Statistics :: Grounding time = 0.074922s, Solving time = 0.029906s, Total time = 0.104828s
8 : Statistics :: Grounding time = 0.078507s, Solving time = 0.028810s, Total time = 0.107317s
9 : Statistics :: Grounding time = 0.079988s, Solving time = 0.037628s, Total time = 0.117616s
10 : Statistics :: Grounding time = 0.080689s, Solving time = 0.042873s, Total time = 0.123561s
11 : Statistics :: Grounding time = 0.082452s, Solving time = 0.041080s, Total time = 0.123532s
12 : Statistics :: Grounding time = 0.083169s, Solving time = 0.060839s, Total time = 0.144008s
13 : Statistics :: Grounding time = 0.085534s, Solving time = 0.119376s, Total time = 0.204910s
14 : Statistics :: Grounding time = 0.084975s, Solving time = 0.033721s, Total time = 0.118696s
15 : Statistics :: Grounding time = 0.086953s, Solving time = 0.049922s, Total time = 0.136875s
16 : Statistics :: Grounding time = 0.088102s, Solving time = 0.150558s, Total time = 0.238659s
17 : Statistics :: Grounding time = 0.219520s, Solving time = 0.372401s, Total time = 0.591921s
18 : Statistics :: Grounding time = 0.229849s, Solving time = 0.671460s, Total time = 0.901309s
19 : Statistics :: Grounding time = 0.235704s, Solving time = 1.072557s, Total time = 1.308262s
20 : Statistics :: Grounding time = 0.230103s, Solving time = 2.340632s, Total time = 2.570736s
21 : Statistics :: Grounding time = 0.242125s, Solving time = 2.698370s, Total time = 2.940495s
22 : Statistics :: Grounding time = 0.244414s, Solving time = 3.941175s, Total time = 4.185589s
23 : Statistics :: Grounding time = 0.252597s, Solving time = 4.013350s, Total time = 4.265947s
24 : Statistics :: Grounding time = 0.254262s, Solving time = 2.795133s, Total time = 3.049395s
25 : Statistics :: Grounding time = 0.258259s, Solving time = 2.842247s, Total time = 3.100506s
26 : Statistics :: Grounding time = 0.259238s, Solving time = 0.665855s, Total time = 0.925094s

[06-02-2021_15-44-41] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.367324s, Solving time = 22.385583s, Total time = 27.088650s
Model :: Total atoms = 9748, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-44-41] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,6)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),22)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),23)
occurs(2,talos,configure(manipulator_arm_1,extended),24)
occurs(2,talos,release(manipulator_arm_2,(block,3)),25)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),26)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),27)
occurs(2,talos,release(manipulator_arm_1,(block,5)),28)
occurs(2,talos,configure(manipulator_arm_1,retracted),29)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),30)
occurs(2,talos,release(manipulator_arm_2,(block,2)),31)
occurs(2,talos,configure(manipulator_arm_2,retracted),32)
occurs(2,talos,move(hallway),33)
occurs(2,talos,move(store_room),34)
occurs(2,talos,configure(manipulator_arm_1,extended),35)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),36)
occurs(2,talos,configure(manipulator_arm_1,retracted),37)
occurs(2,talos,move(hallway),38)
occurs(2,talos,move(puzzle_room),39)
occurs(2,talos,configure(manipulator_arm_1,extended),40)
occurs(2,talos,configure(manipulator_arm_2,extended),41)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),42)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),43)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),44)

[06-02-2021_15-44-41] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-44-41] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Instantiated.

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Program building started.

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Program building completed.

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding base program parts.

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.016110s.

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving base program parts.

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.002973s.

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental solving started.

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-44-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 6.001175s.

[06-02-2021_15-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 1.318836s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.489422s.

[06-02-2021_15-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.055417s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.455274s.

[06-02-2021_15-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.063208s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-44-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.463713s.

[06-02-2021_15-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.069238s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.478753s.

[06-02-2021_15-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.077018s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-44-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.467229s.

[06-02-2021_15-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.113060s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.478297s.

[06-02-2021_15-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.062756s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-44-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.494266s.

[06-02-2021_15-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.070661s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.493109s.

[06-02-2021_15-44-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.085544s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.495781s.

[06-02-2021_15-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.127594s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-44-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.503762s.

[06-02-2021_15-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.336984s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-44-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.511000s.

[06-02-2021_15-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.083803s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.501296s.

[06-02-2021_15-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.209820s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-44-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.513628s.

[06-02-2021_15-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.285363s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.525376s.

[06-02-2021_15-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.417892s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-44-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.525650s.

[06-02-2021_15-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.170342s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-44-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.531163s.

[06-02-2021_15-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.300160s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.546857s.

[06-02-2021_15-44-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.567769s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-45-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-45-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.551156s.

[06-02-2021_15-45-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.631525s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-45-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-45-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.563935s.

[06-02-2021_15-45-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 1.018474s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.588316s.

[06-02-2021_15-45-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 1.295828s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.563238s.

[06-02-2021_15-45-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 1.682475s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.614144s.

[06-02-2021_15-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.800102s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.585094s.

[06-02-2021_15-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.501677s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.593858s.

[06-02-2021_15-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 3.261013s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.611740s.

[06-02-2021_15-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 1.045491s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-45-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.629723s.

[06-02-2021_15-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 2.343591s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.626801s.

[06-02-2021_15-45-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 9.924791s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.733062s.

[06-02-2021_15-45-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 10.395378s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [30]:
Current step bound = 72
End step min = 0
End step max = None

[06-02-2021_15-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 0]), ('conformance_module', [72])].

[06-02-2021_15-45-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.641196s.

[06-02-2021_15-45-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-45-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 14.077932s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-45-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [31]:
Current step bound = 73
End step min = 0
End step max = None

[06-02-2021_15-45-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 0]), ('conformance_module', [73])].

[06-02-2021_15-45-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.664259s.

[06-02-2021_15-45-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Model found:
Model :: Total atoms = 16183, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 22.103752s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental solving completed in 96.970037s because STOP_CON_REACHED.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 22.458386s, Solving time = 73.500468s, Total time = 96.970037s
Final Model :: Total atoms = 16183, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental statistics:
1 : Statistics :: Grounding time = 6.001175s, Solving time = 1.318836s, Total time = 7.320011s
2 : Statistics :: Grounding time = 0.489422s, Solving time = 0.055417s, Total time = 0.544839s
3 : Statistics :: Grounding time = 0.455274s, Solving time = 0.063208s, Total time = 0.518482s
4 : Statistics :: Grounding time = 0.463713s, Solving time = 0.069238s, Total time = 0.532951s
5 : Statistics :: Grounding time = 0.478753s, Solving time = 0.077018s, Total time = 0.555771s
6 : Statistics :: Grounding time = 0.467229s, Solving time = 0.113060s, Total time = 0.580289s
7 : Statistics :: Grounding time = 0.478297s, Solving time = 0.062756s, Total time = 0.541053s
8 : Statistics :: Grounding time = 0.494266s, Solving time = 0.070661s, Total time = 0.564928s
9 : Statistics :: Grounding time = 0.493109s, Solving time = 0.085544s, Total time = 0.578653s
10 : Statistics :: Grounding time = 0.495781s, Solving time = 0.127594s, Total time = 0.623375s
11 : Statistics :: Grounding time = 0.503762s, Solving time = 0.336984s, Total time = 0.840746s
12 : Statistics :: Grounding time = 0.511000s, Solving time = 0.083803s, Total time = 0.594803s
13 : Statistics :: Grounding time = 0.501296s, Solving time = 0.209820s, Total time = 0.711116s
14 : Statistics :: Grounding time = 0.513628s, Solving time = 0.285363s, Total time = 0.798992s
15 : Statistics :: Grounding time = 0.525376s, Solving time = 0.417892s, Total time = 0.943268s
16 : Statistics :: Grounding time = 0.525650s, Solving time = 0.170342s, Total time = 0.695992s
17 : Statistics :: Grounding time = 0.531163s, Solving time = 0.300160s, Total time = 0.831323s
18 : Statistics :: Grounding time = 0.546857s, Solving time = 0.567769s, Total time = 1.114626s
19 : Statistics :: Grounding time = 0.551156s, Solving time = 0.631525s, Total time = 1.182682s
20 : Statistics :: Grounding time = 0.563935s, Solving time = 1.018474s, Total time = 1.582409s
21 : Statistics :: Grounding time = 0.588316s, Solving time = 1.295828s, Total time = 1.884144s
22 : Statistics :: Grounding time = 0.563238s, Solving time = 1.682475s, Total time = 2.245713s
23 : Statistics :: Grounding time = 0.614144s, Solving time = 0.800102s, Total time = 1.414246s
24 : Statistics :: Grounding time = 0.585094s, Solving time = 0.501677s, Total time = 1.086771s
25 : Statistics :: Grounding time = 0.593858s, Solving time = 3.261013s, Total time = 3.854872s
26 : Statistics :: Grounding time = 0.611740s, Solving time = 1.045491s, Total time = 1.657231s
27 : Statistics :: Grounding time = 0.629723s, Solving time = 2.343591s, Total time = 2.973315s
28 : Statistics :: Grounding time = 0.626801s, Solving time = 9.924791s, Total time = 10.551592s
29 : Statistics :: Grounding time = 0.733062s, Solving time = 10.395378s, Total time = 11.128441s
30 : Statistics :: Grounding time = 0.641196s, Solving time = 14.077932s, Total time = 14.719128s
31 : Statistics :: Grounding time = 0.664259s, Solving time = 22.103752s, Total time = 22.768011s

[06-02-2021_15-46-18] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 22.458386s, Solving time = 73.500468s, Total time = 96.970037s
Model :: Total atoms = 16183, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-46-18] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_2,(block,6)),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),40)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),41)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),42)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),43)
occurs(1,talos,release(manipulator_end_2,(block,3)),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),45)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),46)
occurs(1,talos,release(manipulator_end_1,(block,5)),47)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),48)
occurs(1,talos,release(manipulator_end_2,(block,2)),49)
occurs(1,talos,configure(manipulator_limb_2,retracted),50)
occurs(1,talos,configure(manipulator_limb_1,retracted),51)
occurs(1,talos,move((puzzle_room,0)),52)
occurs(1,talos,move((hallway,2)),53)
occurs(1,talos,move((hallway,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((store_room,1)),56)
occurs(1,talos,move((store_room,0)),57)
occurs(1,talos,configure(manipulator_limb_1,extended),58)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),59)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),60)
occurs(1,talos,configure(manipulator_limb_1,retracted),61)
occurs(1,talos,move((store_room,1)),62)
occurs(1,talos,move((hallway,0)),63)
occurs(1,talos,move((hallway,1)),64)
occurs(1,talos,move((hallway,2)),65)
occurs(1,talos,move((puzzle_room,0)),66)
occurs(1,talos,move((puzzle_room,1)),67)
occurs(1,talos,configure(manipulator_limb_1,extended),68)
occurs(1,talos,configure(manipulator_limb_2,extended),69)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),70)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),71)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),72)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),73)

[06-02-2021_15-46-18] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.231091s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    27.088650s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    96.970037s : Steps =    73 : Actions =    73 |  
  ====================================================================  

[06-02-2021_15-46-18] INFO :: Experiment >> 

      ================================================      
           Experimental run 16 : Time 128.031043s           
      ================================================      

[06-02-2021_15-46-18] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-46-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-46-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-46-18] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Instantiated.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Program building started.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Program building completed.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding base program parts.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.013852s.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving base program parts.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.002232s.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental solving started.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.040370s.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.005732s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.030931s.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.002703s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.031574s.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.004848s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.035670s.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.006652s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.038070s.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.006896s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.037016s.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.007623s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.038366s.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.007868s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.038318s.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.009391s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.038248s.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.009475s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.040601s.

[06-02-2021_15-46-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.013969s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.039276s.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.019433s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.041698s.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.030702s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.039701s.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.041521s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.042312s.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.067612s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.043436s.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.082795s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.077425s.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.151639s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.083082s.

[06-02-2021_15-46-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.232368s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.086004s.

[06-02-2021_15-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.339866s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.092522s.

[06-02-2021_15-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.743371s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.092346s.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Model found:
Model :: Total atoms = 3697, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.030152s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental solving completed in 2.904073s because STOP_CON_REACHED.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.020817s, Solving time = 1.816848s, Total time = 2.904073s
Final Model :: Total atoms = 3697, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040370s, Solving time = 0.005732s, Total time = 0.046102s
2 : Statistics :: Grounding time = 0.030931s, Solving time = 0.002703s, Total time = 0.033634s
3 : Statistics :: Grounding time = 0.031574s, Solving time = 0.004848s, Total time = 0.036422s
4 : Statistics :: Grounding time = 0.035670s, Solving time = 0.006652s, Total time = 0.042322s
5 : Statistics :: Grounding time = 0.038070s, Solving time = 0.006896s, Total time = 0.044965s
6 : Statistics :: Grounding time = 0.037016s, Solving time = 0.007623s, Total time = 0.044639s
7 : Statistics :: Grounding time = 0.038366s, Solving time = 0.007868s, Total time = 0.046234s
8 : Statistics :: Grounding time = 0.038318s, Solving time = 0.009391s, Total time = 0.047709s
9 : Statistics :: Grounding time = 0.038248s, Solving time = 0.009475s, Total time = 0.047723s
10 : Statistics :: Grounding time = 0.040601s, Solving time = 0.013969s, Total time = 0.054570s
11 : Statistics :: Grounding time = 0.039276s, Solving time = 0.019433s, Total time = 0.058709s
12 : Statistics :: Grounding time = 0.041698s, Solving time = 0.030702s, Total time = 0.072400s
13 : Statistics :: Grounding time = 0.039701s, Solving time = 0.041521s, Total time = 0.081222s
14 : Statistics :: Grounding time = 0.042312s, Solving time = 0.067612s, Total time = 0.109924s
15 : Statistics :: Grounding time = 0.043436s, Solving time = 0.082795s, Total time = 0.126231s
16 : Statistics :: Grounding time = 0.077425s, Solving time = 0.151639s, Total time = 0.229064s
17 : Statistics :: Grounding time = 0.083082s, Solving time = 0.232368s, Total time = 0.315450s
18 : Statistics :: Grounding time = 0.086004s, Solving time = 0.339866s, Total time = 0.425870s
19 : Statistics :: Grounding time = 0.092522s, Solving time = 0.743371s, Total time = 0.835893s
20 : Statistics :: Grounding time = 0.092346s, Solving time = 0.030152s, Total time = 0.122498s

[06-02-2021_15-46-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.020817s, Solving time = 1.816848s, Total time = 2.904073s
Model :: Total atoms = 3697, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-46-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),8)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_2,(block,5)),10)
occurs(3,talos,release(manipulator_arm_1,(block,3)),11)
occurs(3,talos,move(store_room),12)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),13)
occurs(3,talos,move(puzzle_room),14)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),15)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),16)
occurs(3,talos,release(manipulator_arm_2,(block,2)),17)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),18)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),19)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),20)

[06-02-2021_15-46-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-46-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Instantiated.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Program building started.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Program building completed.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding base program parts.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.014631s.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving base program parts.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.002202s.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental solving started.

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.713471s.

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.258893s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.072950s.

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.019736s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.071637s.

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.018183s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.073990s.

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.027070s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.082361s.

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.024501s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-46-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.076227s.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.025917s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.077209s.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.021865s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.078390s.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.025725s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.078171s.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.049689s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.080489s.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.041725s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.080742s.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.030008s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.082785s.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.039561s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.089176s.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.079969s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.092364s.

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.175708s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.085736s.

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.035628s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.089234s.

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.148163s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.222533s.

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.116141s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.225231s.

[06-02-2021_15-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.279363s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.233414s.

[06-02-2021_15-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.193146s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.232624s.

[06-02-2021_15-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.210773s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.241454s.

[06-02-2021_15-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.880727s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.240714s.

[06-02-2021_15-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 1.082445s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.252287s.

[06-02-2021_15-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 1.314056s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.251505s.

[06-02-2021_15-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 1.443389s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.258548s.

[06-02-2021_15-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 1.231902s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.262325s.

[06-02-2021_15-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Model found:
Model :: Total atoms = 9742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.783003s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental solving completed in 13.199969s because STOP_CON_REACHED.

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.360197s, Solving time = 8.559486s, Total time = 13.199969s
Final Model :: Total atoms = 9742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.713471s, Solving time = 0.258893s, Total time = 0.972364s
2 : Statistics :: Grounding time = 0.072950s, Solving time = 0.019736s, Total time = 0.092686s
3 : Statistics :: Grounding time = 0.071637s, Solving time = 0.018183s, Total time = 0.089821s
4 : Statistics :: Grounding time = 0.073990s, Solving time = 0.027070s, Total time = 0.101060s
5 : Statistics :: Grounding time = 0.082361s, Solving time = 0.024501s, Total time = 0.106862s
6 : Statistics :: Grounding time = 0.076227s, Solving time = 0.025917s, Total time = 0.102145s
7 : Statistics :: Grounding time = 0.077209s, Solving time = 0.021865s, Total time = 0.099074s
8 : Statistics :: Grounding time = 0.078390s, Solving time = 0.025725s, Total time = 0.104115s
9 : Statistics :: Grounding time = 0.078171s, Solving time = 0.049689s, Total time = 0.127860s
10 : Statistics :: Grounding time = 0.080489s, Solving time = 0.041725s, Total time = 0.122214s
11 : Statistics :: Grounding time = 0.080742s, Solving time = 0.030008s, Total time = 0.110750s
12 : Statistics :: Grounding time = 0.082785s, Solving time = 0.039561s, Total time = 0.122346s
13 : Statistics :: Grounding time = 0.089176s, Solving time = 0.079969s, Total time = 0.169145s
14 : Statistics :: Grounding time = 0.092364s, Solving time = 0.175708s, Total time = 0.268071s
15 : Statistics :: Grounding time = 0.085736s, Solving time = 0.035628s, Total time = 0.121363s
16 : Statistics :: Grounding time = 0.089234s, Solving time = 0.148163s, Total time = 0.237397s
17 : Statistics :: Grounding time = 0.222533s, Solving time = 0.116141s, Total time = 0.338674s
18 : Statistics :: Grounding time = 0.225231s, Solving time = 0.279363s, Total time = 0.504593s
19 : Statistics :: Grounding time = 0.233414s, Solving time = 0.193146s, Total time = 0.426559s
20 : Statistics :: Grounding time = 0.232624s, Solving time = 0.210773s, Total time = 0.443397s
21 : Statistics :: Grounding time = 0.241454s, Solving time = 0.880727s, Total time = 1.122181s
22 : Statistics :: Grounding time = 0.240714s, Solving time = 1.082445s, Total time = 1.323160s
23 : Statistics :: Grounding time = 0.252287s, Solving time = 1.314056s, Total time = 1.566343s
24 : Statistics :: Grounding time = 0.251505s, Solving time = 1.443389s, Total time = 1.694894s
25 : Statistics :: Grounding time = 0.258548s, Solving time = 1.231902s, Total time = 1.490449s
26 : Statistics :: Grounding time = 0.262325s, Solving time = 0.783003s, Total time = 1.045328s

[06-02-2021_15-46-34] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.360197s, Solving time = 8.559486s, Total time = 13.199969s
Model :: Total atoms = 9742, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-46-34] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),14)
occurs(2,talos,configure(manipulator_arm_2,retracted),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,6)),21)
occurs(2,talos,configure(manipulator_arm_2,extended),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_2,(block,5)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),25)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),26)
occurs(2,talos,release(manipulator_arm_1,(block,3)),27)
occurs(2,talos,configure(manipulator_arm_1,retracted),28)
occurs(2,talos,configure(manipulator_arm_2,retracted),29)
occurs(2,talos,move(hallway),30)
occurs(2,talos,move(store_room),31)
occurs(2,talos,configure(manipulator_arm_1,extended),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),33)
occurs(2,talos,configure(manipulator_arm_1,retracted),34)
occurs(2,talos,move(hallway),35)
occurs(2,talos,move(puzzle_room),36)
occurs(2,talos,configure(manipulator_arm_1,extended),37)
occurs(2,talos,configure(manipulator_arm_2,extended),38)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),39)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),40)
occurs(2,talos,release(manipulator_arm_2,(block,2)),41)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),42)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),43)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),44)

[06-02-2021_15-46-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-46-34] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Instantiated.

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Program building started.

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Program building completed.

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding base program parts.

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.017717s.

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving base program parts.

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.002563s.

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental solving started.

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-46-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 6.023471s.

[06-02-2021_15-46-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 1.346942s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-46-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-46-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.449366s.

[06-02-2021_15-46-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.056167s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-46-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.462027s.

[06-02-2021_15-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.060275s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.464946s.

[06-02-2021_15-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.055537s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-46-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.477733s.

[06-02-2021_15-46-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.073428s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-46-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-46-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.475592s.

[06-02-2021_15-46-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.091122s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-46-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-46-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.487303s.

[06-02-2021_15-46-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.075549s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-46-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.493207s.

[06-02-2021_15-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.091552s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.503505s.

[06-02-2021_15-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.147822s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.517910s.

[06-02-2021_15-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.091507s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-46-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.501148s.

[06-02-2021_15-46-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.102542s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-46-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-46-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.509190s.

[06-02-2021_15-46-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.221850s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-46-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-46-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.522188s.

[06-02-2021_15-46-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.343789s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-46-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-46-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.528018s.

[06-02-2021_15-46-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.292660s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-46-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.527592s.

[06-02-2021_15-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.337123s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-46-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.522726s.

[06-02-2021_15-46-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.076304s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-46-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-46-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.539460s.

[06-02-2021_15-46-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.590814s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-46-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-46-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.545895s.

[06-02-2021_15-46-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.420852s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-46-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-46-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.565160s.

[06-02-2021_15-46-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 1.256595s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-46-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-46-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.569976s.

[06-02-2021_15-46-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 1.404112s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-46-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-46-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.571389s.

[06-02-2021_15-46-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.270452s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.591179s.

[06-02-2021_15-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.586915s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.595800s.

[06-02-2021_15-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-47-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 1.076495s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-47-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-47-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.604280s.

[06-02-2021_15-47-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-47-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 3.716112s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-47-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-47-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.608006s.

[06-02-2021_15-47-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-47-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 1.435291s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-47-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-47-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.624681s.

[06-02-2021_15-47-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-47-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 2.392323s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-47-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-47-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.630615s.

[06-02-2021_15-47-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-47-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 8.258506s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-47-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-47-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.651034s.

[06-02-2021_15-47-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-47-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 2.169656s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-47-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-47-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.646207s.

[06-02-2021_15-47-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-47-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 5.060962s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [30]:
Current step bound = 72
End step min = 0
End step max = None

[06-02-2021_15-47-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [72]), ('domain_rules', [72]), ('state_module', [72]), ('plan_module', [72, 0]), ('conformance_module', [72])].

[06-02-2021_15-47-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.653868s.

[06-02-2021_15-47-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-47-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 15.159335s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [31]:
Current step bound = 73
End step min = 0
End step max = None

[06-02-2021_15-47-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [73]), ('domain_rules', [73]), ('state_module', [73]), ('plan_module', [73, 0]), ('conformance_module', [73])].

[06-02-2021_15-47-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.667142s.

[06-02-2021_15-47-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Model found:
Model :: Total atoms = 16182, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 6.854475s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental solving completed in 77.626722s because STOP_CON_REACHED.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 22.548331s, Solving time = 54.119627s, Total time = 77.626722s
Final Model :: Total atoms = 16182, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental statistics:
1 : Statistics :: Grounding time = 6.023471s, Solving time = 1.346942s, Total time = 7.370413s
2 : Statistics :: Grounding time = 0.449366s, Solving time = 0.056167s, Total time = 0.505533s
3 : Statistics :: Grounding time = 0.462027s, Solving time = 0.060275s, Total time = 0.522302s
4 : Statistics :: Grounding time = 0.464946s, Solving time = 0.055537s, Total time = 0.520483s
5 : Statistics :: Grounding time = 0.477733s, Solving time = 0.073428s, Total time = 0.551161s
6 : Statistics :: Grounding time = 0.475592s, Solving time = 0.091122s, Total time = 0.566714s
7 : Statistics :: Grounding time = 0.487303s, Solving time = 0.075549s, Total time = 0.562852s
8 : Statistics :: Grounding time = 0.493207s, Solving time = 0.091552s, Total time = 0.584759s
9 : Statistics :: Grounding time = 0.503505s, Solving time = 0.147822s, Total time = 0.651327s
10 : Statistics :: Grounding time = 0.517910s, Solving time = 0.091507s, Total time = 0.609417s
11 : Statistics :: Grounding time = 0.501148s, Solving time = 0.102542s, Total time = 0.603690s
12 : Statistics :: Grounding time = 0.509190s, Solving time = 0.221850s, Total time = 0.731040s
13 : Statistics :: Grounding time = 0.522188s, Solving time = 0.343789s, Total time = 0.865977s
14 : Statistics :: Grounding time = 0.528018s, Solving time = 0.292660s, Total time = 0.820678s
15 : Statistics :: Grounding time = 0.527592s, Solving time = 0.337123s, Total time = 0.864716s
16 : Statistics :: Grounding time = 0.522726s, Solving time = 0.076304s, Total time = 0.599031s
17 : Statistics :: Grounding time = 0.539460s, Solving time = 0.590814s, Total time = 1.130274s
18 : Statistics :: Grounding time = 0.545895s, Solving time = 0.420852s, Total time = 0.966746s
19 : Statistics :: Grounding time = 0.565160s, Solving time = 1.256595s, Total time = 1.821755s
20 : Statistics :: Grounding time = 0.569976s, Solving time = 1.404112s, Total time = 1.974088s
21 : Statistics :: Grounding time = 0.571389s, Solving time = 0.270452s, Total time = 0.841841s
22 : Statistics :: Grounding time = 0.591179s, Solving time = 0.586915s, Total time = 1.178093s
23 : Statistics :: Grounding time = 0.595800s, Solving time = 1.076495s, Total time = 1.672294s
24 : Statistics :: Grounding time = 0.604280s, Solving time = 3.716112s, Total time = 4.320392s
25 : Statistics :: Grounding time = 0.608006s, Solving time = 1.435291s, Total time = 2.043297s
26 : Statistics :: Grounding time = 0.624681s, Solving time = 2.392323s, Total time = 3.017004s
27 : Statistics :: Grounding time = 0.630615s, Solving time = 8.258506s, Total time = 8.889121s
28 : Statistics :: Grounding time = 0.651034s, Solving time = 2.169656s, Total time = 2.820690s
29 : Statistics :: Grounding time = 0.646207s, Solving time = 5.060962s, Total time = 5.707169s
30 : Statistics :: Grounding time = 0.653868s, Solving time = 15.159335s, Total time = 15.813203s
31 : Statistics :: Grounding time = 0.667142s, Solving time = 6.854475s, Total time = 7.521617s

[06-02-2021_15-47-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 22.548331s, Solving time = 54.119627s, Total time = 77.626722s
Model :: Total atoms = 16182, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-47-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),27)
occurs(1,talos,configure(manipulator_limb_1,retracted),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),37)
occurs(1,talos,release(manipulator_end_1,(block,6)),38)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),39)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),40)
occurs(1,talos,configure(manipulator_limb_2,extended),41)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),42)
occurs(1,talos,release(manipulator_end_2,(block,5)),43)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),44)
occurs(1,talos,release(manipulator_end_1,(block,3)),45)
occurs(1,talos,configure(manipulator_limb_1,retracted),46)
occurs(1,talos,configure(manipulator_limb_2,retracted),47)
occurs(1,talos,move((puzzle_room,0)),48)
occurs(1,talos,move((hallway,2)),49)
occurs(1,talos,move((hallway,1)),50)
occurs(1,talos,move((hallway,0)),51)
occurs(1,talos,move((store_room,1)),52)
occurs(1,talos,move((store_room,0)),53)
occurs(1,talos,configure(manipulator_limb_1,extended),54)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),55)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),56)
occurs(1,talos,configure(manipulator_limb_1,retracted),57)
occurs(1,talos,move((store_room,1)),58)
occurs(1,talos,move((hallway,0)),59)
occurs(1,talos,move((hallway,1)),60)
occurs(1,talos,move((hallway,2)),61)
occurs(1,talos,move((puzzle_room,0)),62)
occurs(1,talos,move((puzzle_room,1)),63)
occurs(1,talos,configure(manipulator_limb_2,extended),64)
occurs(1,talos,configure(manipulator_limb_1,extended),65)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),66)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),67)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),68)
occurs(1,talos,release(manipulator_end_2,(block,2)),69)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),70)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),71)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),72)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),73)

[06-02-2021_15-47-52] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     2.904073s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    13.199969s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    77.626722s : Steps =    73 : Actions =    73 |  
  ====================================================================  

[06-02-2021_15-47-52] INFO :: Experiment >> 

      ================================================      
           Experimental run 17 : Time 94.389392s            
      ================================================      

[06-02-2021_15-47-52] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-47-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-47-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-47-52] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Instantiated.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Program building started.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Program building completed.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding base program parts.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.014192s.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving base program parts.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.002300s.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental solving started.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.039853s.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.006666s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-47-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.031040s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.003652s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.030671s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.005080s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.035548s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.006473s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.035430s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.006324s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.036572s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.007292s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.038531s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.010440s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.038689s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.009231s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.038365s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.009778s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.040127s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.012685s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.039144s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.015655s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.041141s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.025143s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.043510s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.038749s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.046013s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.048808s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.074795s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.070946s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.077522s.

[06-02-2021_15-47-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.109520s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.081399s.

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.185251s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.084836s.

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.391229s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.093360s.

[06-02-2021_15-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.521444s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.091276s.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Model found:
Model :: Total atoms = 3689, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.294764s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental solving completed in 2.895752s because STOP_CON_REACHED.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.052013s, Solving time = 1.781432s, Total time = 2.895752s
Final Model :: Total atoms = 3689, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039853s, Solving time = 0.006666s, Total time = 0.046519s
2 : Statistics :: Grounding time = 0.031040s, Solving time = 0.003652s, Total time = 0.034692s
3 : Statistics :: Grounding time = 0.030671s, Solving time = 0.005080s, Total time = 0.035751s
4 : Statistics :: Grounding time = 0.035548s, Solving time = 0.006473s, Total time = 0.042021s
5 : Statistics :: Grounding time = 0.035430s, Solving time = 0.006324s, Total time = 0.041754s
6 : Statistics :: Grounding time = 0.036572s, Solving time = 0.007292s, Total time = 0.043864s
7 : Statistics :: Grounding time = 0.038531s, Solving time = 0.010440s, Total time = 0.048972s
8 : Statistics :: Grounding time = 0.038689s, Solving time = 0.009231s, Total time = 0.047920s
9 : Statistics :: Grounding time = 0.038365s, Solving time = 0.009778s, Total time = 0.048143s
10 : Statistics :: Grounding time = 0.040127s, Solving time = 0.012685s, Total time = 0.052812s
11 : Statistics :: Grounding time = 0.039144s, Solving time = 0.015655s, Total time = 0.054799s
12 : Statistics :: Grounding time = 0.041141s, Solving time = 0.025143s, Total time = 0.066284s
13 : Statistics :: Grounding time = 0.043510s, Solving time = 0.038749s, Total time = 0.082259s
14 : Statistics :: Grounding time = 0.046013s, Solving time = 0.048808s, Total time = 0.094821s
15 : Statistics :: Grounding time = 0.074795s, Solving time = 0.070946s, Total time = 0.145741s
16 : Statistics :: Grounding time = 0.077522s, Solving time = 0.109520s, Total time = 0.187042s
17 : Statistics :: Grounding time = 0.081399s, Solving time = 0.185251s, Total time = 0.266650s
18 : Statistics :: Grounding time = 0.084836s, Solving time = 0.391229s, Total time = 0.476065s
19 : Statistics :: Grounding time = 0.093360s, Solving time = 0.521444s, Total time = 0.614805s
20 : Statistics :: Grounding time = 0.091276s, Solving time = 0.294764s, Total time = 0.386040s

[06-02-2021_15-47-55] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.052013s, Solving time = 1.781432s, Total time = 2.895752s
Model :: Total atoms = 3689, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-47-55] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_1,(block,5)),8)
occurs(3,talos,move(store_room),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,move(puzzle_room),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),12)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),13)
occurs(3,talos,release(manipulator_arm_1,(block,3)),14)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),15)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),16)
occurs(3,talos,release(manipulator_arm_1,(block,2)),17)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),18)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),19)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),20)

[06-02-2021_15-47-55] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-47-55] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Instantiated.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Program building started.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Program building completed.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding base program parts.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.015121s.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving base program parts.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.002028s.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental solving started.

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.716947s.

[06-02-2021_15-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.260282s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.072071s.

[06-02-2021_15-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.018935s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.072956s.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.017889s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.074239s.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.022469s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.076150s.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.022793s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.078979s.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.025339s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.076625s.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.023703s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.078068s.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.030211s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.079718s.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.039139s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.081892s.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.032536s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.081990s.

[06-02-2021_15-47-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.055587s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.082753s.

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.061711s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.093408s.

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.080371s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.087626s.

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.032416s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.087871s.

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.140365s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.088831s.

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.125208s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-47-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-47-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.221589s.

[06-02-2021_15-47-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-47-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.207435s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-47-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-47-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-47-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.247691s.

[06-02-2021_15-47-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-48-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.412792s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-48-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-48-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.234230s.

[06-02-2021_15-48-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-48-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.533578s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-48-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-48-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.231225s.

[06-02-2021_15-48-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-48-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.763179s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-48-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-48-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.236594s.

[06-02-2021_15-48-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-48-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 1.121527s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-48-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-48-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.239886s.

[06-02-2021_15-48-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-48-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.933915s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-48-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-48-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.253368s.

[06-02-2021_15-48-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-48-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.957492s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-48-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-48-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.261836s.

[06-02-2021_15-48-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-48-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 1.941371s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-48-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-48-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.257994s.

[06-02-2021_15-48-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-48-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 1.957125s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-48-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-48-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.262860s.

[06-02-2021_15-48-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Model found:
Model :: Total atoms = 9720, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 1.617832s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental solving completed in 16.116905s because STOP_CON_REACHED.

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.392516s, Solving time = 11.437228s, Total time = 16.116905s
Final Model :: Total atoms = 9720, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.716947s, Solving time = 0.260282s, Total time = 0.977229s
2 : Statistics :: Grounding time = 0.072071s, Solving time = 0.018935s, Total time = 0.091007s
3 : Statistics :: Grounding time = 0.072956s, Solving time = 0.017889s, Total time = 0.090844s
4 : Statistics :: Grounding time = 0.074239s, Solving time = 0.022469s, Total time = 0.096708s
5 : Statistics :: Grounding time = 0.076150s, Solving time = 0.022793s, Total time = 0.098943s
6 : Statistics :: Grounding time = 0.078979s, Solving time = 0.025339s, Total time = 0.104318s
7 : Statistics :: Grounding time = 0.076625s, Solving time = 0.023703s, Total time = 0.100327s
8 : Statistics :: Grounding time = 0.078068s, Solving time = 0.030211s, Total time = 0.108279s
9 : Statistics :: Grounding time = 0.079718s, Solving time = 0.039139s, Total time = 0.118856s
10 : Statistics :: Grounding time = 0.081892s, Solving time = 0.032536s, Total time = 0.114427s
11 : Statistics :: Grounding time = 0.081990s, Solving time = 0.055587s, Total time = 0.137577s
12 : Statistics :: Grounding time = 0.082753s, Solving time = 0.061711s, Total time = 0.144464s
13 : Statistics :: Grounding time = 0.093408s, Solving time = 0.080371s, Total time = 0.173780s
14 : Statistics :: Grounding time = 0.087626s, Solving time = 0.032416s, Total time = 0.120042s
15 : Statistics :: Grounding time = 0.087871s, Solving time = 0.140365s, Total time = 0.228236s
16 : Statistics :: Grounding time = 0.088831s, Solving time = 0.125208s, Total time = 0.214038s
17 : Statistics :: Grounding time = 0.221589s, Solving time = 0.207435s, Total time = 0.429024s
18 : Statistics :: Grounding time = 0.247691s, Solving time = 0.412792s, Total time = 0.660483s
19 : Statistics :: Grounding time = 0.234230s, Solving time = 0.533578s, Total time = 0.767808s
20 : Statistics :: Grounding time = 0.231225s, Solving time = 0.763179s, Total time = 0.994405s
21 : Statistics :: Grounding time = 0.236594s, Solving time = 1.121527s, Total time = 1.358121s
22 : Statistics :: Grounding time = 0.239886s, Solving time = 0.933915s, Total time = 1.173801s
23 : Statistics :: Grounding time = 0.253368s, Solving time = 0.957492s, Total time = 1.210860s
24 : Statistics :: Grounding time = 0.261836s, Solving time = 1.941371s, Total time = 2.203208s
25 : Statistics :: Grounding time = 0.257994s, Solving time = 1.957125s, Total time = 2.215120s
26 : Statistics :: Grounding time = 0.262860s, Solving time = 1.617832s, Total time = 1.880693s

[06-02-2021_15-48-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.392516s, Solving time = 11.437228s, Total time = 16.116905s
Model :: Total atoms = 9720, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-48-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),14)
occurs(2,talos,configure(manipulator_arm_2,retracted),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,6)),21)
occurs(2,talos,configure(manipulator_arm_1,extended),22)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_1,(block,5)),24)
occurs(2,talos,configure(manipulator_arm_1,retracted),25)
occurs(2,talos,configure(manipulator_arm_2,retracted),26)
occurs(2,talos,move(hallway),27)
occurs(2,talos,move(store_room),28)
occurs(2,talos,configure(manipulator_arm_2,extended),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),30)
occurs(2,talos,configure(manipulator_arm_2,retracted),31)
occurs(2,talos,move(hallway),32)
occurs(2,talos,move(puzzle_room),33)
occurs(2,talos,configure(manipulator_arm_1,extended),34)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),35)
occurs(2,talos,configure(manipulator_arm_2,extended),36)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),37)
occurs(2,talos,release(manipulator_arm_1,(block,3)),38)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),39)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),40)
occurs(2,talos,release(manipulator_arm_1,(block,2)),41)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),42)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),43)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),44)

[06-02-2021_15-48-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-48-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Instantiated.

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Program building started.

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Program building completed.

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding base program parts.

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.016942s.

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving base program parts.

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.002914s.

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental solving started.

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-48-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-48-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 5.970717s.

[06-02-2021_15-48-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 1.329352s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-48-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.463248s.

[06-02-2021_15-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.055978s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.454222s.

[06-02-2021_15-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.059350s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-48-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-48-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.472294s.

[06-02-2021_15-48-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.063007s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-48-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-48-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.474731s.

[06-02-2021_15-48-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.073601s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-48-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-48-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.472620s.

[06-02-2021_15-48-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.065761s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-48-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-48-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.473044s.

[06-02-2021_15-48-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.072881s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-48-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-48-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.490680s.

[06-02-2021_15-48-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.153949s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-48-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-48-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.491885s.

[06-02-2021_15-48-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.093281s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-48-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-48-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.487744s.

[06-02-2021_15-48-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.222181s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-48-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-48-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.498952s.

[06-02-2021_15-48-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.126698s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-48-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.503354s.

[06-02-2021_15-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.112405s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.515230s.

[06-02-2021_15-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.148754s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-48-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.522244s.

[06-02-2021_15-48-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.331774s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-48-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-48-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.527118s.

[06-02-2021_15-48-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.402345s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-48-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-48-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.540565s.

[06-02-2021_15-48-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.337157s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-48-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-48-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.538616s.

[06-02-2021_15-48-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.575340s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-48-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-48-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.557208s.

[06-02-2021_15-48-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 1.469581s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-48-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-48-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.556400s.

[06-02-2021_15-48-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.270794s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-48-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.559835s.

[06-02-2021_15-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.116410s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.570733s.

[06-02-2021_15-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.328203s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-48-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-48-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.570917s.

[06-02-2021_15-48-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 1.347270s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-48-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-48-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.589084s.

[06-02-2021_15-48-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 2.780352s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-48-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-48-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.601797s.

[06-02-2021_15-48-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 1.709652s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-48-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-48-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.601939s.

[06-02-2021_15-48-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 2.542995s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-48-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-48-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.617671s.

[06-02-2021_15-48-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 5.083765s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-48-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-48-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.653087s.

[06-02-2021_15-48-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-48-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 2.825313s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-48-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-48-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-48-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.643168s.

[06-02-2021_15-48-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-49-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 8.099401s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-49-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-49-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.646291s.

[06-02-2021_15-49-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Model found:
Model :: Total atoms = 15775, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 9.308792s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental solving completed in 62.125164s because STOP_CON_REACHED.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 21.082338s, Solving time = 40.109256s, Total time = 62.125164s
Final Model :: Total atoms = 15775, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.970717s, Solving time = 1.329352s, Total time = 7.300068s
2 : Statistics :: Grounding time = 0.463248s, Solving time = 0.055978s, Total time = 0.519226s
3 : Statistics :: Grounding time = 0.454222s, Solving time = 0.059350s, Total time = 0.513572s
4 : Statistics :: Grounding time = 0.472294s, Solving time = 0.063007s, Total time = 0.535301s
5 : Statistics :: Grounding time = 0.474731s, Solving time = 0.073601s, Total time = 0.548333s
6 : Statistics :: Grounding time = 0.472620s, Solving time = 0.065761s, Total time = 0.538381s
7 : Statistics :: Grounding time = 0.473044s, Solving time = 0.072881s, Total time = 0.545924s
8 : Statistics :: Grounding time = 0.490680s, Solving time = 0.153949s, Total time = 0.644629s
9 : Statistics :: Grounding time = 0.491885s, Solving time = 0.093281s, Total time = 0.585166s
10 : Statistics :: Grounding time = 0.487744s, Solving time = 0.222181s, Total time = 0.709925s
11 : Statistics :: Grounding time = 0.498952s, Solving time = 0.126698s, Total time = 0.625650s
12 : Statistics :: Grounding time = 0.503354s, Solving time = 0.112405s, Total time = 0.615759s
13 : Statistics :: Grounding time = 0.515230s, Solving time = 0.148754s, Total time = 0.663984s
14 : Statistics :: Grounding time = 0.522244s, Solving time = 0.331774s, Total time = 0.854018s
15 : Statistics :: Grounding time = 0.527118s, Solving time = 0.402345s, Total time = 0.929463s
16 : Statistics :: Grounding time = 0.540565s, Solving time = 0.337157s, Total time = 0.877722s
17 : Statistics :: Grounding time = 0.538616s, Solving time = 0.575340s, Total time = 1.113957s
18 : Statistics :: Grounding time = 0.557208s, Solving time = 1.469581s, Total time = 2.026790s
19 : Statistics :: Grounding time = 0.556400s, Solving time = 0.270794s, Total time = 0.827194s
20 : Statistics :: Grounding time = 0.559835s, Solving time = 0.116410s, Total time = 0.676245s
21 : Statistics :: Grounding time = 0.570733s, Solving time = 0.328203s, Total time = 0.898936s
22 : Statistics :: Grounding time = 0.570917s, Solving time = 1.347270s, Total time = 1.918187s
23 : Statistics :: Grounding time = 0.589084s, Solving time = 2.780352s, Total time = 3.369436s
24 : Statistics :: Grounding time = 0.601797s, Solving time = 1.709652s, Total time = 2.311449s
25 : Statistics :: Grounding time = 0.601939s, Solving time = 2.542995s, Total time = 3.144934s
26 : Statistics :: Grounding time = 0.617671s, Solving time = 5.083765s, Total time = 5.701437s
27 : Statistics :: Grounding time = 0.653087s, Solving time = 2.825313s, Total time = 3.478400s
28 : Statistics :: Grounding time = 0.643168s, Solving time = 8.099401s, Total time = 8.742569s
29 : Statistics :: Grounding time = 0.646291s, Solving time = 9.308792s, Total time = 9.955083s

[06-02-2021_15-49-14] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 21.082338s, Solving time = 40.109256s, Total time = 62.125164s
Model :: Total atoms = 15775, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-49-14] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_2,(block,6)),36)
occurs(1,talos,configure(manipulator_limb_1,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_limb_2,retracted),39)
occurs(1,talos,release(manipulator_end_1,(block,5)),40)
occurs(1,talos,configure(manipulator_limb_1,retracted),41)
occurs(1,talos,move((puzzle_room,0)),42)
occurs(1,talos,move((hallway,2)),43)
occurs(1,talos,move((hallway,1)),44)
occurs(1,talos,move((hallway,0)),45)
occurs(1,talos,move((store_room,1)),46)
occurs(1,talos,move((store_room,0)),47)
occurs(1,talos,configure(manipulator_limb_2,extended),48)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),49)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),50)
occurs(1,talos,configure(manipulator_limb_2,retracted),51)
occurs(1,talos,move((store_room,1)),52)
occurs(1,talos,move((hallway,0)),53)
occurs(1,talos,move((hallway,1)),54)
occurs(1,talos,move((hallway,2)),55)
occurs(1,talos,move((puzzle_room,0)),56)
occurs(1,talos,move((puzzle_room,1)),57)
occurs(1,talos,configure(manipulator_limb_1,extended),58)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),59)
occurs(1,talos,configure(manipulator_limb_2,extended),60)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),61)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),62)
occurs(1,talos,release(manipulator_end_1,(block,3)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),65)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),66)
occurs(1,talos,release(manipulator_end_1,(block,2)),67)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),68)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),69)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),70)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),71)

[06-02-2021_15-49-14] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     2.895752s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    16.116905s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    62.125164s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[06-02-2021_15-49-14] INFO :: Experiment >> 

      ================================================      
           Experimental run 18 : Time 81.772029s            
      ================================================      

[06-02-2021_15-49-14] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-49-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-49-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-49-14] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Instantiated.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Program building started.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Program building completed.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding base program parts.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.014100s.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving base program parts.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.002253s.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental solving started.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.040066s.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.006450s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.031285s.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.003715s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.047642s.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.005280s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.035382s.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.006386s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.036165s.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.006333s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.036614s.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.007552s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.038109s.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.007843s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.039405s.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.008926s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.037458s.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.010370s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.040321s.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.012731s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.038940s.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.016938s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.044929s.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.019242s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.041271s.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.026512s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.041479s.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.042921s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.042443s.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.059855s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.078000s.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.086438s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.081647s.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.178032s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.084184s.

[06-02-2021_15-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.413927s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.088033s.

[06-02-2021_15-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.649613s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.097182s.

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Model found:
Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.549013s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental solving completed in 3.217130s because STOP_CON_REACHED.

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.034655s, Solving time = 2.120329s, Total time = 3.217130s
Final Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040066s, Solving time = 0.006450s, Total time = 0.046515s
2 : Statistics :: Grounding time = 0.031285s, Solving time = 0.003715s, Total time = 0.035000s
3 : Statistics :: Grounding time = 0.047642s, Solving time = 0.005280s, Total time = 0.052922s
4 : Statistics :: Grounding time = 0.035382s, Solving time = 0.006386s, Total time = 0.041768s
5 : Statistics :: Grounding time = 0.036165s, Solving time = 0.006333s, Total time = 0.042498s
6 : Statistics :: Grounding time = 0.036614s, Solving time = 0.007552s, Total time = 0.044166s
7 : Statistics :: Grounding time = 0.038109s, Solving time = 0.007843s, Total time = 0.045952s
8 : Statistics :: Grounding time = 0.039405s, Solving time = 0.008926s, Total time = 0.048331s
9 : Statistics :: Grounding time = 0.037458s, Solving time = 0.010370s, Total time = 0.047827s
10 : Statistics :: Grounding time = 0.040321s, Solving time = 0.012731s, Total time = 0.053052s
11 : Statistics :: Grounding time = 0.038940s, Solving time = 0.016938s, Total time = 0.055878s
12 : Statistics :: Grounding time = 0.044929s, Solving time = 0.019242s, Total time = 0.064171s
13 : Statistics :: Grounding time = 0.041271s, Solving time = 0.026512s, Total time = 0.067782s
14 : Statistics :: Grounding time = 0.041479s, Solving time = 0.042921s, Total time = 0.084400s
15 : Statistics :: Grounding time = 0.042443s, Solving time = 0.059855s, Total time = 0.102297s
16 : Statistics :: Grounding time = 0.078000s, Solving time = 0.086438s, Total time = 0.164438s
17 : Statistics :: Grounding time = 0.081647s, Solving time = 0.178032s, Total time = 0.259679s
18 : Statistics :: Grounding time = 0.084184s, Solving time = 0.413927s, Total time = 0.498111s
19 : Statistics :: Grounding time = 0.088033s, Solving time = 0.649613s, Total time = 0.737646s
20 : Statistics :: Grounding time = 0.097182s, Solving time = 0.549013s, Total time = 0.646195s

[06-02-2021_15-49-17] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.034655s, Solving time = 2.120329s, Total time = 3.217130s
Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-49-17] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_1,(block,5)),8)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),9)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),10)
occurs(3,talos,release(manipulator_arm_1,(block,3)),11)
occurs(3,talos,move(store_room),12)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),13)
occurs(3,talos,move(puzzle_room),14)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),15)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),16)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),17)
occurs(3,talos,release(manipulator_arm_2,(block,2)),18)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),19)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),20)

[06-02-2021_15-49-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-49-17] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Instantiated.

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Program building started.

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Program building completed.

[06-02-2021_15-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding base program parts.

[06-02-2021_15-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.015131s.

[06-02-2021_15-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving base program parts.

[06-02-2021_15-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.002054s.

[06-02-2021_15-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental solving started.

[06-02-2021_15-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.712769s.

[06-02-2021_15-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.257586s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.072934s.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.018633s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.072658s.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.017682s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.075520s.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.023869s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.082253s.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.025641s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.076527s.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.023766s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.076306s.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.027612s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.077930s.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.028581s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.078883s.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.032450s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.078401s.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.045575s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.082296s.

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.041314s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.083097s.

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.068229s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.087911s.

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.036066s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.084581s.

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.106724s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.087687s.

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.085528s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.088196s.

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.073203s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.224232s.

[06-02-2021_15-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.084204s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.232477s.

[06-02-2021_15-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.104752s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.234598s.

[06-02-2021_15-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.323712s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.239493s.

[06-02-2021_15-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.533841s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-49-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.237625s.

[06-02-2021_15-49-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.894349s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-49-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-49-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.240539s.

[06-02-2021_15-49-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 1.435706s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-49-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-49-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.249487s.

[06-02-2021_15-49-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 1.162113s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-49-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-49-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.253737s.

[06-02-2021_15-49-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 1.273484s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [25]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-49-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-49-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.259894s.

[06-02-2021_15-49-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 1.354611s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [26]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-49-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-49-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.293403s.

[06-02-2021_15-49-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Model found:
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 1.478695s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental solving completed in 14.237186s because STOP_CON_REACHED.

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.398566s, Solving time = 9.559981s, Total time = 14.237186s
Final Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.712769s, Solving time = 0.257586s, Total time = 0.970354s
2 : Statistics :: Grounding time = 0.072934s, Solving time = 0.018633s, Total time = 0.091567s
3 : Statistics :: Grounding time = 0.072658s, Solving time = 0.017682s, Total time = 0.090340s
4 : Statistics :: Grounding time = 0.075520s, Solving time = 0.023869s, Total time = 0.099389s
5 : Statistics :: Grounding time = 0.082253s, Solving time = 0.025641s, Total time = 0.107894s
6 : Statistics :: Grounding time = 0.076527s, Solving time = 0.023766s, Total time = 0.100293s
7 : Statistics :: Grounding time = 0.076306s, Solving time = 0.027612s, Total time = 0.103918s
8 : Statistics :: Grounding time = 0.077930s, Solving time = 0.028581s, Total time = 0.106511s
9 : Statistics :: Grounding time = 0.078883s, Solving time = 0.032450s, Total time = 0.111332s
10 : Statistics :: Grounding time = 0.078401s, Solving time = 0.045575s, Total time = 0.123977s
11 : Statistics :: Grounding time = 0.082296s, Solving time = 0.041314s, Total time = 0.123610s
12 : Statistics :: Grounding time = 0.083097s, Solving time = 0.068229s, Total time = 0.151327s
13 : Statistics :: Grounding time = 0.087911s, Solving time = 0.036066s, Total time = 0.123977s
14 : Statistics :: Grounding time = 0.084581s, Solving time = 0.106724s, Total time = 0.191304s
15 : Statistics :: Grounding time = 0.087687s, Solving time = 0.085528s, Total time = 0.173215s
16 : Statistics :: Grounding time = 0.088196s, Solving time = 0.073203s, Total time = 0.161399s
17 : Statistics :: Grounding time = 0.224232s, Solving time = 0.084204s, Total time = 0.308437s
18 : Statistics :: Grounding time = 0.232477s, Solving time = 0.104752s, Total time = 0.337229s
19 : Statistics :: Grounding time = 0.234598s, Solving time = 0.323712s, Total time = 0.558310s
20 : Statistics :: Grounding time = 0.239493s, Solving time = 0.533841s, Total time = 0.773334s
21 : Statistics :: Grounding time = 0.237625s, Solving time = 0.894349s, Total time = 1.131975s
22 : Statistics :: Grounding time = 0.240539s, Solving time = 1.435706s, Total time = 1.676246s
23 : Statistics :: Grounding time = 0.249487s, Solving time = 1.162113s, Total time = 1.411600s
24 : Statistics :: Grounding time = 0.253737s, Solving time = 1.273484s, Total time = 1.527222s
25 : Statistics :: Grounding time = 0.259894s, Solving time = 1.354611s, Total time = 1.614505s
26 : Statistics :: Grounding time = 0.293403s, Solving time = 1.478695s, Total time = 1.772098s

[06-02-2021_15-49-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.398566s, Solving time = 9.559981s, Total time = 14.237186s
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-49-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),14)
occurs(2,talos,configure(manipulator_arm_1,retracted),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,configure(manipulator_arm_2,retracted),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),26)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),27)
occurs(2,talos,release(manipulator_arm_1,(block,3)),28)
occurs(2,talos,configure(manipulator_arm_1,retracted),29)
occurs(2,talos,move(hallway),30)
occurs(2,talos,move(store_room),31)
occurs(2,talos,configure(manipulator_arm_1,extended),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),33)
occurs(2,talos,configure(manipulator_arm_1,retracted),34)
occurs(2,talos,move(hallway),35)
occurs(2,talos,move(puzzle_room),36)
occurs(2,talos,configure(manipulator_arm_2,extended),37)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),38)
occurs(2,talos,configure(manipulator_arm_1,extended),39)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),40)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),41)
occurs(2,talos,release(manipulator_arm_2,(block,2)),42)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),43)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),44)

[06-02-2021_15-49-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-49-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Instantiated.

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 44 rules into program part conformance_module(step).

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 44, Stop con = StopCondition.Satisfiable

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Program building started.

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Program building completed.

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding base program parts.

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.016821s.

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving base program parts.

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.003593s.

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental solving started.

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [1]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-49-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [43]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-49-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 5.925978s.

[06-02-2021_15-49-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 1.323137s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [2]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-49-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-49-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.445176s.

[06-02-2021_15-49-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.055767s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [3]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-49-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-49-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.455951s.

[06-02-2021_15-49-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.064104s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [4]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-49-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-49-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.465264s.

[06-02-2021_15-49-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.062981s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [5]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-49-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-49-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.469699s.

[06-02-2021_15-49-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.072436s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [6]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-49-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-49-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.471848s.

[06-02-2021_15-49-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.063999s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [7]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-49-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-49-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.477441s.

[06-02-2021_15-49-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.081881s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [8]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.493868s.

[06-02-2021_15-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.082499s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [9]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-49-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.493040s.

[06-02-2021_15-49-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.139096s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [10]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-49-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-49-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.495392s.

[06-02-2021_15-49-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.085734s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [11]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-49-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-49-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.503293s.

[06-02-2021_15-49-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.237722s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [12]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-49-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-49-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.514275s.

[06-02-2021_15-49-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.390264s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [13]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-49-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-49-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.507826s.

[06-02-2021_15-49-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.342776s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [14]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-49-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.527912s.

[06-02-2021_15-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.314167s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [15]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.538476s.

[06-02-2021_15-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.376385s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [16]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-49-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-49-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.531413s.

[06-02-2021_15-49-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.443595s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [17]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-49-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-49-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.549990s.

[06-02-2021_15-49-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.756379s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [18]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-49-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-49-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.557923s.

[06-02-2021_15-49-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.824163s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [19]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-49-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-49-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.550547s.

[06-02-2021_15-49-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 1.031647s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [20]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-49-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-49-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.569303s.

[06-02-2021_15-49-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.311645s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [21]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-49-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-49-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.574261s.

[06-02-2021_15-49-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.154954s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [22]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-49-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-49-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.584659s.

[06-02-2021_15-49-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.187416s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [23]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.589615s.

[06-02-2021_15-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.218516s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [24]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-49-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-49-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.605202s.

[06-02-2021_15-49-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-49-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.704948s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-49-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [25]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-49-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-49-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.600194s.

[06-02-2021_15-49-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-50-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 1.255206s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [26]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-50-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-50-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.628919s.

[06-02-2021_15-50-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-50-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 3.581317s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [27]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-50-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-50-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.656860s.

[06-02-2021_15-50-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-50-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 5.437943s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [28]:
Current step bound = 70
End step min = 0
End step max = None

[06-02-2021_15-50-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [70]), ('domain_rules', [70]), ('state_module', [70]), ('plan_module', [70, 0]), ('conformance_module', [70])].

[06-02-2021_15-50-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.630371s.

[06-02-2021_15-50-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-50-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 5.094358s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [29]:
Current step bound = 71
End step min = 0
End step max = None

[06-02-2021_15-50-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [71]), ('domain_rules', [71]), ('state_module', [71]), ('plan_module', [71, 0]), ('conformance_module', [71])].

[06-02-2021_15-50-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.634389s.

[06-02-2021_15-50-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Model found:
Model :: Total atoms = 15822, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 7.064290s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental solving completed in 52.686748s because STOP_CON_REACHED.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 21.065904s, Solving time = 30.762918s, Total time = 52.686748s
Final Model :: Total atoms = 15822, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.925978s, Solving time = 1.323137s, Total time = 7.249115s
2 : Statistics :: Grounding time = 0.445176s, Solving time = 0.055767s, Total time = 0.500943s
3 : Statistics :: Grounding time = 0.455951s, Solving time = 0.064104s, Total time = 0.520055s
4 : Statistics :: Grounding time = 0.465264s, Solving time = 0.062981s, Total time = 0.528245s
5 : Statistics :: Grounding time = 0.469699s, Solving time = 0.072436s, Total time = 0.542134s
6 : Statistics :: Grounding time = 0.471848s, Solving time = 0.063999s, Total time = 0.535847s
7 : Statistics :: Grounding time = 0.477441s, Solving time = 0.081881s, Total time = 0.559323s
8 : Statistics :: Grounding time = 0.493868s, Solving time = 0.082499s, Total time = 0.576367s
9 : Statistics :: Grounding time = 0.493040s, Solving time = 0.139096s, Total time = 0.632136s
10 : Statistics :: Grounding time = 0.495392s, Solving time = 0.085734s, Total time = 0.581126s
11 : Statistics :: Grounding time = 0.503293s, Solving time = 0.237722s, Total time = 0.741014s
12 : Statistics :: Grounding time = 0.514275s, Solving time = 0.390264s, Total time = 0.904539s
13 : Statistics :: Grounding time = 0.507826s, Solving time = 0.342776s, Total time = 0.850602s
14 : Statistics :: Grounding time = 0.527912s, Solving time = 0.314167s, Total time = 0.842078s
15 : Statistics :: Grounding time = 0.538476s, Solving time = 0.376385s, Total time = 0.914860s
16 : Statistics :: Grounding time = 0.531413s, Solving time = 0.443595s, Total time = 0.975007s
17 : Statistics :: Grounding time = 0.549990s, Solving time = 0.756379s, Total time = 1.306369s
18 : Statistics :: Grounding time = 0.557923s, Solving time = 0.824163s, Total time = 1.382087s
19 : Statistics :: Grounding time = 0.550547s, Solving time = 1.031647s, Total time = 1.582195s
20 : Statistics :: Grounding time = 0.569303s, Solving time = 0.311645s, Total time = 0.880948s
21 : Statistics :: Grounding time = 0.574261s, Solving time = 0.154954s, Total time = 0.729215s
22 : Statistics :: Grounding time = 0.584659s, Solving time = 0.187416s, Total time = 0.772075s
23 : Statistics :: Grounding time = 0.589615s, Solving time = 0.218516s, Total time = 0.808130s
24 : Statistics :: Grounding time = 0.605202s, Solving time = 0.704948s, Total time = 1.310151s
25 : Statistics :: Grounding time = 0.600194s, Solving time = 1.255206s, Total time = 1.855400s
26 : Statistics :: Grounding time = 0.628919s, Solving time = 3.581317s, Total time = 4.210236s
27 : Statistics :: Grounding time = 0.656860s, Solving time = 5.437943s, Total time = 6.094802s
28 : Statistics :: Grounding time = 0.630371s, Solving time = 5.094358s, Total time = 5.724729s
29 : Statistics :: Grounding time = 0.634389s, Solving time = 7.064290s, Total time = 7.698679s

[06-02-2021_15-50-25] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 21.065904s, Solving time = 30.762918s, Total time = 52.686748s
Model :: Total atoms = 15822, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-50-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_limb_2,retracted),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,configure(manipulator_limb_2,retracted),38)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),39)
occurs(1,talos,release(manipulator_end_1,(block,5)),40)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),41)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),42)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),43)
occurs(1,talos,release(manipulator_end_1,(block,3)),44)
occurs(1,talos,configure(manipulator_limb_1,retracted),45)
occurs(1,talos,move((puzzle_room,0)),46)
occurs(1,talos,move((hallway,2)),47)
occurs(1,talos,move((hallway,1)),48)
occurs(1,talos,move((hallway,0)),49)
occurs(1,talos,move((store_room,1)),50)
occurs(1,talos,move((store_room,0)),51)
occurs(1,talos,configure(manipulator_limb_1,extended),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),54)
occurs(1,talos,configure(manipulator_limb_1,retracted),55)
occurs(1,talos,move((store_room,1)),56)
occurs(1,talos,move((hallway,0)),57)
occurs(1,talos,move((hallway,1)),58)
occurs(1,talos,move((hallway,2)),59)
occurs(1,talos,move((puzzle_room,0)),60)
occurs(1,talos,move((puzzle_room,1)),61)
occurs(1,talos,configure(manipulator_limb_1,extended),62)
occurs(1,talos,configure(manipulator_limb_2,extended),63)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),64)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),65)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),66)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),67)
occurs(1,talos,release(manipulator_end_2,(block,2)),68)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),69)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),70)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),71)

[06-02-2021_15-50-25] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     3.217130s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    14.237186s : Steps =    44 : Actions =    44 |  
  | Level 1 : Time =    52.686748s : Steps =    71 : Actions =    71 |  
  ====================================================================  

[06-02-2021_15-50-25] INFO :: Experiment >> 

      ================================================      
           Experimental run 19 : Time 70.770299s            
      ================================================      

[06-02-2021_15-50-25] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-50-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-50-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-50-25] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Instantiated.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Program building started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Program building completed.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding base program parts.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.013925s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving base program parts.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.002165s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.039978s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.006652s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.030953s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.003582s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.030920s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005251s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.035478s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005818s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.035352s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.006397s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.036182s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.007470s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.038512s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.007897s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.038272s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.009490s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.038815s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.009196s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.042932s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.012337s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.042370s.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.014809s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-50-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.040936s.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.024124s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.041819s.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.033338s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.046455s.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.046051s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.073224s.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.072621s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.081019s.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.111567s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.081178s.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.216447s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.109512s.

[06-02-2021_15-50-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.319594s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-50-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[06-02-2021_15-50-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.088453s.

[06-02-2021_15-50-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.580163s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.091998s.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Model found:
Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.092687s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental solving completed in 2.731947s because STOP_CON_REACHED.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.078283s, Solving time = 1.587655s, Total time = 2.731947s
Final Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039978s, Solving time = 0.006652s, Total time = 0.046630s
2 : Statistics :: Grounding time = 0.030953s, Solving time = 0.003582s, Total time = 0.034536s
3 : Statistics :: Grounding time = 0.030920s, Solving time = 0.005251s, Total time = 0.036171s
4 : Statistics :: Grounding time = 0.035478s, Solving time = 0.005818s, Total time = 0.041296s
5 : Statistics :: Grounding time = 0.035352s, Solving time = 0.006397s, Total time = 0.041748s
6 : Statistics :: Grounding time = 0.036182s, Solving time = 0.007470s, Total time = 0.043652s
7 : Statistics :: Grounding time = 0.038512s, Solving time = 0.007897s, Total time = 0.046409s
8 : Statistics :: Grounding time = 0.038272s, Solving time = 0.009490s, Total time = 0.047762s
9 : Statistics :: Grounding time = 0.038815s, Solving time = 0.009196s, Total time = 0.048011s
10 : Statistics :: Grounding time = 0.042932s, Solving time = 0.012337s, Total time = 0.055268s
11 : Statistics :: Grounding time = 0.042370s, Solving time = 0.014809s, Total time = 0.057179s
12 : Statistics :: Grounding time = 0.040936s, Solving time = 0.024124s, Total time = 0.065060s
13 : Statistics :: Grounding time = 0.041819s, Solving time = 0.033338s, Total time = 0.075157s
14 : Statistics :: Grounding time = 0.046455s, Solving time = 0.046051s, Total time = 0.092506s
15 : Statistics :: Grounding time = 0.073224s, Solving time = 0.072621s, Total time = 0.145846s
16 : Statistics :: Grounding time = 0.081019s, Solving time = 0.111567s, Total time = 0.192586s
17 : Statistics :: Grounding time = 0.081178s, Solving time = 0.216447s, Total time = 0.297624s
18 : Statistics :: Grounding time = 0.109512s, Solving time = 0.319594s, Total time = 0.429106s
19 : Statistics :: Grounding time = 0.088453s, Solving time = 0.580163s, Total time = 0.668615s
20 : Statistics :: Grounding time = 0.091998s, Solving time = 0.092687s, Total time = 0.184685s

[06-02-2021_15-50-28] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.078283s, Solving time = 1.587655s, Total time = 2.731947s
Model :: Total atoms = 3701, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-50-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,move(puzzle_room),3)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),4)
occurs(3,talos,release(manipulator_arm_1,(block,6)),5)
occurs(3,talos,move(store_room),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),7)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),8)
occurs(3,talos,move(puzzle_room),9)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),10)
occurs(3,talos,release(manipulator_arm_1,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),12)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),13)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),14)
occurs(3,talos,release(manipulator_arm_1,(block,3)),15)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),16)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),17)
occurs(3,talos,release(manipulator_arm_1,(block,2)),18)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),19)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),20)

[06-02-2021_15-50-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-50-28] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Instantiated.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 20 rules into program part conformance_module(step).

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 20, Stop con = StopCondition.Satisfiable

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Program building started.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Program building completed.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding base program parts.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.014925s.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving base program parts.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.002288s.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental solving started.

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [1]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [19]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.709084s.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.262821s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [2]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.072561s.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.018970s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [3]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.070570s.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.017116s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [4]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.074464s.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.021152s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [5]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.075757s.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.020842s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [6]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.076107s.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.022887s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [7]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.076163s.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.033921s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [8]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.078446s.

[06-02-2021_15-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.026250s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [9]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.082487s.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.030027s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [10]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.079842s.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.037420s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [11]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.081112s.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.042526s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [12]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.082166s.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.044679s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [13]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.084842s.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.059592s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [14]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.085909s.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.088002s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [15]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.086722s.

[06-02-2021_15-50-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.131829s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [16]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.088562s.

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.166970s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [17]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.217349s.

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.390680s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [18]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-50-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-50-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.231173s.

[06-02-2021_15-50-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.685711s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [19]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-50-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-50-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.237817s.

[06-02-2021_15-50-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 1.093235s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [20]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-50-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-50-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.233440s.

[06-02-2021_15-50-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.947363s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [21]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-50-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-50-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.242951s.

[06-02-2021_15-50-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 1.133951s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [22]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-50-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-50-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.247643s.

[06-02-2021_15-50-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 1.255565s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [23]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-50-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-50-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.257474s.

[06-02-2021_15-50-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 1.116461s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [24]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-50-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-50-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.244330s.

[06-02-2021_15-50-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Model found:
Model :: Total atoms = 9402, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 1.070199s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental solving completed in 12.809854s because STOP_CON_REACHED.

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 3.831897s, Solving time = 8.720458s, Total time = 12.809854s
Final Model :: Total atoms = 9402, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.709084s, Solving time = 0.262821s, Total time = 0.971904s
2 : Statistics :: Grounding time = 0.072561s, Solving time = 0.018970s, Total time = 0.091531s
3 : Statistics :: Grounding time = 0.070570s, Solving time = 0.017116s, Total time = 0.087686s
4 : Statistics :: Grounding time = 0.074464s, Solving time = 0.021152s, Total time = 0.095617s
5 : Statistics :: Grounding time = 0.075757s, Solving time = 0.020842s, Total time = 0.096599s
6 : Statistics :: Grounding time = 0.076107s, Solving time = 0.022887s, Total time = 0.098994s
7 : Statistics :: Grounding time = 0.076163s, Solving time = 0.033921s, Total time = 0.110084s
8 : Statistics :: Grounding time = 0.078446s, Solving time = 0.026250s, Total time = 0.104696s
9 : Statistics :: Grounding time = 0.082487s, Solving time = 0.030027s, Total time = 0.112514s
10 : Statistics :: Grounding time = 0.079842s, Solving time = 0.037420s, Total time = 0.117262s
11 : Statistics :: Grounding time = 0.081112s, Solving time = 0.042526s, Total time = 0.123639s
12 : Statistics :: Grounding time = 0.082166s, Solving time = 0.044679s, Total time = 0.126845s
13 : Statistics :: Grounding time = 0.084842s, Solving time = 0.059592s, Total time = 0.144433s
14 : Statistics :: Grounding time = 0.085909s, Solving time = 0.088002s, Total time = 0.173912s
15 : Statistics :: Grounding time = 0.086722s, Solving time = 0.131829s, Total time = 0.218551s
16 : Statistics :: Grounding time = 0.088562s, Solving time = 0.166970s, Total time = 0.255532s
17 : Statistics :: Grounding time = 0.217349s, Solving time = 0.390680s, Total time = 0.608029s
18 : Statistics :: Grounding time = 0.231173s, Solving time = 0.685711s, Total time = 0.916884s
19 : Statistics :: Grounding time = 0.237817s, Solving time = 1.093235s, Total time = 1.331052s
20 : Statistics :: Grounding time = 0.233440s, Solving time = 0.947363s, Total time = 1.180804s
21 : Statistics :: Grounding time = 0.242951s, Solving time = 1.133951s, Total time = 1.376902s
22 : Statistics :: Grounding time = 0.247643s, Solving time = 1.255565s, Total time = 1.503209s
23 : Statistics :: Grounding time = 0.257474s, Solving time = 1.116461s, Total time = 1.373935s
24 : Statistics :: Grounding time = 0.244330s, Solving time = 1.070199s, Total time = 1.314528s

[06-02-2021_15-50-41] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 3.831897s, Solving time = 8.720458s, Total time = 12.809854s
Model :: Total atoms = 9402, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-50-41] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,move(hallway),14)
occurs(2,talos,move(puzzle_room),15)
occurs(2,talos,configure(manipulator_arm_1,extended),16)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),17)
occurs(2,talos,release(manipulator_arm_1,(block,6)),18)
occurs(2,talos,configure(manipulator_arm_1,retracted),19)
occurs(2,talos,move(hallway),20)
occurs(2,talos,move(store_room),21)
occurs(2,talos,configure(manipulator_arm_2,extended),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),23)
occurs(2,talos,configure(manipulator_arm_2,retracted),24)
occurs(2,talos,configure(manipulator_arm_1,extended),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),26)
occurs(2,talos,configure(manipulator_arm_1,retracted),27)
occurs(2,talos,move(hallway),28)
occurs(2,talos,move(puzzle_room),29)
occurs(2,talos,configure(manipulator_arm_1,extended),30)
occurs(2,talos,configure(manipulator_arm_2,extended),31)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),32)
occurs(2,talos,release(manipulator_arm_1,(block,5)),33)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),34)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),35)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),36)
occurs(2,talos,release(manipulator_arm_1,(block,3)),37)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),38)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),39)
occurs(2,talos,release(manipulator_arm_1,(block,2)),40)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),41)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),42)

[06-02-2021_15-50-41] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-50-41] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Instantiated.

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 42 rules into program part conformance_module(step).

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 42, Stop con = StopCondition.Satisfiable

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Program building started.

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Program building completed.

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding base program parts.

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.017082s.

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving base program parts.

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.002876s.

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental solving started.

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [1]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-50-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [41]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-50-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 5.823602s.

[06-02-2021_15-50-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 1.254981s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [2]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.429561s.

[06-02-2021_15-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.053064s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [3]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-50-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.438790s.

[06-02-2021_15-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.058690s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [4]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.450924s.

[06-02-2021_15-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.062907s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [5]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-50-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-50-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.446278s.

[06-02-2021_15-50-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.074893s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [6]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-50-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-50-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.449663s.

[06-02-2021_15-50-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.069632s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [7]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-50-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-50-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.455613s.

[06-02-2021_15-50-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.065183s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [8]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-50-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.458869s.

[06-02-2021_15-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.168898s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [9]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.477927s.

[06-02-2021_15-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.118944s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [10]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-50-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.454830s.

[06-02-2021_15-50-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.129517s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [11]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-50-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-50-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.476393s.

[06-02-2021_15-50-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.128527s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [12]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.479160s.

[06-02-2021_15-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.188585s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [13]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.486741s.

[06-02-2021_15-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.200923s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [14]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.492306s.

[06-02-2021_15-50-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.417760s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [15]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-50-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-50-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.516286s.

[06-02-2021_15-50-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.410187s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [16]:
Current step bound = 56
End step min = 0
End step max = None

[06-02-2021_15-50-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0]), ('conformance_module', [56])].

[06-02-2021_15-50-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.517494s.

[06-02-2021_15-50-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.446531s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [17]:
Current step bound = 57
End step min = 0
End step max = None

[06-02-2021_15-50-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0]), ('conformance_module', [57])].

[06-02-2021_15-50-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.528146s.

[06-02-2021_15-50-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-50-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.411613s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-50-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [18]:
Current step bound = 58
End step min = 0
End step max = None

[06-02-2021_15-50-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0]), ('conformance_module', [58])].

[06-02-2021_15-50-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.539616s.

[06-02-2021_15-50-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-51-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.644079s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-51-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [19]:
Current step bound = 59
End step min = 0
End step max = None

[06-02-2021_15-51-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0]), ('conformance_module', [59])].

[06-02-2021_15-51-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.536543s.

[06-02-2021_15-51-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-51-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.727205s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-51-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [20]:
Current step bound = 60
End step min = 0
End step max = None

[06-02-2021_15-51-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0]), ('conformance_module', [60])].

[06-02-2021_15-51-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.560150s.

[06-02-2021_15-51-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-51-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 1.139639s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-51-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [21]:
Current step bound = 61
End step min = 0
End step max = None

[06-02-2021_15-51-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0]), ('conformance_module', [61])].

[06-02-2021_15-51-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.568125s.

[06-02-2021_15-51-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-51-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 1.334757s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-51-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [22]:
Current step bound = 62
End step min = 0
End step max = None

[06-02-2021_15-51-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0]), ('conformance_module', [62])].

[06-02-2021_15-51-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.579052s.

[06-02-2021_15-51-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-51-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 1.067801s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-51-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [23]:
Current step bound = 63
End step min = 0
End step max = None

[06-02-2021_15-51-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0]), ('conformance_module', [63])].

[06-02-2021_15-51-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.606875s.

[06-02-2021_15-51-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-51-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 1.116049s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-51-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [24]:
Current step bound = 64
End step min = 0
End step max = None

[06-02-2021_15-51-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0]), ('conformance_module', [64])].

[06-02-2021_15-51-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.588787s.

[06-02-2021_15-51-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-51-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 1.099862s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-51-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [25]:
Current step bound = 65
End step min = 0
End step max = None

[06-02-2021_15-51-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0]), ('conformance_module', [65])].

[06-02-2021_15-51-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.605707s.

[06-02-2021_15-51-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-51-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 1.080124s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-51-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [26]:
Current step bound = 66
End step min = 0
End step max = None

[06-02-2021_15-51-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0]), ('conformance_module', [66])].

[06-02-2021_15-51-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.610294s.

[06-02-2021_15-51-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-51-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 1.346206s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-51-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [27]:
Current step bound = 67
End step min = 0
End step max = None

[06-02-2021_15-51-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0]), ('conformance_module', [67])].

[06-02-2021_15-51-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.612399s.

[06-02-2021_15-51-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-51-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 4.496488s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-51-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [28]:
Current step bound = 68
End step min = 0
End step max = None

[06-02-2021_15-51-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [68]), ('domain_rules', [68]), ('state_module', [68]), ('plan_module', [68, 0]), ('conformance_module', [68])].

[06-02-2021_15-51-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.632744s.

[06-02-2021_15-51-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-51-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 5.653876s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-51-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [29]:
Current step bound = 69
End step min = 0
End step max = None

[06-02-2021_15-51-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [69]), ('domain_rules', [69]), ('state_module', [69]), ('plan_module', [69, 0]), ('conformance_module', [69])].

[06-02-2021_15-51-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.642622s.

[06-02-2021_15-51-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-51-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Model found:
Model :: Total atoms = 15434, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-51-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 7.418845s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-51-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental solving completed in 52.746789s because STOP_CON_REACHED.

[06-02-2021_15-51-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 20.482579s, Solving time = 31.388647s, Total time = 52.746789s
Final Model :: Total atoms = 15434, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-51-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental statistics:
1 : Statistics :: Grounding time = 5.823602s, Solving time = 1.254981s, Total time = 7.078583s
2 : Statistics :: Grounding time = 0.429561s, Solving time = 0.053064s, Total time = 0.482625s
3 : Statistics :: Grounding time = 0.438790s, Solving time = 0.058690s, Total time = 0.497479s
4 : Statistics :: Grounding time = 0.450924s, Solving time = 0.062907s, Total time = 0.513831s
5 : Statistics :: Grounding time = 0.446278s, Solving time = 0.074893s, Total time = 0.521171s
6 : Statistics :: Grounding time = 0.449663s, Solving time = 0.069632s, Total time = 0.519295s
7 : Statistics :: Grounding time = 0.455613s, Solving time = 0.065183s, Total time = 0.520796s
8 : Statistics :: Grounding time = 0.458869s, Solving time = 0.168898s, Total time = 0.627768s
9 : Statistics :: Grounding time = 0.477927s, Solving time = 0.118944s, Total time = 0.596871s
10 : Statistics :: Grounding time = 0.454830s, Solving time = 0.129517s, Total time = 0.584347s
11 : Statistics :: Grounding time = 0.476393s, Solving time = 0.128527s, Total time = 0.604920s
12 : Statistics :: Grounding time = 0.479160s, Solving time = 0.188585s, Total time = 0.667745s
13 : Statistics :: Grounding time = 0.486741s, Solving time = 0.200923s, Total time = 0.687664s
14 : Statistics :: Grounding time = 0.492306s, Solving time = 0.417760s, Total time = 0.910067s
15 : Statistics :: Grounding time = 0.516286s, Solving time = 0.410187s, Total time = 0.926473s
16 : Statistics :: Grounding time = 0.517494s, Solving time = 0.446531s, Total time = 0.964025s
17 : Statistics :: Grounding time = 0.528146s, Solving time = 0.411613s, Total time = 0.939759s
18 : Statistics :: Grounding time = 0.539616s, Solving time = 0.644079s, Total time = 1.183695s
19 : Statistics :: Grounding time = 0.536543s, Solving time = 0.727205s, Total time = 1.263749s
20 : Statistics :: Grounding time = 0.560150s, Solving time = 1.139639s, Total time = 1.699789s
21 : Statistics :: Grounding time = 0.568125s, Solving time = 1.334757s, Total time = 1.902882s
22 : Statistics :: Grounding time = 0.579052s, Solving time = 1.067801s, Total time = 1.646853s
23 : Statistics :: Grounding time = 0.606875s, Solving time = 1.116049s, Total time = 1.722924s
24 : Statistics :: Grounding time = 0.588787s, Solving time = 1.099862s, Total time = 1.688649s
25 : Statistics :: Grounding time = 0.605707s, Solving time = 1.080124s, Total time = 1.685832s
26 : Statistics :: Grounding time = 0.610294s, Solving time = 1.346206s, Total time = 1.956501s
27 : Statistics :: Grounding time = 0.612399s, Solving time = 4.496488s, Total time = 5.108887s
28 : Statistics :: Grounding time = 0.632744s, Solving time = 5.653876s, Total time = 6.286620s
29 : Statistics :: Grounding time = 0.642622s, Solving time = 7.418845s, Total time = 8.061467s

[06-02-2021_15-51-34] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 20.482579s, Solving time = 31.388647s, Total time = 52.746789s
Model :: Total atoms = 15434, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-51-34] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,retracted),23)
occurs(1,talos,move((store_room,1)),24)
occurs(1,talos,move((hallway,0)),25)
occurs(1,talos,move((hallway,1)),26)
occurs(1,talos,move((hallway,2)),27)
occurs(1,talos,move((puzzle_room,0)),28)
occurs(1,talos,move((puzzle_room,1)),29)
occurs(1,talos,configure(manipulator_limb_1,extended),30)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),31)
occurs(1,talos,release(manipulator_end_1,(block,6)),32)
occurs(1,talos,configure(manipulator_limb_1,retracted),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((hallway,2)),35)
occurs(1,talos,move((hallway,1)),36)
occurs(1,talos,move((hallway,0)),37)
occurs(1,talos,move((store_room,1)),38)
occurs(1,talos,move((store_room,0)),39)
occurs(1,talos,configure(manipulator_limb_1,extended),40)
occurs(1,talos,configure(manipulator_limb_2,extended),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),43)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),44)
occurs(1,talos,configure(manipulator_limb_2,retracted),45)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),46)
occurs(1,talos,configure(manipulator_limb_1,retracted),47)
occurs(1,talos,move((store_room,1)),48)
occurs(1,talos,move((hallway,0)),49)
occurs(1,talos,move((hallway,1)),50)
occurs(1,talos,move((hallway,2)),51)
occurs(1,talos,move((puzzle_room,0)),52)
occurs(1,talos,move((puzzle_room,1)),53)
occurs(1,talos,configure(manipulator_limb_1,extended),54)
occurs(1,talos,configure(manipulator_limb_2,extended),55)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),56)
occurs(1,talos,release(manipulator_end_1,(block,5)),57)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),58)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),59)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),60)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),61)
occurs(1,talos,release(manipulator_end_1,(block,3)),62)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),63)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),64)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),65)
occurs(1,talos,release(manipulator_end_1,(block,2)),66)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),67)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),68)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),69)

[06-02-2021_15-51-34] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     2.731947s : Steps =    20 : Actions =    20 |  
  | Level 2 : Time =    12.809854s : Steps =    42 : Actions =    42 |  
  | Level 1 : Time =    52.746789s : Steps =    69 : Actions =    69 |  
  ====================================================================  

[06-02-2021_15-51-34] INFO :: Experiment >> 

      ================================================      
           Experimental run 20 : Time 68.936621s            
      ================================================      

[06-02-2021_15-51-34] INFO :: Experiment >> 

  ################################################################################################  
     All 20 experimental runs complete : Real time 1704.036785s, Proccessing time 8937.625000s      
  ################################################################################################  

[06-02-2021_15-51-34] INFO :: Experiment >> 

          ========================================          
                     Experimental Data                      
          ========================================          

 RU  IT  AL         GT         ST         TT   S   A
  0   1   3   1.049689   2.390705   3.506442  20  20
  0   1   2   4.365706  28.768439  33.459160  44  44
  0   1   1  22.708484  60.690515  84.409138  73  73
  1   1   3   1.051332   2.299317   3.419858  20  20
  1   1   2   3.684416   7.520509  11.437193  42  42
  1   1   1  21.685215  31.594917  54.194581  71  71
  2   1   3   1.058168   2.434894   3.562078  20  20
  2   1   2   3.990671   6.507302  10.734818  42  42
  2   1   1  21.542209  35.411346  57.848815  71  71
  3   1   3   1.063511   2.562290   3.700651  20  20
  3   1   2   3.710914   7.685115  11.631254  42  42
  3   1   1  21.496877  34.205161  56.584535  71  71
  4   1   3   1.049017   1.863121   2.979674  20  20
  4   1   2   4.375234  29.127066  33.817694  44  44
  4   1   1  22.549364  42.531923  66.001520  73  73
  5   1   3   1.054322   2.374866   3.504502  20  20
  5   1   2   3.708286   8.910968  12.859768  42  42
  5   1   1  21.638088  22.420138  44.896825  71  71
  6   1   3   1.011433   1.869574   2.945549  20  20
  6   1   2   4.364082  21.346840  26.035415  44  44
  6   1   1  22.488082  53.268627  76.716837  73  73
  7   1   3   1.043737   1.722328   2.830019  20  20
  7   1   2   4.387507   9.556886  14.231084  44  44
  7   1   1  22.465600  47.747691  71.185924  73  73
  8   1   3   1.018391   2.360562   3.446495  20  20
  8   1   2   3.864955   7.597446  11.704027  42  42
  8   1   1  21.640421  26.290009  48.844311  71  71
  9   1   3   1.056688   2.158178   3.280047  20  20
  9   1   2   4.229741  14.539791  19.052435  44  44
  9   1   1  21.170705  53.890578  75.937656  71  71
 10   1   3   1.062782   1.829879   2.954905  20  20
 10   1   2   4.192562  11.201998  15.674603  44  44
 10   1   1  22.244228  38.396930  61.576974  73  73
 11   1   3   1.063880   2.403001   3.533805  20  20
 11   1   2   4.179908   6.643763  11.082363  44  44
 11   1   1  21.236114  57.656582  79.778436  71  71
 12   1   3   1.050894   2.219994   3.340026  20  20
 12   1   2   4.324079  11.364088  15.946105  44  44
 12   1   1  22.451673  38.759070  62.195815  73  73
 13   1   3   1.060159   2.087513   3.215273  20  20
 13   1   2   4.414218   8.649209  13.344091  44  44
 13   1   1  22.469507  41.985626  65.390083  73  73
 14   1   3   1.020073   2.333291   3.421547  20  20
 14   1   2   3.699016   6.398605  10.318766  42  42
 14   1   1  20.348627  22.449098  43.588604  69  69
 15   1   3   1.061581   2.101640   3.231091  20  20
 15   1   2   4.367324  22.385583  27.088650  44  44
 15   1   1  22.458386  73.500468  96.970037  73  73
 16   1   3   1.020817   1.816848   2.904073  20  20
 16   1   2   4.360197   8.559486  13.199969  44  44
 16   1   1  22.548331  54.119627  77.626722  73  73
 17   1   3   1.052013   1.781432   2.895752  20  20
 17   1   2   4.392516  11.437228  16.116905  44  44
 17   1   1  21.082338  40.109256  62.125164  71  71
 18   1   3   1.034655   2.120329   3.217130  20  20
 18   1   2   4.398566   9.559981  14.237186  44  44
 18   1   1  21.065904  30.762918  52.686748  71  71
 19   1   3   1.078283   1.587655   2.731947  20  20
 19   1   2   3.831897   8.720458  12.809854  42  42
 19   1   1  20.482579  31.388647  52.746789  69  69

[06-02-2021_15-51-34] INFO :: __main__ >> Exiting with code 0

