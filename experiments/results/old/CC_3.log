[11-02-2021_01-49-08] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
         This program comes with ABSOLUTELY NO WARRANTY; for details type `--warranty'. This is free software,          
           and you are welcome to redistribute it under certain conditions; type `--conditions' for details.            
                                     For help and usage instructions type `--help'.                                     
                                                                                                                        
  ####################################################################################################################  

[11-02-2021_01-49-08] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[11-02-2021_01-49-08] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[11-02-2021_01-49-08] DEBUG :: __main__ >> Parsing command line arguments: ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp', '-sc', '-pm=classical', '-ir', '0', '-er', '20', '-xf', '-df', '-op=False'].

[11-02-2021_01-49-08] DEBUG :: __main__ >> Parsing complete:
('domain_files', ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'])
('log_file', None)
('excel_file', './results/ASH_Excel_11-02-2021_01-49-08.xlsx')
('data_file', './results/ASH_Data_11-02-2021_01-49-08.dat')
('data_sep', ' ')
('data_end', '\n')
('silence_ash', False)
('silence_clingo', True)
('logging', 'INFO')
('threads', 8)
('time_limit', [3600])
('planning_mode', 'classical')
('enforce_conformance', True)
('optimise_plan', False)
('step_max', [0])
('step_inc', [1])
('step_inc_init', [2])
('partial_planning_length', [])
('experimental_runs', 20)
('initial_runs', 0)
('warranty', False)
('conditions', False)

[11-02-2021_01-49-08] DEBUG :: planner.ASH >> Instantiating new planning domain: Name = None, Domain files = ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'].

[11-02-2021_01-49-08] DEBUG :: planner.ASH >> The domain files ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'entities': True, 'static_state': True, 'initial_state': True, 'goal_state': True}.

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Anon #1 >> Instantiated.

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Anon #1 >> Entering standard solve call:
Solver options = --outf=3, --warn=none, -t, 1, -c, plan_at=0
Program parts = #program instance_module()., #program domain_sorts().

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Anon #1 >> Program building started.

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Anon #1 >> Program building completed.

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Anon #1 >> Grounding started.

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Anon #1 >> Grounding completed in 0.011596s.

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Anon #1 >> Solving started.

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Anon #1 >> Model found:
Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Anon #1 >> Solving completed in 0.002144s.

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Anon #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.011596s, Solving time = 0.002144s, Total time = 0.013740s
Final Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_01-49-08] DEBUG :: planner.ASH >> Planning Domain Anon #1 : Abstraction range = [1-3] instantiated successfully

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program ASH #1 >> Instantiated.

[11-02-2021_01-49-08] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program instance_module.
al((1..abstraction_max)).
#const plan_at = 1.
pl(AL) :- AL=plan_at; al(AL).
sl(AL) :- AL>=plan_at; AL<=(plan_at+1); al(AL).
sl(AL) :- plan_at<1; al(AL).
(boolean(true);boolean(false)).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1>=AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1!=DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step).
#show is/2.
#show holds/4.
{ holds(AL,F,V,step) :  } :- fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step=0.
#false :- not 1 = { holds(AL,F,V,step) : fluent(AL,_,F,V) }; fluent(AL,_,F,_); AL>=plan_at; sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step>0.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; sl(AL).
#program plan_module(step,start).
#show occurs/4.
#show sub_goal/6.
{ occurs(AL,ROBOT,A,step) : action(AL,ROBOT,A) } :- incomplete_plan((step-1)); AL=plan_at; step>start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1!=A_2; action(AL,ROBOT,A_1); action(AL,ROBOT,A_2); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
:~ occurs(AL,step); incomplete_plan((step-1)); AL=plan_at; step>start. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); incomplete_plan((step-1)); AL=plan_at; step>start. [1@2,ROBOT,A,step]
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); AL=plan_at; step>start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); AL=plan_at; step>start.
goal_satisfied(AL,F,V,true,step) :- goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
goal_satisfied(AL,F,V,false,step) :- goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
incomplete_plan(step) :- goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); AL=plan_at; boolean(B).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#program conformance_module(step).
#show current_sub_goal/7.
current_sub_goal((AL+1),ROBOT,A,F,V,1,0) :- sub_goal((AL+1),ROBOT,A,F,V,1); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_sub_goals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); incomplete_sub_goals((AL+1),I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); AL=plan_at.
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
#program goal_abstraction_module.
#show holds/4.
#show goal/4.
holds(AL,F,V,0) :- goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) :  } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); AL>=plan_at; al(AL).
#false :- not 1 = { holds(AL,F,V,0) : fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); AL>=plan_at; al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL<reduc; al(AL).
state(AL,extensible,retracted) :- AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL<reduc; al(AL).
state(AL,door,open) :- AL<reduc; al(AL).
state(AL,door,closed) :- AL<reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ!=nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ!=SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1<redef; AL_2<redef; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; sl(AL).
action(AL,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; sl(AL).
#program domain_rules(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1!=STATE_2; AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,in(ROBO),L_1,(t-1)); not is(AL,connected(L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,configuration(D),closed,(t-1)); holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,actuate(DESC,D),t) :- not 1 = { holds(AL,grasping(DESC),H,(t-1)) : desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,ROBO,actuate(DESC,D)), fluent(AL,inertial,grasping(DESC),H) }; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); is(AL,in(OBJ,L)); action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L),t) :- holds(AL,configuration(DESC),extended,(t-1)); action(AL,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; OBJ_1!=nothing; action(AL,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(END,OBJ),t) :- not holds(AL,configuration(END),aligned_with(OBJ),(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t>0.
not occurs(AL,ROBO,release(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,configure(DESC_1,STATE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL<reduc; pl(AL).
not occurs(AL,ROBO,configure(DESC,aligned_with(OBJ)),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); action(AL,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,DESC,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ_1,BLOCK),t) :- holds(AL,on(OBJ_2),BLOCK,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; OBJ!=nothing; SURFACE!=nothing; action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
not occurs(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),t) :- holds(AL,grasping(DESC_2),OBJ_2,(t-1)); OBJ_1!=OBJ_2; DESC_1!=DESC_2; action(AL,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- holds(AL,configuration(DESC),retracted,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC_1,OBJ,SURFACE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,surface,SURFACE); pl(AL).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1!=nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1=(block,N_1); number(N_1); BLOCK_2=(block,N_2); number(N_2); BLOCK_1!=BLOCK_2; N_1>N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK : holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK : is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1!=L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_2; sl(AL_4); AL_4>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ!=nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_3; sl(AL_5); AL_5>=AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2; sl(AL_5); AL_5>=AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N<=3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N>3; N<=6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2=(X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
goal(1,on((block,3)),puzzle_room_table_left,true).
goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X<MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[11-02-2021_01-49-08] INFO :: ASH Planner Main #1 >> Generating initial state.

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Instantiated.

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('initial_state', []), ('instance_module', []), ('state_module', [0]), ('domain_sorts', []), ('domain_rules', [0])

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Program building started.

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Program building completed.

[11-02-2021_01-49-08] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Grounding started.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Grounding completed in 0.102445s.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Solving started.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Model found:
Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Solving completed in 0.017621s.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Initial State || #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.102445s, Solving time = 0.017621s, Total time = 0.120066s
Final Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_01-49-09] INFO :: ASH Planner Main #1 >> Initial state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.102445s, Solving time = 0.017621s, Total time = 0.120066s
Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_01-49-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 3            
          ========================================          

holds(3,complete(blue),false,0)
holds(3,complete(red),false,0)
holds(3,grasping(manipulator_arm_1),nothing,0)
holds(3,grasping(manipulator_arm_2),nothing,0)
holds(3,in(manipulator_arm_1),starting_room,0)
holds(3,in(manipulator_arm_2),starting_room,0)
holds(3,in(puzzle_room_table),puzzle_room,0)
holds(3,in(talos),starting_room,0)
holds(3,in((block,1)),puzzle_room,0)
holds(3,in((block,2)),puzzle_room,0)
holds(3,in((block,3)),puzzle_room,0)
holds(3,in((block,4)),store_room,0)
holds(3,in((block,5)),store_room,0)
holds(3,in((block,6)),store_room,0)
holds(3,on((block,1)),puzzle_room_table,0)
holds(3,on((block,2)),puzzle_room_table,0)
holds(3,on((block,3)),(block,1),0)
holds(3,on((block,4)),nothing,0)
holds(3,on((block,5)),nothing,0)
holds(3,on((block,6)),nothing,0)
holds(3,tower_base((block,1)),true,0)
holds(3,tower_base((block,2)),true,0)
holds(3,tower_base((block,3)),false,0)
holds(3,tower_base((block,4)),false,0)
holds(3,tower_base((block,5)),false,0)
holds(3,tower_base((block,6)),false,0)
holds(3,unordered_tower((block,1)),true,0)
holds(3,unordered_tower((block,2)),false,0)
holds(3,unordered_tower((block,3)),false,0)
holds(3,unordered_tower((block,4)),false,0)
holds(3,unordered_tower((block,5)),false,0)
holds(3,unordered_tower((block,6)),false,0)
holds(3,in_tower((block,1),(block,1)),true,0)
holds(3,in_tower((block,1),(block,2)),false,0)
holds(3,in_tower((block,1),(block,3)),true,0)
holds(3,in_tower((block,1),(block,4)),false,0)
holds(3,in_tower((block,1),(block,5)),false,0)
holds(3,in_tower((block,1),(block,6)),false,0)
holds(3,in_tower((block,2),(block,1)),false,0)
holds(3,in_tower((block,2),(block,2)),true,0)
holds(3,in_tower((block,2),(block,3)),false,0)
holds(3,in_tower((block,2),(block,4)),false,0)
holds(3,in_tower((block,2),(block,5)),false,0)
holds(3,in_tower((block,2),(block,6)),false,0)
holds(3,in_tower((block,3),(block,1)),false,0)
holds(3,in_tower((block,3),(block,2)),false,0)
holds(3,in_tower((block,3),(block,3)),false,0)
holds(3,in_tower((block,3),(block,4)),false,0)
holds(3,in_tower((block,3),(block,5)),false,0)
holds(3,in_tower((block,3),(block,6)),false,0)
holds(3,in_tower((block,4),(block,1)),false,0)
holds(3,in_tower((block,4),(block,2)),false,0)
holds(3,in_tower((block,4),(block,3)),false,0)
holds(3,in_tower((block,4),(block,4)),false,0)
holds(3,in_tower((block,4),(block,5)),false,0)
holds(3,in_tower((block,4),(block,6)),false,0)
holds(3,in_tower((block,5),(block,1)),false,0)
holds(3,in_tower((block,5),(block,2)),false,0)
holds(3,in_tower((block,5),(block,3)),false,0)
holds(3,in_tower((block,5),(block,4)),false,0)
holds(3,in_tower((block,5),(block,5)),false,0)
holds(3,in_tower((block,5),(block,6)),false,0)
holds(3,in_tower((block,6),(block,1)),false,0)
holds(3,in_tower((block,6),(block,2)),false,0)
holds(3,in_tower((block,6),(block,3)),false,0)
holds(3,in_tower((block,6),(block,4)),false,0)
holds(3,in_tower((block,6),(block,5)),false,0)
holds(3,in_tower((block,6),(block,6)),false,0)

[11-02-2021_01-49-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 2            
          ========================================          

holds(2,complete(blue),false,0)
holds(2,complete(red),false,0)
holds(2,configuration(manipulator_arm_1),retracted,0)
holds(2,configuration(manipulator_arm_2),retracted,0)
holds(2,configuration(puzzle_room_door),closed,0)
holds(2,configuration(starting_room_door),closed,0)
holds(2,configuration(store_room_door),closed,0)
holds(2,grasping(manipulator_arm_1),nothing,0)
holds(2,grasping(manipulator_arm_2),nothing,0)
holds(2,in(manipulator_arm_1),starting_room,0)
holds(2,in(manipulator_arm_2),starting_room,0)
holds(2,in(puzzle_room_table),puzzle_room,0)
holds(2,in(talos),starting_room,0)
holds(2,in((block,1)),puzzle_room,0)
holds(2,in((block,2)),puzzle_room,0)
holds(2,in((block,3)),puzzle_room,0)
holds(2,in((block,4)),store_room,0)
holds(2,in((block,5)),store_room,0)
holds(2,in((block,6)),store_room,0)
holds(2,on((block,1)),puzzle_room_table,0)
holds(2,on((block,2)),puzzle_room_table,0)
holds(2,on((block,3)),(block,1),0)
holds(2,on((block,4)),nothing,0)
holds(2,on((block,5)),nothing,0)
holds(2,on((block,6)),nothing,0)
holds(2,tower_base((block,1)),true,0)
holds(2,tower_base((block,2)),true,0)
holds(2,tower_base((block,3)),false,0)
holds(2,tower_base((block,4)),false,0)
holds(2,tower_base((block,5)),false,0)
holds(2,tower_base((block,6)),false,0)
holds(2,unordered_tower((block,1)),true,0)
holds(2,unordered_tower((block,2)),false,0)
holds(2,unordered_tower((block,3)),false,0)
holds(2,unordered_tower((block,4)),false,0)
holds(2,unordered_tower((block,5)),false,0)
holds(2,unordered_tower((block,6)),false,0)
holds(2,in_tower((block,1),(block,1)),true,0)
holds(2,in_tower((block,1),(block,2)),false,0)
holds(2,in_tower((block,1),(block,3)),true,0)
holds(2,in_tower((block,1),(block,4)),false,0)
holds(2,in_tower((block,1),(block,5)),false,0)
holds(2,in_tower((block,1),(block,6)),false,0)
holds(2,in_tower((block,2),(block,1)),false,0)
holds(2,in_tower((block,2),(block,2)),true,0)
holds(2,in_tower((block,2),(block,3)),false,0)
holds(2,in_tower((block,2),(block,4)),false,0)
holds(2,in_tower((block,2),(block,5)),false,0)
holds(2,in_tower((block,2),(block,6)),false,0)
holds(2,in_tower((block,3),(block,1)),false,0)
holds(2,in_tower((block,3),(block,2)),false,0)
holds(2,in_tower((block,3),(block,3)),false,0)
holds(2,in_tower((block,3),(block,4)),false,0)
holds(2,in_tower((block,3),(block,5)),false,0)
holds(2,in_tower((block,3),(block,6)),false,0)
holds(2,in_tower((block,4),(block,1)),false,0)
holds(2,in_tower((block,4),(block,2)),false,0)
holds(2,in_tower((block,4),(block,3)),false,0)
holds(2,in_tower((block,4),(block,4)),false,0)
holds(2,in_tower((block,4),(block,5)),false,0)
holds(2,in_tower((block,4),(block,6)),false,0)
holds(2,in_tower((block,5),(block,1)),false,0)
holds(2,in_tower((block,5),(block,2)),false,0)
holds(2,in_tower((block,5),(block,3)),false,0)
holds(2,in_tower((block,5),(block,4)),false,0)
holds(2,in_tower((block,5),(block,5)),false,0)
holds(2,in_tower((block,5),(block,6)),false,0)
holds(2,in_tower((block,6),(block,1)),false,0)
holds(2,in_tower((block,6),(block,2)),false,0)
holds(2,in_tower((block,6),(block,3)),false,0)
holds(2,in_tower((block,6),(block,4)),false,0)
holds(2,in_tower((block,6),(block,5)),false,0)
holds(2,in_tower((block,6),(block,6)),false,0)

[11-02-2021_01-49-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 1            
          ========================================          

holds(1,complete(blue),false,0)
holds(1,complete(red),false,0)
holds(1,configuration(manipulator_end_1),aligned_with(nothing),0)
holds(1,configuration(manipulator_end_2),aligned_with(nothing),0)
holds(1,configuration(manipulator_limb_1),retracted,0)
holds(1,configuration(manipulator_limb_2),retracted,0)
holds(1,configuration(puzzle_room_door),closed,0)
holds(1,configuration(starting_room_door),closed,0)
holds(1,configuration(store_room_door),closed,0)
holds(1,grasping(manipulator_arm_1),nothing,0)
holds(1,grasping(manipulator_arm_2),nothing,0)
holds(1,grasping(manipulator_end_1),nothing,0)
holds(1,grasping(manipulator_end_2),nothing,0)
holds(1,in(manipulator_arm_1),(starting_room,0),0)
holds(1,in(manipulator_arm_2),(starting_room,0),0)
holds(1,in(manipulator_end_1),(starting_room,0),0)
holds(1,in(manipulator_end_2),(starting_room,0),0)
holds(1,in(manipulator_limb_1),(starting_room,0),0)
holds(1,in(manipulator_limb_2),(starting_room,0),0)
holds(1,in(puzzle_room_table),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_left),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_right),(puzzle_room,1),0)
holds(1,in(talos),(starting_room,0),0)
holds(1,in((block,1)),(puzzle_room,1),0)
holds(1,in((block,2)),(puzzle_room,1),0)
holds(1,in((block,3)),(puzzle_room,1),0)
holds(1,in((block,4)),(store_room,0),0)
holds(1,in((block,5)),(store_room,0),0)
holds(1,in((block,6)),(store_room,0),0)
holds(1,on((block,1)),puzzle_room_table_left,0)
holds(1,on((block,2)),puzzle_room_table_right,0)
holds(1,on((block,3)),(block,1),0)
holds(1,on((block,4)),nothing,0)
holds(1,on((block,5)),nothing,0)
holds(1,on((block,6)),nothing,0)
holds(1,tower_base((block,1)),true,0)
holds(1,tower_base((block,2)),true,0)
holds(1,tower_base((block,3)),false,0)
holds(1,tower_base((block,4)),false,0)
holds(1,tower_base((block,5)),false,0)
holds(1,tower_base((block,6)),false,0)
holds(1,unordered_tower((block,1)),true,0)
holds(1,unordered_tower((block,2)),false,0)
holds(1,unordered_tower((block,3)),false,0)
holds(1,unordered_tower((block,4)),false,0)
holds(1,unordered_tower((block,5)),false,0)
holds(1,unordered_tower((block,6)),false,0)
holds(1,in_tower((block,1),(block,1)),true,0)
holds(1,in_tower((block,1),(block,2)),false,0)
holds(1,in_tower((block,1),(block,3)),true,0)
holds(1,in_tower((block,1),(block,4)),false,0)
holds(1,in_tower((block,1),(block,5)),false,0)
holds(1,in_tower((block,1),(block,6)),false,0)
holds(1,in_tower((block,2),(block,1)),false,0)
holds(1,in_tower((block,2),(block,2)),true,0)
holds(1,in_tower((block,2),(block,3)),false,0)
holds(1,in_tower((block,2),(block,4)),false,0)
holds(1,in_tower((block,2),(block,5)),false,0)
holds(1,in_tower((block,2),(block,6)),false,0)
holds(1,in_tower((block,3),(block,1)),false,0)
holds(1,in_tower((block,3),(block,2)),false,0)
holds(1,in_tower((block,3),(block,3)),false,0)
holds(1,in_tower((block,3),(block,4)),false,0)
holds(1,in_tower((block,3),(block,5)),false,0)
holds(1,in_tower((block,3),(block,6)),false,0)
holds(1,in_tower((block,4),(block,1)),false,0)
holds(1,in_tower((block,4),(block,2)),false,0)
holds(1,in_tower((block,4),(block,3)),false,0)
holds(1,in_tower((block,4),(block,4)),false,0)
holds(1,in_tower((block,4),(block,5)),false,0)
holds(1,in_tower((block,4),(block,6)),false,0)
holds(1,in_tower((block,5),(block,1)),false,0)
holds(1,in_tower((block,5),(block,2)),false,0)
holds(1,in_tower((block,5),(block,3)),false,0)
holds(1,in_tower((block,5),(block,4)),false,0)
holds(1,in_tower((block,5),(block,5)),false,0)
holds(1,in_tower((block,5),(block,6)),false,0)
holds(1,in_tower((block,6),(block,1)),false,0)
holds(1,in_tower((block,6),(block,2)),false,0)
holds(1,in_tower((block,6),(block,3)),false,0)
holds(1,in_tower((block,6),(block,4)),false,0)
holds(1,in_tower((block,6),(block,5)),false,0)
holds(1,in_tower((block,6),(block,6)),false,0)

[11-02-2021_01-49-09] INFO :: ASH Planner Main #1 >> Generating goal state.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Instantiated.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('goal_state', []), ('instance_module', []), ('goal_abstraction_module', []), ('domain_sorts', []), ('domain_rules', [0])

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Program building started.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Program building completed.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Grounding started.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Grounding completed in 0.051059s.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Solving started.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Model found:
Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Solving completed in 0.004270s.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 || Generate Goal State || #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.051059s, Solving time = 0.004270s, Total time = 0.055329s
Final Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[11-02-2021_01-49-09] INFO :: ASH Planner Main #1 >> Goal state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.051059s, Solving time = 0.004270s, Total time = 0.055329s
Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[11-02-2021_01-49-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 3              
          ========================================          

goal(3,complete(blue),false,false)
goal(3,complete(blue),true,true)
goal(3,complete(red),false,false)
goal(3,complete(red),true,true)
goal(3,on((block,3)),nothing,false)
goal(3,on((block,3)),puzzle_room_table,true)
goal(3,on((block,3)),(block,1),false)
goal(3,on((block,3)),(block,2),false)
goal(3,on((block,3)),(block,4),false)
goal(3,on((block,3)),(block,5),false)
goal(3,on((block,3)),(block,6),false)
goal(3,on((block,6)),nothing,false)
goal(3,on((block,6)),puzzle_room_table,true)
goal(3,on((block,6)),(block,1),false)
goal(3,on((block,6)),(block,2),false)
goal(3,on((block,6)),(block,3),false)
goal(3,on((block,6)),(block,4),false)
goal(3,on((block,6)),(block,5),false)

[11-02-2021_01-49-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 2              
          ========================================          

goal(2,complete(blue),false,false)
goal(2,complete(blue),true,true)
goal(2,complete(red),false,false)
goal(2,complete(red),true,true)
goal(2,on((block,3)),nothing,false)
goal(2,on((block,3)),puzzle_room_table,true)
goal(2,on((block,3)),(block,1),false)
goal(2,on((block,3)),(block,2),false)
goal(2,on((block,3)),(block,4),false)
goal(2,on((block,3)),(block,5),false)
goal(2,on((block,3)),(block,6),false)
goal(2,on((block,6)),nothing,false)
goal(2,on((block,6)),puzzle_room_table,true)
goal(2,on((block,6)),(block,1),false)
goal(2,on((block,6)),(block,2),false)
goal(2,on((block,6)),(block,3),false)
goal(2,on((block,6)),(block,4),false)
goal(2,on((block,6)),(block,5),false)

[11-02-2021_01-49-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 1              
          ========================================          

goal(1,complete(blue),false,false)
goal(1,complete(blue),true,true)
goal(1,complete(red),false,false)
goal(1,complete(red),true,true)
goal(1,on((block,3)),nothing,false)
goal(1,on((block,3)),puzzle_room_table_left,true)
goal(1,on((block,3)),puzzle_room_table_right,false)
goal(1,on((block,3)),(block,1),false)
goal(1,on((block,3)),(block,2),false)
goal(1,on((block,3)),(block,4),false)
goal(1,on((block,3)),(block,5),false)
goal(1,on((block,3)),(block,6),false)
goal(1,on((block,6)),nothing,false)
goal(1,on((block,6)),puzzle_room_table_left,false)
goal(1,on((block,6)),puzzle_room_table_right,true)
goal(1,on((block,6)),(block,1),false)
goal(1,on((block,6)),(block,2),false)
goal(1,on((block,6)),(block,3),false)
goal(1,on((block,6)),(block,4),false)
goal(1,on((block,6)),(block,5),false)

[11-02-2021_01-49-09] INFO :: Experiment >> 

  ################################################################################################  
                  Running experiments : Initial runs = 0 : Experimental runs = 20                   
  ################################################################################################  

[11-02-2021_01-49-09] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_01-49-09] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Instantiated.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building started.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building completed.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding base program parts.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.016586s.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving base program parts.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.003127s.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving started.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.199338s.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.009412s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.076891s.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005524s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.064788s.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.007064s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.085058s.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.012453s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.082097s.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.018776s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_01-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.082087s.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.015181s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.084738s.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.017590s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.080261s.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.018443s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.080227s.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.024019s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.151798s.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.023455s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.081256s.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.025520s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.088291s.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.028062s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.088744s.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.037979s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_01-49-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.135368s.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.036235s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.085124s.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.040417s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.084448s.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.055244s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.090445s.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.078795s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.098235s.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.077068s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.086595s.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.073049s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.088377s.

[11-02-2021_01-49-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.089904s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.090967s.

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.136952s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.090017s.

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.208061s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.093873s.

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.220897s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_01-49-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_01-49-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.103183s.

[11-02-2021_01-49-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.318426s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_01-49-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_01-49-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.099672s.

[11-02-2021_01-49-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.419386s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_01-49-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_01-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.108214s.

[11-02-2021_01-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.789185s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_01-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_01-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.106713s.

[11-02-2021_01-49-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.626448s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_01-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_01-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.101475s.

[11-02-2021_01-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.298084s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_01-49-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_01-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.104296s.

[11-02-2021_01-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.284557s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_01-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_01-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.102156s.

[11-02-2021_01-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.345946s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_01-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_01-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.110319s.

[11-02-2021_01-49-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.384815s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_01-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_01-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.103005s.

[11-02-2021_01-49-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.645433s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_01-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_01-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.106934s.

[11-02-2021_01-49-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 1.115449s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_01-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_01-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.106671s.

[11-02-2021_01-49-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 1.992353s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_01-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_01-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.111103s.

[11-02-2021_01-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 2.690133s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_01-49-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_01-49-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.112179s.

[11-02-2021_01-49-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 2.436231s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_01-49-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_01-49-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.113053s.

[11-02-2021_01-49-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 2.492724s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_01-49-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_01-49-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.116770s.

[11-02-2021_01-49-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 4.445372s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_01-49-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_01-49-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.119052s.

[11-02-2021_01-49-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 3.756027s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_01-49-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_01-49-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.119560s.

[11-02-2021_01-49-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 5.296354s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_01-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_01-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.394468s.

[11-02-2021_01-49-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-49-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 7.529324s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-49-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_01-49-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_01-49-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.407597s.

[11-02-2021_01-49-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-50-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 8.763867s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-50-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_01-50-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_01-50-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.410415s.

[11-02-2021_01-50-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-50-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 11.363784s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-50-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_01-50-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_01-50-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.414665s.

[11-02-2021_01-50-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 15.743377s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_01-50-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_01-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.402212s.

[11-02-2021_01-50-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 16.772805s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_01-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_01-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.403780s.

[11-02-2021_01-50-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-51-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 17.600302s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-51-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_01-51-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_01-51-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.469958s.

[11-02-2021_01-51-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-51-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 16.361143s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-51-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_01-51-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_01-51-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.411875s.

[11-02-2021_01-51-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-51-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 19.239703s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-51-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_01-51-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_01-51-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.465330s.

[11-02-2021_01-51-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-52-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 20.249033s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-52-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_01-52-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_01-52-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.473334s.

[11-02-2021_01-52-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-52-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 29.401297s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-52-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_01-52-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_01-52-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.769741s.

[11-02-2021_01-52-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 47.433749s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_01-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_01-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.739083s.

[11-02-2021_01-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 41.064665s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_01-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_01-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.584983s.

[11-02-2021_01-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 77.850472s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_01-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_01-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.544957s.

[11-02-2021_01-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-56-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 95.370225s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-56-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_01-56-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_01-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.604375s.

[11-02-2021_01-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_01-58-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 82.437598s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_01-58-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_01-58-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_01-58-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.523411s.

[11-02-2021_01-58-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_02-00-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 102.626035s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-00-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_02-00-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_02-00-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.663010s.

[11-02-2021_02-00-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_02-02-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 128.521298s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-02-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_02-02-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_02-02-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.683645s.

[11-02-2021_02-02-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_02-04-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 130.020912s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-04-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_02-04-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_02-04-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.670296s.

[11-02-2021_02-04-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_02-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 147.902245s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_02-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_02-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.582121s.

[11-02-2021_02-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_02-08-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 104.482048s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-08-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_02-08-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_02-08-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.556482s.

[11-02-2021_02-08-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_02-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 80.482571s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_02-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_02-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.585822s.

[11-02-2021_02-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_02-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 80.035142s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_02-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_02-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.596270s.

[11-02-2021_02-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_02-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 101.747627s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_02-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_02-13-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.616851s.

[11-02-2021_02-13-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_02-14-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 113.646268s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-14-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_02-14-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_02-14-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.589115s.

[11-02-2021_02-14-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_02-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 136.122595s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_02-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_02-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 1.033704s.

[11-02-2021_02-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_02-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 129.316796s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_02-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_02-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.750790s.

[11-02-2021_02-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Model found:
Model :: Total atoms = 14860, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 16.127624s:
Result = SAT, Stop condition = SAT

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving completed in 1829.920899s because STOP_CON_REACHED.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 19.398252s, Solving time = 1807.812652s, Total time = 1829.920899s
Final Model :: Total atoms = 14860, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.199338s, Solving time = 0.009412s, Total time = 0.208749s
2 : Statistics :: Grounding time = 0.076891s, Solving time = 0.005524s, Total time = 0.082415s
3 : Statistics :: Grounding time = 0.064788s, Solving time = 0.007064s, Total time = 0.071852s
4 : Statistics :: Grounding time = 0.085058s, Solving time = 0.012453s, Total time = 0.097510s
5 : Statistics :: Grounding time = 0.082097s, Solving time = 0.018776s, Total time = 0.100874s
6 : Statistics :: Grounding time = 0.082087s, Solving time = 0.015181s, Total time = 0.097268s
7 : Statistics :: Grounding time = 0.084738s, Solving time = 0.017590s, Total time = 0.102327s
8 : Statistics :: Grounding time = 0.080261s, Solving time = 0.018443s, Total time = 0.098703s
9 : Statistics :: Grounding time = 0.080227s, Solving time = 0.024019s, Total time = 0.104246s
10 : Statistics :: Grounding time = 0.151798s, Solving time = 0.023455s, Total time = 0.175253s
11 : Statistics :: Grounding time = 0.081256s, Solving time = 0.025520s, Total time = 0.106776s
12 : Statistics :: Grounding time = 0.088291s, Solving time = 0.028062s, Total time = 0.116354s
13 : Statistics :: Grounding time = 0.088744s, Solving time = 0.037979s, Total time = 0.126722s
14 : Statistics :: Grounding time = 0.135368s, Solving time = 0.036235s, Total time = 0.171603s
15 : Statistics :: Grounding time = 0.085124s, Solving time = 0.040417s, Total time = 0.125541s
16 : Statistics :: Grounding time = 0.084448s, Solving time = 0.055244s, Total time = 0.139691s
17 : Statistics :: Grounding time = 0.090445s, Solving time = 0.078795s, Total time = 0.169239s
18 : Statistics :: Grounding time = 0.098235s, Solving time = 0.077068s, Total time = 0.175303s
19 : Statistics :: Grounding time = 0.086595s, Solving time = 0.073049s, Total time = 0.159644s
20 : Statistics :: Grounding time = 0.088377s, Solving time = 0.089904s, Total time = 0.178281s
21 : Statistics :: Grounding time = 0.090967s, Solving time = 0.136952s, Total time = 0.227920s
22 : Statistics :: Grounding time = 0.090017s, Solving time = 0.208061s, Total time = 0.298078s
23 : Statistics :: Grounding time = 0.093873s, Solving time = 0.220897s, Total time = 0.314771s
24 : Statistics :: Grounding time = 0.103183s, Solving time = 0.318426s, Total time = 0.421608s
25 : Statistics :: Grounding time = 0.099672s, Solving time = 0.419386s, Total time = 0.519058s
26 : Statistics :: Grounding time = 0.108214s, Solving time = 0.789185s, Total time = 0.897399s
27 : Statistics :: Grounding time = 0.106713s, Solving time = 0.626448s, Total time = 0.733161s
28 : Statistics :: Grounding time = 0.101475s, Solving time = 0.298084s, Total time = 0.399559s
29 : Statistics :: Grounding time = 0.104296s, Solving time = 0.284557s, Total time = 0.388853s
30 : Statistics :: Grounding time = 0.102156s, Solving time = 0.345946s, Total time = 0.448101s
31 : Statistics :: Grounding time = 0.110319s, Solving time = 0.384815s, Total time = 0.495134s
32 : Statistics :: Grounding time = 0.103005s, Solving time = 0.645433s, Total time = 0.748438s
33 : Statistics :: Grounding time = 0.106934s, Solving time = 1.115449s, Total time = 1.222382s
34 : Statistics :: Grounding time = 0.106671s, Solving time = 1.992353s, Total time = 2.099024s
35 : Statistics :: Grounding time = 0.111103s, Solving time = 2.690133s, Total time = 2.801236s
36 : Statistics :: Grounding time = 0.112179s, Solving time = 2.436231s, Total time = 2.548410s
37 : Statistics :: Grounding time = 0.113053s, Solving time = 2.492724s, Total time = 2.605777s
38 : Statistics :: Grounding time = 0.116770s, Solving time = 4.445372s, Total time = 4.562141s
39 : Statistics :: Grounding time = 0.119052s, Solving time = 3.756027s, Total time = 3.875080s
40 : Statistics :: Grounding time = 0.119560s, Solving time = 5.296354s, Total time = 5.415915s
41 : Statistics :: Grounding time = 0.394468s, Solving time = 7.529324s, Total time = 7.923792s
42 : Statistics :: Grounding time = 0.407597s, Solving time = 8.763867s, Total time = 9.171464s
43 : Statistics :: Grounding time = 0.410415s, Solving time = 11.363784s, Total time = 11.774199s
44 : Statistics :: Grounding time = 0.414665s, Solving time = 15.743377s, Total time = 16.158042s
45 : Statistics :: Grounding time = 0.402212s, Solving time = 16.772805s, Total time = 17.175016s
46 : Statistics :: Grounding time = 0.403780s, Solving time = 17.600302s, Total time = 18.004082s
47 : Statistics :: Grounding time = 0.469958s, Solving time = 16.361143s, Total time = 16.831101s
48 : Statistics :: Grounding time = 0.411875s, Solving time = 19.239703s, Total time = 19.651578s
49 : Statistics :: Grounding time = 0.465330s, Solving time = 20.249033s, Total time = 20.714363s
50 : Statistics :: Grounding time = 0.473334s, Solving time = 29.401297s, Total time = 29.874630s
51 : Statistics :: Grounding time = 0.769741s, Solving time = 47.433749s, Total time = 48.203489s
52 : Statistics :: Grounding time = 0.739083s, Solving time = 41.064665s, Total time = 41.803748s
53 : Statistics :: Grounding time = 0.584983s, Solving time = 77.850472s, Total time = 78.435455s
54 : Statistics :: Grounding time = 0.544957s, Solving time = 95.370225s, Total time = 95.915181s
55 : Statistics :: Grounding time = 0.604375s, Solving time = 82.437598s, Total time = 83.041973s
56 : Statistics :: Grounding time = 0.523411s, Solving time = 102.626035s, Total time = 103.149446s
57 : Statistics :: Grounding time = 0.663010s, Solving time = 128.521298s, Total time = 129.184309s
58 : Statistics :: Grounding time = 0.683645s, Solving time = 130.020912s, Total time = 130.704557s
59 : Statistics :: Grounding time = 0.670296s, Solving time = 147.902245s, Total time = 148.572540s
60 : Statistics :: Grounding time = 0.582121s, Solving time = 104.482048s, Total time = 105.064169s
61 : Statistics :: Grounding time = 0.556482s, Solving time = 80.482571s, Total time = 81.039053s
62 : Statistics :: Grounding time = 0.585822s, Solving time = 80.035142s, Total time = 80.620965s
63 : Statistics :: Grounding time = 0.596270s, Solving time = 101.747627s, Total time = 102.343897s
64 : Statistics :: Grounding time = 0.616851s, Solving time = 113.646268s, Total time = 114.263118s
65 : Statistics :: Grounding time = 0.589115s, Solving time = 136.122595s, Total time = 136.711710s
66 : Statistics :: Grounding time = 1.033704s, Solving time = 129.316796s, Total time = 130.350501s
67 : Statistics :: Grounding time = 0.750790s, Solving time = 16.127624s, Total time = 16.878414s

[11-02-2021_02-19-39] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 19.398252s, Solving time = 1807.812652s, Total time = 1829.920899s
Model :: Total atoms = 14860, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[11-02-2021_02-19-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_1,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_1,(block,6)),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),32)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_1,(block,3)),34)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),36)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_1,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_1,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_2,extended),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),48)
occurs(1,talos,configure(manipulator_limb_1,extended),49)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),50)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),51)
occurs(1,talos,configure(manipulator_limb_1,retracted),52)
occurs(1,talos,configure(manipulator_limb_2,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_1,extended),60)
occurs(1,talos,configure(manipulator_limb_2,extended),61)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),62)
occurs(1,talos,release(manipulator_end_2,(block,5)),63)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),64)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),65)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),66)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),67)

[11-02-2021_02-19-39] INFO :: Experiment >> 

      ================================================      
           Experimental run 1 : Time 1830.379933s           
      ================================================      

[11-02-2021_02-19-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_02-19-39] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Instantiated.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building started.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building completed.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding base program parts.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.016500s.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving base program parts.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.002980s.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving started.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.188269s.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.009770s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_02-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.063115s.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.005513s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.067260s.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.007729s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.065307s.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.011469s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.069365s.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.016640s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.071923s.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.015121s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.074793s.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.016444s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.078564s.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.019181s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.078877s.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.019905s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.082494s.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.021363s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.078160s.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.022748s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.078837s.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.019929s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_02-19-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.081524s.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.021402s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.078759s.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.022829s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.081364s.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.030376s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.080601s.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.025689s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.081498s.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.029309s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.088322s.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.039953s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.088540s.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.036686s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.086229s.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.042159s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_02-19-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.087109s.

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.045974s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.087444s.

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.056697s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.091102s.

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.059030s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.099209s.

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.077914s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.095104s.

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.101400s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.093409s.

[11-02-2021_02-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.138313s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.095874s.

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.198155s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.095795s.

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.324807s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.101390s.

[11-02-2021_02-19-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.469413s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_02-19-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_02-19-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.100364s.

[11-02-2021_02-19-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.561420s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_02-19-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_02-19-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.100071s.

[11-02-2021_02-19-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.001655s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_02-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_02-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.101746s.

[11-02-2021_02-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.234562s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_02-19-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_02-19-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.102277s.

[11-02-2021_02-19-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.801319s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_02-19-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_02-19-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.104421s.

[11-02-2021_02-19-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 2.939867s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_02-19-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_02-19-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.106649s.

[11-02-2021_02-19-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 2.586918s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_02-19-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_02-19-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.109543s.

[11-02-2021_02-19-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-19-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.887755s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-19-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_02-19-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_02-19-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.115661s.

[11-02-2021_02-19-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-20-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 3.067075s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-20-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_02-20-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_02-20-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.111964s.

[11-02-2021_02-20-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 3.557158s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_02-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_02-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.112018s.

[11-02-2021_02-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 4.298911s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_02-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_02-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.119586s.

[11-02-2021_02-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-20-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 5.202283s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-20-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_02-20-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_02-20-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.119959s.

[11-02-2021_02-20-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 4.424697s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_02-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_02-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.118166s.

[11-02-2021_02-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 4.834053s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_02-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_02-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.365485s.

[11-02-2021_02-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-20-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 5.983201s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-20-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_02-20-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_02-20-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.363211s.

[11-02-2021_02-20-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 8.817232s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_02-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_02-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.379120s.

[11-02-2021_02-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-20-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 9.999482s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-20-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_02-20-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_02-20-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.397426s.

[11-02-2021_02-20-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-21-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 15.912731s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-21-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_02-21-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_02-21-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.457101s.

[11-02-2021_02-21-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-21-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 18.053320s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-21-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_02-21-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_02-21-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.410641s.

[11-02-2021_02-21-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-21-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 21.085679s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-21-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_02-21-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_02-21-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.416729s.

[11-02-2021_02-21-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 21.913830s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_02-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_02-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.431038s.

[11-02-2021_02-22-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 29.679519s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_02-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_02-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.439088s.

[11-02-2021_02-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-23-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 30.779891s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-23-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_02-23-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_02-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.441710s.

[11-02-2021_02-23-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-23-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 33.110542s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-23-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_02-23-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_02-23-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.449236s.

[11-02-2021_02-23-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-24-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 59.801110s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-24-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_02-24-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_02-24-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.469738s.

[11-02-2021_02-24-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-26-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 89.355711s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-26-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_02-26-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_02-26-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.478955s.

[11-02-2021_02-26-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-27-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 95.418483s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-27-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_02-27-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_02-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.556981s.

[11-02-2021_02-27-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 123.669683s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_02-29-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_02-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.548319s.

[11-02-2021_02-29-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-31-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 118.937927s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-31-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_02-31-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_02-31-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.525654s.

[11-02-2021_02-31-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 115.608299s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_02-33-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_02-33-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.556709s.

[11-02-2021_02-33-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-35-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 84.368651s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-35-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_02-35-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_02-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.571605s.

[11-02-2021_02-35-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-36-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 74.636372s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-36-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_02-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_02-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.622037s.

[11-02-2021_02-36-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 48.345144s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_02-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_02-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.578980s.

[11-02-2021_02-37-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 49.961109s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_02-38-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_02-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.645539s.

[11-02-2021_02-38-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 76.866149s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_02-39-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_02-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.639615s.

[11-02-2021_02-39-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 76.958999s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-40-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_02-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_02-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.649254s.

[11-02-2021_02-40-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 117.966682s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_02-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_02-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.631750s.

[11-02-2021_02-42-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 122.964563s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_02-44-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_02-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.730967s.

[11-02-2021_02-44-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Model found:
Model :: Total atoms = 14863, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 19.019631s:
Result = SAT, Stop condition = SAT

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving completed in 1527.541034s because STOP_CON_REACHED.

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 16.706048s, Solving time = 1508.520511s, Total time = 1527.541034s
Final Model :: Total atoms = 14863, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.188269s, Solving time = 0.009770s, Total time = 0.198039s
2 : Statistics :: Grounding time = 0.063115s, Solving time = 0.005513s, Total time = 0.068628s
3 : Statistics :: Grounding time = 0.067260s, Solving time = 0.007729s, Total time = 0.074988s
4 : Statistics :: Grounding time = 0.065307s, Solving time = 0.011469s, Total time = 0.076777s
5 : Statistics :: Grounding time = 0.069365s, Solving time = 0.016640s, Total time = 0.086005s
6 : Statistics :: Grounding time = 0.071923s, Solving time = 0.015121s, Total time = 0.087044s
7 : Statistics :: Grounding time = 0.074793s, Solving time = 0.016444s, Total time = 0.091237s
8 : Statistics :: Grounding time = 0.078564s, Solving time = 0.019181s, Total time = 0.097745s
9 : Statistics :: Grounding time = 0.078877s, Solving time = 0.019905s, Total time = 0.098781s
10 : Statistics :: Grounding time = 0.082494s, Solving time = 0.021363s, Total time = 0.103857s
11 : Statistics :: Grounding time = 0.078160s, Solving time = 0.022748s, Total time = 0.100909s
12 : Statistics :: Grounding time = 0.078837s, Solving time = 0.019929s, Total time = 0.098767s
13 : Statistics :: Grounding time = 0.081524s, Solving time = 0.021402s, Total time = 0.102926s
14 : Statistics :: Grounding time = 0.078759s, Solving time = 0.022829s, Total time = 0.101588s
15 : Statistics :: Grounding time = 0.081364s, Solving time = 0.030376s, Total time = 0.111739s
16 : Statistics :: Grounding time = 0.080601s, Solving time = 0.025689s, Total time = 0.106290s
17 : Statistics :: Grounding time = 0.081498s, Solving time = 0.029309s, Total time = 0.110807s
18 : Statistics :: Grounding time = 0.088322s, Solving time = 0.039953s, Total time = 0.128275s
19 : Statistics :: Grounding time = 0.088540s, Solving time = 0.036686s, Total time = 0.125226s
20 : Statistics :: Grounding time = 0.086229s, Solving time = 0.042159s, Total time = 0.128388s
21 : Statistics :: Grounding time = 0.087109s, Solving time = 0.045974s, Total time = 0.133083s
22 : Statistics :: Grounding time = 0.087444s, Solving time = 0.056697s, Total time = 0.144141s
23 : Statistics :: Grounding time = 0.091102s, Solving time = 0.059030s, Total time = 0.150133s
24 : Statistics :: Grounding time = 0.099209s, Solving time = 0.077914s, Total time = 0.177123s
25 : Statistics :: Grounding time = 0.095104s, Solving time = 0.101400s, Total time = 0.196504s
26 : Statistics :: Grounding time = 0.093409s, Solving time = 0.138313s, Total time = 0.231722s
27 : Statistics :: Grounding time = 0.095874s, Solving time = 0.198155s, Total time = 0.294028s
28 : Statistics :: Grounding time = 0.095795s, Solving time = 0.324807s, Total time = 0.420602s
29 : Statistics :: Grounding time = 0.101390s, Solving time = 0.469413s, Total time = 0.570803s
30 : Statistics :: Grounding time = 0.100364s, Solving time = 0.561420s, Total time = 0.661785s
31 : Statistics :: Grounding time = 0.100071s, Solving time = 1.001655s, Total time = 1.101726s
32 : Statistics :: Grounding time = 0.101746s, Solving time = 1.234562s, Total time = 1.336309s
33 : Statistics :: Grounding time = 0.102277s, Solving time = 1.801319s, Total time = 1.903596s
34 : Statistics :: Grounding time = 0.104421s, Solving time = 2.939867s, Total time = 3.044288s
35 : Statistics :: Grounding time = 0.106649s, Solving time = 2.586918s, Total time = 2.693566s
36 : Statistics :: Grounding time = 0.109543s, Solving time = 1.887755s, Total time = 1.997298s
37 : Statistics :: Grounding time = 0.115661s, Solving time = 3.067075s, Total time = 3.182736s
38 : Statistics :: Grounding time = 0.111964s, Solving time = 3.557158s, Total time = 3.669121s
39 : Statistics :: Grounding time = 0.112018s, Solving time = 4.298911s, Total time = 4.410928s
40 : Statistics :: Grounding time = 0.119586s, Solving time = 5.202283s, Total time = 5.321869s
41 : Statistics :: Grounding time = 0.119959s, Solving time = 4.424697s, Total time = 4.544656s
42 : Statistics :: Grounding time = 0.118166s, Solving time = 4.834053s, Total time = 4.952219s
43 : Statistics :: Grounding time = 0.365485s, Solving time = 5.983201s, Total time = 6.348686s
44 : Statistics :: Grounding time = 0.363211s, Solving time = 8.817232s, Total time = 9.180443s
45 : Statistics :: Grounding time = 0.379120s, Solving time = 9.999482s, Total time = 10.378602s
46 : Statistics :: Grounding time = 0.397426s, Solving time = 15.912731s, Total time = 16.310156s
47 : Statistics :: Grounding time = 0.457101s, Solving time = 18.053320s, Total time = 18.510422s
48 : Statistics :: Grounding time = 0.410641s, Solving time = 21.085679s, Total time = 21.496321s
49 : Statistics :: Grounding time = 0.416729s, Solving time = 21.913830s, Total time = 22.330559s
50 : Statistics :: Grounding time = 0.431038s, Solving time = 29.679519s, Total time = 30.110557s
51 : Statistics :: Grounding time = 0.439088s, Solving time = 30.779891s, Total time = 31.218979s
52 : Statistics :: Grounding time = 0.441710s, Solving time = 33.110542s, Total time = 33.552252s
53 : Statistics :: Grounding time = 0.449236s, Solving time = 59.801110s, Total time = 60.250346s
54 : Statistics :: Grounding time = 0.469738s, Solving time = 89.355711s, Total time = 89.825449s
55 : Statistics :: Grounding time = 0.478955s, Solving time = 95.418483s, Total time = 95.897438s
56 : Statistics :: Grounding time = 0.556981s, Solving time = 123.669683s, Total time = 124.226664s
57 : Statistics :: Grounding time = 0.548319s, Solving time = 118.937927s, Total time = 119.486246s
58 : Statistics :: Grounding time = 0.525654s, Solving time = 115.608299s, Total time = 116.133953s
59 : Statistics :: Grounding time = 0.556709s, Solving time = 84.368651s, Total time = 84.925360s
60 : Statistics :: Grounding time = 0.571605s, Solving time = 74.636372s, Total time = 75.207977s
61 : Statistics :: Grounding time = 0.622037s, Solving time = 48.345144s, Total time = 48.967181s
62 : Statistics :: Grounding time = 0.578980s, Solving time = 49.961109s, Total time = 50.540088s
63 : Statistics :: Grounding time = 0.645539s, Solving time = 76.866149s, Total time = 77.511687s
64 : Statistics :: Grounding time = 0.639615s, Solving time = 76.958999s, Total time = 77.598614s
65 : Statistics :: Grounding time = 0.649254s, Solving time = 117.966682s, Total time = 118.615936s
66 : Statistics :: Grounding time = 0.631750s, Solving time = 122.964563s, Total time = 123.596313s
67 : Statistics :: Grounding time = 0.730967s, Solving time = 19.019631s, Total time = 19.750599s

[11-02-2021_02-45-07] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 16.706048s, Solving time = 1508.520511s, Total time = 1527.541034s
Model :: Total atoms = 14863, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_02-45-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_2,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_2,extended),28)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_2,(block,6)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_2,(block,3)),34)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),36)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_2,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_2,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_2,extended),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),47)
occurs(1,talos,configure(manipulator_limb_1,extended),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),49)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),50)
occurs(1,talos,configure(manipulator_limb_2,retracted),51)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),52)
occurs(1,talos,configure(manipulator_limb_1,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_1,extended),60)
occurs(1,talos,configure(manipulator_limb_2,extended),61)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),62)
occurs(1,talos,release(manipulator_end_1,(block,5)),63)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),64)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),65)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),66)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),67)

[11-02-2021_02-45-07] INFO :: Experiment >> 

      ================================================      
           Experimental run 2 : Time 1528.055682s           
      ================================================      

[11-02-2021_02-45-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_02-45-07] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Instantiated.

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building started.

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building completed.

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding base program parts.

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.017290s.

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving base program parts.

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.003094s.

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving started.

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_02-45-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.195706s.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.008673s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.063685s.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.005613s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.064069s.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.007797s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.068325s.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.011906s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.077364s.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.017092s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.076329s.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.016226s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.076141s.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.019228s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.080137s.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.019051s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.081965s.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.019081s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.080179s.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.023121s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.082913s.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.021751s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_02-45-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.080332s.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.021607s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.080663s.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.025922s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.081137s.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.024689s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.083650s.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.025655s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.088283s.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.029736s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.090455s.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.035518s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.083941s.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.032533s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.086627s.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.029310s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_02-45-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.086952s.

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.035375s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.088997s.

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.057172s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.088509s.

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.079409s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.096573s.

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.134425s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.093314s.

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.196040s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_02-45-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_02-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.093599s.

[11-02-2021_02-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.245678s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_02-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_02-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.094621s.

[11-02-2021_02-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.213360s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_02-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_02-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.099534s.

[11-02-2021_02-45-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.334774s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_02-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_02-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.098471s.

[11-02-2021_02-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.457573s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_02-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_02-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.102729s.

[11-02-2021_02-45-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.713152s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_02-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_02-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.106347s.

[11-02-2021_02-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.974910s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_02-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_02-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.103318s.

[11-02-2021_02-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.641184s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_02-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_02-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.103486s.

[11-02-2021_02-45-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.869542s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_02-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_02-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.105077s.

[11-02-2021_02-45-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.959472s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_02-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_02-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.106113s.

[11-02-2021_02-45-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 2.978051s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_02-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_02-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.108083s.

[11-02-2021_02-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 2.399940s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_02-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_02-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.109445s.

[11-02-2021_02-45-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 3.078242s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_02-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_02-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.113382s.

[11-02-2021_02-45-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 2.965617s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_02-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_02-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.112181s.

[11-02-2021_02-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 3.632464s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_02-45-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_02-45-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.113437s.

[11-02-2021_02-45-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 3.814751s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_02-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_02-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.123644s.

[11-02-2021_02-45-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 4.126093s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_02-45-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_02-45-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.363096s.

[11-02-2021_02-45-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 5.928471s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_02-45-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_02-45-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.365745s.

[11-02-2021_02-45-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-45-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 8.498504s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-45-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_02-45-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_02-45-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.376762s.

[11-02-2021_02-45-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-46-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 8.777729s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-46-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_02-46-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_02-46-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.371361s.

[11-02-2021_02-46-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 11.661388s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_02-46-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_02-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.392977s.

[11-02-2021_02-46-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 13.988160s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_02-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_02-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.404426s.

[11-02-2021_02-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 24.423418s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_02-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_02-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.454839s.

[11-02-2021_02-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-47-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 29.627661s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-47-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_02-47-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_02-47-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.433630s.

[11-02-2021_02-47-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-48-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 42.804044s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-48-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_02-48-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_02-48-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.433260s.

[11-02-2021_02-48-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-48-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 45.907083s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-48-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_02-48-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_02-49-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.443416s.

[11-02-2021_02-49-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-49-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 50.517879s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-49-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_02-49-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_02-49-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.442711s.

[11-02-2021_02-49-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 62.830037s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_02-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_02-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.466049s.

[11-02-2021_02-50-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-51-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 60.894745s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-51-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_02-51-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_02-51-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.543337s.

[11-02-2021_02-51-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 70.906916s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_02-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_02-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.491063s.

[11-02-2021_02-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 81.226054s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_02-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_02-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.493851s.

[11-02-2021_02-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 41.910312s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_02-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_02-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.583445s.

[11-02-2021_02-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-55-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 39.692310s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-55-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_02-55-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_02-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.496833s.

[11-02-2021_02-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 53.304212s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_02-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_02-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.522246s.

[11-02-2021_02-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-57-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 67.480179s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-57-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_02-57-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_02-57-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.519534s.

[11-02-2021_02-57-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_02-58-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 60.045712s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_02-58-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_02-58-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_02-58-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.530491s.

[11-02-2021_02-58-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_03-00-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 103.504479s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-00-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_03-00-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_03-00-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.520974s.

[11-02-2021_03-00-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_03-02-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 121.744820s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-02-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_03-02-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_03-02-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.537549s.

[11-02-2021_03-02-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_03-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 109.104480s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_03-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_03-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.543327s.

[11-02-2021_03-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_03-06-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 118.608101s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-06-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_03-06-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_03-06-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.658617s.

[11-02-2021_03-06-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_03-08-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 131.607219s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-08-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_03-08-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_03-08-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.610464s.

[11-02-2021_03-08-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_03-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 141.799857s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_03-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_03-11-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.581032s.

[11-02-2021_03-11-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_03-13-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 120.412422s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_03-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_03-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.590655s.

[11-02-2021_03-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[11-02-2021_03-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Model found:
Model :: Total atoms = 14807, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_03-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 15.353785s:
Result = SAT, Stop condition = SAT

[11-02-2021_03-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving completed in 1694.158647s because STOP_CON_REACHED.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 16.958693s, Solving time = 1674.864803s, Total time = 1694.158647s
Final Model :: Total atoms = 14807, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.195706s, Solving time = 0.008673s, Total time = 0.204379s
2 : Statistics :: Grounding time = 0.063685s, Solving time = 0.005613s, Total time = 0.069298s
3 : Statistics :: Grounding time = 0.064069s, Solving time = 0.007797s, Total time = 0.071866s
4 : Statistics :: Grounding time = 0.068325s, Solving time = 0.011906s, Total time = 0.080232s
5 : Statistics :: Grounding time = 0.077364s, Solving time = 0.017092s, Total time = 0.094456s
6 : Statistics :: Grounding time = 0.076329s, Solving time = 0.016226s, Total time = 0.092555s
7 : Statistics :: Grounding time = 0.076141s, Solving time = 0.019228s, Total time = 0.095369s
8 : Statistics :: Grounding time = 0.080137s, Solving time = 0.019051s, Total time = 0.099188s
9 : Statistics :: Grounding time = 0.081965s, Solving time = 0.019081s, Total time = 0.101046s
10 : Statistics :: Grounding time = 0.080179s, Solving time = 0.023121s, Total time = 0.103300s
11 : Statistics :: Grounding time = 0.082913s, Solving time = 0.021751s, Total time = 0.104665s
12 : Statistics :: Grounding time = 0.080332s, Solving time = 0.021607s, Total time = 0.101939s
13 : Statistics :: Grounding time = 0.080663s, Solving time = 0.025922s, Total time = 0.106585s
14 : Statistics :: Grounding time = 0.081137s, Solving time = 0.024689s, Total time = 0.105826s
15 : Statistics :: Grounding time = 0.083650s, Solving time = 0.025655s, Total time = 0.109305s
16 : Statistics :: Grounding time = 0.088283s, Solving time = 0.029736s, Total time = 0.118019s
17 : Statistics :: Grounding time = 0.090455s, Solving time = 0.035518s, Total time = 0.125973s
18 : Statistics :: Grounding time = 0.083941s, Solving time = 0.032533s, Total time = 0.116474s
19 : Statistics :: Grounding time = 0.086627s, Solving time = 0.029310s, Total time = 0.115937s
20 : Statistics :: Grounding time = 0.086952s, Solving time = 0.035375s, Total time = 0.122326s
21 : Statistics :: Grounding time = 0.088997s, Solving time = 0.057172s, Total time = 0.146169s
22 : Statistics :: Grounding time = 0.088509s, Solving time = 0.079409s, Total time = 0.167918s
23 : Statistics :: Grounding time = 0.096573s, Solving time = 0.134425s, Total time = 0.230997s
24 : Statistics :: Grounding time = 0.093314s, Solving time = 0.196040s, Total time = 0.289354s
25 : Statistics :: Grounding time = 0.093599s, Solving time = 0.245678s, Total time = 0.339278s
26 : Statistics :: Grounding time = 0.094621s, Solving time = 0.213360s, Total time = 0.307981s
27 : Statistics :: Grounding time = 0.099534s, Solving time = 0.334774s, Total time = 0.434308s
28 : Statistics :: Grounding time = 0.098471s, Solving time = 0.457573s, Total time = 0.556044s
29 : Statistics :: Grounding time = 0.102729s, Solving time = 0.713152s, Total time = 0.815880s
30 : Statistics :: Grounding time = 0.106347s, Solving time = 0.974910s, Total time = 1.081258s
31 : Statistics :: Grounding time = 0.103318s, Solving time = 1.641184s, Total time = 1.744502s
32 : Statistics :: Grounding time = 0.103486s, Solving time = 1.869542s, Total time = 1.973028s
33 : Statistics :: Grounding time = 0.105077s, Solving time = 1.959472s, Total time = 2.064549s
34 : Statistics :: Grounding time = 0.106113s, Solving time = 2.978051s, Total time = 3.084164s
35 : Statistics :: Grounding time = 0.108083s, Solving time = 2.399940s, Total time = 2.508023s
36 : Statistics :: Grounding time = 0.109445s, Solving time = 3.078242s, Total time = 3.187687s
37 : Statistics :: Grounding time = 0.113382s, Solving time = 2.965617s, Total time = 3.079000s
38 : Statistics :: Grounding time = 0.112181s, Solving time = 3.632464s, Total time = 3.744645s
39 : Statistics :: Grounding time = 0.113437s, Solving time = 3.814751s, Total time = 3.928188s
40 : Statistics :: Grounding time = 0.123644s, Solving time = 4.126093s, Total time = 4.249737s
41 : Statistics :: Grounding time = 0.363096s, Solving time = 5.928471s, Total time = 6.291567s
42 : Statistics :: Grounding time = 0.365745s, Solving time = 8.498504s, Total time = 8.864249s
43 : Statistics :: Grounding time = 0.376762s, Solving time = 8.777729s, Total time = 9.154492s
44 : Statistics :: Grounding time = 0.371361s, Solving time = 11.661388s, Total time = 12.032749s
45 : Statistics :: Grounding time = 0.392977s, Solving time = 13.988160s, Total time = 14.381137s
46 : Statistics :: Grounding time = 0.404426s, Solving time = 24.423418s, Total time = 24.827844s
47 : Statistics :: Grounding time = 0.454839s, Solving time = 29.627661s, Total time = 30.082500s
48 : Statistics :: Grounding time = 0.433630s, Solving time = 42.804044s, Total time = 43.237675s
49 : Statistics :: Grounding time = 0.433260s, Solving time = 45.907083s, Total time = 46.340342s
50 : Statistics :: Grounding time = 0.443416s, Solving time = 50.517879s, Total time = 50.961294s
51 : Statistics :: Grounding time = 0.442711s, Solving time = 62.830037s, Total time = 63.272747s
52 : Statistics :: Grounding time = 0.466049s, Solving time = 60.894745s, Total time = 61.360794s
53 : Statistics :: Grounding time = 0.543337s, Solving time = 70.906916s, Total time = 71.450253s
54 : Statistics :: Grounding time = 0.491063s, Solving time = 81.226054s, Total time = 81.717117s
55 : Statistics :: Grounding time = 0.493851s, Solving time = 41.910312s, Total time = 42.404163s
56 : Statistics :: Grounding time = 0.583445s, Solving time = 39.692310s, Total time = 40.275755s
57 : Statistics :: Grounding time = 0.496833s, Solving time = 53.304212s, Total time = 53.801045s
58 : Statistics :: Grounding time = 0.522246s, Solving time = 67.480179s, Total time = 68.002425s
59 : Statistics :: Grounding time = 0.519534s, Solving time = 60.045712s, Total time = 60.565246s
60 : Statistics :: Grounding time = 0.530491s, Solving time = 103.504479s, Total time = 104.034970s
61 : Statistics :: Grounding time = 0.520974s, Solving time = 121.744820s, Total time = 122.265794s
62 : Statistics :: Grounding time = 0.537549s, Solving time = 109.104480s, Total time = 109.642028s
63 : Statistics :: Grounding time = 0.543327s, Solving time = 118.608101s, Total time = 119.151428s
64 : Statistics :: Grounding time = 0.658617s, Solving time = 131.607219s, Total time = 132.265836s
65 : Statistics :: Grounding time = 0.610464s, Solving time = 141.799857s, Total time = 142.410321s
66 : Statistics :: Grounding time = 0.581032s, Solving time = 120.412422s, Total time = 120.993454s
67 : Statistics :: Grounding time = 0.590655s, Solving time = 15.353785s, Total time = 15.944440s

[11-02-2021_03-13-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 16.958693s, Solving time = 1674.864803s, Total time = 1694.158647s
Model :: Total atoms = 14807, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_03-13-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_1,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_1,(block,6)),30)
occurs(1,talos,configure(manipulator_limb_1,retracted),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((hallway,1)),34)
occurs(1,talos,move((hallway,0)),35)
occurs(1,talos,move((store_room,1)),36)
occurs(1,talos,move((store_room,0)),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),41)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),42)
occurs(1,talos,configure(manipulator_limb_1,retracted),43)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),44)
occurs(1,talos,configure(manipulator_limb_2,retracted),45)
occurs(1,talos,move((store_room,1)),46)
occurs(1,talos,move((hallway,0)),47)
occurs(1,talos,move((hallway,1)),48)
occurs(1,talos,move((hallway,2)),49)
occurs(1,talos,move((puzzle_room,0)),50)
occurs(1,talos,move((puzzle_room,1)),51)
occurs(1,talos,configure(manipulator_limb_1,extended),52)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),53)
occurs(1,talos,release(manipulator_end_1,(block,5)),54)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),55)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),56)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),57)
occurs(1,talos,configure(manipulator_limb_2,extended),58)
occurs(1,talos,release(manipulator_end_1,(block,3)),59)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),60)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),61)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),62)
occurs(1,talos,release(manipulator_end_1,(block,2)),63)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),64)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),65)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),66)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),67)

[11-02-2021_03-13-22] INFO :: Experiment >> 

      ================================================      
           Experimental run 3 : Time 1694.648535s           
      ================================================      

[11-02-2021_03-13-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_03-13-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Instantiated.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building started.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building completed.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding base program parts.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.016726s.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving base program parts.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.003526s.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving started.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.206578s.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.009729s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.066157s.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.005730s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.063721s.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.007840s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.066085s.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.011631s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_03-13-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.070064s.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.016857s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.072174s.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.015083s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.074819s.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.017248s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.076377s.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.018978s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.078217s.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.019038s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.076519s.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.021784s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.077034s.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.022578s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.078738s.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.025498s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.086595s.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.034056s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.081558s.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.034718s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.082302s.

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.046883s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.085914s.

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.046592s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.084164s.

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.057107s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.086026s.

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.075277s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.088485s.

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.065860s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.090019s.

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.100486s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_03-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.089060s.

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.179406s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.089935s.

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.222570s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.092065s.

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.288080s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_03-13-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_03-13-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.094425s.

[11-02-2021_03-13-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.361190s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_03-13-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_03-13-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.094223s.

[11-02-2021_03-13-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.509994s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_03-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_03-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.094955s.

[11-02-2021_03-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.821033s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_03-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_03-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.096796s.

[11-02-2021_03-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 1.396862s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_03-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_03-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.098049s.

[11-02-2021_03-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 2.456261s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_03-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_03-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.100117s.

[11-02-2021_03-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.797593s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_03-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_03-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.106598s.

[11-02-2021_03-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.496841s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_03-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_03-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.104546s.

[11-02-2021_03-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.809033s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_03-13-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_03-13-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.106881s.

[11-02-2021_03-13-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.720835s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_03-13-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_03-13-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.106420s.

[11-02-2021_03-13-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 1.218344s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_03-13-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_03-13-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.104993s.

[11-02-2021_03-13-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 1.607217s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_03-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_03-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.108082s.

[11-02-2021_03-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 2.339576s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_03-13-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_03-13-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.119278s.

[11-02-2021_03-13-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 3.462127s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_03-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_03-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.113354s.

[11-02-2021_03-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 4.512517s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_03-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_03-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.112021s.

[11-02-2021_03-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 4.138522s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_03-13-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_03-13-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.119968s.

[11-02-2021_03-13-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 6.227500s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_03-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_03-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.352377s.

[11-02-2021_03-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 5.667297s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_03-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_03-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.362933s.

[11-02-2021_03-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 8.925899s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_03-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_03-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.371225s.

[11-02-2021_03-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 11.265504s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_03-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_03-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.379607s.

[11-02-2021_03-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-14-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 13.698136s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-14-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_03-14-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_03-14-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.428804s.

[11-02-2021_03-14-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-14-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 12.799671s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-14-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_03-14-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_03-14-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.406336s.

[11-02-2021_03-14-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-15-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 12.978670s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-15-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_03-15-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_03-15-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.407971s.

[11-02-2021_03-15-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 18.032827s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_03-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_03-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.417626s.

[11-02-2021_03-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 27.597707s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_03-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_03-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.442661s.

[11-02-2021_03-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-16-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 30.012246s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-16-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_03-16-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_03-16-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.435113s.

[11-02-2021_03-16-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 42.794259s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_03-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_03-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.447768s.

[11-02-2021_03-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 51.803468s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_03-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_03-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.461843s.

[11-02-2021_03-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-19-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 68.008115s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-19-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_03-19-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_03-19-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.465932s.

[11-02-2021_03-19-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-20-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 75.481243s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-20-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_03-20-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_03-20-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.467564s.

[11-02-2021_03-20-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 89.837426s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_03-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_03-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.538530s.

[11-02-2021_03-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-23-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 110.877385s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-23-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_03-23-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_03-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.502537s.

[11-02-2021_03-23-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-25-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 129.729883s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-25-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_03-25-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_03-25-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.502571s.

[11-02-2021_03-25-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 48.407771s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_03-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_03-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.533795s.

[11-02-2021_03-26-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 41.672089s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_03-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_03-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.530300s.

[11-02-2021_03-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-28-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 47.759400s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-28-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_03-28-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_03-28-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.514134s.

[11-02-2021_03-28-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-29-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 45.566565s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-29-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_03-29-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_03-29-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.517859s.

[11-02-2021_03-29-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-30-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 67.117318s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-30-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_03-30-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_03-30-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.544162s.

[11-02-2021_03-30-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 91.365298s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_03-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_03-31-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.523452s.

[11-02-2021_03-31-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 124.190708s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_03-33-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_03-33-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.541478s.

[11-02-2021_03-33-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-35-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 114.739406s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-35-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_03-35-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_03-35-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.544057s.

[11-02-2021_03-35-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 149.968851s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_03-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_03-38-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.672405s.

[11-02-2021_03-38-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 199.532069s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_03-41-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_03-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.575750s.

[11-02-2021_03-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-45-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 258.822178s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-45-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_03-45-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_03-45-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.660072s.

[11-02-2021_03-45-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[11-02-2021_03-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Model found:
Model :: Total atoms = 14863, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_03-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 34.437893s:
Result = SAT, Stop condition = SAT

[11-02-2021_03-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving completed in 1986.034150s because STOP_CON_REACHED.

[11-02-2021_03-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 17.208899s, Solving time = 1966.311279s, Total time = 1986.034150s
Final Model :: Total atoms = 14863, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_03-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.206578s, Solving time = 0.009729s, Total time = 0.216306s
2 : Statistics :: Grounding time = 0.066157s, Solving time = 0.005730s, Total time = 0.071887s
3 : Statistics :: Grounding time = 0.063721s, Solving time = 0.007840s, Total time = 0.071562s
4 : Statistics :: Grounding time = 0.066085s, Solving time = 0.011631s, Total time = 0.077715s
5 : Statistics :: Grounding time = 0.070064s, Solving time = 0.016857s, Total time = 0.086921s
6 : Statistics :: Grounding time = 0.072174s, Solving time = 0.015083s, Total time = 0.087256s
7 : Statistics :: Grounding time = 0.074819s, Solving time = 0.017248s, Total time = 0.092067s
8 : Statistics :: Grounding time = 0.076377s, Solving time = 0.018978s, Total time = 0.095355s
9 : Statistics :: Grounding time = 0.078217s, Solving time = 0.019038s, Total time = 0.097254s
10 : Statistics :: Grounding time = 0.076519s, Solving time = 0.021784s, Total time = 0.098303s
11 : Statistics :: Grounding time = 0.077034s, Solving time = 0.022578s, Total time = 0.099612s
12 : Statistics :: Grounding time = 0.078738s, Solving time = 0.025498s, Total time = 0.104236s
13 : Statistics :: Grounding time = 0.086595s, Solving time = 0.034056s, Total time = 0.120651s
14 : Statistics :: Grounding time = 0.081558s, Solving time = 0.034718s, Total time = 0.116276s
15 : Statistics :: Grounding time = 0.082302s, Solving time = 0.046883s, Total time = 0.129185s
16 : Statistics :: Grounding time = 0.085914s, Solving time = 0.046592s, Total time = 0.132506s
17 : Statistics :: Grounding time = 0.084164s, Solving time = 0.057107s, Total time = 0.141271s
18 : Statistics :: Grounding time = 0.086026s, Solving time = 0.075277s, Total time = 0.161303s
19 : Statistics :: Grounding time = 0.088485s, Solving time = 0.065860s, Total time = 0.154345s
20 : Statistics :: Grounding time = 0.090019s, Solving time = 0.100486s, Total time = 0.190505s
21 : Statistics :: Grounding time = 0.089060s, Solving time = 0.179406s, Total time = 0.268466s
22 : Statistics :: Grounding time = 0.089935s, Solving time = 0.222570s, Total time = 0.312505s
23 : Statistics :: Grounding time = 0.092065s, Solving time = 0.288080s, Total time = 0.380145s
24 : Statistics :: Grounding time = 0.094425s, Solving time = 0.361190s, Total time = 0.455614s
25 : Statistics :: Grounding time = 0.094223s, Solving time = 0.509994s, Total time = 0.604217s
26 : Statistics :: Grounding time = 0.094955s, Solving time = 0.821033s, Total time = 0.915987s
27 : Statistics :: Grounding time = 0.096796s, Solving time = 1.396862s, Total time = 1.493658s
28 : Statistics :: Grounding time = 0.098049s, Solving time = 2.456261s, Total time = 2.554310s
29 : Statistics :: Grounding time = 0.100117s, Solving time = 0.797593s, Total time = 0.897711s
30 : Statistics :: Grounding time = 0.106598s, Solving time = 0.496841s, Total time = 0.603439s
31 : Statistics :: Grounding time = 0.104546s, Solving time = 0.809033s, Total time = 0.913579s
32 : Statistics :: Grounding time = 0.106881s, Solving time = 0.720835s, Total time = 0.827716s
33 : Statistics :: Grounding time = 0.106420s, Solving time = 1.218344s, Total time = 1.324764s
34 : Statistics :: Grounding time = 0.104993s, Solving time = 1.607217s, Total time = 1.712210s
35 : Statistics :: Grounding time = 0.108082s, Solving time = 2.339576s, Total time = 2.447658s
36 : Statistics :: Grounding time = 0.119278s, Solving time = 3.462127s, Total time = 3.581405s
37 : Statistics :: Grounding time = 0.113354s, Solving time = 4.512517s, Total time = 4.625871s
38 : Statistics :: Grounding time = 0.112021s, Solving time = 4.138522s, Total time = 4.250543s
39 : Statistics :: Grounding time = 0.119968s, Solving time = 6.227500s, Total time = 6.347468s
40 : Statistics :: Grounding time = 0.352377s, Solving time = 5.667297s, Total time = 6.019674s
41 : Statistics :: Grounding time = 0.362933s, Solving time = 8.925899s, Total time = 9.288833s
42 : Statistics :: Grounding time = 0.371225s, Solving time = 11.265504s, Total time = 11.636729s
43 : Statistics :: Grounding time = 0.379607s, Solving time = 13.698136s, Total time = 14.077743s
44 : Statistics :: Grounding time = 0.428804s, Solving time = 12.799671s, Total time = 13.228475s
45 : Statistics :: Grounding time = 0.406336s, Solving time = 12.978670s, Total time = 13.385005s
46 : Statistics :: Grounding time = 0.407971s, Solving time = 18.032827s, Total time = 18.440798s
47 : Statistics :: Grounding time = 0.417626s, Solving time = 27.597707s, Total time = 28.015334s
48 : Statistics :: Grounding time = 0.442661s, Solving time = 30.012246s, Total time = 30.454906s
49 : Statistics :: Grounding time = 0.435113s, Solving time = 42.794259s, Total time = 43.229371s
50 : Statistics :: Grounding time = 0.447768s, Solving time = 51.803468s, Total time = 52.251236s
51 : Statistics :: Grounding time = 0.461843s, Solving time = 68.008115s, Total time = 68.469958s
52 : Statistics :: Grounding time = 0.465932s, Solving time = 75.481243s, Total time = 75.947174s
53 : Statistics :: Grounding time = 0.467564s, Solving time = 89.837426s, Total time = 90.304991s
54 : Statistics :: Grounding time = 0.538530s, Solving time = 110.877385s, Total time = 111.415915s
55 : Statistics :: Grounding time = 0.502537s, Solving time = 129.729883s, Total time = 130.232420s
56 : Statistics :: Grounding time = 0.502571s, Solving time = 48.407771s, Total time = 48.910342s
57 : Statistics :: Grounding time = 0.533795s, Solving time = 41.672089s, Total time = 42.205884s
58 : Statistics :: Grounding time = 0.530300s, Solving time = 47.759400s, Total time = 48.289701s
59 : Statistics :: Grounding time = 0.514134s, Solving time = 45.566565s, Total time = 46.080699s
60 : Statistics :: Grounding time = 0.517859s, Solving time = 67.117318s, Total time = 67.635177s
61 : Statistics :: Grounding time = 0.544162s, Solving time = 91.365298s, Total time = 91.909460s
62 : Statistics :: Grounding time = 0.523452s, Solving time = 124.190708s, Total time = 124.714160s
63 : Statistics :: Grounding time = 0.541478s, Solving time = 114.739406s, Total time = 115.280883s
64 : Statistics :: Grounding time = 0.544057s, Solving time = 149.968851s, Total time = 150.512908s
65 : Statistics :: Grounding time = 0.672405s, Solving time = 199.532069s, Total time = 200.204474s
66 : Statistics :: Grounding time = 0.575750s, Solving time = 258.822178s, Total time = 259.397928s
67 : Statistics :: Grounding time = 0.660072s, Solving time = 34.437893s, Total time = 35.097965s

[11-02-2021_03-46-28] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 17.208899s, Solving time = 1966.311279s, Total time = 1986.034150s
Model :: Total atoms = 14863, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_03-46-29] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_1,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_1,(block,6)),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),32)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_1,(block,3)),34)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),36)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_1,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_1,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_1,extended),46)
occurs(1,talos,configure(manipulator_limb_2,extended),47)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),50)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),51)
occurs(1,talos,configure(manipulator_limb_1,retracted),52)
occurs(1,talos,configure(manipulator_limb_2,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_1,extended),60)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),61)
occurs(1,talos,release(manipulator_end_1,(block,5)),62)
occurs(1,talos,configure(manipulator_limb_2,extended),63)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),64)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),65)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),66)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),67)

[11-02-2021_03-46-29] INFO :: Experiment >> 

      ================================================      
           Experimental run 4 : Time 1986.604076s           
      ================================================      

[11-02-2021_03-46-29] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_03-46-29] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Instantiated.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building started.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building completed.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding base program parts.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.016938s.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving base program parts.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.002813s.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving started.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.188199s.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.008984s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.062899s.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.005284s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.062229s.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.007532s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.065284s.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.011341s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.071846s.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.016495s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.075598s.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.015253s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.073098s.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.016361s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.077133s.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.020151s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.078303s.

[11-02-2021_03-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.018725s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.077475s.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.018724s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.077337s.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.018427s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.076551s.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.020039s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.078031s.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.023286s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.078722s.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.022464s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.080323s.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.026587s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.082948s.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.025633s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.081506s.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.028671s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.085616s.

[11-02-2021_03-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.040852s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.084842s.

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.049337s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.096608s.

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.068115s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.087880s.

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.074117s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.088870s.

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.082095s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.090128s.

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.093048s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.092682s.

[11-02-2021_03-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.143338s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.102612s.

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.192608s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.093708s.

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.178355s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.096575s.

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.183488s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_03-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_03-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.100415s.

[11-02-2021_03-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.157804s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_03-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_03-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.098032s.

[11-02-2021_03-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.233919s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_03-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_03-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.102870s.

[11-02-2021_03-46-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.322447s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_03-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_03-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.101420s.

[11-02-2021_03-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.408742s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_03-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_03-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.105445s.

[11-02-2021_03-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.680883s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_03-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_03-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.105662s.

[11-02-2021_03-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.102094s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_03-46-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_03-46-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.108551s.

[11-02-2021_03-46-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.438161s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_03-46-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_03-46-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.110317s.

[11-02-2021_03-46-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.562356s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_03-46-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_03-46-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.109161s.

[11-02-2021_03-46-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.889953s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_03-46-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_03-46-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.109739s.

[11-02-2021_03-46-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.953591s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_03-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_03-46-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.113715s.

[11-02-2021_03-46-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 2.913893s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_03-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_03-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.114054s.

[11-02-2021_03-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 4.273851s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_03-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_03-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.113935s.

[11-02-2021_03-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 3.137031s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_03-46-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_03-46-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.120446s.

[11-02-2021_03-46-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 4.209961s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_03-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_03-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.362912s.

[11-02-2021_03-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-47-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 5.261924s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-47-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_03-47-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_03-47-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.383574s.

[11-02-2021_03-47-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-47-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 7.905209s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-47-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_03-47-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_03-47-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.371528s.

[11-02-2021_03-47-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-47-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 10.276579s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-47-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_03-47-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_03-47-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.386222s.

[11-02-2021_03-47-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-47-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 14.002303s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-47-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_03-47-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_03-47-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.396525s.

[11-02-2021_03-47-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 10.434619s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_03-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_03-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.408742s.

[11-02-2021_03-47-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-48-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 17.033770s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-48-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_03-48-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_03-48-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.419760s.

[11-02-2021_03-48-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-48-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 29.505284s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-48-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_03-48-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_03-48-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.423949s.

[11-02-2021_03-48-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 32.096413s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_03-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_03-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.437540s.

[11-02-2021_03-49-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-49-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 38.175961s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-49-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_03-49-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_03-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.447087s.

[11-02-2021_03-49-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 56.594106s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_03-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_03-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.457169s.

[11-02-2021_03-50-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-51-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 73.753747s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-51-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_03-51-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_03-51-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.600181s.

[11-02-2021_03-51-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 125.688157s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_03-54-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_03-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.538942s.

[11-02-2021_03-54-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 102.978671s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_03-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_03-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.513542s.

[11-02-2021_03-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_03-58-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 166.163781s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_03-58-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_03-58-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_03-58-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.503309s.

[11-02-2021_03-58-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_04-02-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 205.877439s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-02-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_04-02-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_04-02-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.556878s.

[11-02-2021_04-02-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_04-06-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 242.694277s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-06-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_04-06-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_04-06-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.624655s.

[11-02-2021_04-06-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_04-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 128.956550s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_04-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_04-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.530301s.

[11-02-2021_04-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_04-10-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 122.336135s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-10-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_04-10-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_04-10-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.546855s.

[11-02-2021_04-10-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_04-12-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 138.050715s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-12-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_04-12-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_04-12-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.680828s.

[11-02-2021_04-12-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_04-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 102.338202s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_04-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_04-14-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.774731s.

[11-02-2021_04-14-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_04-16-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 103.730919s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-16-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_04-16-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_04-16-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.635935s.

[11-02-2021_04-16-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_04-17-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 89.089468s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-17-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_04-17-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_04-17-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.595502s.

[11-02-2021_04-17-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_04-18-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 81.729196s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-18-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_04-18-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_04-18-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.592322s.

[11-02-2021_04-18-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_04-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 123.892380s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_04-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_04-21-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.672503s.

[11-02-2021_04-21-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_04-23-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 125.205126s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-23-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_04-23-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_04-23-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.798555s.

[11-02-2021_04-23-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[11-02-2021_04-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Model found:
Model :: Total atoms = 14857, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_04-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 50.796345s:
Result = SAT, Stop condition = SAT

[11-02-2021_04-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving completed in 2250.304423s because STOP_CON_REACHED.

[11-02-2021_04-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 17.497749s, Solving time = 2230.264086s, Total time = 2250.304423s
Final Model :: Total atoms = 14857, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_04-23-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.188199s, Solving time = 0.008984s, Total time = 0.197183s
2 : Statistics :: Grounding time = 0.062899s, Solving time = 0.005284s, Total time = 0.068182s
3 : Statistics :: Grounding time = 0.062229s, Solving time = 0.007532s, Total time = 0.069761s
4 : Statistics :: Grounding time = 0.065284s, Solving time = 0.011341s, Total time = 0.076625s
5 : Statistics :: Grounding time = 0.071846s, Solving time = 0.016495s, Total time = 0.088341s
6 : Statistics :: Grounding time = 0.075598s, Solving time = 0.015253s, Total time = 0.090851s
7 : Statistics :: Grounding time = 0.073098s, Solving time = 0.016361s, Total time = 0.089459s
8 : Statistics :: Grounding time = 0.077133s, Solving time = 0.020151s, Total time = 0.097284s
9 : Statistics :: Grounding time = 0.078303s, Solving time = 0.018725s, Total time = 0.097028s
10 : Statistics :: Grounding time = 0.077475s, Solving time = 0.018724s, Total time = 0.096199s
11 : Statistics :: Grounding time = 0.077337s, Solving time = 0.018427s, Total time = 0.095764s
12 : Statistics :: Grounding time = 0.076551s, Solving time = 0.020039s, Total time = 0.096591s
13 : Statistics :: Grounding time = 0.078031s, Solving time = 0.023286s, Total time = 0.101317s
14 : Statistics :: Grounding time = 0.078722s, Solving time = 0.022464s, Total time = 0.101185s
15 : Statistics :: Grounding time = 0.080323s, Solving time = 0.026587s, Total time = 0.106910s
16 : Statistics :: Grounding time = 0.082948s, Solving time = 0.025633s, Total time = 0.108580s
17 : Statistics :: Grounding time = 0.081506s, Solving time = 0.028671s, Total time = 0.110178s
18 : Statistics :: Grounding time = 0.085616s, Solving time = 0.040852s, Total time = 0.126468s
19 : Statistics :: Grounding time = 0.084842s, Solving time = 0.049337s, Total time = 0.134179s
20 : Statistics :: Grounding time = 0.096608s, Solving time = 0.068115s, Total time = 0.164723s
21 : Statistics :: Grounding time = 0.087880s, Solving time = 0.074117s, Total time = 0.161997s
22 : Statistics :: Grounding time = 0.088870s, Solving time = 0.082095s, Total time = 0.170965s
23 : Statistics :: Grounding time = 0.090128s, Solving time = 0.093048s, Total time = 0.183176s
24 : Statistics :: Grounding time = 0.092682s, Solving time = 0.143338s, Total time = 0.236020s
25 : Statistics :: Grounding time = 0.102612s, Solving time = 0.192608s, Total time = 0.295219s
26 : Statistics :: Grounding time = 0.093708s, Solving time = 0.178355s, Total time = 0.272063s
27 : Statistics :: Grounding time = 0.096575s, Solving time = 0.183488s, Total time = 0.280063s
28 : Statistics :: Grounding time = 0.100415s, Solving time = 0.157804s, Total time = 0.258220s
29 : Statistics :: Grounding time = 0.098032s, Solving time = 0.233919s, Total time = 0.331951s
30 : Statistics :: Grounding time = 0.102870s, Solving time = 0.322447s, Total time = 0.425317s
31 : Statistics :: Grounding time = 0.101420s, Solving time = 0.408742s, Total time = 0.510163s
32 : Statistics :: Grounding time = 0.105445s, Solving time = 0.680883s, Total time = 0.786329s
33 : Statistics :: Grounding time = 0.105662s, Solving time = 1.102094s, Total time = 1.207756s
34 : Statistics :: Grounding time = 0.108551s, Solving time = 1.438161s, Total time = 1.546711s
35 : Statistics :: Grounding time = 0.110317s, Solving time = 1.562356s, Total time = 1.672673s
36 : Statistics :: Grounding time = 0.109161s, Solving time = 1.889953s, Total time = 1.999114s
37 : Statistics :: Grounding time = 0.109739s, Solving time = 1.953591s, Total time = 2.063330s
38 : Statistics :: Grounding time = 0.113715s, Solving time = 2.913893s, Total time = 3.027608s
39 : Statistics :: Grounding time = 0.114054s, Solving time = 4.273851s, Total time = 4.387905s
40 : Statistics :: Grounding time = 0.113935s, Solving time = 3.137031s, Total time = 3.250966s
41 : Statistics :: Grounding time = 0.120446s, Solving time = 4.209961s, Total time = 4.330408s
42 : Statistics :: Grounding time = 0.362912s, Solving time = 5.261924s, Total time = 5.624836s
43 : Statistics :: Grounding time = 0.383574s, Solving time = 7.905209s, Total time = 8.288783s
44 : Statistics :: Grounding time = 0.371528s, Solving time = 10.276579s, Total time = 10.648107s
45 : Statistics :: Grounding time = 0.386222s, Solving time = 14.002303s, Total time = 14.388525s
46 : Statistics :: Grounding time = 0.396525s, Solving time = 10.434619s, Total time = 10.831145s
47 : Statistics :: Grounding time = 0.408742s, Solving time = 17.033770s, Total time = 17.442512s
48 : Statistics :: Grounding time = 0.419760s, Solving time = 29.505284s, Total time = 29.925044s
49 : Statistics :: Grounding time = 0.423949s, Solving time = 32.096413s, Total time = 32.520362s
50 : Statistics :: Grounding time = 0.437540s, Solving time = 38.175961s, Total time = 38.613501s
51 : Statistics :: Grounding time = 0.447087s, Solving time = 56.594106s, Total time = 57.041192s
52 : Statistics :: Grounding time = 0.457169s, Solving time = 73.753747s, Total time = 74.210916s
53 : Statistics :: Grounding time = 0.600181s, Solving time = 125.688157s, Total time = 126.288338s
54 : Statistics :: Grounding time = 0.538942s, Solving time = 102.978671s, Total time = 103.517613s
55 : Statistics :: Grounding time = 0.513542s, Solving time = 166.163781s, Total time = 166.677323s
56 : Statistics :: Grounding time = 0.503309s, Solving time = 205.877439s, Total time = 206.380748s
57 : Statistics :: Grounding time = 0.556878s, Solving time = 242.694277s, Total time = 243.251156s
58 : Statistics :: Grounding time = 0.624655s, Solving time = 128.956550s, Total time = 129.581205s
59 : Statistics :: Grounding time = 0.530301s, Solving time = 122.336135s, Total time = 122.866435s
60 : Statistics :: Grounding time = 0.546855s, Solving time = 138.050715s, Total time = 138.597570s
61 : Statistics :: Grounding time = 0.680828s, Solving time = 102.338202s, Total time = 103.019030s
62 : Statistics :: Grounding time = 0.774731s, Solving time = 103.730919s, Total time = 104.505650s
63 : Statistics :: Grounding time = 0.635935s, Solving time = 89.089468s, Total time = 89.725403s
64 : Statistics :: Grounding time = 0.595502s, Solving time = 81.729196s, Total time = 82.324697s
65 : Statistics :: Grounding time = 0.592322s, Solving time = 123.892380s, Total time = 124.484702s
66 : Statistics :: Grounding time = 0.672503s, Solving time = 125.205126s, Total time = 125.877629s
67 : Statistics :: Grounding time = 0.798555s, Solving time = 50.796345s, Total time = 51.594901s

[11-02-2021_04-23-59] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 17.497749s, Solving time = 2230.264086s, Total time = 2250.304423s
Model :: Total atoms = 14857, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_04-23-59] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_2,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_2,extended),28)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_2,(block,6)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_2,(block,3)),34)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),36)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_2,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_2,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_2,extended),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),47)
occurs(1,talos,configure(manipulator_limb_1,extended),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),50)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),51)
occurs(1,talos,configure(manipulator_limb_2,retracted),52)
occurs(1,talos,configure(manipulator_limb_1,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_1,extended),60)
occurs(1,talos,configure(manipulator_limb_2,extended),61)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),62)
occurs(1,talos,release(manipulator_end_1,(block,5)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),65)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),66)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),67)

[11-02-2021_04-23-59] INFO :: Experiment >> 

      ================================================      
           Experimental run 5 : Time 2250.928221s           
      ================================================      

[11-02-2021_04-23-59] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_04-23-59] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Instantiated.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building started.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building completed.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding base program parts.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.017454s.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving base program parts.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.002841s.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving started.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.193288s.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.009330s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.064946s.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.005795s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.068633s.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.007475s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.066885s.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.012969s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.076725s.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.018794s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.085128s.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.016015s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.079255s.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.017156s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.078472s.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.018703s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.080252s.

[11-02-2021_04-24-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.019503s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.086170s.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.022334s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.090531s.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.020045s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.086790s.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.023125s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.082401s.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.024663s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.084997s.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.027305s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.088615s.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.029533s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.086241s.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.036375s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.087161s.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.046144s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_04-24-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.103857s.

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.043957s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.086634s.

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.041227s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.091867s.

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.051825s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.089511s.

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.047583s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.091687s.

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.052135s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.089976s.

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.083274s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_04-24-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.096626s.

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.123509s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.097537s.

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.171849s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.101681s.

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.233209s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.099685s.

[11-02-2021_04-24-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.309553s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_04-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_04-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.104495s.

[11-02-2021_04-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.548296s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_04-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_04-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.107412s.

[11-02-2021_04-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.595845s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_04-24-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_04-24-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.109350s.

[11-02-2021_04-24-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.788339s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_04-24-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_04-24-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.119834s.

[11-02-2021_04-24-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.266305s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_04-24-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_04-24-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.107067s.

[11-02-2021_04-24-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.839633s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_04-24-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_04-24-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.114693s.

[11-02-2021_04-24-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 3.006282s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_04-24-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_04-24-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.131712s.

[11-02-2021_04-24-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 3.326143s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_04-24-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_04-24-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.118626s.

[11-02-2021_04-24-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 3.223613s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_04-24-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_04-24-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.123672s.

[11-02-2021_04-24-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 3.953872s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_04-24-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_04-24-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.114438s.

[11-02-2021_04-24-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 4.512563s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_04-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_04-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.125934s.

[11-02-2021_04-24-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 3.144788s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_04-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_04-24-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.124412s.

[11-02-2021_04-24-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 5.093720s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_04-24-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_04-24-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.119213s.

[11-02-2021_04-24-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 4.807266s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_04-24-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_04-24-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.140720s.

[11-02-2021_04-24-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 6.005252s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_04-24-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_04-24-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.401604s.

[11-02-2021_04-24-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-24-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 7.443577s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-24-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_04-24-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_04-24-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.374881s.

[11-02-2021_04-24-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-25-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 13.655623s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-25-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_04-25-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_04-25-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.406240s.

[11-02-2021_04-25-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-25-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 12.149722s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-25-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_04-25-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_04-25-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.437582s.

[11-02-2021_04-25-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-25-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 18.417214s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-25-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_04-25-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_04-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.421497s.

[11-02-2021_04-25-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-26-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 21.414706s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-26-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_04-26-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_04-26-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.432166s.

[11-02-2021_04-26-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 26.207690s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_04-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_04-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.427536s.

[11-02-2021_04-26-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-27-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 35.505523s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-27-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_04-27-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_04-27-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.458908s.

[11-02-2021_04-27-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-27-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 46.971761s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-27-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_04-27-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_04-27-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.462829s.

[11-02-2021_04-27-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 60.049389s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_04-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_04-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.465346s.

[11-02-2021_04-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-30-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 65.467502s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-30-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_04-30-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_04-30-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.489559s.

[11-02-2021_04-30-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-31-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 90.647487s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-31-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_04-31-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_04-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.499094s.

[11-02-2021_04-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 113.208283s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_04-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_04-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.532567s.

[11-02-2021_04-33-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-35-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 139.057745s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-35-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_04-35-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_04-35-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.548514s.

[11-02-2021_04-35-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 147.737885s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_04-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_04-38-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.623792s.

[11-02-2021_04-38-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 138.281823s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_04-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_04-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.539540s.

[11-02-2021_04-40-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 154.956723s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-43-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_04-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_04-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.669754s.

[11-02-2021_04-43-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 142.984602s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_04-45-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_04-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.689772s.

[11-02-2021_04-45-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-46-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 78.506030s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-46-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_04-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_04-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.646656s.

[11-02-2021_04-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 62.931745s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_04-47-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_04-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.596513s.

[11-02-2021_04-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-48-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 61.264374s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-48-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_04-48-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_04-48-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.594829s.

[11-02-2021_04-48-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-50-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 80.507522s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-50-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_04-50-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_04-50-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.670483s.

[11-02-2021_04-50-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-51-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 87.650028s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-51-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_04-51-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_04-51-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.744575s.

[11-02-2021_04-51-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 59.563821s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_04-52-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_04-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.607144s.

[11-02-2021_04-52-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 88.047279s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_04-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_04-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.598553s.

[11-02-2021_04-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 115.910240s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_04-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_04-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.640546s.

[11-02-2021_04-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[11-02-2021_04-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Model found:
Model :: Total atoms = 14856, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_04-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 23.970143s:
Result = SAT, Stop condition = SAT

[11-02-2021_04-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving completed in 1956.834347s because STOP_CON_REACHED.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 18.095061s, Solving time = 1936.136579s, Total time = 1956.834347s
Final Model :: Total atoms = 14856, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.193288s, Solving time = 0.009330s, Total time = 0.202618s
2 : Statistics :: Grounding time = 0.064946s, Solving time = 0.005795s, Total time = 0.070741s
3 : Statistics :: Grounding time = 0.068633s, Solving time = 0.007475s, Total time = 0.076108s
4 : Statistics :: Grounding time = 0.066885s, Solving time = 0.012969s, Total time = 0.079854s
5 : Statistics :: Grounding time = 0.076725s, Solving time = 0.018794s, Total time = 0.095519s
6 : Statistics :: Grounding time = 0.085128s, Solving time = 0.016015s, Total time = 0.101143s
7 : Statistics :: Grounding time = 0.079255s, Solving time = 0.017156s, Total time = 0.096412s
8 : Statistics :: Grounding time = 0.078472s, Solving time = 0.018703s, Total time = 0.097174s
9 : Statistics :: Grounding time = 0.080252s, Solving time = 0.019503s, Total time = 0.099755s
10 : Statistics :: Grounding time = 0.086170s, Solving time = 0.022334s, Total time = 0.108504s
11 : Statistics :: Grounding time = 0.090531s, Solving time = 0.020045s, Total time = 0.110576s
12 : Statistics :: Grounding time = 0.086790s, Solving time = 0.023125s, Total time = 0.109915s
13 : Statistics :: Grounding time = 0.082401s, Solving time = 0.024663s, Total time = 0.107064s
14 : Statistics :: Grounding time = 0.084997s, Solving time = 0.027305s, Total time = 0.112302s
15 : Statistics :: Grounding time = 0.088615s, Solving time = 0.029533s, Total time = 0.118149s
16 : Statistics :: Grounding time = 0.086241s, Solving time = 0.036375s, Total time = 0.122616s
17 : Statistics :: Grounding time = 0.087161s, Solving time = 0.046144s, Total time = 0.133305s
18 : Statistics :: Grounding time = 0.103857s, Solving time = 0.043957s, Total time = 0.147814s
19 : Statistics :: Grounding time = 0.086634s, Solving time = 0.041227s, Total time = 0.127861s
20 : Statistics :: Grounding time = 0.091867s, Solving time = 0.051825s, Total time = 0.143692s
21 : Statistics :: Grounding time = 0.089511s, Solving time = 0.047583s, Total time = 0.137093s
22 : Statistics :: Grounding time = 0.091687s, Solving time = 0.052135s, Total time = 0.143822s
23 : Statistics :: Grounding time = 0.089976s, Solving time = 0.083274s, Total time = 0.173249s
24 : Statistics :: Grounding time = 0.096626s, Solving time = 0.123509s, Total time = 0.220135s
25 : Statistics :: Grounding time = 0.097537s, Solving time = 0.171849s, Total time = 0.269386s
26 : Statistics :: Grounding time = 0.101681s, Solving time = 0.233209s, Total time = 0.334889s
27 : Statistics :: Grounding time = 0.099685s, Solving time = 0.309553s, Total time = 0.409239s
28 : Statistics :: Grounding time = 0.104495s, Solving time = 0.548296s, Total time = 0.652791s
29 : Statistics :: Grounding time = 0.107412s, Solving time = 0.595845s, Total time = 0.703257s
30 : Statistics :: Grounding time = 0.109350s, Solving time = 0.788339s, Total time = 0.897689s
31 : Statistics :: Grounding time = 0.119834s, Solving time = 1.266305s, Total time = 1.386139s
32 : Statistics :: Grounding time = 0.107067s, Solving time = 1.839633s, Total time = 1.946700s
33 : Statistics :: Grounding time = 0.114693s, Solving time = 3.006282s, Total time = 3.120975s
34 : Statistics :: Grounding time = 0.131712s, Solving time = 3.326143s, Total time = 3.457854s
35 : Statistics :: Grounding time = 0.118626s, Solving time = 3.223613s, Total time = 3.342238s
36 : Statistics :: Grounding time = 0.123672s, Solving time = 3.953872s, Total time = 4.077544s
37 : Statistics :: Grounding time = 0.114438s, Solving time = 4.512563s, Total time = 4.627001s
38 : Statistics :: Grounding time = 0.125934s, Solving time = 3.144788s, Total time = 3.270722s
39 : Statistics :: Grounding time = 0.124412s, Solving time = 5.093720s, Total time = 5.218133s
40 : Statistics :: Grounding time = 0.119213s, Solving time = 4.807266s, Total time = 4.926479s
41 : Statistics :: Grounding time = 0.140720s, Solving time = 6.005252s, Total time = 6.145972s
42 : Statistics :: Grounding time = 0.401604s, Solving time = 7.443577s, Total time = 7.845181s
43 : Statistics :: Grounding time = 0.374881s, Solving time = 13.655623s, Total time = 14.030504s
44 : Statistics :: Grounding time = 0.406240s, Solving time = 12.149722s, Total time = 12.555962s
45 : Statistics :: Grounding time = 0.437582s, Solving time = 18.417214s, Total time = 18.854796s
46 : Statistics :: Grounding time = 0.421497s, Solving time = 21.414706s, Total time = 21.836202s
47 : Statistics :: Grounding time = 0.432166s, Solving time = 26.207690s, Total time = 26.639856s
48 : Statistics :: Grounding time = 0.427536s, Solving time = 35.505523s, Total time = 35.933058s
49 : Statistics :: Grounding time = 0.458908s, Solving time = 46.971761s, Total time = 47.430670s
50 : Statistics :: Grounding time = 0.462829s, Solving time = 60.049389s, Total time = 60.512218s
51 : Statistics :: Grounding time = 0.465346s, Solving time = 65.467502s, Total time = 65.932849s
52 : Statistics :: Grounding time = 0.489559s, Solving time = 90.647487s, Total time = 91.137045s
53 : Statistics :: Grounding time = 0.499094s, Solving time = 113.208283s, Total time = 113.707377s
54 : Statistics :: Grounding time = 0.532567s, Solving time = 139.057745s, Total time = 139.590312s
55 : Statistics :: Grounding time = 0.548514s, Solving time = 147.737885s, Total time = 148.286399s
56 : Statistics :: Grounding time = 0.623792s, Solving time = 138.281823s, Total time = 138.905614s
57 : Statistics :: Grounding time = 0.539540s, Solving time = 154.956723s, Total time = 155.496263s
58 : Statistics :: Grounding time = 0.669754s, Solving time = 142.984602s, Total time = 143.654356s
59 : Statistics :: Grounding time = 0.689772s, Solving time = 78.506030s, Total time = 79.195802s
60 : Statistics :: Grounding time = 0.646656s, Solving time = 62.931745s, Total time = 63.578402s
61 : Statistics :: Grounding time = 0.596513s, Solving time = 61.264374s, Total time = 61.860887s
62 : Statistics :: Grounding time = 0.594829s, Solving time = 80.507522s, Total time = 81.102352s
63 : Statistics :: Grounding time = 0.670483s, Solving time = 87.650028s, Total time = 88.320510s
64 : Statistics :: Grounding time = 0.744575s, Solving time = 59.563821s, Total time = 60.308396s
65 : Statistics :: Grounding time = 0.607144s, Solving time = 88.047279s, Total time = 88.654423s
66 : Statistics :: Grounding time = 0.598553s, Solving time = 115.910240s, Total time = 116.508793s
67 : Statistics :: Grounding time = 0.640546s, Solving time = 23.970143s, Total time = 24.610688s

[11-02-2021_04-56-37] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 18.095061s, Solving time = 1936.136579s, Total time = 1956.834347s
Model :: Total atoms = 14856, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_04-56-37] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_1,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_1,(block,6)),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),32)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_1,(block,3)),34)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),36)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_1,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_1,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_2,extended),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),48)
occurs(1,talos,configure(manipulator_limb_2,retracted),49)
occurs(1,talos,configure(manipulator_limb_1,extended),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),52)
occurs(1,talos,configure(manipulator_limb_1,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_2,extended),60)
occurs(1,talos,configure(manipulator_limb_1,extended),61)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),62)
occurs(1,talos,release(manipulator_end_1,(block,5)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),65)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),66)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),67)

[11-02-2021_04-56-37] INFO :: Experiment >> 

      ================================================      
           Experimental run 6 : Time 1957.318473s           
      ================================================      

[11-02-2021_04-56-37] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_04-56-37] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Instantiated.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building started.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building completed.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding base program parts.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.016889s.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving base program parts.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.003771s.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving started.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.197287s.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.009737s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.066963s.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.005702s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.063301s.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.007943s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.071771s.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.011974s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.071015s.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.016434s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_04-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.073943s.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.015385s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.081389s.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.016121s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.076588s.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.018450s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.078490s.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.017978s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.077464s.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.019831s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.078446s.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.021670s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.081354s.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.019857s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.080619s.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.024119s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.081481s.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.025561s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.088206s.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.026681s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_04-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.089126s.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.028145s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.086740s.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.033419s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.086513s.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.038401s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.083427s.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.032761s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.088044s.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.034871s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.089864s.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.043564s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.088687s.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.077330s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_04-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.091321s.

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.087395s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.092481s.

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.105529s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.094000s.

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.098129s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.100669s.

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.152919s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.096307s.

[11-02-2021_04-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.246066s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_04-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_04-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.099075s.

[11-02-2021_04-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.363989s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_04-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_04-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.102070s.

[11-02-2021_04-56-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.547772s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_04-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_04-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.100490s.

[11-02-2021_04-56-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.682209s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_04-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_04-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.121745s.

[11-02-2021_04-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.035646s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_04-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_04-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.106901s.

[11-02-2021_04-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.456807s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_04-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_04-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.104733s.

[11-02-2021_04-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.365771s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_04-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_04-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.110966s.

[11-02-2021_04-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.445760s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_04-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_04-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.109620s.

[11-02-2021_04-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.554661s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_04-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_04-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.113308s.

[11-02-2021_04-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 2.624623s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_04-56-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_04-56-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.112374s.

[11-02-2021_04-56-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 3.174960s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_04-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_04-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.112686s.

[11-02-2021_04-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 2.492261s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_04-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_04-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.116851s.

[11-02-2021_04-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 3.414616s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_04-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_04-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.115612s.

[11-02-2021_04-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 3.878469s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_04-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_04-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.116757s.

[11-02-2021_04-57-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 4.083920s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_04-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_04-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.122103s.

[11-02-2021_04-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 4.358881s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_04-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_04-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.375307s.

[11-02-2021_04-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 4.749541s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_04-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_04-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.374754s.

[11-02-2021_04-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 5.764634s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_04-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_04-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.387215s.

[11-02-2021_04-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 9.647751s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_04-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_04-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.412379s.

[11-02-2021_04-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 8.963397s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_04-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_04-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.414956s.

[11-02-2021_04-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-57-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 12.420373s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-57-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_04-57-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_04-57-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.504999s.

[11-02-2021_04-57-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 16.424138s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_04-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_04-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.430751s.

[11-02-2021_04-58-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-58-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 19.517322s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-58-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_04-58-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_04-58-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.457831s.

[11-02-2021_04-58-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-59-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 29.966234s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-59-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_04-59-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_04-59-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.442413s.

[11-02-2021_04-59-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_04-59-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 40.656885s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_04-59-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_04-59-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_04-59-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.472001s.

[11-02-2021_04-59-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-00-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 43.882777s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-00-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_05-00-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_05-00-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.485332s.

[11-02-2021_05-00-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-01-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 55.829896s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-01-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_05-01-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_05-01-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.482936s.

[11-02-2021_05-01-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-02-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 74.106655s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-02-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_05-02-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_05-02-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.512681s.

[11-02-2021_05-02-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-04-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 88.971647s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-04-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_05-04-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_05-04-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.530992s.

[11-02-2021_05-04-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-05-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 78.343865s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-05-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_05-05-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_05-05-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.634276s.

[11-02-2021_05-05-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 80.172081s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_05-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_05-06-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.530125s.

[11-02-2021_05-06-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 91.289656s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_05-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_05-08-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.540434s.

[11-02-2021_05-08-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-09-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 85.886123s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-09-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_05-09-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_05-09-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.540904s.

[11-02-2021_05-09-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-11-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 112.623979s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-11-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_05-11-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_05-11-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.872266s.

[11-02-2021_05-11-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 146.134767s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_05-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_05-14-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.874351s.

[11-02-2021_05-14-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 178.524948s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_05-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_05-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.584011s.

[11-02-2021_05-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-20-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 178.946318s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-20-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_05-20-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_05-20-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.631083s.

[11-02-2021_05-20-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-22-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 146.031724s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-22-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_05-22-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_05-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.666424s.

[11-02-2021_05-22-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-27-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 268.969687s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-27-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_05-27-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_05-27-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.584029s.

[11-02-2021_05-27-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 209.580795s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_05-30-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_05-30-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.584275s.

[11-02-2021_05-30-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[11-02-2021_05-31-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Model found:
Model :: Total atoms = 14857, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[11-02-2021_05-31-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 42.473795s:
Result = SAT, Stop condition = SAT

[11-02-2021_05-31-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving completed in 2083.382294s because STOP_CON_REACHED.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 17.364401s, Solving time = 2063.599083s, Total time = 2083.382294s
Final Model :: Total atoms = 14857, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.197287s, Solving time = 0.009737s, Total time = 0.207024s
2 : Statistics :: Grounding time = 0.066963s, Solving time = 0.005702s, Total time = 0.072665s
3 : Statistics :: Grounding time = 0.063301s, Solving time = 0.007943s, Total time = 0.071244s
4 : Statistics :: Grounding time = 0.071771s, Solving time = 0.011974s, Total time = 0.083745s
5 : Statistics :: Grounding time = 0.071015s, Solving time = 0.016434s, Total time = 0.087449s
6 : Statistics :: Grounding time = 0.073943s, Solving time = 0.015385s, Total time = 0.089328s
7 : Statistics :: Grounding time = 0.081389s, Solving time = 0.016121s, Total time = 0.097510s
8 : Statistics :: Grounding time = 0.076588s, Solving time = 0.018450s, Total time = 0.095039s
9 : Statistics :: Grounding time = 0.078490s, Solving time = 0.017978s, Total time = 0.096468s
10 : Statistics :: Grounding time = 0.077464s, Solving time = 0.019831s, Total time = 0.097295s
11 : Statistics :: Grounding time = 0.078446s, Solving time = 0.021670s, Total time = 0.100117s
12 : Statistics :: Grounding time = 0.081354s, Solving time = 0.019857s, Total time = 0.101211s
13 : Statistics :: Grounding time = 0.080619s, Solving time = 0.024119s, Total time = 0.104739s
14 : Statistics :: Grounding time = 0.081481s, Solving time = 0.025561s, Total time = 0.107042s
15 : Statistics :: Grounding time = 0.088206s, Solving time = 0.026681s, Total time = 0.114887s
16 : Statistics :: Grounding time = 0.089126s, Solving time = 0.028145s, Total time = 0.117271s
17 : Statistics :: Grounding time = 0.086740s, Solving time = 0.033419s, Total time = 0.120159s
18 : Statistics :: Grounding time = 0.086513s, Solving time = 0.038401s, Total time = 0.124914s
19 : Statistics :: Grounding time = 0.083427s, Solving time = 0.032761s, Total time = 0.116188s
20 : Statistics :: Grounding time = 0.088044s, Solving time = 0.034871s, Total time = 0.122915s
21 : Statistics :: Grounding time = 0.089864s, Solving time = 0.043564s, Total time = 0.133429s
22 : Statistics :: Grounding time = 0.088687s, Solving time = 0.077330s, Total time = 0.166016s
23 : Statistics :: Grounding time = 0.091321s, Solving time = 0.087395s, Total time = 0.178716s
24 : Statistics :: Grounding time = 0.092481s, Solving time = 0.105529s, Total time = 0.198010s
25 : Statistics :: Grounding time = 0.094000s, Solving time = 0.098129s, Total time = 0.192129s
26 : Statistics :: Grounding time = 0.100669s, Solving time = 0.152919s, Total time = 0.253588s
27 : Statistics :: Grounding time = 0.096307s, Solving time = 0.246066s, Total time = 0.342373s
28 : Statistics :: Grounding time = 0.099075s, Solving time = 0.363989s, Total time = 0.463064s
29 : Statistics :: Grounding time = 0.102070s, Solving time = 0.547772s, Total time = 0.649842s
30 : Statistics :: Grounding time = 0.100490s, Solving time = 0.682209s, Total time = 0.782700s
31 : Statistics :: Grounding time = 0.121745s, Solving time = 1.035646s, Total time = 1.157391s
32 : Statistics :: Grounding time = 0.106901s, Solving time = 1.456807s, Total time = 1.563708s
33 : Statistics :: Grounding time = 0.104733s, Solving time = 1.365771s, Total time = 1.470504s
34 : Statistics :: Grounding time = 0.110966s, Solving time = 1.445760s, Total time = 1.556726s
35 : Statistics :: Grounding time = 0.109620s, Solving time = 1.554661s, Total time = 1.664281s
36 : Statistics :: Grounding time = 0.113308s, Solving time = 2.624623s, Total time = 2.737930s
37 : Statistics :: Grounding time = 0.112374s, Solving time = 3.174960s, Total time = 3.287334s
38 : Statistics :: Grounding time = 0.112686s, Solving time = 2.492261s, Total time = 2.604947s
39 : Statistics :: Grounding time = 0.116851s, Solving time = 3.414616s, Total time = 3.531467s
40 : Statistics :: Grounding time = 0.115612s, Solving time = 3.878469s, Total time = 3.994082s
41 : Statistics :: Grounding time = 0.116757s, Solving time = 4.083920s, Total time = 4.200677s
42 : Statistics :: Grounding time = 0.122103s, Solving time = 4.358881s, Total time = 4.480985s
43 : Statistics :: Grounding time = 0.375307s, Solving time = 4.749541s, Total time = 5.124849s
44 : Statistics :: Grounding time = 0.374754s, Solving time = 5.764634s, Total time = 6.139388s
45 : Statistics :: Grounding time = 0.387215s, Solving time = 9.647751s, Total time = 10.034965s
46 : Statistics :: Grounding time = 0.412379s, Solving time = 8.963397s, Total time = 9.375776s
47 : Statistics :: Grounding time = 0.414956s, Solving time = 12.420373s, Total time = 12.835330s
48 : Statistics :: Grounding time = 0.504999s, Solving time = 16.424138s, Total time = 16.929137s
49 : Statistics :: Grounding time = 0.430751s, Solving time = 19.517322s, Total time = 19.948074s
50 : Statistics :: Grounding time = 0.457831s, Solving time = 29.966234s, Total time = 30.424065s
51 : Statistics :: Grounding time = 0.442413s, Solving time = 40.656885s, Total time = 41.099299s
52 : Statistics :: Grounding time = 0.472001s, Solving time = 43.882777s, Total time = 44.354778s
53 : Statistics :: Grounding time = 0.485332s, Solving time = 55.829896s, Total time = 56.315228s
54 : Statistics :: Grounding time = 0.482936s, Solving time = 74.106655s, Total time = 74.589591s
55 : Statistics :: Grounding time = 0.512681s, Solving time = 88.971647s, Total time = 89.484328s
56 : Statistics :: Grounding time = 0.530992s, Solving time = 78.343865s, Total time = 78.874857s
57 : Statistics :: Grounding time = 0.634276s, Solving time = 80.172081s, Total time = 80.806357s
58 : Statistics :: Grounding time = 0.530125s, Solving time = 91.289656s, Total time = 91.819781s
59 : Statistics :: Grounding time = 0.540434s, Solving time = 85.886123s, Total time = 86.426557s
60 : Statistics :: Grounding time = 0.540904s, Solving time = 112.623979s, Total time = 113.164884s
61 : Statistics :: Grounding time = 0.872266s, Solving time = 146.134767s, Total time = 147.007033s
62 : Statistics :: Grounding time = 0.874351s, Solving time = 178.524948s, Total time = 179.399299s
63 : Statistics :: Grounding time = 0.584011s, Solving time = 178.946318s, Total time = 179.530329s
64 : Statistics :: Grounding time = 0.631083s, Solving time = 146.031724s, Total time = 146.662807s
65 : Statistics :: Grounding time = 0.666424s, Solving time = 268.969687s, Total time = 269.636111s
66 : Statistics :: Grounding time = 0.584029s, Solving time = 209.580795s, Total time = 210.164824s
67 : Statistics :: Grounding time = 0.584275s, Solving time = 42.473795s, Total time = 43.058069s

[11-02-2021_05-31-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 17.364401s, Solving time = 2063.599083s, Total time = 2083.382294s
Model :: Total atoms = 14857, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[11-02-2021_05-31-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_1,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_1,(block,6)),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),32)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_1,(block,3)),34)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),36)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_1,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_1,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_2,extended),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),48)
occurs(1,talos,configure(manipulator_limb_1,extended),49)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),50)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),51)
occurs(1,talos,configure(manipulator_limb_2,retracted),52)
occurs(1,talos,configure(manipulator_limb_1,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_2,extended),60)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),61)
occurs(1,talos,release(manipulator_end_2,(block,5)),62)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),63)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),64)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),65)
occurs(1,talos,configure(manipulator_limb_1,extended),66)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),67)

[11-02-2021_05-31-21] INFO :: Experiment >> 

      ================================================      
           Experimental run 7 : Time 2083.972678s           
      ================================================      

[11-02-2021_05-31-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_05-31-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Instantiated.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building started.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building completed.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding base program parts.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.016918s.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving base program parts.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.002676s.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving started.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.195165s.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.009352s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.062156s.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.005954s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.064010s.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.007146s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.065516s.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.011510s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.069639s.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.016318s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.072443s.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.015256s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_05-31-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.078647s.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.016557s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.076429s.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.017591s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.078573s.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.018461s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.077377s.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.020796s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.079077s.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.018919s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.077444s.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.020380s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.079804s.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.022116s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.078536s.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.024629s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.080285s.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.028748s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_05-31-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.080147s.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.027118s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.080718s.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.028469s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.083092s.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.035869s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.082779s.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.039945s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.087753s.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.054469s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.095987s.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.066356s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.096116s.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.069567s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.090040s.

[11-02-2021_05-31-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.077328s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.091029s.

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.116730s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.092283s.

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.169825s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.098676s.

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.205868s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.097085s.

[11-02-2021_05-31-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.318212s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_05-31-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_05-31-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.103436s.

[11-02-2021_05-31-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.382779s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_05-31-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_05-31-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.101823s.

[11-02-2021_05-31-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.509115s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_05-31-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_05-31-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.111201s.

[11-02-2021_05-31-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.881427s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_05-31-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_05-31-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.102270s.

[11-02-2021_05-31-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 1.305105s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_05-31-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_05-31-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.102113s.

[11-02-2021_05-31-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.748787s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_05-31-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_05-31-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.103636s.

[11-02-2021_05-31-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 1.195793s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_05-31-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_05-31-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.105965s.

[11-02-2021_05-31-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 1.079588s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_05-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_05-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.105992s.

[11-02-2021_05-31-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 1.340584s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_05-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_05-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.107691s.

[11-02-2021_05-31-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 2.150769s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_05-31-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_05-31-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.109345s.

[11-02-2021_05-31-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 3.134150s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_05-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_05-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.115368s.

[11-02-2021_05-31-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 2.887172s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_05-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_05-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.112360s.

[11-02-2021_05-31-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 3.079195s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_05-31-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_05-31-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.122588s.

[11-02-2021_05-31-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 3.401297s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_05-31-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_05-31-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.126332s.

[11-02-2021_05-31-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 3.682363s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_05-31-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_05-31-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.348662s.

[11-02-2021_05-31-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 5.780770s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_05-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_05-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.363146s.

[11-02-2021_05-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-32-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 7.216065s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-32-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_05-32-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_05-32-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.375890s.

[11-02-2021_05-32-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 7.951078s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_05-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_05-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.382564s.

[11-02-2021_05-32-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-32-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 8.489157s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-32-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_05-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_05-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.390272s.

[11-02-2021_05-32-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 11.667643s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_05-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_05-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.402150s.

[11-02-2021_05-32-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-32-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 13.146333s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-32-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_05-32-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_05-32-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.415152s.

[11-02-2021_05-32-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-33-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 28.514322s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-33-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_05-33-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_05-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.435464s.

[11-02-2021_05-33-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-33-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 33.926211s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-33-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_05-33-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_05-33-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.432594s.

[11-02-2021_05-33-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-34-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 27.637062s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-34-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_05-34-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_05-34-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.451248s.

[11-02-2021_05-34-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 36.647269s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_05-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_05-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.447309s.

[11-02-2021_05-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 53.184452s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_05-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_05-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.520431s.

[11-02-2021_05-35-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-36-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 54.553497s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-36-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_05-36-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_05-36-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.468183s.

[11-02-2021_05-36-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-37-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 61.386304s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-37-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_05-37-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_05-37-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.475205s.

[11-02-2021_05-37-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 100.931049s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_05-39-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_05-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.490789s.

[11-02-2021_05-39-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 76.420928s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_05-40-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_05-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.527027s.

[11-02-2021_05-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 47.838937s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_05-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_05-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.510273s.

[11-02-2021_05-41-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 48.441315s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_05-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_05-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.514527s.

[11-02-2021_05-42-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 69.474377s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_05-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_05-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.640484s.

[11-02-2021_05-43-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 97.773287s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_05-45-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_05-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.623774s.

[11-02-2021_05-45-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 76.483616s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_05-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_05-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.536096s.

[11-02-2021_05-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-47-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 70.673041s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-47-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_05-47-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_05-47-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.549661s.

[11-02-2021_05-47-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 99.495062s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_05-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_05-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.579197s.

[11-02-2021_05-49-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-51-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 131.874668s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-51-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_05-51-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_05-51-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.663652s.

[11-02-2021_05-51-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 131.992677s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_05-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_05-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.563010s.

[11-02-2021_05-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 69.046339s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_05-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_05-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.588289s.

[11-02-2021_05-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Model found:
Model :: Total atoms = 14861, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 23.180772s:
Result = SAT, Stop condition = SAT

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving completed in 1439.773865s because STOP_CON_REACHED.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 16.552894s, Solving time = 1420.970520s, Total time = 1439.773865s
Final Model :: Total atoms = 14861, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.195165s, Solving time = 0.009352s, Total time = 0.204517s
2 : Statistics :: Grounding time = 0.062156s, Solving time = 0.005954s, Total time = 0.068110s
3 : Statistics :: Grounding time = 0.064010s, Solving time = 0.007146s, Total time = 0.071156s
4 : Statistics :: Grounding time = 0.065516s, Solving time = 0.011510s, Total time = 0.077026s
5 : Statistics :: Grounding time = 0.069639s, Solving time = 0.016318s, Total time = 0.085957s
6 : Statistics :: Grounding time = 0.072443s, Solving time = 0.015256s, Total time = 0.087699s
7 : Statistics :: Grounding time = 0.078647s, Solving time = 0.016557s, Total time = 0.095204s
8 : Statistics :: Grounding time = 0.076429s, Solving time = 0.017591s, Total time = 0.094020s
9 : Statistics :: Grounding time = 0.078573s, Solving time = 0.018461s, Total time = 0.097034s
10 : Statistics :: Grounding time = 0.077377s, Solving time = 0.020796s, Total time = 0.098174s
11 : Statistics :: Grounding time = 0.079077s, Solving time = 0.018919s, Total time = 0.097996s
12 : Statistics :: Grounding time = 0.077444s, Solving time = 0.020380s, Total time = 0.097824s
13 : Statistics :: Grounding time = 0.079804s, Solving time = 0.022116s, Total time = 0.101921s
14 : Statistics :: Grounding time = 0.078536s, Solving time = 0.024629s, Total time = 0.103166s
15 : Statistics :: Grounding time = 0.080285s, Solving time = 0.028748s, Total time = 0.109033s
16 : Statistics :: Grounding time = 0.080147s, Solving time = 0.027118s, Total time = 0.107265s
17 : Statistics :: Grounding time = 0.080718s, Solving time = 0.028469s, Total time = 0.109187s
18 : Statistics :: Grounding time = 0.083092s, Solving time = 0.035869s, Total time = 0.118961s
19 : Statistics :: Grounding time = 0.082779s, Solving time = 0.039945s, Total time = 0.122724s
20 : Statistics :: Grounding time = 0.087753s, Solving time = 0.054469s, Total time = 0.142221s
21 : Statistics :: Grounding time = 0.095987s, Solving time = 0.066356s, Total time = 0.162343s
22 : Statistics :: Grounding time = 0.096116s, Solving time = 0.069567s, Total time = 0.165683s
23 : Statistics :: Grounding time = 0.090040s, Solving time = 0.077328s, Total time = 0.167369s
24 : Statistics :: Grounding time = 0.091029s, Solving time = 0.116730s, Total time = 0.207759s
25 : Statistics :: Grounding time = 0.092283s, Solving time = 0.169825s, Total time = 0.262108s
26 : Statistics :: Grounding time = 0.098676s, Solving time = 0.205868s, Total time = 0.304544s
27 : Statistics :: Grounding time = 0.097085s, Solving time = 0.318212s, Total time = 0.415296s
28 : Statistics :: Grounding time = 0.103436s, Solving time = 0.382779s, Total time = 0.486215s
29 : Statistics :: Grounding time = 0.101823s, Solving time = 0.509115s, Total time = 0.610938s
30 : Statistics :: Grounding time = 0.111201s, Solving time = 0.881427s, Total time = 0.992628s
31 : Statistics :: Grounding time = 0.102270s, Solving time = 1.305105s, Total time = 1.407375s
32 : Statistics :: Grounding time = 0.102113s, Solving time = 0.748787s, Total time = 0.850900s
33 : Statistics :: Grounding time = 0.103636s, Solving time = 1.195793s, Total time = 1.299429s
34 : Statistics :: Grounding time = 0.105965s, Solving time = 1.079588s, Total time = 1.185553s
35 : Statistics :: Grounding time = 0.105992s, Solving time = 1.340584s, Total time = 1.446576s
36 : Statistics :: Grounding time = 0.107691s, Solving time = 2.150769s, Total time = 2.258461s
37 : Statistics :: Grounding time = 0.109345s, Solving time = 3.134150s, Total time = 3.243495s
38 : Statistics :: Grounding time = 0.115368s, Solving time = 2.887172s, Total time = 3.002540s
39 : Statistics :: Grounding time = 0.112360s, Solving time = 3.079195s, Total time = 3.191556s
40 : Statistics :: Grounding time = 0.122588s, Solving time = 3.401297s, Total time = 3.523885s
41 : Statistics :: Grounding time = 0.126332s, Solving time = 3.682363s, Total time = 3.808695s
42 : Statistics :: Grounding time = 0.348662s, Solving time = 5.780770s, Total time = 6.129431s
43 : Statistics :: Grounding time = 0.363146s, Solving time = 7.216065s, Total time = 7.579212s
44 : Statistics :: Grounding time = 0.375890s, Solving time = 7.951078s, Total time = 8.326967s
45 : Statistics :: Grounding time = 0.382564s, Solving time = 8.489157s, Total time = 8.871721s
46 : Statistics :: Grounding time = 0.390272s, Solving time = 11.667643s, Total time = 12.057915s
47 : Statistics :: Grounding time = 0.402150s, Solving time = 13.146333s, Total time = 13.548483s
48 : Statistics :: Grounding time = 0.415152s, Solving time = 28.514322s, Total time = 28.929474s
49 : Statistics :: Grounding time = 0.435464s, Solving time = 33.926211s, Total time = 34.361675s
50 : Statistics :: Grounding time = 0.432594s, Solving time = 27.637062s, Total time = 28.069656s
51 : Statistics :: Grounding time = 0.451248s, Solving time = 36.647269s, Total time = 37.098517s
52 : Statistics :: Grounding time = 0.447309s, Solving time = 53.184452s, Total time = 53.631761s
53 : Statistics :: Grounding time = 0.520431s, Solving time = 54.553497s, Total time = 55.073928s
54 : Statistics :: Grounding time = 0.468183s, Solving time = 61.386304s, Total time = 61.854487s
55 : Statistics :: Grounding time = 0.475205s, Solving time = 100.931049s, Total time = 101.406254s
56 : Statistics :: Grounding time = 0.490789s, Solving time = 76.420928s, Total time = 76.911717s
57 : Statistics :: Grounding time = 0.527027s, Solving time = 47.838937s, Total time = 48.365964s
58 : Statistics :: Grounding time = 0.510273s, Solving time = 48.441315s, Total time = 48.951589s
59 : Statistics :: Grounding time = 0.514527s, Solving time = 69.474377s, Total time = 69.988904s
60 : Statistics :: Grounding time = 0.640484s, Solving time = 97.773287s, Total time = 98.413771s
61 : Statistics :: Grounding time = 0.623774s, Solving time = 76.483616s, Total time = 77.107390s
62 : Statistics :: Grounding time = 0.536096s, Solving time = 70.673041s, Total time = 71.209137s
63 : Statistics :: Grounding time = 0.549661s, Solving time = 99.495062s, Total time = 100.044723s
64 : Statistics :: Grounding time = 0.579197s, Solving time = 131.874668s, Total time = 132.453865s
65 : Statistics :: Grounding time = 0.663652s, Solving time = 131.992677s, Total time = 132.656329s
66 : Statistics :: Grounding time = 0.563010s, Solving time = 69.046339s, Total time = 69.609349s
67 : Statistics :: Grounding time = 0.588289s, Solving time = 23.180772s, Total time = 23.769062s

[11-02-2021_05-55-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 16.552894s, Solving time = 1420.970520s, Total time = 1439.773865s
Model :: Total atoms = 14861, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_05-55-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_2,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_2,extended),28)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_2,(block,6)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_2,(block,3)),34)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),36)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_2,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_2,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_2,extended),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),48)
occurs(1,talos,configure(manipulator_limb_1,extended),49)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),50)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),51)
occurs(1,talos,configure(manipulator_limb_1,retracted),52)
occurs(1,talos,configure(manipulator_limb_2,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_2,extended),60)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),61)
occurs(1,talos,release(manipulator_end_2,(block,5)),62)
occurs(1,talos,configure(manipulator_limb_1,extended),63)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),64)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),65)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),66)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),67)

[11-02-2021_05-55-21] INFO :: Experiment >> 

      ================================================      
           Experimental run 8 : Time 1440.228406s           
      ================================================      

[11-02-2021_05-55-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_05-55-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Instantiated.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building started.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building completed.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding base program parts.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.016806s.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving base program parts.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.003137s.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving started.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.193233s.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.009063s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.062868s.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.006094s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.062812s.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.007798s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_05-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.065762s.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.011843s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.069777s.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.016169s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.073581s.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.014704s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.074228s.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.015760s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.077320s.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.016906s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.078282s.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.017732s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.076725s.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.020049s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.080654s.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.021750s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.077896s.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.021372s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.086198s.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.023054s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_05-55-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.078190s.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.024917s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.080473s.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.028894s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.081389s.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.030212s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.082463s.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.031993s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.084097s.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.053867s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.085828s.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.076166s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.088046s.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.100910s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_05-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.087033s.

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.092648s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.089759s.

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.128042s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.091040s.

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.181956s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.093619s.

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.276003s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_05-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_05-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.092890s.

[11-02-2021_05-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.333951s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_05-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_05-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.092960s.

[11-02-2021_05-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.381544s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_05-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_05-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.095820s.

[11-02-2021_05-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.406487s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_05-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_05-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.096655s.

[11-02-2021_05-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.287297s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_05-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_05-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.100107s.

[11-02-2021_05-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.398296s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_05-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_05-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.100368s.

[11-02-2021_05-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.486820s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_05-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_05-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.102095s.

[11-02-2021_05-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.542501s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_05-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_05-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.105469s.

[11-02-2021_05-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.717028s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_05-55-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_05-55-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.104755s.

[11-02-2021_05-55-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.263882s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_05-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_05-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.109066s.

[11-02-2021_05-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 2.357177s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_05-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_05-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.107192s.

[11-02-2021_05-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 2.550528s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_05-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_05-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.112507s.

[11-02-2021_05-55-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 4.109123s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_05-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_05-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.112154s.

[11-02-2021_05-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 4.118791s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_05-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_05-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.116961s.

[11-02-2021_05-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 3.469251s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_05-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_05-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.113091s.

[11-02-2021_05-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 4.463818s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_05-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_05-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.117306s.

[11-02-2021_05-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 4.024005s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_05-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_05-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.347729s.

[11-02-2021_05-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 8.101375s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_05-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_05-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.376829s.

[11-02-2021_05-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-56-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 11.698974s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-56-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_05-56-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_05-56-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.382135s.

[11-02-2021_05-56-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 10.376490s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_05-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_05-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.382669s.

[11-02-2021_05-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 9.087442s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_05-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_05-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.384994s.

[11-02-2021_05-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 12.883415s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_05-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_05-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.394385s.

[11-02-2021_05-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 14.433135s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_05-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_05-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.403511s.

[11-02-2021_05-57-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 17.836425s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_05-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_05-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.418517s.

[11-02-2021_05-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 17.184161s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_05-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_05-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.418949s.

[11-02-2021_05-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-58-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 20.815777s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-58-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_05-58-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_05-58-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.431818s.

[11-02-2021_05-58-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-58-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 23.293589s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-58-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_05-58-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_05-58-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.447769s.

[11-02-2021_05-58-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_05-59-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 41.667697s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_05-59-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_05-59-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_05-59-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.454908s.

[11-02-2021_05-59-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-00-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 53.827480s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-00-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_06-00-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_06-00-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.458985s.

[11-02-2021_06-00-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-00-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 42.016006s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-00-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_06-00-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_06-00-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.477114s.

[11-02-2021_06-00-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-01-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 44.396123s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-01-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_06-01-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_06-01-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.482767s.

[11-02-2021_06-01-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-02-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 77.501689s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-02-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_06-02-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_06-02-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.491335s.

[11-02-2021_06-02-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-03-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 61.714569s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-03-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_06-03-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_06-03-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.497934s.

[11-02-2021_06-03-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 54.815408s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_06-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_06-04-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.517856s.

[11-02-2021_06-04-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-06-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 76.136964s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-06-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_06-06-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_06-06-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.608318s.

[11-02-2021_06-06-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 104.427106s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_06-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_06-07-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.531146s.

[11-02-2021_06-07-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 108.986314s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_06-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_06-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.642961s.

[11-02-2021_06-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-11-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 97.396092s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-11-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_06-11-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_06-11-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.541219s.

[11-02-2021_06-11-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 109.775409s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_06-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_06-13-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.549395s.

[11-02-2021_06-13-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-14-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 84.044080s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-14-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_06-14-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_06-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.562502s.

[11-02-2021_06-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 102.260837s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_06-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_06-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.571570s.

[11-02-2021_06-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-17-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 99.497529s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-17-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_06-17-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_06-17-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.567318s.

[11-02-2021_06-17-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 110.919607s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_06-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_06-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.595635s.

[11-02-2021_06-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Model found:
Model :: Total atoms = 14855, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 14.564536s:
Result = SAT, Stop condition = SAT

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving completed in 1479.765349s because STOP_CON_REACHED.

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 16.657743s, Solving time = 1460.799762s, Total time = 1479.765349s
Final Model :: Total atoms = 14855, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.193233s, Solving time = 0.009063s, Total time = 0.202296s
2 : Statistics :: Grounding time = 0.062868s, Solving time = 0.006094s, Total time = 0.068962s
3 : Statistics :: Grounding time = 0.062812s, Solving time = 0.007798s, Total time = 0.070611s
4 : Statistics :: Grounding time = 0.065762s, Solving time = 0.011843s, Total time = 0.077605s
5 : Statistics :: Grounding time = 0.069777s, Solving time = 0.016169s, Total time = 0.085945s
6 : Statistics :: Grounding time = 0.073581s, Solving time = 0.014704s, Total time = 0.088285s
7 : Statistics :: Grounding time = 0.074228s, Solving time = 0.015760s, Total time = 0.089988s
8 : Statistics :: Grounding time = 0.077320s, Solving time = 0.016906s, Total time = 0.094225s
9 : Statistics :: Grounding time = 0.078282s, Solving time = 0.017732s, Total time = 0.096015s
10 : Statistics :: Grounding time = 0.076725s, Solving time = 0.020049s, Total time = 0.096774s
11 : Statistics :: Grounding time = 0.080654s, Solving time = 0.021750s, Total time = 0.102404s
12 : Statistics :: Grounding time = 0.077896s, Solving time = 0.021372s, Total time = 0.099268s
13 : Statistics :: Grounding time = 0.086198s, Solving time = 0.023054s, Total time = 0.109252s
14 : Statistics :: Grounding time = 0.078190s, Solving time = 0.024917s, Total time = 0.103107s
15 : Statistics :: Grounding time = 0.080473s, Solving time = 0.028894s, Total time = 0.109367s
16 : Statistics :: Grounding time = 0.081389s, Solving time = 0.030212s, Total time = 0.111601s
17 : Statistics :: Grounding time = 0.082463s, Solving time = 0.031993s, Total time = 0.114456s
18 : Statistics :: Grounding time = 0.084097s, Solving time = 0.053867s, Total time = 0.137964s
19 : Statistics :: Grounding time = 0.085828s, Solving time = 0.076166s, Total time = 0.161993s
20 : Statistics :: Grounding time = 0.088046s, Solving time = 0.100910s, Total time = 0.188956s
21 : Statistics :: Grounding time = 0.087033s, Solving time = 0.092648s, Total time = 0.179681s
22 : Statistics :: Grounding time = 0.089759s, Solving time = 0.128042s, Total time = 0.217801s
23 : Statistics :: Grounding time = 0.091040s, Solving time = 0.181956s, Total time = 0.272996s
24 : Statistics :: Grounding time = 0.093619s, Solving time = 0.276003s, Total time = 0.369622s
25 : Statistics :: Grounding time = 0.092890s, Solving time = 0.333951s, Total time = 0.426841s
26 : Statistics :: Grounding time = 0.092960s, Solving time = 0.381544s, Total time = 0.474504s
27 : Statistics :: Grounding time = 0.095820s, Solving time = 0.406487s, Total time = 0.502307s
28 : Statistics :: Grounding time = 0.096655s, Solving time = 0.287297s, Total time = 0.383952s
29 : Statistics :: Grounding time = 0.100107s, Solving time = 0.398296s, Total time = 0.498403s
30 : Statistics :: Grounding time = 0.100368s, Solving time = 0.486820s, Total time = 0.587187s
31 : Statistics :: Grounding time = 0.102095s, Solving time = 0.542501s, Total time = 0.644596s
32 : Statistics :: Grounding time = 0.105469s, Solving time = 0.717028s, Total time = 0.822497s
33 : Statistics :: Grounding time = 0.104755s, Solving time = 1.263882s, Total time = 1.368637s
34 : Statistics :: Grounding time = 0.109066s, Solving time = 2.357177s, Total time = 2.466243s
35 : Statistics :: Grounding time = 0.107192s, Solving time = 2.550528s, Total time = 2.657720s
36 : Statistics :: Grounding time = 0.112507s, Solving time = 4.109123s, Total time = 4.221630s
37 : Statistics :: Grounding time = 0.112154s, Solving time = 4.118791s, Total time = 4.230945s
38 : Statistics :: Grounding time = 0.116961s, Solving time = 3.469251s, Total time = 3.586212s
39 : Statistics :: Grounding time = 0.113091s, Solving time = 4.463818s, Total time = 4.576908s
40 : Statistics :: Grounding time = 0.117306s, Solving time = 4.024005s, Total time = 4.141311s
41 : Statistics :: Grounding time = 0.347729s, Solving time = 8.101375s, Total time = 8.449104s
42 : Statistics :: Grounding time = 0.376829s, Solving time = 11.698974s, Total time = 12.075802s
43 : Statistics :: Grounding time = 0.382135s, Solving time = 10.376490s, Total time = 10.758626s
44 : Statistics :: Grounding time = 0.382669s, Solving time = 9.087442s, Total time = 9.470111s
45 : Statistics :: Grounding time = 0.384994s, Solving time = 12.883415s, Total time = 13.268409s
46 : Statistics :: Grounding time = 0.394385s, Solving time = 14.433135s, Total time = 14.827519s
47 : Statistics :: Grounding time = 0.403511s, Solving time = 17.836425s, Total time = 18.239937s
48 : Statistics :: Grounding time = 0.418517s, Solving time = 17.184161s, Total time = 17.602678s
49 : Statistics :: Grounding time = 0.418949s, Solving time = 20.815777s, Total time = 21.234726s
50 : Statistics :: Grounding time = 0.431818s, Solving time = 23.293589s, Total time = 23.725407s
51 : Statistics :: Grounding time = 0.447769s, Solving time = 41.667697s, Total time = 42.115466s
52 : Statistics :: Grounding time = 0.454908s, Solving time = 53.827480s, Total time = 54.282388s
53 : Statistics :: Grounding time = 0.458985s, Solving time = 42.016006s, Total time = 42.474990s
54 : Statistics :: Grounding time = 0.477114s, Solving time = 44.396123s, Total time = 44.873237s
55 : Statistics :: Grounding time = 0.482767s, Solving time = 77.501689s, Total time = 77.984456s
56 : Statistics :: Grounding time = 0.491335s, Solving time = 61.714569s, Total time = 62.205904s
57 : Statistics :: Grounding time = 0.497934s, Solving time = 54.815408s, Total time = 55.313342s
58 : Statistics :: Grounding time = 0.517856s, Solving time = 76.136964s, Total time = 76.654820s
59 : Statistics :: Grounding time = 0.608318s, Solving time = 104.427106s, Total time = 105.035423s
60 : Statistics :: Grounding time = 0.531146s, Solving time = 108.986314s, Total time = 109.517460s
61 : Statistics :: Grounding time = 0.642961s, Solving time = 97.396092s, Total time = 98.039053s
62 : Statistics :: Grounding time = 0.541219s, Solving time = 109.775409s, Total time = 110.316628s
63 : Statistics :: Grounding time = 0.549395s, Solving time = 84.044080s, Total time = 84.593475s
64 : Statistics :: Grounding time = 0.562502s, Solving time = 102.260837s, Total time = 102.823339s
65 : Statistics :: Grounding time = 0.571570s, Solving time = 99.497529s, Total time = 100.069098s
66 : Statistics :: Grounding time = 0.567318s, Solving time = 110.919607s, Total time = 111.486925s
67 : Statistics :: Grounding time = 0.595635s, Solving time = 14.564536s, Total time = 15.160170s

[11-02-2021_06-20-01] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 16.657743s, Solving time = 1460.799762s, Total time = 1479.765349s
Model :: Total atoms = 14855, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_06-20-01] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_1,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_1,(block,6)),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),32)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_1,(block,3)),34)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),36)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_1,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_1,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_1,extended),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),48)
occurs(1,talos,configure(manipulator_limb_2,extended),49)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),50)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),51)
occurs(1,talos,configure(manipulator_limb_2,retracted),52)
occurs(1,talos,configure(manipulator_limb_1,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_1,extended),60)
occurs(1,talos,configure(manipulator_limb_2,extended),61)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),62)
occurs(1,talos,release(manipulator_end_1,(block,5)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),65)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),66)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),67)

[11-02-2021_06-20-01] INFO :: Experiment >> 

      ================================================      
           Experimental run 9 : Time 1480.239853s           
      ================================================      

[11-02-2021_06-20-01] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_06-20-01] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Instantiated.

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building started.

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building completed.

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding base program parts.

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.016917s.

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving base program parts.

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.002712s.

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving started.

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_06-20-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.187728s.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.008791s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.062437s.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.006044s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.062491s.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.008071s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.069951s.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.011593s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.070152s.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.016386s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.072489s.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.014595s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.075148s.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.015916s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.076564s.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.019028s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.078471s.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.016982s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.080594s.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.020656s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.078302s.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.019030s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_06-20-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.083998s.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.020018s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.082725s.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.023189s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.081795s.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.022336s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.087120s.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.025072s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.080510s.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.038134s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.082068s.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.040208s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.090426s.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.034379s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.087606s.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.039977s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_06-20-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.085961s.

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.061418s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.087146s.

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.101529s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.090678s.

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.097210s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.091278s.

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.128024s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.091446s.

[11-02-2021_06-20-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.206307s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_06-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_06-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.093209s.

[11-02-2021_06-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.294462s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_06-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_06-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.095145s.

[11-02-2021_06-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.502370s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.096232s.

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.265531s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.108195s.

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.215386s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.105195s.

[11-02-2021_06-20-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.346998s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_06-20-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_06-20-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.100873s.

[11-02-2021_06-20-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.494309s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_06-20-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_06-20-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.102843s.

[11-02-2021_06-20-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.658924s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_06-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_06-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.106037s.

[11-02-2021_06-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 1.088327s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_06-20-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_06-20-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.103833s.

[11-02-2021_06-20-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 1.431628s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_06-20-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_06-20-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.106392s.

[11-02-2021_06-20-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 1.227054s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_06-20-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_06-20-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.107814s.

[11-02-2021_06-20-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 2.421964s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_06-20-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_06-20-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.110132s.

[11-02-2021_06-20-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 2.129362s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_06-20-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_06-20-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.114309s.

[11-02-2021_06-20-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 2.616038s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_06-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_06-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.114702s.

[11-02-2021_06-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 2.675959s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_06-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_06-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.111617s.

[11-02-2021_06-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 3.056268s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_06-20-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_06-20-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.113509s.

[11-02-2021_06-20-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 4.933461s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_06-20-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_06-20-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.115542s.

[11-02-2021_06-20-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 7.806242s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_06-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_06-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.354617s.

[11-02-2021_06-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 7.482929s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_06-20-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_06-20-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.406897s.

[11-02-2021_06-20-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-20-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 8.292467s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-20-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_06-20-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_06-20-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.372141s.

[11-02-2021_06-20-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-21-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 11.083927s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-21-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_06-21-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_06-21-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.383735s.

[11-02-2021_06-21-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 11.076931s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_06-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_06-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.397123s.

[11-02-2021_06-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-21-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 12.603219s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-21-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_06-21-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_06-21-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.406223s.

[11-02-2021_06-21-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 23.127961s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_06-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_06-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.406645s.

[11-02-2021_06-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-22-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 19.740148s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-22-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_06-22-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_06-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.408326s.

[11-02-2021_06-22-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-22-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 32.748491s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-22-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_06-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_06-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.431623s.

[11-02-2021_06-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-23-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 37.305149s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-23-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_06-23-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_06-23-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.448101s.

[11-02-2021_06-23-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 37.518609s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_06-24-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_06-24-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.458752s.

[11-02-2021_06-24-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-24-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 43.945985s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-24-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_06-24-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_06-24-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.462799s.

[11-02-2021_06-24-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-25-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 55.595825s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-25-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_06-25-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_06-25-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.474523s.

[11-02-2021_06-25-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 84.058339s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_06-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_06-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.485067s.

[11-02-2021_06-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-28-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 84.445656s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-28-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_06-28-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_06-28-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.497409s.

[11-02-2021_06-28-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-30-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 111.902947s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-30-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_06-30-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_06-30-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.513179s.

[11-02-2021_06-30-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 103.023774s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_06-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_06-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.527411s.

[11-02-2021_06-32-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-33-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 107.974203s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-33-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_06-33-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_06-34-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.540225s.

[11-02-2021_06-34-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-34-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 50.387130s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-34-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_06-34-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_06-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.531795s.

[11-02-2021_06-34-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-35-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 51.113720s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-35-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_06-35-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_06-35-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.620498s.

[11-02-2021_06-35-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-36-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 64.702655s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-36-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_06-36-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_06-36-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.542482s.

[11-02-2021_06-36-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-37-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 63.284258s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-37-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_06-37-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_06-37-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.563439s.

[11-02-2021_06-37-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 85.661718s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_06-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_06-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.590447s.

[11-02-2021_06-39-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 82.776699s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_06-40-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_06-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.678486s.

[11-02-2021_06-40-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 96.780930s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_06-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_06-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.579249s.

[11-02-2021_06-42-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 145.089492s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-44-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_06-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_06-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.599117s.

[11-02-2021_06-44-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[11-02-2021_06-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Model found:
Model :: Total atoms = 14858, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_06-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 97.800291s:
Result = SAT, Stop condition = SAT

[11-02-2021_06-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving completed in 1581.656500s because STOP_CON_REACHED.

[11-02-2021_06-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 16.539888s, Solving time = 1562.685340s, Total time = 1581.656500s
Final Model :: Total atoms = 14858, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_06-46-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.187728s, Solving time = 0.008791s, Total time = 0.196519s
2 : Statistics :: Grounding time = 0.062437s, Solving time = 0.006044s, Total time = 0.068481s
3 : Statistics :: Grounding time = 0.062491s, Solving time = 0.008071s, Total time = 0.070563s
4 : Statistics :: Grounding time = 0.069951s, Solving time = 0.011593s, Total time = 0.081543s
5 : Statistics :: Grounding time = 0.070152s, Solving time = 0.016386s, Total time = 0.086537s
6 : Statistics :: Grounding time = 0.072489s, Solving time = 0.014595s, Total time = 0.087084s
7 : Statistics :: Grounding time = 0.075148s, Solving time = 0.015916s, Total time = 0.091064s
8 : Statistics :: Grounding time = 0.076564s, Solving time = 0.019028s, Total time = 0.095592s
9 : Statistics :: Grounding time = 0.078471s, Solving time = 0.016982s, Total time = 0.095453s
10 : Statistics :: Grounding time = 0.080594s, Solving time = 0.020656s, Total time = 0.101250s
11 : Statistics :: Grounding time = 0.078302s, Solving time = 0.019030s, Total time = 0.097331s
12 : Statistics :: Grounding time = 0.083998s, Solving time = 0.020018s, Total time = 0.104017s
13 : Statistics :: Grounding time = 0.082725s, Solving time = 0.023189s, Total time = 0.105914s
14 : Statistics :: Grounding time = 0.081795s, Solving time = 0.022336s, Total time = 0.104131s
15 : Statistics :: Grounding time = 0.087120s, Solving time = 0.025072s, Total time = 0.112192s
16 : Statistics :: Grounding time = 0.080510s, Solving time = 0.038134s, Total time = 0.118644s
17 : Statistics :: Grounding time = 0.082068s, Solving time = 0.040208s, Total time = 0.122276s
18 : Statistics :: Grounding time = 0.090426s, Solving time = 0.034379s, Total time = 0.124804s
19 : Statistics :: Grounding time = 0.087606s, Solving time = 0.039977s, Total time = 0.127583s
20 : Statistics :: Grounding time = 0.085961s, Solving time = 0.061418s, Total time = 0.147379s
21 : Statistics :: Grounding time = 0.087146s, Solving time = 0.101529s, Total time = 0.188675s
22 : Statistics :: Grounding time = 0.090678s, Solving time = 0.097210s, Total time = 0.187888s
23 : Statistics :: Grounding time = 0.091278s, Solving time = 0.128024s, Total time = 0.219302s
24 : Statistics :: Grounding time = 0.091446s, Solving time = 0.206307s, Total time = 0.297754s
25 : Statistics :: Grounding time = 0.093209s, Solving time = 0.294462s, Total time = 0.387671s
26 : Statistics :: Grounding time = 0.095145s, Solving time = 0.502370s, Total time = 0.597515s
27 : Statistics :: Grounding time = 0.096232s, Solving time = 0.265531s, Total time = 0.361763s
28 : Statistics :: Grounding time = 0.108195s, Solving time = 0.215386s, Total time = 0.323582s
29 : Statistics :: Grounding time = 0.105195s, Solving time = 0.346998s, Total time = 0.452193s
30 : Statistics :: Grounding time = 0.100873s, Solving time = 0.494309s, Total time = 0.595182s
31 : Statistics :: Grounding time = 0.102843s, Solving time = 0.658924s, Total time = 0.761767s
32 : Statistics :: Grounding time = 0.106037s, Solving time = 1.088327s, Total time = 1.194364s
33 : Statistics :: Grounding time = 0.103833s, Solving time = 1.431628s, Total time = 1.535461s
34 : Statistics :: Grounding time = 0.106392s, Solving time = 1.227054s, Total time = 1.333446s
35 : Statistics :: Grounding time = 0.107814s, Solving time = 2.421964s, Total time = 2.529778s
36 : Statistics :: Grounding time = 0.110132s, Solving time = 2.129362s, Total time = 2.239493s
37 : Statistics :: Grounding time = 0.114309s, Solving time = 2.616038s, Total time = 2.730347s
38 : Statistics :: Grounding time = 0.114702s, Solving time = 2.675959s, Total time = 2.790661s
39 : Statistics :: Grounding time = 0.111617s, Solving time = 3.056268s, Total time = 3.167885s
40 : Statistics :: Grounding time = 0.113509s, Solving time = 4.933461s, Total time = 5.046970s
41 : Statistics :: Grounding time = 0.115542s, Solving time = 7.806242s, Total time = 7.921785s
42 : Statistics :: Grounding time = 0.354617s, Solving time = 7.482929s, Total time = 7.837546s
43 : Statistics :: Grounding time = 0.406897s, Solving time = 8.292467s, Total time = 8.699365s
44 : Statistics :: Grounding time = 0.372141s, Solving time = 11.083927s, Total time = 11.456068s
45 : Statistics :: Grounding time = 0.383735s, Solving time = 11.076931s, Total time = 11.460666s
46 : Statistics :: Grounding time = 0.397123s, Solving time = 12.603219s, Total time = 13.000342s
47 : Statistics :: Grounding time = 0.406223s, Solving time = 23.127961s, Total time = 23.534183s
48 : Statistics :: Grounding time = 0.406645s, Solving time = 19.740148s, Total time = 20.146793s
49 : Statistics :: Grounding time = 0.408326s, Solving time = 32.748491s, Total time = 33.156818s
50 : Statistics :: Grounding time = 0.431623s, Solving time = 37.305149s, Total time = 37.736772s
51 : Statistics :: Grounding time = 0.448101s, Solving time = 37.518609s, Total time = 37.966710s
52 : Statistics :: Grounding time = 0.458752s, Solving time = 43.945985s, Total time = 44.404737s
53 : Statistics :: Grounding time = 0.462799s, Solving time = 55.595825s, Total time = 56.058624s
54 : Statistics :: Grounding time = 0.474523s, Solving time = 84.058339s, Total time = 84.532861s
55 : Statistics :: Grounding time = 0.485067s, Solving time = 84.445656s, Total time = 84.930723s
56 : Statistics :: Grounding time = 0.497409s, Solving time = 111.902947s, Total time = 112.400356s
57 : Statistics :: Grounding time = 0.513179s, Solving time = 103.023774s, Total time = 103.536953s
58 : Statistics :: Grounding time = 0.527411s, Solving time = 107.974203s, Total time = 108.501614s
59 : Statistics :: Grounding time = 0.540225s, Solving time = 50.387130s, Total time = 50.927354s
60 : Statistics :: Grounding time = 0.531795s, Solving time = 51.113720s, Total time = 51.645515s
61 : Statistics :: Grounding time = 0.620498s, Solving time = 64.702655s, Total time = 65.323153s
62 : Statistics :: Grounding time = 0.542482s, Solving time = 63.284258s, Total time = 63.826740s
63 : Statistics :: Grounding time = 0.563439s, Solving time = 85.661718s, Total time = 86.225157s
64 : Statistics :: Grounding time = 0.590447s, Solving time = 82.776699s, Total time = 83.367145s
65 : Statistics :: Grounding time = 0.678486s, Solving time = 96.780930s, Total time = 97.459416s
66 : Statistics :: Grounding time = 0.579249s, Solving time = 145.089492s, Total time = 145.668741s
67 : Statistics :: Grounding time = 0.599117s, Solving time = 97.800291s, Total time = 98.399408s

[11-02-2021_06-46-23] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 16.539888s, Solving time = 1562.685340s, Total time = 1581.656500s
Model :: Total atoms = 14858, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_06-46-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_2,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_2,extended),28)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_2,(block,6)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_2,(block,3)),34)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),36)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_2,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_2,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_2,extended),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),48)
occurs(1,talos,configure(manipulator_limb_1,extended),49)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),50)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),51)
occurs(1,talos,configure(manipulator_limb_1,retracted),52)
occurs(1,talos,configure(manipulator_limb_2,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_2,extended),60)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),61)
occurs(1,talos,configure(manipulator_limb_1,extended),62)
occurs(1,talos,release(manipulator_end_2,(block,5)),63)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),64)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),65)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),66)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),67)

[11-02-2021_06-46-24] INFO :: Experiment >> 

      ================================================      
          Experimental run 10 : Time 1582.251099s           
      ================================================      

[11-02-2021_06-46-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_06-46-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Instantiated.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building started.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building completed.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding base program parts.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.017142s.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving base program parts.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.002792s.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving started.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.193453s.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.009659s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.075023s.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.005529s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.070093s.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.008024s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.066914s.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.011390s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.075989s.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.021598s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.073484s.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.017221s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.078297s.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.018384s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.086961s.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.020928s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_06-46-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.081472s.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.020888s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.081210s.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.022764s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.082224s.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.023684s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.081070s.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.027741s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.085609s.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.022857s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.079622s.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.024598s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.083483s.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.024088s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.081596s.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.032543s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.091973s.

[11-02-2021_06-46-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.037301s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.090716s.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.034640s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.083984s.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.048030s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.090464s.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.037811s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.090377s.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.057538s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.092015s.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.059466s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.089715s.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.076501s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_06-46-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.094263s.

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.094083s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.104111s.

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.146944s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.094121s.

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.207404s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.109000s.

[11-02-2021_06-46-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.250458s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_06-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_06-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.100388s.

[11-02-2021_06-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.336708s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_06-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_06-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.099545s.

[11-02-2021_06-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.428960s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_06-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_06-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.101237s.

[11-02-2021_06-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.554973s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_06-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_06-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.100825s.

[11-02-2021_06-46-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.671459s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_06-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_06-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.106463s.

[11-02-2021_06-46-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.673570s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_06-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_06-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.105811s.

[11-02-2021_06-46-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 1.150729s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_06-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_06-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.109066s.

[11-02-2021_06-46-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 1.430600s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_06-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_06-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.109301s.

[11-02-2021_06-46-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 1.389450s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_06-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_06-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.108753s.

[11-02-2021_06-46-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 1.765282s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_06-46-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_06-46-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.112674s.

[11-02-2021_06-46-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 2.865236s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_06-46-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_06-46-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.114548s.

[11-02-2021_06-46-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 3.214059s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_06-46-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_06-46-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.112633s.

[11-02-2021_06-46-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 3.346913s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_06-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_06-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.113060s.

[11-02-2021_06-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 4.393389s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_06-46-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_06-46-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.127297s.

[11-02-2021_06-46-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-46-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 3.949710s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-46-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_06-46-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_06-46-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.131626s.

[11-02-2021_06-46-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 4.658778s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_06-47-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_06-47-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.365625s.

[11-02-2021_06-47-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-47-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 6.444993s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-47-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_06-47-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_06-47-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.366506s.

[11-02-2021_06-47-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-47-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 6.990791s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-47-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_06-47-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_06-47-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.376509s.

[11-02-2021_06-47-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-47-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 10.486025s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-47-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_06-47-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_06-47-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.389659s.

[11-02-2021_06-47-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-47-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 10.274697s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-47-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_06-47-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_06-47-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.400271s.

[11-02-2021_06-47-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 18.230919s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_06-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_06-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.420979s.

[11-02-2021_06-47-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-48-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 18.238151s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-48-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_06-48-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_06-48-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.433706s.

[11-02-2021_06-48-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 19.954191s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_06-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_06-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.430121s.

[11-02-2021_06-48-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-48-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 19.070218s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-48-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_06-48-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_06-48-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.436915s.

[11-02-2021_06-48-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 26.380830s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_06-49-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_06-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.454970s.

[11-02-2021_06-49-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-49-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 28.578642s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-49-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_06-49-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_06-49-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.458727s.

[11-02-2021_06-49-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 52.968944s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_06-50-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_06-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.540355s.

[11-02-2021_06-50-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-51-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 46.243603s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-51-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_06-51-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_06-51-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.488004s.

[11-02-2021_06-51-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-52-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 51.442975s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-52-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_06-52-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_06-52-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.504379s.

[11-02-2021_06-52-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 71.608955s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_06-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_06-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.507096s.

[11-02-2021_06-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 71.830623s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_06-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_06-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.514243s.

[11-02-2021_06-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 57.207645s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_06-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_06-55-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.574868s.

[11-02-2021_06-55-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 85.906660s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_06-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_06-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.547183s.

[11-02-2021_06-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_06-59-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 118.009314s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_06-59-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_06-59-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_06-59-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.547331s.

[11-02-2021_06-59-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_07-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 117.783005s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_07-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_07-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.537426s.

[11-02-2021_07-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_07-02-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 104.374872s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-02-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_07-02-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_07-02-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.549355s.

[11-02-2021_07-02-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_07-04-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 101.168226s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-04-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_07-04-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_07-04-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.570906s.

[11-02-2021_07-04-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_07-06-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 120.445671s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-06-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_07-06-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_07-06-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.679234s.

[11-02-2021_07-06-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_07-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 110.068110s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_07-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_07-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.577431s.

[11-02-2021_07-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_07-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 90.753234s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_07-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_07-09-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.584840s.

[11-02-2021_07-09-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[11-02-2021_07-10-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Model found:
Model :: Total atoms = 14855, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_07-10-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 22.313237s:
Result = SAT, Stop condition = SAT

[11-02-2021_07-10-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving completed in 1437.473716s because STOP_CON_REACHED.

[11-02-2021_07-10-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 16.334249s, Solving time = 1418.969210s, Total time = 1437.473716s
Final Model :: Total atoms = 14855, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_07-10-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.193453s, Solving time = 0.009659s, Total time = 0.203112s
2 : Statistics :: Grounding time = 0.075023s, Solving time = 0.005529s, Total time = 0.080553s
3 : Statistics :: Grounding time = 0.070093s, Solving time = 0.008024s, Total time = 0.078117s
4 : Statistics :: Grounding time = 0.066914s, Solving time = 0.011390s, Total time = 0.078304s
5 : Statistics :: Grounding time = 0.075989s, Solving time = 0.021598s, Total time = 0.097587s
6 : Statistics :: Grounding time = 0.073484s, Solving time = 0.017221s, Total time = 0.090705s
7 : Statistics :: Grounding time = 0.078297s, Solving time = 0.018384s, Total time = 0.096681s
8 : Statistics :: Grounding time = 0.086961s, Solving time = 0.020928s, Total time = 0.107889s
9 : Statistics :: Grounding time = 0.081472s, Solving time = 0.020888s, Total time = 0.102360s
10 : Statistics :: Grounding time = 0.081210s, Solving time = 0.022764s, Total time = 0.103974s
11 : Statistics :: Grounding time = 0.082224s, Solving time = 0.023684s, Total time = 0.105908s
12 : Statistics :: Grounding time = 0.081070s, Solving time = 0.027741s, Total time = 0.108811s
13 : Statistics :: Grounding time = 0.085609s, Solving time = 0.022857s, Total time = 0.108467s
14 : Statistics :: Grounding time = 0.079622s, Solving time = 0.024598s, Total time = 0.104220s
15 : Statistics :: Grounding time = 0.083483s, Solving time = 0.024088s, Total time = 0.107571s
16 : Statistics :: Grounding time = 0.081596s, Solving time = 0.032543s, Total time = 0.114139s
17 : Statistics :: Grounding time = 0.091973s, Solving time = 0.037301s, Total time = 0.129274s
18 : Statistics :: Grounding time = 0.090716s, Solving time = 0.034640s, Total time = 0.125356s
19 : Statistics :: Grounding time = 0.083984s, Solving time = 0.048030s, Total time = 0.132014s
20 : Statistics :: Grounding time = 0.090464s, Solving time = 0.037811s, Total time = 0.128275s
21 : Statistics :: Grounding time = 0.090377s, Solving time = 0.057538s, Total time = 0.147915s
22 : Statistics :: Grounding time = 0.092015s, Solving time = 0.059466s, Total time = 0.151481s
23 : Statistics :: Grounding time = 0.089715s, Solving time = 0.076501s, Total time = 0.166217s
24 : Statistics :: Grounding time = 0.094263s, Solving time = 0.094083s, Total time = 0.188346s
25 : Statistics :: Grounding time = 0.104111s, Solving time = 0.146944s, Total time = 0.251055s
26 : Statistics :: Grounding time = 0.094121s, Solving time = 0.207404s, Total time = 0.301525s
27 : Statistics :: Grounding time = 0.109000s, Solving time = 0.250458s, Total time = 0.359458s
28 : Statistics :: Grounding time = 0.100388s, Solving time = 0.336708s, Total time = 0.437096s
29 : Statistics :: Grounding time = 0.099545s, Solving time = 0.428960s, Total time = 0.528504s
30 : Statistics :: Grounding time = 0.101237s, Solving time = 0.554973s, Total time = 0.656210s
31 : Statistics :: Grounding time = 0.100825s, Solving time = 0.671459s, Total time = 0.772284s
32 : Statistics :: Grounding time = 0.106463s, Solving time = 0.673570s, Total time = 0.780033s
33 : Statistics :: Grounding time = 0.105811s, Solving time = 1.150729s, Total time = 1.256540s
34 : Statistics :: Grounding time = 0.109066s, Solving time = 1.430600s, Total time = 1.539666s
35 : Statistics :: Grounding time = 0.109301s, Solving time = 1.389450s, Total time = 1.498751s
36 : Statistics :: Grounding time = 0.108753s, Solving time = 1.765282s, Total time = 1.874035s
37 : Statistics :: Grounding time = 0.112674s, Solving time = 2.865236s, Total time = 2.977910s
38 : Statistics :: Grounding time = 0.114548s, Solving time = 3.214059s, Total time = 3.328607s
39 : Statistics :: Grounding time = 0.112633s, Solving time = 3.346913s, Total time = 3.459546s
40 : Statistics :: Grounding time = 0.113060s, Solving time = 4.393389s, Total time = 4.506449s
41 : Statistics :: Grounding time = 0.127297s, Solving time = 3.949710s, Total time = 4.077007s
42 : Statistics :: Grounding time = 0.131626s, Solving time = 4.658778s, Total time = 4.790404s
43 : Statistics :: Grounding time = 0.365625s, Solving time = 6.444993s, Total time = 6.810618s
44 : Statistics :: Grounding time = 0.366506s, Solving time = 6.990791s, Total time = 7.357297s
45 : Statistics :: Grounding time = 0.376509s, Solving time = 10.486025s, Total time = 10.862535s
46 : Statistics :: Grounding time = 0.389659s, Solving time = 10.274697s, Total time = 10.664356s
47 : Statistics :: Grounding time = 0.400271s, Solving time = 18.230919s, Total time = 18.631190s
48 : Statistics :: Grounding time = 0.420979s, Solving time = 18.238151s, Total time = 18.659130s
49 : Statistics :: Grounding time = 0.433706s, Solving time = 19.954191s, Total time = 20.387897s
50 : Statistics :: Grounding time = 0.430121s, Solving time = 19.070218s, Total time = 19.500339s
51 : Statistics :: Grounding time = 0.436915s, Solving time = 26.380830s, Total time = 26.817745s
52 : Statistics :: Grounding time = 0.454970s, Solving time = 28.578642s, Total time = 29.033612s
53 : Statistics :: Grounding time = 0.458727s, Solving time = 52.968944s, Total time = 53.427671s
54 : Statistics :: Grounding time = 0.540355s, Solving time = 46.243603s, Total time = 46.783957s
55 : Statistics :: Grounding time = 0.488004s, Solving time = 51.442975s, Total time = 51.930979s
56 : Statistics :: Grounding time = 0.504379s, Solving time = 71.608955s, Total time = 72.113334s
57 : Statistics :: Grounding time = 0.507096s, Solving time = 71.830623s, Total time = 72.337719s
58 : Statistics :: Grounding time = 0.514243s, Solving time = 57.207645s, Total time = 57.721889s
59 : Statistics :: Grounding time = 0.574868s, Solving time = 85.906660s, Total time = 86.481528s
60 : Statistics :: Grounding time = 0.547183s, Solving time = 118.009314s, Total time = 118.556496s
61 : Statistics :: Grounding time = 0.547331s, Solving time = 117.783005s, Total time = 118.330336s
62 : Statistics :: Grounding time = 0.537426s, Solving time = 104.374872s, Total time = 104.912298s
63 : Statistics :: Grounding time = 0.549355s, Solving time = 101.168226s, Total time = 101.717581s
64 : Statistics :: Grounding time = 0.570906s, Solving time = 120.445671s, Total time = 121.016576s
65 : Statistics :: Grounding time = 0.679234s, Solving time = 110.068110s, Total time = 110.747344s
66 : Statistics :: Grounding time = 0.577431s, Solving time = 90.753234s, Total time = 91.330666s
67 : Statistics :: Grounding time = 0.584840s, Solving time = 22.313237s, Total time = 22.898078s

[11-02-2021_07-10-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 16.334249s, Solving time = 1418.969210s, Total time = 1437.473716s
Model :: Total atoms = 14855, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_07-10-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_2,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_2,extended),28)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_2,(block,6)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_2,(block,3)),34)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),36)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_2,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_2,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_2,extended),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),48)
occurs(1,talos,configure(manipulator_limb_1,extended),49)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),50)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),51)
occurs(1,talos,configure(manipulator_limb_2,retracted),52)
occurs(1,talos,configure(manipulator_limb_1,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_1,extended),60)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),61)
occurs(1,talos,configure(manipulator_limb_2,extended),62)
occurs(1,talos,release(manipulator_end_1,(block,5)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),65)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),66)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),67)

[11-02-2021_07-10-21] INFO :: Experiment >> 

      ================================================      
          Experimental run 11 : Time 1437.902684s           
      ================================================      

[11-02-2021_07-10-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_07-10-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_07-10-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Instantiated.

[11-02-2021_07-10-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_07-10-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_07-10-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_07-10-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building started.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building completed.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding base program parts.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.016512s.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving base program parts.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.002725s.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving started.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.187148s.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.009643s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.065934s.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.005821s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.062272s.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.007484s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.065098s.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.011141s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.070028s.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.016471s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.075149s.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.014958s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.081798s.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.015643s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.076121s.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.017558s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.076907s.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.016908s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_07-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.077204s.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.018385s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.078694s.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.019372s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.077075s.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.021669s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.080582s.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.023318s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.078128s.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.023330s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.079491s.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.024650s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.082545s.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.028224s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.081905s.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.033436s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.083059s.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.040106s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_07-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.083385s.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.038241s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.085515s.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.056316s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.091002s.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.059266s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.087260s.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.060331s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.090393s.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.063373s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.088807s.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.074905s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.091539s.

[11-02-2021_07-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.069863s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.093356s.

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.078261s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.098535s.

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.106319s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.096271s.

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.098006s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.098960s.

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.125598s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.100704s.

[11-02-2021_07-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.188224s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_07-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_07-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.100597s.

[11-02-2021_07-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.273723s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_07-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_07-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.104011s.

[11-02-2021_07-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.328301s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_07-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_07-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.102660s.

[11-02-2021_07-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.492085s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_07-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_07-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.106554s.

[11-02-2021_07-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.538657s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_07-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_07-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.107352s.

[11-02-2021_07-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.841467s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_07-10-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_07-10-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.105025s.

[11-02-2021_07-10-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.338806s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_07-10-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_07-10-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.107804s.

[11-02-2021_07-10-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 2.421343s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_07-10-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_07-10-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.114697s.

[11-02-2021_07-10-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 3.610176s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_07-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_07-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.112819s.

[11-02-2021_07-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 2.521645s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_07-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_07-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.113810s.

[11-02-2021_07-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 3.362739s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_07-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_07-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.115137s.

[11-02-2021_07-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 3.338990s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_07-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_07-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.114553s.

[11-02-2021_07-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-10-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 6.077631s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-10-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_07-10-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_07-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.357603s.

[11-02-2021_07-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-11-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 6.938763s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-11-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_07-11-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_07-11-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.366875s.

[11-02-2021_07-11-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 8.225055s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_07-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_07-11-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.375434s.

[11-02-2021_07-11-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 12.413598s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_07-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_07-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.382039s.

[11-02-2021_07-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-11-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 13.845567s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-11-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_07-11-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_07-11-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.396620s.

[11-02-2021_07-11-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 19.059719s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_07-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_07-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.404654s.

[11-02-2021_07-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-12-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 29.707295s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-12-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_07-12-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_07-12-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.415516s.

[11-02-2021_07-12-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-13-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 37.764530s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-13-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_07-13-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_07-13-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.433824s.

[11-02-2021_07-13-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 39.875687s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_07-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_07-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.437476s.

[11-02-2021_07-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 58.626727s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_07-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_07-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.452726s.

[11-02-2021_07-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-16-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 76.673201s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-16-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_07-16-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_07-16-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.459163s.

[11-02-2021_07-16-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-17-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 83.981613s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-17-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_07-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_07-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.468072s.

[11-02-2021_07-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-18-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 74.625529s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-18-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_07-18-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_07-18-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.491029s.

[11-02-2021_07-18-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 87.350920s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_07-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_07-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.478063s.

[11-02-2021_07-20-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 107.354670s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-21-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_07-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_07-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.574006s.

[11-02-2021_07-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-23-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 88.931478s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-23-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_07-23-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_07-23-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.517034s.

[11-02-2021_07-23-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-25-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 98.859161s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-25-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_07-25-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_07-25-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.523489s.

[11-02-2021_07-25-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-25-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 51.286085s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-25-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_07-25-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_07-25-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.537741s.

[11-02-2021_07-25-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-26-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 36.567551s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-26-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_07-26-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_07-26-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.540332s.

[11-02-2021_07-26-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-27-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 34.929543s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-27-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_07-27-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_07-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.536749s.

[11-02-2021_07-27-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-28-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 53.662015s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-28-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_07-28-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_07-28-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.533063s.

[11-02-2021_07-28-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 53.951140s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_07-28-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_07-28-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.549402s.

[11-02-2021_07-28-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-30-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 107.231421s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-30-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_07-30-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_07-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.565930s.

[11-02-2021_07-30-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-32-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 82.029484s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-32-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_07-32-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_07-32-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.579050s.

[11-02-2021_07-32-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-34-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 118.947229s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_07-34-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_07-34-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.582110s.

[11-02-2021_07-34-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[11-02-2021_07-34-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Model found:
Model :: Total atoms = 14861, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[11-02-2021_07-34-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 12.490970s:
Result = SAT, Stop condition = SAT

[11-02-2021_07-34-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving completed in 1439.901935s because STOP_CON_REACHED.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 15.864395s, Solving time = 1421.844059s, Total time = 1439.901935s
Final Model :: Total atoms = 14861, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.187148s, Solving time = 0.009643s, Total time = 0.196791s
2 : Statistics :: Grounding time = 0.065934s, Solving time = 0.005821s, Total time = 0.071754s
3 : Statistics :: Grounding time = 0.062272s, Solving time = 0.007484s, Total time = 0.069756s
4 : Statistics :: Grounding time = 0.065098s, Solving time = 0.011141s, Total time = 0.076239s
5 : Statistics :: Grounding time = 0.070028s, Solving time = 0.016471s, Total time = 0.086499s
6 : Statistics :: Grounding time = 0.075149s, Solving time = 0.014958s, Total time = 0.090108s
7 : Statistics :: Grounding time = 0.081798s, Solving time = 0.015643s, Total time = 0.097441s
8 : Statistics :: Grounding time = 0.076121s, Solving time = 0.017558s, Total time = 0.093679s
9 : Statistics :: Grounding time = 0.076907s, Solving time = 0.016908s, Total time = 0.093814s
10 : Statistics :: Grounding time = 0.077204s, Solving time = 0.018385s, Total time = 0.095589s
11 : Statistics :: Grounding time = 0.078694s, Solving time = 0.019372s, Total time = 0.098065s
12 : Statistics :: Grounding time = 0.077075s, Solving time = 0.021669s, Total time = 0.098744s
13 : Statistics :: Grounding time = 0.080582s, Solving time = 0.023318s, Total time = 0.103900s
14 : Statistics :: Grounding time = 0.078128s, Solving time = 0.023330s, Total time = 0.101458s
15 : Statistics :: Grounding time = 0.079491s, Solving time = 0.024650s, Total time = 0.104141s
16 : Statistics :: Grounding time = 0.082545s, Solving time = 0.028224s, Total time = 0.110769s
17 : Statistics :: Grounding time = 0.081905s, Solving time = 0.033436s, Total time = 0.115341s
18 : Statistics :: Grounding time = 0.083059s, Solving time = 0.040106s, Total time = 0.123165s
19 : Statistics :: Grounding time = 0.083385s, Solving time = 0.038241s, Total time = 0.121626s
20 : Statistics :: Grounding time = 0.085515s, Solving time = 0.056316s, Total time = 0.141832s
21 : Statistics :: Grounding time = 0.091002s, Solving time = 0.059266s, Total time = 0.150268s
22 : Statistics :: Grounding time = 0.087260s, Solving time = 0.060331s, Total time = 0.147591s
23 : Statistics :: Grounding time = 0.090393s, Solving time = 0.063373s, Total time = 0.153766s
24 : Statistics :: Grounding time = 0.088807s, Solving time = 0.074905s, Total time = 0.163712s
25 : Statistics :: Grounding time = 0.091539s, Solving time = 0.069863s, Total time = 0.161401s
26 : Statistics :: Grounding time = 0.093356s, Solving time = 0.078261s, Total time = 0.171617s
27 : Statistics :: Grounding time = 0.098535s, Solving time = 0.106319s, Total time = 0.204854s
28 : Statistics :: Grounding time = 0.096271s, Solving time = 0.098006s, Total time = 0.194277s
29 : Statistics :: Grounding time = 0.098960s, Solving time = 0.125598s, Total time = 0.224558s
30 : Statistics :: Grounding time = 0.100704s, Solving time = 0.188224s, Total time = 0.288928s
31 : Statistics :: Grounding time = 0.100597s, Solving time = 0.273723s, Total time = 0.374320s
32 : Statistics :: Grounding time = 0.104011s, Solving time = 0.328301s, Total time = 0.432311s
33 : Statistics :: Grounding time = 0.102660s, Solving time = 0.492085s, Total time = 0.594744s
34 : Statistics :: Grounding time = 0.106554s, Solving time = 0.538657s, Total time = 0.645211s
35 : Statistics :: Grounding time = 0.107352s, Solving time = 0.841467s, Total time = 0.948819s
36 : Statistics :: Grounding time = 0.105025s, Solving time = 1.338806s, Total time = 1.443831s
37 : Statistics :: Grounding time = 0.107804s, Solving time = 2.421343s, Total time = 2.529147s
38 : Statistics :: Grounding time = 0.114697s, Solving time = 3.610176s, Total time = 3.724874s
39 : Statistics :: Grounding time = 0.112819s, Solving time = 2.521645s, Total time = 2.634465s
40 : Statistics :: Grounding time = 0.113810s, Solving time = 3.362739s, Total time = 3.476549s
41 : Statistics :: Grounding time = 0.115137s, Solving time = 3.338990s, Total time = 3.454127s
42 : Statistics :: Grounding time = 0.114553s, Solving time = 6.077631s, Total time = 6.192184s
43 : Statistics :: Grounding time = 0.357603s, Solving time = 6.938763s, Total time = 7.296365s
44 : Statistics :: Grounding time = 0.366875s, Solving time = 8.225055s, Total time = 8.591930s
45 : Statistics :: Grounding time = 0.375434s, Solving time = 12.413598s, Total time = 12.789031s
46 : Statistics :: Grounding time = 0.382039s, Solving time = 13.845567s, Total time = 14.227606s
47 : Statistics :: Grounding time = 0.396620s, Solving time = 19.059719s, Total time = 19.456338s
48 : Statistics :: Grounding time = 0.404654s, Solving time = 29.707295s, Total time = 30.111950s
49 : Statistics :: Grounding time = 0.415516s, Solving time = 37.764530s, Total time = 38.180046s
50 : Statistics :: Grounding time = 0.433824s, Solving time = 39.875687s, Total time = 40.309511s
51 : Statistics :: Grounding time = 0.437476s, Solving time = 58.626727s, Total time = 59.064203s
52 : Statistics :: Grounding time = 0.452726s, Solving time = 76.673201s, Total time = 77.125927s
53 : Statistics :: Grounding time = 0.459163s, Solving time = 83.981613s, Total time = 84.440776s
54 : Statistics :: Grounding time = 0.468072s, Solving time = 74.625529s, Total time = 75.093602s
55 : Statistics :: Grounding time = 0.491029s, Solving time = 87.350920s, Total time = 87.841949s
56 : Statistics :: Grounding time = 0.478063s, Solving time = 107.354670s, Total time = 107.832733s
57 : Statistics :: Grounding time = 0.574006s, Solving time = 88.931478s, Total time = 89.505484s
58 : Statistics :: Grounding time = 0.517034s, Solving time = 98.859161s, Total time = 99.376195s
59 : Statistics :: Grounding time = 0.523489s, Solving time = 51.286085s, Total time = 51.809575s
60 : Statistics :: Grounding time = 0.537741s, Solving time = 36.567551s, Total time = 37.105292s
61 : Statistics :: Grounding time = 0.540332s, Solving time = 34.929543s, Total time = 35.469875s
62 : Statistics :: Grounding time = 0.536749s, Solving time = 53.662015s, Total time = 54.198764s
63 : Statistics :: Grounding time = 0.533063s, Solving time = 53.951140s, Total time = 54.484202s
64 : Statistics :: Grounding time = 0.549402s, Solving time = 107.231421s, Total time = 107.780823s
65 : Statistics :: Grounding time = 0.565930s, Solving time = 82.029484s, Total time = 82.595414s
66 : Statistics :: Grounding time = 0.579050s, Solving time = 118.947229s, Total time = 119.526279s
67 : Statistics :: Grounding time = 0.582110s, Solving time = 12.490970s, Total time = 13.073081s

[11-02-2021_07-34-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 15.864395s, Solving time = 1421.844059s, Total time = 1439.901935s
Model :: Total atoms = 14861, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[11-02-2021_07-34-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_2,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_2,extended),28)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_2,(block,6)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_2,(block,3)),34)
occurs(1,talos,configure(manipulator_limb_2,retracted),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((hallway,2)),37)
occurs(1,talos,move((hallway,1)),38)
occurs(1,talos,move((hallway,0)),39)
occurs(1,talos,move((store_room,1)),40)
occurs(1,talos,move((store_room,0)),41)
occurs(1,talos,configure(manipulator_limb_2,extended),42)
occurs(1,talos,configure(manipulator_limb_1,extended),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),45)
occurs(1,talos,configure(manipulator_limb_2,retracted),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),48)
occurs(1,talos,configure(manipulator_limb_1,retracted),49)
occurs(1,talos,move((store_room,1)),50)
occurs(1,talos,move((hallway,0)),51)
occurs(1,talos,move((hallway,1)),52)
occurs(1,talos,move((hallway,2)),53)
occurs(1,talos,move((puzzle_room,0)),54)
occurs(1,talos,move((puzzle_room,1)),55)
occurs(1,talos,configure(manipulator_limb_2,extended),56)
occurs(1,talos,configure(manipulator_limb_1,extended),57)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),58)
occurs(1,talos,release(manipulator_end_2,(block,5)),59)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),60)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),61)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),62)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),63)
occurs(1,talos,release(manipulator_end_2,(block,2)),64)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),65)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),66)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),67)

[11-02-2021_07-34-22] INFO :: Experiment >> 

      ================================================      
          Experimental run 12 : Time 1440.364423s           
      ================================================      

[11-02-2021_07-34-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_07-34-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Instantiated.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building started.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building completed.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding base program parts.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.016684s.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving base program parts.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.002597s.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving started.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.186132s.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.009276s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.067584s.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.005766s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.066643s.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.008290s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.071897s.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.011874s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.069640s.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.016414s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_07-34-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.072525s.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.014618s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.074443s.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.015804s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.076778s.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.017726s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.076941s.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.018769s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.078832s.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.020451s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.077068s.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.020694s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.077048s.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.020318s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.079145s.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.023050s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.083779s.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.022740s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.080372s.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.025587s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_07-34-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.080753s.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.025561s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.080977s.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.032079s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.083795s.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.031747s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.085101s.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.037725s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.085172s.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.055320s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.088353s.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.068713s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.090031s.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.085386s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_07-34-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.088854s.

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.123949s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.091022s.

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.119863s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.092593s.

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.125074s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.103878s.

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.169387s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.097527s.

[11-02-2021_07-34-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.239274s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_07-34-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_07-34-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.097117s.

[11-02-2021_07-34-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.335292s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_07-34-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_07-34-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.098129s.

[11-02-2021_07-34-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.436673s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_07-34-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_07-34-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.099670s.

[11-02-2021_07-34-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.661255s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_07-34-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_07-34-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.102103s.

[11-02-2021_07-34-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 1.006218s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_07-34-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_07-34-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.101705s.

[11-02-2021_07-34-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 1.641857s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_07-34-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_07-34-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.112476s.

[11-02-2021_07-34-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 1.889297s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_07-34-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_07-34-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.108541s.

[11-02-2021_07-34-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 3.364073s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_07-34-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_07-34-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.107014s.

[11-02-2021_07-34-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 2.707144s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_07-34-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_07-34-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.110275s.

[11-02-2021_07-34-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 3.056767s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_07-34-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_07-34-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.110017s.

[11-02-2021_07-34-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 3.625043s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_07-34-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_07-34-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.111374s.

[11-02-2021_07-34-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 3.517507s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_07-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_07-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.112606s.

[11-02-2021_07-34-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 4.244421s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_07-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_07-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.112414s.

[11-02-2021_07-34-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 4.114990s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_07-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_07-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.114945s.

[11-02-2021_07-34-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-35-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 6.493346s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-35-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_07-35-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_07-35-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.355075s.

[11-02-2021_07-35-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 7.989417s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_07-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_07-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.367921s.

[11-02-2021_07-35-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-35-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 13.660103s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-35-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_07-35-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_07-35-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.369136s.

[11-02-2021_07-35-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-35-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 13.224756s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-35-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_07-35-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_07-35-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.423318s.

[11-02-2021_07-35-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 13.162514s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_07-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_07-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.393894s.

[11-02-2021_07-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 19.906393s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_07-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_07-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.396884s.

[11-02-2021_07-36-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-36-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 26.055264s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-36-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_07-36-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_07-36-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.408258s.

[11-02-2021_07-36-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 21.196269s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_07-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_07-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.425161s.

[11-02-2021_07-37-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 30.093174s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_07-37-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_07-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.429130s.

[11-02-2021_07-37-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-38-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 47.419686s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-38-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_07-38-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_07-38-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.450110s.

[11-02-2021_07-38-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 45.134689s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_07-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_07-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.453442s.

[11-02-2021_07-39-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 77.536053s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_07-40-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_07-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.466866s.

[11-02-2021_07-40-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 68.218501s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_07-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_07-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.508499s.

[11-02-2021_07-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 68.300592s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_07-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_07-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.497482s.

[11-02-2021_07-42-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 132.309780s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_07-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_07-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.494557s.

[11-02-2021_07-44-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 109.934595s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_07-46-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_07-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.590285s.

[11-02-2021_07-46-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-48-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 80.929581s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-48-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_07-48-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_07-48-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.538133s.

[11-02-2021_07-48-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-49-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 109.257575s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-49-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_07-49-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_07-49-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.569741s.

[11-02-2021_07-49-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-51-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 118.927369s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-51-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_07-51-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_07-51-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.623866s.

[11-02-2021_07-51-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 98.903093s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_07-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_07-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.545741s.

[11-02-2021_07-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 121.866419s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_07-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_07-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.542671s.

[11-02-2021_07-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 126.701556s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_07-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_07-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.553122s.

[11-02-2021_07-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_07-59-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 121.019169s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_07-59-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_07-59-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_07-59-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.551799s.

[11-02-2021_07-59-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_08-02-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 146.512696s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-02-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_08-02-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_08-02-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.571564s.

[11-02-2021_08-02-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_08-04-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 158.484587s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-04-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_08-04-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_08-04-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.576968s.

[11-02-2021_08-04-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_08-07-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 153.389194s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_08-07-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_08-07-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.838214s.

[11-02-2021_08-07-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[11-02-2021_08-07-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Model found:
Model :: Total atoms = 14856, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[11-02-2021_08-07-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 11.567053s:
Result = SAT, Stop condition = SAT

[11-02-2021_08-07-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving completed in 1999.391947s because STOP_CON_REACHED.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 16.763790s, Solving time = 1980.162013s, Total time = 1999.391947s
Final Model :: Total atoms = 14856, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.186132s, Solving time = 0.009276s, Total time = 0.195408s
2 : Statistics :: Grounding time = 0.067584s, Solving time = 0.005766s, Total time = 0.073351s
3 : Statistics :: Grounding time = 0.066643s, Solving time = 0.008290s, Total time = 0.074933s
4 : Statistics :: Grounding time = 0.071897s, Solving time = 0.011874s, Total time = 0.083771s
5 : Statistics :: Grounding time = 0.069640s, Solving time = 0.016414s, Total time = 0.086054s
6 : Statistics :: Grounding time = 0.072525s, Solving time = 0.014618s, Total time = 0.087143s
7 : Statistics :: Grounding time = 0.074443s, Solving time = 0.015804s, Total time = 0.090247s
8 : Statistics :: Grounding time = 0.076778s, Solving time = 0.017726s, Total time = 0.094503s
9 : Statistics :: Grounding time = 0.076941s, Solving time = 0.018769s, Total time = 0.095711s
10 : Statistics :: Grounding time = 0.078832s, Solving time = 0.020451s, Total time = 0.099283s
11 : Statistics :: Grounding time = 0.077068s, Solving time = 0.020694s, Total time = 0.097761s
12 : Statistics :: Grounding time = 0.077048s, Solving time = 0.020318s, Total time = 0.097366s
13 : Statistics :: Grounding time = 0.079145s, Solving time = 0.023050s, Total time = 0.102195s
14 : Statistics :: Grounding time = 0.083779s, Solving time = 0.022740s, Total time = 0.106519s
15 : Statistics :: Grounding time = 0.080372s, Solving time = 0.025587s, Total time = 0.105959s
16 : Statistics :: Grounding time = 0.080753s, Solving time = 0.025561s, Total time = 0.106314s
17 : Statistics :: Grounding time = 0.080977s, Solving time = 0.032079s, Total time = 0.113057s
18 : Statistics :: Grounding time = 0.083795s, Solving time = 0.031747s, Total time = 0.115542s
19 : Statistics :: Grounding time = 0.085101s, Solving time = 0.037725s, Total time = 0.122826s
20 : Statistics :: Grounding time = 0.085172s, Solving time = 0.055320s, Total time = 0.140492s
21 : Statistics :: Grounding time = 0.088353s, Solving time = 0.068713s, Total time = 0.157065s
22 : Statistics :: Grounding time = 0.090031s, Solving time = 0.085386s, Total time = 0.175417s
23 : Statistics :: Grounding time = 0.088854s, Solving time = 0.123949s, Total time = 0.212802s
24 : Statistics :: Grounding time = 0.091022s, Solving time = 0.119863s, Total time = 0.210885s
25 : Statistics :: Grounding time = 0.092593s, Solving time = 0.125074s, Total time = 0.217667s
26 : Statistics :: Grounding time = 0.103878s, Solving time = 0.169387s, Total time = 0.273265s
27 : Statistics :: Grounding time = 0.097527s, Solving time = 0.239274s, Total time = 0.336801s
28 : Statistics :: Grounding time = 0.097117s, Solving time = 0.335292s, Total time = 0.432409s
29 : Statistics :: Grounding time = 0.098129s, Solving time = 0.436673s, Total time = 0.534802s
30 : Statistics :: Grounding time = 0.099670s, Solving time = 0.661255s, Total time = 0.760924s
31 : Statistics :: Grounding time = 0.102103s, Solving time = 1.006218s, Total time = 1.108321s
32 : Statistics :: Grounding time = 0.101705s, Solving time = 1.641857s, Total time = 1.743562s
33 : Statistics :: Grounding time = 0.112476s, Solving time = 1.889297s, Total time = 2.001773s
34 : Statistics :: Grounding time = 0.108541s, Solving time = 3.364073s, Total time = 3.472614s
35 : Statistics :: Grounding time = 0.107014s, Solving time = 2.707144s, Total time = 2.814158s
36 : Statistics :: Grounding time = 0.110275s, Solving time = 3.056767s, Total time = 3.167043s
37 : Statistics :: Grounding time = 0.110017s, Solving time = 3.625043s, Total time = 3.735060s
38 : Statistics :: Grounding time = 0.111374s, Solving time = 3.517507s, Total time = 3.628881s
39 : Statistics :: Grounding time = 0.112606s, Solving time = 4.244421s, Total time = 4.357027s
40 : Statistics :: Grounding time = 0.112414s, Solving time = 4.114990s, Total time = 4.227404s
41 : Statistics :: Grounding time = 0.114945s, Solving time = 6.493346s, Total time = 6.608291s
42 : Statistics :: Grounding time = 0.355075s, Solving time = 7.989417s, Total time = 8.344491s
43 : Statistics :: Grounding time = 0.367921s, Solving time = 13.660103s, Total time = 14.028025s
44 : Statistics :: Grounding time = 0.369136s, Solving time = 13.224756s, Total time = 13.593892s
45 : Statistics :: Grounding time = 0.423318s, Solving time = 13.162514s, Total time = 13.585832s
46 : Statistics :: Grounding time = 0.393894s, Solving time = 19.906393s, Total time = 20.300287s
47 : Statistics :: Grounding time = 0.396884s, Solving time = 26.055264s, Total time = 26.452148s
48 : Statistics :: Grounding time = 0.408258s, Solving time = 21.196269s, Total time = 21.604527s
49 : Statistics :: Grounding time = 0.425161s, Solving time = 30.093174s, Total time = 30.518335s
50 : Statistics :: Grounding time = 0.429130s, Solving time = 47.419686s, Total time = 47.848816s
51 : Statistics :: Grounding time = 0.450110s, Solving time = 45.134689s, Total time = 45.584799s
52 : Statistics :: Grounding time = 0.453442s, Solving time = 77.536053s, Total time = 77.989495s
53 : Statistics :: Grounding time = 0.466866s, Solving time = 68.218501s, Total time = 68.685367s
54 : Statistics :: Grounding time = 0.508499s, Solving time = 68.300592s, Total time = 68.809090s
55 : Statistics :: Grounding time = 0.497482s, Solving time = 132.309780s, Total time = 132.807262s
56 : Statistics :: Grounding time = 0.494557s, Solving time = 109.934595s, Total time = 110.429152s
57 : Statistics :: Grounding time = 0.590285s, Solving time = 80.929581s, Total time = 81.519865s
58 : Statistics :: Grounding time = 0.538133s, Solving time = 109.257575s, Total time = 109.795707s
59 : Statistics :: Grounding time = 0.569741s, Solving time = 118.927369s, Total time = 119.497110s
60 : Statistics :: Grounding time = 0.623866s, Solving time = 98.903093s, Total time = 99.526959s
61 : Statistics :: Grounding time = 0.545741s, Solving time = 121.866419s, Total time = 122.412160s
62 : Statistics :: Grounding time = 0.542671s, Solving time = 126.701556s, Total time = 127.244227s
63 : Statistics :: Grounding time = 0.553122s, Solving time = 121.019169s, Total time = 121.572291s
64 : Statistics :: Grounding time = 0.551799s, Solving time = 146.512696s, Total time = 147.064495s
65 : Statistics :: Grounding time = 0.571564s, Solving time = 158.484587s, Total time = 159.056151s
66 : Statistics :: Grounding time = 0.576968s, Solving time = 153.389194s, Total time = 153.966163s
67 : Statistics :: Grounding time = 0.838214s, Solving time = 11.567053s, Total time = 12.405266s

[11-02-2021_08-07-42] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 16.763790s, Solving time = 1980.162013s, Total time = 1999.391947s
Model :: Total atoms = 14856, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[11-02-2021_08-07-42] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_2,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_2,extended),28)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_2,(block,6)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_2,(block,3)),34)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),36)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_2,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_2,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_2,extended),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),48)
occurs(1,talos,configure(manipulator_limb_2,retracted),49)
occurs(1,talos,configure(manipulator_limb_1,extended),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),52)
occurs(1,talos,configure(manipulator_limb_1,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_2,extended),60)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),61)
occurs(1,talos,configure(manipulator_limb_1,extended),62)
occurs(1,talos,release(manipulator_end_2,(block,5)),63)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),64)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),65)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),66)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),67)

[11-02-2021_08-07-42] INFO :: Experiment >> 

      ================================================      
          Experimental run 13 : Time 1999.968797s           
      ================================================      

[11-02-2021_08-07-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_08-07-42] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Instantiated.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building started.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building completed.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding base program parts.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.017522s.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving base program parts.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.003188s.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving started.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.192948s.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.009207s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.066799s.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.005806s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.064707s.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.008027s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.071085s.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.012395s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.075527s.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.017464s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_08-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.074038s.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.015683s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.076751s.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.017225s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.075856s.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.018081s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.090766s.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.019650s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.093034s.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.020306s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.080212s.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.021177s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.083693s.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.020914s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.084781s.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.021512s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.080236s.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.022943s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_08-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.089931s.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.031634s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.084668s.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.028303s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.091247s.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.032441s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.087661s.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.036715s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.089561s.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.039952s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.094706s.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.042044s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.095428s.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.068856s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.095728s.

[11-02-2021_08-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.085134s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.090624s.

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.094899s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.098778s.

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.099225s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.095000s.

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.130114s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.094080s.

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.156595s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_08-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_08-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.099541s.

[11-02-2021_08-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.258194s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_08-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_08-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.110205s.

[11-02-2021_08-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.381220s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_08-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_08-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.105436s.

[11-02-2021_08-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.651596s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_08-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_08-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.109536s.

[11-02-2021_08-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.990985s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_08-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_08-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.105538s.

[11-02-2021_08-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 1.134648s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_08-07-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_08-07-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.108538s.

[11-02-2021_08-07-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 1.136501s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_08-07-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_08-07-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.110359s.

[11-02-2021_08-07-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 1.242870s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_08-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_08-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.132901s.

[11-02-2021_08-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 1.732285s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_08-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_08-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.119294s.

[11-02-2021_08-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 2.491414s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_08-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_08-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.116660s.

[11-02-2021_08-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-07-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 2.592655s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-07-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_08-07-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_08-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.118861s.

[11-02-2021_08-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 2.901947s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_08-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_08-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.127045s.

[11-02-2021_08-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 2.397855s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_08-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_08-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.121489s.

[11-02-2021_08-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-08-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 3.121728s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-08-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_08-08-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_08-08-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.133446s.

[11-02-2021_08-08-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 3.793674s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_08-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_08-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.123028s.

[11-02-2021_08-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 4.710259s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_08-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_08-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.135698s.

[11-02-2021_08-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 5.717340s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_08-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_08-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.408665s.

[11-02-2021_08-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-08-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 8.273155s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-08-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_08-08-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_08-08-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.392357s.

[11-02-2021_08-08-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 6.992292s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_08-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_08-08-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.407023s.

[11-02-2021_08-08-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 9.650114s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_08-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_08-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.433076s.

[11-02-2021_08-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 13.312522s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_08-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_08-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.436921s.

[11-02-2021_08-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 15.096151s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_08-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_08-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.467561s.

[11-02-2021_08-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 17.751003s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_08-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_08-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.466461s.

[11-02-2021_08-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 18.689998s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_08-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_08-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.484402s.

[11-02-2021_08-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 25.629216s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_08-10-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_08-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.518434s.

[11-02-2021_08-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-10-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 29.199806s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-10-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_08-10-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_08-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.512088s.

[11-02-2021_08-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 32.374416s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_08-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_08-11-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.527862s.

[11-02-2021_08-11-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 47.946113s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_08-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_08-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.536634s.

[11-02-2021_08-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 51.638766s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_08-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_08-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.552892s.

[11-02-2021_08-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 61.455757s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_08-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_08-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.585672s.

[11-02-2021_08-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 74.305144s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_08-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_08-15-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.660254s.

[11-02-2021_08-15-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 106.324028s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_08-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_08-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.509990s.

[11-02-2021_08-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 122.309645s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_08-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_08-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.514019s.

[11-02-2021_08-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 118.135878s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_08-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_08-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.623253s.

[11-02-2021_08-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-22-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 94.807908s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-22-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_08-22-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_08-22-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.517423s.

[11-02-2021_08-22-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 103.051565s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_08-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_08-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.547645s.

[11-02-2021_08-24-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 168.651173s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_08-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_08-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.551599s.

[11-02-2021_08-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-30-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 159.658849s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-30-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_08-30-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_08-30-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.590751s.

[11-02-2021_08-30-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 118.183178s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_08-31-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_08-32-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.585956s.

[11-02-2021_08-32-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-33-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 116.779514s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-33-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_08-33-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_08-33-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.597637s.

[11-02-2021_08-33-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-35-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 99.383286s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_08-35-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_08-35-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.586150s.

[11-02-2021_08-35-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Model found:
Model :: Total atoms = 14855, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 15.305384s:
Result = SAT, Stop condition = SAT

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving completed in 1690.956974s because STOP_CON_REACHED.

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 17.227669s, Solving time = 1671.239522s, Total time = 1690.956974s
Final Model :: Total atoms = 14855, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.192948s, Solving time = 0.009207s, Total time = 0.202155s
2 : Statistics :: Grounding time = 0.066799s, Solving time = 0.005806s, Total time = 0.072605s
3 : Statistics :: Grounding time = 0.064707s, Solving time = 0.008027s, Total time = 0.072734s
4 : Statistics :: Grounding time = 0.071085s, Solving time = 0.012395s, Total time = 0.083480s
5 : Statistics :: Grounding time = 0.075527s, Solving time = 0.017464s, Total time = 0.092991s
6 : Statistics :: Grounding time = 0.074038s, Solving time = 0.015683s, Total time = 0.089721s
7 : Statistics :: Grounding time = 0.076751s, Solving time = 0.017225s, Total time = 0.093976s
8 : Statistics :: Grounding time = 0.075856s, Solving time = 0.018081s, Total time = 0.093937s
9 : Statistics :: Grounding time = 0.090766s, Solving time = 0.019650s, Total time = 0.110415s
10 : Statistics :: Grounding time = 0.093034s, Solving time = 0.020306s, Total time = 0.113340s
11 : Statistics :: Grounding time = 0.080212s, Solving time = 0.021177s, Total time = 0.101389s
12 : Statistics :: Grounding time = 0.083693s, Solving time = 0.020914s, Total time = 0.104607s
13 : Statistics :: Grounding time = 0.084781s, Solving time = 0.021512s, Total time = 0.106293s
14 : Statistics :: Grounding time = 0.080236s, Solving time = 0.022943s, Total time = 0.103179s
15 : Statistics :: Grounding time = 0.089931s, Solving time = 0.031634s, Total time = 0.121565s
16 : Statistics :: Grounding time = 0.084668s, Solving time = 0.028303s, Total time = 0.112971s
17 : Statistics :: Grounding time = 0.091247s, Solving time = 0.032441s, Total time = 0.123688s
18 : Statistics :: Grounding time = 0.087661s, Solving time = 0.036715s, Total time = 0.124377s
19 : Statistics :: Grounding time = 0.089561s, Solving time = 0.039952s, Total time = 0.129514s
20 : Statistics :: Grounding time = 0.094706s, Solving time = 0.042044s, Total time = 0.136750s
21 : Statistics :: Grounding time = 0.095428s, Solving time = 0.068856s, Total time = 0.164284s
22 : Statistics :: Grounding time = 0.095728s, Solving time = 0.085134s, Total time = 0.180862s
23 : Statistics :: Grounding time = 0.090624s, Solving time = 0.094899s, Total time = 0.185523s
24 : Statistics :: Grounding time = 0.098778s, Solving time = 0.099225s, Total time = 0.198003s
25 : Statistics :: Grounding time = 0.095000s, Solving time = 0.130114s, Total time = 0.225114s
26 : Statistics :: Grounding time = 0.094080s, Solving time = 0.156595s, Total time = 0.250675s
27 : Statistics :: Grounding time = 0.099541s, Solving time = 0.258194s, Total time = 0.357735s
28 : Statistics :: Grounding time = 0.110205s, Solving time = 0.381220s, Total time = 0.491425s
29 : Statistics :: Grounding time = 0.105436s, Solving time = 0.651596s, Total time = 0.757032s
30 : Statistics :: Grounding time = 0.109536s, Solving time = 0.990985s, Total time = 1.100521s
31 : Statistics :: Grounding time = 0.105538s, Solving time = 1.134648s, Total time = 1.240185s
32 : Statistics :: Grounding time = 0.108538s, Solving time = 1.136501s, Total time = 1.245039s
33 : Statistics :: Grounding time = 0.110359s, Solving time = 1.242870s, Total time = 1.353229s
34 : Statistics :: Grounding time = 0.132901s, Solving time = 1.732285s, Total time = 1.865185s
35 : Statistics :: Grounding time = 0.119294s, Solving time = 2.491414s, Total time = 2.610708s
36 : Statistics :: Grounding time = 0.116660s, Solving time = 2.592655s, Total time = 2.709315s
37 : Statistics :: Grounding time = 0.118861s, Solving time = 2.901947s, Total time = 3.020808s
38 : Statistics :: Grounding time = 0.127045s, Solving time = 2.397855s, Total time = 2.524900s
39 : Statistics :: Grounding time = 0.121489s, Solving time = 3.121728s, Total time = 3.243217s
40 : Statistics :: Grounding time = 0.133446s, Solving time = 3.793674s, Total time = 3.927120s
41 : Statistics :: Grounding time = 0.123028s, Solving time = 4.710259s, Total time = 4.833286s
42 : Statistics :: Grounding time = 0.135698s, Solving time = 5.717340s, Total time = 5.853038s
43 : Statistics :: Grounding time = 0.408665s, Solving time = 8.273155s, Total time = 8.681821s
44 : Statistics :: Grounding time = 0.392357s, Solving time = 6.992292s, Total time = 7.384649s
45 : Statistics :: Grounding time = 0.407023s, Solving time = 9.650114s, Total time = 10.057138s
46 : Statistics :: Grounding time = 0.433076s, Solving time = 13.312522s, Total time = 13.745598s
47 : Statistics :: Grounding time = 0.436921s, Solving time = 15.096151s, Total time = 15.533071s
48 : Statistics :: Grounding time = 0.467561s, Solving time = 17.751003s, Total time = 18.218564s
49 : Statistics :: Grounding time = 0.466461s, Solving time = 18.689998s, Total time = 19.156459s
50 : Statistics :: Grounding time = 0.484402s, Solving time = 25.629216s, Total time = 26.113619s
51 : Statistics :: Grounding time = 0.518434s, Solving time = 29.199806s, Total time = 29.718241s
52 : Statistics :: Grounding time = 0.512088s, Solving time = 32.374416s, Total time = 32.886504s
53 : Statistics :: Grounding time = 0.527862s, Solving time = 47.946113s, Total time = 48.473975s
54 : Statistics :: Grounding time = 0.536634s, Solving time = 51.638766s, Total time = 52.175401s
55 : Statistics :: Grounding time = 0.552892s, Solving time = 61.455757s, Total time = 62.008650s
56 : Statistics :: Grounding time = 0.585672s, Solving time = 74.305144s, Total time = 74.890815s
57 : Statistics :: Grounding time = 0.660254s, Solving time = 106.324028s, Total time = 106.984282s
58 : Statistics :: Grounding time = 0.509990s, Solving time = 122.309645s, Total time = 122.819636s
59 : Statistics :: Grounding time = 0.514019s, Solving time = 118.135878s, Total time = 118.649897s
60 : Statistics :: Grounding time = 0.623253s, Solving time = 94.807908s, Total time = 95.431161s
61 : Statistics :: Grounding time = 0.517423s, Solving time = 103.051565s, Total time = 103.568988s
62 : Statistics :: Grounding time = 0.547645s, Solving time = 168.651173s, Total time = 169.198818s
63 : Statistics :: Grounding time = 0.551599s, Solving time = 159.658849s, Total time = 160.210448s
64 : Statistics :: Grounding time = 0.590751s, Solving time = 118.183178s, Total time = 118.773930s
65 : Statistics :: Grounding time = 0.585956s, Solving time = 116.779514s, Total time = 117.365470s
66 : Statistics :: Grounding time = 0.597637s, Solving time = 99.383286s, Total time = 99.980923s
67 : Statistics :: Grounding time = 0.586150s, Solving time = 15.305384s, Total time = 15.891534s

[11-02-2021_08-35-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 17.227669s, Solving time = 1671.239522s, Total time = 1690.956974s
Model :: Total atoms = 14855, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_08-35-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_1,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_1,(block,6)),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),32)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_1,(block,3)),34)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),36)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_1,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_1,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_1,extended),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),48)
occurs(1,talos,configure(manipulator_limb_2,extended),49)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),50)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),51)
occurs(1,talos,configure(manipulator_limb_1,retracted),52)
occurs(1,talos,configure(manipulator_limb_2,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_1,extended),60)
occurs(1,talos,configure(manipulator_limb_2,extended),61)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),62)
occurs(1,talos,release(manipulator_end_1,(block,5)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),65)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),66)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),67)

[11-02-2021_08-35-53] INFO :: Experiment >> 

      ================================================      
          Experimental run 14 : Time 1691.502216s           
      ================================================      

[11-02-2021_08-35-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_08-35-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Instantiated.

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building started.

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building completed.

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding base program parts.

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.018016s.

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving base program parts.

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.003031s.

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving started.

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_08-35-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.195357s.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.009721s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.065447s.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.005205s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.063482s.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.007859s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.072591s.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.014897s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.070820s.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.016073s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.072664s.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.014405s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.074389s.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.016070s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.079908s.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.017523s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.077016s.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.019109s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.076155s.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.019873s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_08-35-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.078021s.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.026628s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.085719s.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.029864s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.079807s.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.031236s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.080113s.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.049114s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.083295s.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.041679s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.085398s.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.055209s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.094496s.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.066026s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.086234s.

[11-02-2021_08-35-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.073092s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.087875s.

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.080543s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.087166s.

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.081382s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.088689s.

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.117159s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.091521s.

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.168503s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.090739s.

[11-02-2021_08-35-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.209460s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_08-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_08-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.092371s.

[11-02-2021_08-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.244494s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_08-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_08-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.092842s.

[11-02-2021_08-35-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.378273s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_08-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_08-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.097523s.

[11-02-2021_08-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.420618s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_08-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_08-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.098650s.

[11-02-2021_08-35-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.424879s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_08-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_08-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.102931s.

[11-02-2021_08-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.474323s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_08-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_08-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.098951s.

[11-02-2021_08-35-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.380238s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_08-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_08-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.101000s.

[11-02-2021_08-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.602201s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_08-36-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_08-36-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.101632s.

[11-02-2021_08-36-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.671434s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_08-36-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_08-36-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.103349s.

[11-02-2021_08-36-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.871558s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_08-36-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_08-36-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.104488s.

[11-02-2021_08-36-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.351936s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_08-36-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_08-36-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.110529s.

[11-02-2021_08-36-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.875839s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_08-36-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_08-36-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.109231s.

[11-02-2021_08-36-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 2.059856s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_08-36-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_08-36-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.110217s.

[11-02-2021_08-36-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 2.799472s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_08-36-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_08-36-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.116396s.

[11-02-2021_08-36-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 3.055608s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_08-36-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_08-36-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.122088s.

[11-02-2021_08-36-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 3.333372s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_08-36-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_08-36-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.113748s.

[11-02-2021_08-36-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 4.398281s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_08-36-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_08-36-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.115682s.

[11-02-2021_08-36-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 4.504119s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_08-36-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_08-36-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.354622s.

[11-02-2021_08-36-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 5.617957s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_08-36-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_08-36-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.369650s.

[11-02-2021_08-36-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 8.031829s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_08-36-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_08-36-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.377819s.

[11-02-2021_08-36-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 9.280730s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_08-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_08-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.378428s.

[11-02-2021_08-36-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 9.829851s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_08-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_08-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.385276s.

[11-02-2021_08-37-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 12.171275s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_08-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_08-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.392658s.

[11-02-2021_08-37-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 14.400077s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-37-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_08-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_08-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.403882s.

[11-02-2021_08-37-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-37-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 19.621611s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-37-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_08-37-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_08-37-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.426479s.

[11-02-2021_08-37-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 23.778834s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_08-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_08-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.433438s.

[11-02-2021_08-38-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 26.048825s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_08-38-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_08-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.429945s.

[11-02-2021_08-38-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 31.786456s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_08-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_08-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.450242s.

[11-02-2021_08-39-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 46.440504s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_08-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_08-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.458736s.

[11-02-2021_08-39-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 48.828075s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_08-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_08-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.468463s.

[11-02-2021_08-40-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 70.098968s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_08-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_08-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.579342s.

[11-02-2021_08-41-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-42-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 53.086594s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-42-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_08-42-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_08-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.541051s.

[11-02-2021_08-42-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-44-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 73.257175s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-44-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_08-44-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_08-44-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.644603s.

[11-02-2021_08-44-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 75.965284s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_08-45-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_08-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.599072s.

[11-02-2021_08-45-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 95.319575s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_08-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_08-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.515142s.

[11-02-2021_08-46-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-48-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 104.978784s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-48-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_08-48-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_08-48-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.594127s.

[11-02-2021_08-48-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-50-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 125.834633s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-50-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_08-50-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_08-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.747324s.

[11-02-2021_08-50-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-52-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 72.059074s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-52-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_08-52-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_08-52-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.530914s.

[11-02-2021_08-52-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 61.728306s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_08-53-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_08-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.537013s.

[11-02-2021_08-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 50.396708s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_08-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_08-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.547060s.

[11-02-2021_08-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 55.520532s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_08-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_08-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.554574s.

[11-02-2021_08-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 80.599816s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_08-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_08-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.589454s.

[11-02-2021_08-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_08-58-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 105.661050s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_08-58-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_08-58-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_08-58-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.578709s.

[11-02-2021_08-58-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_09-00-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 140.535742s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-00-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_09-00-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_09-00-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.582030s.

[11-02-2021_09-00-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Model found:
Model :: Total atoms = 14861, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 39.806116s:
Result = SAT, Stop condition = SAT

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving completed in 1509.341716s because STOP_CON_REACHED.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 17.246599s, Solving time = 1489.704544s, Total time = 1509.341716s
Final Model :: Total atoms = 14861, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.195357s, Solving time = 0.009721s, Total time = 0.205078s
2 : Statistics :: Grounding time = 0.065447s, Solving time = 0.005205s, Total time = 0.070653s
3 : Statistics :: Grounding time = 0.063482s, Solving time = 0.007859s, Total time = 0.071341s
4 : Statistics :: Grounding time = 0.072591s, Solving time = 0.014897s, Total time = 0.087488s
5 : Statistics :: Grounding time = 0.070820s, Solving time = 0.016073s, Total time = 0.086893s
6 : Statistics :: Grounding time = 0.072664s, Solving time = 0.014405s, Total time = 0.087069s
7 : Statistics :: Grounding time = 0.074389s, Solving time = 0.016070s, Total time = 0.090459s
8 : Statistics :: Grounding time = 0.079908s, Solving time = 0.017523s, Total time = 0.097432s
9 : Statistics :: Grounding time = 0.077016s, Solving time = 0.019109s, Total time = 0.096125s
10 : Statistics :: Grounding time = 0.076155s, Solving time = 0.019873s, Total time = 0.096029s
11 : Statistics :: Grounding time = 0.078021s, Solving time = 0.026628s, Total time = 0.104650s
12 : Statistics :: Grounding time = 0.085719s, Solving time = 0.029864s, Total time = 0.115583s
13 : Statistics :: Grounding time = 0.079807s, Solving time = 0.031236s, Total time = 0.111043s
14 : Statistics :: Grounding time = 0.080113s, Solving time = 0.049114s, Total time = 0.129227s
15 : Statistics :: Grounding time = 0.083295s, Solving time = 0.041679s, Total time = 0.124974s
16 : Statistics :: Grounding time = 0.085398s, Solving time = 0.055209s, Total time = 0.140606s
17 : Statistics :: Grounding time = 0.094496s, Solving time = 0.066026s, Total time = 0.160522s
18 : Statistics :: Grounding time = 0.086234s, Solving time = 0.073092s, Total time = 0.159326s
19 : Statistics :: Grounding time = 0.087875s, Solving time = 0.080543s, Total time = 0.168418s
20 : Statistics :: Grounding time = 0.087166s, Solving time = 0.081382s, Total time = 0.168548s
21 : Statistics :: Grounding time = 0.088689s, Solving time = 0.117159s, Total time = 0.205848s
22 : Statistics :: Grounding time = 0.091521s, Solving time = 0.168503s, Total time = 0.260024s
23 : Statistics :: Grounding time = 0.090739s, Solving time = 0.209460s, Total time = 0.300199s
24 : Statistics :: Grounding time = 0.092371s, Solving time = 0.244494s, Total time = 0.336865s
25 : Statistics :: Grounding time = 0.092842s, Solving time = 0.378273s, Total time = 0.471115s
26 : Statistics :: Grounding time = 0.097523s, Solving time = 0.420618s, Total time = 0.518140s
27 : Statistics :: Grounding time = 0.098650s, Solving time = 0.424879s, Total time = 0.523529s
28 : Statistics :: Grounding time = 0.102931s, Solving time = 0.474323s, Total time = 0.577254s
29 : Statistics :: Grounding time = 0.098951s, Solving time = 0.380238s, Total time = 0.479189s
30 : Statistics :: Grounding time = 0.101000s, Solving time = 0.602201s, Total time = 0.703201s
31 : Statistics :: Grounding time = 0.101632s, Solving time = 0.671434s, Total time = 0.773067s
32 : Statistics :: Grounding time = 0.103349s, Solving time = 0.871558s, Total time = 0.974907s
33 : Statistics :: Grounding time = 0.104488s, Solving time = 1.351936s, Total time = 1.456424s
34 : Statistics :: Grounding time = 0.110529s, Solving time = 1.875839s, Total time = 1.986368s
35 : Statistics :: Grounding time = 0.109231s, Solving time = 2.059856s, Total time = 2.169087s
36 : Statistics :: Grounding time = 0.110217s, Solving time = 2.799472s, Total time = 2.909689s
37 : Statistics :: Grounding time = 0.116396s, Solving time = 3.055608s, Total time = 3.172004s
38 : Statistics :: Grounding time = 0.122088s, Solving time = 3.333372s, Total time = 3.455460s
39 : Statistics :: Grounding time = 0.113748s, Solving time = 4.398281s, Total time = 4.512029s
40 : Statistics :: Grounding time = 0.115682s, Solving time = 4.504119s, Total time = 4.619801s
41 : Statistics :: Grounding time = 0.354622s, Solving time = 5.617957s, Total time = 5.972580s
42 : Statistics :: Grounding time = 0.369650s, Solving time = 8.031829s, Total time = 8.401479s
43 : Statistics :: Grounding time = 0.377819s, Solving time = 9.280730s, Total time = 9.658550s
44 : Statistics :: Grounding time = 0.378428s, Solving time = 9.829851s, Total time = 10.208279s
45 : Statistics :: Grounding time = 0.385276s, Solving time = 12.171275s, Total time = 12.556551s
46 : Statistics :: Grounding time = 0.392658s, Solving time = 14.400077s, Total time = 14.792735s
47 : Statistics :: Grounding time = 0.403882s, Solving time = 19.621611s, Total time = 20.025493s
48 : Statistics :: Grounding time = 0.426479s, Solving time = 23.778834s, Total time = 24.205313s
49 : Statistics :: Grounding time = 0.433438s, Solving time = 26.048825s, Total time = 26.482262s
50 : Statistics :: Grounding time = 0.429945s, Solving time = 31.786456s, Total time = 32.216401s
51 : Statistics :: Grounding time = 0.450242s, Solving time = 46.440504s, Total time = 46.890746s
52 : Statistics :: Grounding time = 0.458736s, Solving time = 48.828075s, Total time = 49.286811s
53 : Statistics :: Grounding time = 0.468463s, Solving time = 70.098968s, Total time = 70.567431s
54 : Statistics :: Grounding time = 0.579342s, Solving time = 53.086594s, Total time = 53.665935s
55 : Statistics :: Grounding time = 0.541051s, Solving time = 73.257175s, Total time = 73.798226s
56 : Statistics :: Grounding time = 0.644603s, Solving time = 75.965284s, Total time = 76.609887s
57 : Statistics :: Grounding time = 0.599072s, Solving time = 95.319575s, Total time = 95.918647s
58 : Statistics :: Grounding time = 0.515142s, Solving time = 104.978784s, Total time = 105.493926s
59 : Statistics :: Grounding time = 0.594127s, Solving time = 125.834633s, Total time = 126.428760s
60 : Statistics :: Grounding time = 0.747324s, Solving time = 72.059074s, Total time = 72.806397s
61 : Statistics :: Grounding time = 0.530914s, Solving time = 61.728306s, Total time = 62.259220s
62 : Statistics :: Grounding time = 0.537013s, Solving time = 50.396708s, Total time = 50.933720s
63 : Statistics :: Grounding time = 0.547060s, Solving time = 55.520532s, Total time = 56.067592s
64 : Statistics :: Grounding time = 0.554574s, Solving time = 80.599816s, Total time = 81.154390s
65 : Statistics :: Grounding time = 0.589454s, Solving time = 105.661050s, Total time = 106.250504s
66 : Statistics :: Grounding time = 0.578709s, Solving time = 140.535742s, Total time = 141.114451s
67 : Statistics :: Grounding time = 0.582030s, Solving time = 39.806116s, Total time = 40.388146s

[11-02-2021_09-01-03] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 17.246599s, Solving time = 1489.704544s, Total time = 1509.341716s
Model :: Total atoms = 14861, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_09-01-03] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_1,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_1,(block,6)),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),32)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_1,(block,3)),34)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),36)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_1,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_1,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_2,extended),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),48)
occurs(1,talos,configure(manipulator_limb_2,retracted),49)
occurs(1,talos,configure(manipulator_limb_1,extended),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),52)
occurs(1,talos,configure(manipulator_limb_1,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_2,extended),60)
occurs(1,talos,configure(manipulator_limb_1,extended),61)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),62)
occurs(1,talos,release(manipulator_end_2,(block,5)),63)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),64)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),65)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),66)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),67)

[11-02-2021_09-01-03] INFO :: Experiment >> 

      ================================================      
          Experimental run 15 : Time 1509.868965s           
      ================================================      

[11-02-2021_09-01-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_09-01-03] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Instantiated.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building started.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building completed.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding base program parts.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.016530s.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving base program parts.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.003535s.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving started.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.186330s.

[11-02-2021_09-01-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.009225s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.062987s.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.006232s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.062876s.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.008038s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.065918s.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.011799s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.073995s.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.016807s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.073389s.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.015014s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.079116s.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.016179s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.079469s.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.019505s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.079931s.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.019129s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.076528s.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.018982s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.077305s.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.019193s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_09-01-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.076509s.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.019494s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.077657s.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.022317s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.077969s.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.027151s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.080629s.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.028125s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.080897s.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.036004s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.082065s.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.035975s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.085907s.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.046962s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.085583s.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.048235s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.086341s.

[11-02-2021_09-01-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.058387s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.088363s.

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.069927s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.088786s.

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.080699s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.090632s.

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.092492s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.098491s.

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.119493s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.093590s.

[11-02-2021_09-01-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.186644s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.093623s.

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.192744s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.097545s.

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.203618s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.102335s.

[11-02-2021_09-01-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.240618s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_09-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_09-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.099342s.

[11-02-2021_09-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.364999s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_09-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_09-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.103016s.

[11-02-2021_09-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.524816s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_09-01-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_09-01-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.101186s.

[11-02-2021_09-01-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 1.030785s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_09-01-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_09-01-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.102915s.

[11-02-2021_09-01-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.916654s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_09-01-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_09-01-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.105048s.

[11-02-2021_09-01-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 1.101331s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_09-01-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_09-01-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.110152s.

[11-02-2021_09-01-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 1.509789s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_09-01-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_09-01-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.108107s.

[11-02-2021_09-01-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 2.923835s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_09-01-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_09-01-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.111122s.

[11-02-2021_09-01-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 2.478054s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_09-01-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_09-01-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.110251s.

[11-02-2021_09-01-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 2.595919s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_09-01-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_09-01-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.113324s.

[11-02-2021_09-01-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 4.931042s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_09-01-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_09-01-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.112397s.

[11-02-2021_09-01-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 3.528684s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_09-01-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_09-01-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.113074s.

[11-02-2021_09-01-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 4.323660s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_09-01-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_09-01-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.114951s.

[11-02-2021_09-01-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 4.418579s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_09-01-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_09-01-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.359300s.

[11-02-2021_09-01-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 6.154930s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_09-01-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_09-01-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.388225s.

[11-02-2021_09-01-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-01-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 8.329428s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-01-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_09-01-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_09-01-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.372675s.

[11-02-2021_09-01-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-02-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 9.170549s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-02-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_09-02-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_09-02-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.381916s.

[11-02-2021_09-02-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-02-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 11.241404s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-02-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_09-02-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_09-02-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.396944s.

[11-02-2021_09-02-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-02-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 18.032181s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-02-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_09-02-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_09-02-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.404418s.

[11-02-2021_09-02-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-02-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 22.975571s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-02-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_09-02-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_09-02-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.410253s.

[11-02-2021_09-02-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-03-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 24.132469s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-03-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_09-03-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_09-03-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.423922s.

[11-02-2021_09-03-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-03-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 30.954632s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-03-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_09-03-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_09-03-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.427860s.

[11-02-2021_09-03-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-04-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 20.550753s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-04-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_09-04-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_09-04-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.436181s.

[11-02-2021_09-04-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 16.428584s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_09-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_09-04-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.444275s.

[11-02-2021_09-04-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-04-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 25.435590s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-04-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_09-04-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_09-04-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.455314s.

[11-02-2021_09-04-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 20.665555s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_09-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_09-05-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.520300s.

[11-02-2021_09-05-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-05-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 21.046296s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-05-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_09-05-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_09-05-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.462053s.

[11-02-2021_09-05-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-06-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 31.022899s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-06-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_09-06-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_09-06-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.462229s.

[11-02-2021_09-06-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-06-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 34.524675s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-06-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_09-06-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_09-06-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.486884s.

[11-02-2021_09-06-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-07-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 42.110891s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-07-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_09-07-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_09-07-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.486926s.

[11-02-2021_09-07-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 44.940091s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_09-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_09-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.520484s.

[11-02-2021_09-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 48.282634s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_09-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_09-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.533869s.

[11-02-2021_09-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-10-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 67.426499s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-10-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_09-10-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_09-10-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.521185s.

[11-02-2021_09-10-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 77.365226s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_09-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_09-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.541540s.

[11-02-2021_09-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 88.263973s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_09-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_09-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.532857s.

[11-02-2021_09-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-14-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 96.346207s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-14-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_09-14-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_09-14-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.552251s.

[11-02-2021_09-14-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 126.249831s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_09-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_09-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.558691s.

[11-02-2021_09-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-19-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 148.373537s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-19-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_09-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_09-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.565519s.

[11-02-2021_09-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-22-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 167.091030s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_09-22-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_09-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.681049s.

[11-02-2021_09-22-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Model found:
Model :: Total atoms = 14853, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 47.820130s:
Result = SAT, Stop condition = SAT

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving completed in 1305.571182s because STOP_CON_REACHED.

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 16.153299s, Solving time = 1287.256232s, Total time = 1305.571182s
Final Model :: Total atoms = 14853, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.186330s, Solving time = 0.009225s, Total time = 0.195554s
2 : Statistics :: Grounding time = 0.062987s, Solving time = 0.006232s, Total time = 0.069219s
3 : Statistics :: Grounding time = 0.062876s, Solving time = 0.008038s, Total time = 0.070914s
4 : Statistics :: Grounding time = 0.065918s, Solving time = 0.011799s, Total time = 0.077716s
5 : Statistics :: Grounding time = 0.073995s, Solving time = 0.016807s, Total time = 0.090802s
6 : Statistics :: Grounding time = 0.073389s, Solving time = 0.015014s, Total time = 0.088404s
7 : Statistics :: Grounding time = 0.079116s, Solving time = 0.016179s, Total time = 0.095294s
8 : Statistics :: Grounding time = 0.079469s, Solving time = 0.019505s, Total time = 0.098974s
9 : Statistics :: Grounding time = 0.079931s, Solving time = 0.019129s, Total time = 0.099060s
10 : Statistics :: Grounding time = 0.076528s, Solving time = 0.018982s, Total time = 0.095510s
11 : Statistics :: Grounding time = 0.077305s, Solving time = 0.019193s, Total time = 0.096498s
12 : Statistics :: Grounding time = 0.076509s, Solving time = 0.019494s, Total time = 0.096003s
13 : Statistics :: Grounding time = 0.077657s, Solving time = 0.022317s, Total time = 0.099974s
14 : Statistics :: Grounding time = 0.077969s, Solving time = 0.027151s, Total time = 0.105120s
15 : Statistics :: Grounding time = 0.080629s, Solving time = 0.028125s, Total time = 0.108753s
16 : Statistics :: Grounding time = 0.080897s, Solving time = 0.036004s, Total time = 0.116902s
17 : Statistics :: Grounding time = 0.082065s, Solving time = 0.035975s, Total time = 0.118039s
18 : Statistics :: Grounding time = 0.085907s, Solving time = 0.046962s, Total time = 0.132868s
19 : Statistics :: Grounding time = 0.085583s, Solving time = 0.048235s, Total time = 0.133818s
20 : Statistics :: Grounding time = 0.086341s, Solving time = 0.058387s, Total time = 0.144728s
21 : Statistics :: Grounding time = 0.088363s, Solving time = 0.069927s, Total time = 0.158290s
22 : Statistics :: Grounding time = 0.088786s, Solving time = 0.080699s, Total time = 0.169486s
23 : Statistics :: Grounding time = 0.090632s, Solving time = 0.092492s, Total time = 0.183124s
24 : Statistics :: Grounding time = 0.098491s, Solving time = 0.119493s, Total time = 0.217984s
25 : Statistics :: Grounding time = 0.093590s, Solving time = 0.186644s, Total time = 0.280234s
26 : Statistics :: Grounding time = 0.093623s, Solving time = 0.192744s, Total time = 0.286367s
27 : Statistics :: Grounding time = 0.097545s, Solving time = 0.203618s, Total time = 0.301163s
28 : Statistics :: Grounding time = 0.102335s, Solving time = 0.240618s, Total time = 0.342953s
29 : Statistics :: Grounding time = 0.099342s, Solving time = 0.364999s, Total time = 0.464340s
30 : Statistics :: Grounding time = 0.103016s, Solving time = 0.524816s, Total time = 0.627832s
31 : Statistics :: Grounding time = 0.101186s, Solving time = 1.030785s, Total time = 1.131971s
32 : Statistics :: Grounding time = 0.102915s, Solving time = 0.916654s, Total time = 1.019569s
33 : Statistics :: Grounding time = 0.105048s, Solving time = 1.101331s, Total time = 1.206379s
34 : Statistics :: Grounding time = 0.110152s, Solving time = 1.509789s, Total time = 1.619941s
35 : Statistics :: Grounding time = 0.108107s, Solving time = 2.923835s, Total time = 3.031942s
36 : Statistics :: Grounding time = 0.111122s, Solving time = 2.478054s, Total time = 2.589175s
37 : Statistics :: Grounding time = 0.110251s, Solving time = 2.595919s, Total time = 2.706171s
38 : Statistics :: Grounding time = 0.113324s, Solving time = 4.931042s, Total time = 5.044365s
39 : Statistics :: Grounding time = 0.112397s, Solving time = 3.528684s, Total time = 3.641081s
40 : Statistics :: Grounding time = 0.113074s, Solving time = 4.323660s, Total time = 4.436733s
41 : Statistics :: Grounding time = 0.114951s, Solving time = 4.418579s, Total time = 4.533530s
42 : Statistics :: Grounding time = 0.359300s, Solving time = 6.154930s, Total time = 6.514231s
43 : Statistics :: Grounding time = 0.388225s, Solving time = 8.329428s, Total time = 8.717654s
44 : Statistics :: Grounding time = 0.372675s, Solving time = 9.170549s, Total time = 9.543224s
45 : Statistics :: Grounding time = 0.381916s, Solving time = 11.241404s, Total time = 11.623320s
46 : Statistics :: Grounding time = 0.396944s, Solving time = 18.032181s, Total time = 18.429125s
47 : Statistics :: Grounding time = 0.404418s, Solving time = 22.975571s, Total time = 23.379989s
48 : Statistics :: Grounding time = 0.410253s, Solving time = 24.132469s, Total time = 24.542722s
49 : Statistics :: Grounding time = 0.423922s, Solving time = 30.954632s, Total time = 31.378555s
50 : Statistics :: Grounding time = 0.427860s, Solving time = 20.550753s, Total time = 20.978613s
51 : Statistics :: Grounding time = 0.436181s, Solving time = 16.428584s, Total time = 16.864765s
52 : Statistics :: Grounding time = 0.444275s, Solving time = 25.435590s, Total time = 25.879864s
53 : Statistics :: Grounding time = 0.455314s, Solving time = 20.665555s, Total time = 21.120869s
54 : Statistics :: Grounding time = 0.520300s, Solving time = 21.046296s, Total time = 21.566596s
55 : Statistics :: Grounding time = 0.462053s, Solving time = 31.022899s, Total time = 31.484952s
56 : Statistics :: Grounding time = 0.462229s, Solving time = 34.524675s, Total time = 34.986904s
57 : Statistics :: Grounding time = 0.486884s, Solving time = 42.110891s, Total time = 42.597774s
58 : Statistics :: Grounding time = 0.486926s, Solving time = 44.940091s, Total time = 45.427017s
59 : Statistics :: Grounding time = 0.520484s, Solving time = 48.282634s, Total time = 48.803117s
60 : Statistics :: Grounding time = 0.533869s, Solving time = 67.426499s, Total time = 67.960368s
61 : Statistics :: Grounding time = 0.521185s, Solving time = 77.365226s, Total time = 77.886411s
62 : Statistics :: Grounding time = 0.541540s, Solving time = 88.263973s, Total time = 88.805513s
63 : Statistics :: Grounding time = 0.532857s, Solving time = 96.346207s, Total time = 96.879064s
64 : Statistics :: Grounding time = 0.552251s, Solving time = 126.249831s, Total time = 126.802083s
65 : Statistics :: Grounding time = 0.558691s, Solving time = 148.373537s, Total time = 148.932229s
66 : Statistics :: Grounding time = 0.565519s, Solving time = 167.091030s, Total time = 167.656549s
67 : Statistics :: Grounding time = 0.681049s, Solving time = 47.820130s, Total time = 48.501179s

[11-02-2021_09-22-49] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 16.153299s, Solving time = 1287.256232s, Total time = 1305.571182s
Model :: Total atoms = 14853, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[11-02-2021_09-22-49] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_2,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_2,extended),28)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_2,(block,6)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_2,(block,3)),34)
occurs(1,talos,configure(manipulator_limb_2,retracted),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((hallway,2)),37)
occurs(1,talos,move((hallway,1)),38)
occurs(1,talos,move((hallway,0)),39)
occurs(1,talos,move((store_room,1)),40)
occurs(1,talos,move((store_room,0)),41)
occurs(1,talos,configure(manipulator_limb_1,extended),42)
occurs(1,talos,configure(manipulator_limb_2,extended),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),45)
occurs(1,talos,configure(manipulator_limb_2,retracted),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),48)
occurs(1,talos,configure(manipulator_limb_1,retracted),49)
occurs(1,talos,move((store_room,1)),50)
occurs(1,talos,move((hallway,0)),51)
occurs(1,talos,move((hallway,1)),52)
occurs(1,talos,move((hallway,2)),53)
occurs(1,talos,move((puzzle_room,0)),54)
occurs(1,talos,move((puzzle_room,1)),55)
occurs(1,talos,configure(manipulator_limb_2,extended),56)
occurs(1,talos,configure(manipulator_limb_1,extended),57)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),58)
occurs(1,talos,release(manipulator_end_2,(block,5)),59)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),60)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),61)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),62)
occurs(1,talos,release(manipulator_end_2,(block,2)),63)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),64)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),65)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),66)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),67)

[11-02-2021_09-22-49] INFO :: Experiment >> 

      ================================================      
          Experimental run 16 : Time 1306.052002s           
      ================================================      

[11-02-2021_09-22-49] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_09-22-49] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Instantiated.

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building started.

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building completed.

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding base program parts.

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.016707s.

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving base program parts.

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.003584s.

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving started.

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_09-22-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.186718s.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.009144s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.068118s.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.005702s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.063111s.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.007525s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.066622s.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.011465s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.069826s.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.016759s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.072463s.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.014315s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.073356s.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.015255s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.084655s.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.017473s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.084037s.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.018909s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.076942s.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.019422s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_09-22-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.077041s.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.018750s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.078231s.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.022446s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.077525s.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.021327s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.078290s.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.022319s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.080109s.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.027918s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.079686s.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.025310s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.082055s.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.031383s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.083241s.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.034298s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.082411s.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.036135s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_09-22-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.085187s.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.035486s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.095899s.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.037353s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.087656s.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.045250s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.089055s.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.044083s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.090090s.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.043911s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.093276s.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.082183s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.092671s.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.074497s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_09-22-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.095085s.

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.090198s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.095126s.

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.149820s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.097908s.

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.160725s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.100029s.

[11-02-2021_09-22-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.219497s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.102111s.

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.316407s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.103190s.

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.373609s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_09-22-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_09-22-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.106837s.

[11-02-2021_09-22-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.600727s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_09-22-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_09-22-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.105640s.

[11-02-2021_09-22-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.804305s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_09-22-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_09-22-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.109940s.

[11-02-2021_09-22-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.944604s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_09-22-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_09-22-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.105289s.

[11-02-2021_09-22-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-22-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 1.351653s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-22-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_09-22-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_09-22-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.110181s.

[11-02-2021_09-22-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-23-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 2.021860s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-23-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_09-23-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_09-23-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.109556s.

[11-02-2021_09-23-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-23-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 2.644544s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-23-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_09-23-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_09-23-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.111089s.

[11-02-2021_09-23-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-23-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 3.523540s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-23-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_09-23-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_09-23-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.112031s.

[11-02-2021_09-23-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 3.780765s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_09-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_09-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.116911s.

[11-02-2021_09-23-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 3.315761s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_09-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_09-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.115529s.

[11-02-2021_09-23-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-23-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 3.965498s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-23-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_09-23-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_09-23-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.117131s.

[11-02-2021_09-23-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-23-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 5.045388s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-23-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_09-23-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_09-23-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.357089s.

[11-02-2021_09-23-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 4.472259s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_09-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_09-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.373043s.

[11-02-2021_09-23-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-23-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 8.596843s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-23-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_09-23-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_09-23-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.378601s.

[11-02-2021_09-23-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-23-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 7.032006s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-23-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_09-23-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_09-23-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.393659s.

[11-02-2021_09-23-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 9.925461s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_09-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_09-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.396798s.

[11-02-2021_09-23-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-24-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 11.963185s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-24-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_09-24-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_09-24-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.403403s.

[11-02-2021_09-24-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-24-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 15.806449s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-24-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_09-24-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_09-24-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.412542s.

[11-02-2021_09-24-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-24-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 15.381495s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-24-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_09-24-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_09-24-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.425125s.

[11-02-2021_09-24-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 33.183508s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_09-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_09-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.440924s.

[11-02-2021_09-25-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-25-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 37.778819s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-25-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_09-25-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_09-25-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.453699s.

[11-02-2021_09-25-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-26-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 39.636878s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-26-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_09-26-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_09-26-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.454090s.

[11-02-2021_09-26-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-27-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 72.523827s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-27-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_09-27-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_09-27-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.468357s.

[11-02-2021_09-27-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-28-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 71.021249s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-28-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_09-28-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_09-28-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.486406s.

[11-02-2021_09-28-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 92.589182s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_09-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_09-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.502275s.

[11-02-2021_09-30-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-32-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 96.902797s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-32-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_09-32-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_09-32-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.544441s.

[11-02-2021_09-32-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-33-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 78.439520s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-33-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_09-33-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_09-33-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.521828s.

[11-02-2021_09-33-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-35-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 100.167930s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-35-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_09-35-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_09-35-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.518171s.

[11-02-2021_09-35-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-36-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 59.846736s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-36-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_09-36-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_09-36-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.621875s.

[11-02-2021_09-36-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 87.430961s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_09-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_09-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.531626s.

[11-02-2021_09-37-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 115.383372s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_09-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_09-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.538015s.

[11-02-2021_09-39-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 141.534479s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_09-41-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_09-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.552477s.

[11-02-2021_09-41-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 162.135970s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_09-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_09-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.575752s.

[11-02-2021_09-44-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-48-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 227.406856s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-48-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_09-48-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_09-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.574326s.

[11-02-2021_09-48-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 283.379840s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_09-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_09-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.699557s.

[11-02-2021_09-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[11-02-2021_09-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Model found:
Model :: Total atoms = 14855, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_09-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 82.727500s:
Result = SAT, Stop condition = SAT

[11-02-2021_09-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving completed in 1903.106375s because STOP_CON_REACHED.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 15.652642s, Solving time = 1885.318224s, Total time = 1903.106375s
Final Model :: Total atoms = 14855, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.186718s, Solving time = 0.009144s, Total time = 0.195863s
2 : Statistics :: Grounding time = 0.068118s, Solving time = 0.005702s, Total time = 0.073820s
3 : Statistics :: Grounding time = 0.063111s, Solving time = 0.007525s, Total time = 0.070636s
4 : Statistics :: Grounding time = 0.066622s, Solving time = 0.011465s, Total time = 0.078087s
5 : Statistics :: Grounding time = 0.069826s, Solving time = 0.016759s, Total time = 0.086585s
6 : Statistics :: Grounding time = 0.072463s, Solving time = 0.014315s, Total time = 0.086778s
7 : Statistics :: Grounding time = 0.073356s, Solving time = 0.015255s, Total time = 0.088610s
8 : Statistics :: Grounding time = 0.084655s, Solving time = 0.017473s, Total time = 0.102128s
9 : Statistics :: Grounding time = 0.084037s, Solving time = 0.018909s, Total time = 0.102946s
10 : Statistics :: Grounding time = 0.076942s, Solving time = 0.019422s, Total time = 0.096364s
11 : Statistics :: Grounding time = 0.077041s, Solving time = 0.018750s, Total time = 0.095791s
12 : Statistics :: Grounding time = 0.078231s, Solving time = 0.022446s, Total time = 0.100677s
13 : Statistics :: Grounding time = 0.077525s, Solving time = 0.021327s, Total time = 0.098852s
14 : Statistics :: Grounding time = 0.078290s, Solving time = 0.022319s, Total time = 0.100609s
15 : Statistics :: Grounding time = 0.080109s, Solving time = 0.027918s, Total time = 0.108027s
16 : Statistics :: Grounding time = 0.079686s, Solving time = 0.025310s, Total time = 0.104996s
17 : Statistics :: Grounding time = 0.082055s, Solving time = 0.031383s, Total time = 0.113438s
18 : Statistics :: Grounding time = 0.083241s, Solving time = 0.034298s, Total time = 0.117539s
19 : Statistics :: Grounding time = 0.082411s, Solving time = 0.036135s, Total time = 0.118546s
20 : Statistics :: Grounding time = 0.085187s, Solving time = 0.035486s, Total time = 0.120673s
21 : Statistics :: Grounding time = 0.095899s, Solving time = 0.037353s, Total time = 0.133252s
22 : Statistics :: Grounding time = 0.087656s, Solving time = 0.045250s, Total time = 0.132905s
23 : Statistics :: Grounding time = 0.089055s, Solving time = 0.044083s, Total time = 0.133137s
24 : Statistics :: Grounding time = 0.090090s, Solving time = 0.043911s, Total time = 0.134002s
25 : Statistics :: Grounding time = 0.093276s, Solving time = 0.082183s, Total time = 0.175460s
26 : Statistics :: Grounding time = 0.092671s, Solving time = 0.074497s, Total time = 0.167168s
27 : Statistics :: Grounding time = 0.095085s, Solving time = 0.090198s, Total time = 0.185283s
28 : Statistics :: Grounding time = 0.095126s, Solving time = 0.149820s, Total time = 0.244946s
29 : Statistics :: Grounding time = 0.097908s, Solving time = 0.160725s, Total time = 0.258633s
30 : Statistics :: Grounding time = 0.100029s, Solving time = 0.219497s, Total time = 0.319526s
31 : Statistics :: Grounding time = 0.102111s, Solving time = 0.316407s, Total time = 0.418518s
32 : Statistics :: Grounding time = 0.103190s, Solving time = 0.373609s, Total time = 0.476800s
33 : Statistics :: Grounding time = 0.106837s, Solving time = 0.600727s, Total time = 0.707565s
34 : Statistics :: Grounding time = 0.105640s, Solving time = 0.804305s, Total time = 0.909945s
35 : Statistics :: Grounding time = 0.109940s, Solving time = 0.944604s, Total time = 1.054544s
36 : Statistics :: Grounding time = 0.105289s, Solving time = 1.351653s, Total time = 1.456942s
37 : Statistics :: Grounding time = 0.110181s, Solving time = 2.021860s, Total time = 2.132041s
38 : Statistics :: Grounding time = 0.109556s, Solving time = 2.644544s, Total time = 2.754100s
39 : Statistics :: Grounding time = 0.111089s, Solving time = 3.523540s, Total time = 3.634630s
40 : Statistics :: Grounding time = 0.112031s, Solving time = 3.780765s, Total time = 3.892796s
41 : Statistics :: Grounding time = 0.116911s, Solving time = 3.315761s, Total time = 3.432672s
42 : Statistics :: Grounding time = 0.115529s, Solving time = 3.965498s, Total time = 4.081028s
43 : Statistics :: Grounding time = 0.117131s, Solving time = 5.045388s, Total time = 5.162519s
44 : Statistics :: Grounding time = 0.357089s, Solving time = 4.472259s, Total time = 4.829348s
45 : Statistics :: Grounding time = 0.373043s, Solving time = 8.596843s, Total time = 8.969886s
46 : Statistics :: Grounding time = 0.378601s, Solving time = 7.032006s, Total time = 7.410607s
47 : Statistics :: Grounding time = 0.393659s, Solving time = 9.925461s, Total time = 10.319120s
48 : Statistics :: Grounding time = 0.396798s, Solving time = 11.963185s, Total time = 12.359983s
49 : Statistics :: Grounding time = 0.403403s, Solving time = 15.806449s, Total time = 16.209851s
50 : Statistics :: Grounding time = 0.412542s, Solving time = 15.381495s, Total time = 15.794037s
51 : Statistics :: Grounding time = 0.425125s, Solving time = 33.183508s, Total time = 33.608633s
52 : Statistics :: Grounding time = 0.440924s, Solving time = 37.778819s, Total time = 38.219743s
53 : Statistics :: Grounding time = 0.453699s, Solving time = 39.636878s, Total time = 40.090577s
54 : Statistics :: Grounding time = 0.454090s, Solving time = 72.523827s, Total time = 72.977917s
55 : Statistics :: Grounding time = 0.468357s, Solving time = 71.021249s, Total time = 71.489606s
56 : Statistics :: Grounding time = 0.486406s, Solving time = 92.589182s, Total time = 93.075588s
57 : Statistics :: Grounding time = 0.502275s, Solving time = 96.902797s, Total time = 97.405072s
58 : Statistics :: Grounding time = 0.544441s, Solving time = 78.439520s, Total time = 78.983961s
59 : Statistics :: Grounding time = 0.521828s, Solving time = 100.167930s, Total time = 100.689759s
60 : Statistics :: Grounding time = 0.518171s, Solving time = 59.846736s, Total time = 60.364908s
61 : Statistics :: Grounding time = 0.621875s, Solving time = 87.430961s, Total time = 88.052837s
62 : Statistics :: Grounding time = 0.531626s, Solving time = 115.383372s, Total time = 115.914998s
63 : Statistics :: Grounding time = 0.538015s, Solving time = 141.534479s, Total time = 142.072494s
64 : Statistics :: Grounding time = 0.552477s, Solving time = 162.135970s, Total time = 162.688446s
65 : Statistics :: Grounding time = 0.575752s, Solving time = 227.406856s, Total time = 227.982609s
66 : Statistics :: Grounding time = 0.574326s, Solving time = 283.379840s, Total time = 283.954166s
67 : Statistics :: Grounding time = 0.699557s, Solving time = 82.727500s, Total time = 83.427057s

[11-02-2021_09-54-33] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 15.652642s, Solving time = 1885.318224s, Total time = 1903.106375s
Model :: Total atoms = 14855, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[11-02-2021_09-54-33] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_2,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_2,extended),28)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_2,(block,6)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_2,(block,3)),34)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),36)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_2,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_2,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_2,extended),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),48)
occurs(1,talos,configure(manipulator_limb_1,extended),49)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),50)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),51)
occurs(1,talos,configure(manipulator_limb_1,retracted),52)
occurs(1,talos,configure(manipulator_limb_2,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_1,extended),60)
occurs(1,talos,configure(manipulator_limb_2,extended),61)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),62)
occurs(1,talos,release(manipulator_end_1,(block,5)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),65)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),66)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),67)

[11-02-2021_09-54-33] INFO :: Experiment >> 

      ================================================      
          Experimental run 17 : Time 1903.610707s           
      ================================================      

[11-02-2021_09-54-33] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_09-54-33] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Instantiated.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building started.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building completed.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding base program parts.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.016778s.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving base program parts.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.003011s.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving started.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.193475s.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.009224s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.063121s.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.005992s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.063235s.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.007827s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.068288s.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.011395s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_09-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.074293s.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.016359s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.073114s.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.014536s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.073490s.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.016341s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.076179s.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.017989s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.077783s.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.019291s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.076628s.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.019497s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.077008s.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.020460s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.078827s.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.029723s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.080732s.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.025842s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.088684s.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.027443s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_09-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.081550s.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.028452s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.083228s.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.034217s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.083276s.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.040154s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.085585s.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.047031s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.087949s.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.057719s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.089863s.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.074654s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.090520s.

[11-02-2021_09-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.097243s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.088939s.

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.119177s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.092532s.

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.123540s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.091900s.

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.168940s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.093085s.

[11-02-2021_09-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.272207s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_09-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_09-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.094031s.

[11-02-2021_09-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.392176s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_09-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_09-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.098429s.

[11-02-2021_09-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.536235s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_09-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_09-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.097973s.

[11-02-2021_09-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.373726s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_09-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_09-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.102950s.

[11-02-2021_09-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.348134s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_09-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_09-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.100637s.

[11-02-2021_09-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.504522s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_09-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_09-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.101309s.

[11-02-2021_09-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.344991s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_09-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_09-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.103802s.

[11-02-2021_09-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.466076s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_09-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_09-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.103390s.

[11-02-2021_09-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.702396s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_09-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_09-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.104648s.

[11-02-2021_09-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.948900s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_09-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_09-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.108289s.

[11-02-2021_09-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 1.397242s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_09-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_09-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.108234s.

[11-02-2021_09-54-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 1.948918s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_09-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_09-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.109237s.

[11-02-2021_09-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 2.618367s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_09-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_09-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.111268s.

[11-02-2021_09-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 4.157368s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_09-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_09-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.116127s.

[11-02-2021_09-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 4.758951s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_09-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_09-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.113621s.

[11-02-2021_09-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 3.463306s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_09-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_09-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.351819s.

[11-02-2021_09-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 5.597386s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_09-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_09-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.359453s.

[11-02-2021_09-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 8.339464s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_09-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_09-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.369104s.

[11-02-2021_09-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 6.696810s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_09-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_09-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.379295s.

[11-02-2021_09-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 13.386589s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_09-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_09-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.385950s.

[11-02-2021_09-55-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 11.265742s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_09-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_09-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.394928s.

[11-02-2021_09-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 14.803298s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_09-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_09-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.407477s.

[11-02-2021_09-56-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-56-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 18.670700s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-56-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_09-56-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_09-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.417942s.

[11-02-2021_09-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 24.895465s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_09-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_09-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.423423s.

[11-02-2021_09-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 33.746743s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_09-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_09-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.433505s.

[11-02-2021_09-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 43.702444s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_09-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_09-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.448093s.

[11-02-2021_09-58-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_09-59-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 58.246144s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_09-59-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_09-59-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_09-59-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.456821s.

[11-02-2021_09-59-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-00-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 56.818413s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-00-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_10-00-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_10-00-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.468269s.

[11-02-2021_10-00-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 65.017061s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-01-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_10-01-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_10-01-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.475905s.

[11-02-2021_10-01-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-02-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 68.148147s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-02-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_10-02-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_10-02-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.490138s.

[11-02-2021_10-02-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-03-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 92.658986s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-03-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_10-03-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_10-03-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.495658s.

[11-02-2021_10-03-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-05-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 109.859866s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-05-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_10-05-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_10-05-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.591984s.

[11-02-2021_10-05-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 130.624790s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_10-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_10-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.522199s.

[11-02-2021_10-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 174.930491s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_10-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_10-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.621562s.

[11-02-2021_10-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 126.703058s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_10-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_10-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.528936s.

[11-02-2021_10-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 91.688147s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_10-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_10-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.528702s.

[11-02-2021_10-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-15-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 78.221897s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-15-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_10-15-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_10-15-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.539401s.

[11-02-2021_10-15-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 98.033069s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_10-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_10-17-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.551271s.

[11-02-2021_10-17-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-19-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 102.071708s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-19-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_10-19-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_10-19-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.561416s.

[11-02-2021_10-19-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 112.654509s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_10-21-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_10-21-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.668760s.

[11-02-2021_10-21-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-23-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 142.122752s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-23-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_10-23-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_10-23-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.585032s.

[11-02-2021_10-23-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-26-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 159.526011s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-26-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_10-26-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_10-26-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.586112s.

[11-02-2021_10-26-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[11-02-2021_10-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Model found:
Model :: Total atoms = 14862, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[11-02-2021_10-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 75.452941s:
Result = SAT, Stop condition = SAT

[11-02-2021_10-27-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving completed in 1967.318506s because STOP_CON_REACHED.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 16.767160s, Solving time = 1948.152203s, Total time = 1967.318506s
Final Model :: Total atoms = 14862, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.193475s, Solving time = 0.009224s, Total time = 0.202699s
2 : Statistics :: Grounding time = 0.063121s, Solving time = 0.005992s, Total time = 0.069113s
3 : Statistics :: Grounding time = 0.063235s, Solving time = 0.007827s, Total time = 0.071061s
4 : Statistics :: Grounding time = 0.068288s, Solving time = 0.011395s, Total time = 0.079683s
5 : Statistics :: Grounding time = 0.074293s, Solving time = 0.016359s, Total time = 0.090652s
6 : Statistics :: Grounding time = 0.073114s, Solving time = 0.014536s, Total time = 0.087650s
7 : Statistics :: Grounding time = 0.073490s, Solving time = 0.016341s, Total time = 0.089831s
8 : Statistics :: Grounding time = 0.076179s, Solving time = 0.017989s, Total time = 0.094168s
9 : Statistics :: Grounding time = 0.077783s, Solving time = 0.019291s, Total time = 0.097074s
10 : Statistics :: Grounding time = 0.076628s, Solving time = 0.019497s, Total time = 0.096125s
11 : Statistics :: Grounding time = 0.077008s, Solving time = 0.020460s, Total time = 0.097467s
12 : Statistics :: Grounding time = 0.078827s, Solving time = 0.029723s, Total time = 0.108550s
13 : Statistics :: Grounding time = 0.080732s, Solving time = 0.025842s, Total time = 0.106574s
14 : Statistics :: Grounding time = 0.088684s, Solving time = 0.027443s, Total time = 0.116127s
15 : Statistics :: Grounding time = 0.081550s, Solving time = 0.028452s, Total time = 0.110003s
16 : Statistics :: Grounding time = 0.083228s, Solving time = 0.034217s, Total time = 0.117445s
17 : Statistics :: Grounding time = 0.083276s, Solving time = 0.040154s, Total time = 0.123430s
18 : Statistics :: Grounding time = 0.085585s, Solving time = 0.047031s, Total time = 0.132616s
19 : Statistics :: Grounding time = 0.087949s, Solving time = 0.057719s, Total time = 0.145668s
20 : Statistics :: Grounding time = 0.089863s, Solving time = 0.074654s, Total time = 0.164518s
21 : Statistics :: Grounding time = 0.090520s, Solving time = 0.097243s, Total time = 0.187763s
22 : Statistics :: Grounding time = 0.088939s, Solving time = 0.119177s, Total time = 0.208116s
23 : Statistics :: Grounding time = 0.092532s, Solving time = 0.123540s, Total time = 0.216072s
24 : Statistics :: Grounding time = 0.091900s, Solving time = 0.168940s, Total time = 0.260841s
25 : Statistics :: Grounding time = 0.093085s, Solving time = 0.272207s, Total time = 0.365292s
26 : Statistics :: Grounding time = 0.094031s, Solving time = 0.392176s, Total time = 0.486208s
27 : Statistics :: Grounding time = 0.098429s, Solving time = 0.536235s, Total time = 0.634664s
28 : Statistics :: Grounding time = 0.097973s, Solving time = 0.373726s, Total time = 0.471699s
29 : Statistics :: Grounding time = 0.102950s, Solving time = 0.348134s, Total time = 0.451084s
30 : Statistics :: Grounding time = 0.100637s, Solving time = 0.504522s, Total time = 0.605159s
31 : Statistics :: Grounding time = 0.101309s, Solving time = 0.344991s, Total time = 0.446300s
32 : Statistics :: Grounding time = 0.103802s, Solving time = 0.466076s, Total time = 0.569878s
33 : Statistics :: Grounding time = 0.103390s, Solving time = 0.702396s, Total time = 0.805786s
34 : Statistics :: Grounding time = 0.104648s, Solving time = 0.948900s, Total time = 1.053548s
35 : Statistics :: Grounding time = 0.108289s, Solving time = 1.397242s, Total time = 1.505531s
36 : Statistics :: Grounding time = 0.108234s, Solving time = 1.948918s, Total time = 2.057152s
37 : Statistics :: Grounding time = 0.109237s, Solving time = 2.618367s, Total time = 2.727603s
38 : Statistics :: Grounding time = 0.111268s, Solving time = 4.157368s, Total time = 4.268636s
39 : Statistics :: Grounding time = 0.116127s, Solving time = 4.758951s, Total time = 4.875077s
40 : Statistics :: Grounding time = 0.113621s, Solving time = 3.463306s, Total time = 3.576927s
41 : Statistics :: Grounding time = 0.351819s, Solving time = 5.597386s, Total time = 5.949205s
42 : Statistics :: Grounding time = 0.359453s, Solving time = 8.339464s, Total time = 8.698917s
43 : Statistics :: Grounding time = 0.369104s, Solving time = 6.696810s, Total time = 7.065914s
44 : Statistics :: Grounding time = 0.379295s, Solving time = 13.386589s, Total time = 13.765884s
45 : Statistics :: Grounding time = 0.385950s, Solving time = 11.265742s, Total time = 11.651693s
46 : Statistics :: Grounding time = 0.394928s, Solving time = 14.803298s, Total time = 15.198226s
47 : Statistics :: Grounding time = 0.407477s, Solving time = 18.670700s, Total time = 19.078176s
48 : Statistics :: Grounding time = 0.417942s, Solving time = 24.895465s, Total time = 25.313408s
49 : Statistics :: Grounding time = 0.423423s, Solving time = 33.746743s, Total time = 34.170166s
50 : Statistics :: Grounding time = 0.433505s, Solving time = 43.702444s, Total time = 44.135948s
51 : Statistics :: Grounding time = 0.448093s, Solving time = 58.246144s, Total time = 58.694237s
52 : Statistics :: Grounding time = 0.456821s, Solving time = 56.818413s, Total time = 57.275234s
53 : Statistics :: Grounding time = 0.468269s, Solving time = 65.017061s, Total time = 65.485330s
54 : Statistics :: Grounding time = 0.475905s, Solving time = 68.148147s, Total time = 68.624052s
55 : Statistics :: Grounding time = 0.490138s, Solving time = 92.658986s, Total time = 93.149124s
56 : Statistics :: Grounding time = 0.495658s, Solving time = 109.859866s, Total time = 110.355524s
57 : Statistics :: Grounding time = 0.591984s, Solving time = 130.624790s, Total time = 131.216773s
58 : Statistics :: Grounding time = 0.522199s, Solving time = 174.930491s, Total time = 175.452690s
59 : Statistics :: Grounding time = 0.621562s, Solving time = 126.703058s, Total time = 127.324620s
60 : Statistics :: Grounding time = 0.528936s, Solving time = 91.688147s, Total time = 92.217083s
61 : Statistics :: Grounding time = 0.528702s, Solving time = 78.221897s, Total time = 78.750600s
62 : Statistics :: Grounding time = 0.539401s, Solving time = 98.033069s, Total time = 98.572470s
63 : Statistics :: Grounding time = 0.551271s, Solving time = 102.071708s, Total time = 102.622979s
64 : Statistics :: Grounding time = 0.561416s, Solving time = 112.654509s, Total time = 113.215925s
65 : Statistics :: Grounding time = 0.668760s, Solving time = 142.122752s, Total time = 142.791512s
66 : Statistics :: Grounding time = 0.585032s, Solving time = 159.526011s, Total time = 160.111042s
67 : Statistics :: Grounding time = 0.586112s, Solving time = 75.452941s, Total time = 76.039053s

[11-02-2021_10-27-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 16.767160s, Solving time = 1948.152203s, Total time = 1967.318506s
Model :: Total atoms = 14862, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[11-02-2021_10-27-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_1,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_1,(block,6)),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),32)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_1,(block,3)),34)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),36)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_1,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_1,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_1,extended),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),47)
occurs(1,talos,configure(manipulator_limb_2,extended),48)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),50)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),51)
occurs(1,talos,configure(manipulator_limb_1,retracted),52)
occurs(1,talos,configure(manipulator_limb_2,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_1,extended),60)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),61)
occurs(1,talos,configure(manipulator_limb_2,extended),62)
occurs(1,talos,release(manipulator_end_1,(block,5)),63)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),64)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),65)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),66)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),67)

[11-02-2021_10-27-21] INFO :: Experiment >> 

      ================================================      
          Experimental run 18 : Time 1967.864766s           
      ================================================      

[11-02-2021_10-27-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_10-27-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Instantiated.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building started.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building completed.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding base program parts.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.016884s.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving base program parts.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.003157s.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving started.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.184723s.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.008965s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.065853s.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.006686s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.069334s.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.007525s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.066502s.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.012054s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.068956s.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.016350s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.072838s.

[11-02-2021_10-27-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.015793s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.075006s.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.017236s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.082776s.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.019914s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.079018s.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.023217s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.077628s.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.024728s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.078489s.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.023532s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.079028s.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.029882s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.083069s.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.037334s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.080949s.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.032035s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.082793s.

[11-02-2021_10-27-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.040408s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.084245s.

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.054224s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.086273s.

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.075515s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.087875s.

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.079883s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.094048s.

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.063880s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.088675s.

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.064863s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.089631s.

[11-02-2021_10-27-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.099592s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.090438s.

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.147563s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.097025s.

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.260646s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.097700s.

[11-02-2021_10-27-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.356979s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_10-27-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_10-27-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.095956s.

[11-02-2021_10-27-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.621030s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_10-27-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_10-27-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.096173s.

[11-02-2021_10-27-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.349697s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_10-27-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_10-27-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.100325s.

[11-02-2021_10-27-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.499928s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_10-27-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_10-27-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.098071s.

[11-02-2021_10-27-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.589393s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_10-27-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_10-27-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.110916s.

[11-02-2021_10-27-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.744610s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_10-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_10-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.104404s.

[11-02-2021_10-27-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.906541s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_10-27-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_10-27-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.102875s.

[11-02-2021_10-27-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.933355s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_10-27-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_10-27-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.106272s.

[11-02-2021_10-27-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.884701s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_10-27-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_10-27-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.109324s.

[11-02-2021_10-27-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.826205s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_10-27-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_10-27-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.108852s.

[11-02-2021_10-27-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 1.173512s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_10-27-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_10-27-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.109896s.

[11-02-2021_10-27-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 1.949355s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_10-27-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_10-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.110407s.

[11-02-2021_10-27-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 3.069578s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_10-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_10-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.111900s.

[11-02-2021_10-27-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 3.428305s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_10-27-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_10-27-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.112221s.

[11-02-2021_10-27-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 5.038011s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_10-27-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_10-27-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.114250s.

[11-02-2021_10-27-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 4.367118s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_10-27-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_10-27-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.356797s.

[11-02-2021_10-27-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 5.455587s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_10-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_10-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.359756s.

[11-02-2021_10-27-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-28-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 6.612233s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-28-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_10-28-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_10-28-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.367055s.

[11-02-2021_10-28-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-28-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 6.750874s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-28-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_10-28-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_10-28-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.380472s.

[11-02-2021_10-28-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-28-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 9.753526s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-28-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_10-28-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_10-28-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.401261s.

[11-02-2021_10-28-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-28-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 13.354343s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-28-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_10-28-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_10-28-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.397044s.

[11-02-2021_10-28-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 18.070702s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_10-28-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_10-28-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.405164s.

[11-02-2021_10-28-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-29-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 19.572667s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-29-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_10-29-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_10-29-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.413539s.

[11-02-2021_10-29-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-29-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 25.808802s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-29-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_10-29-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_10-29-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.428535s.

[11-02-2021_10-29-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-30-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 37.685661s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-30-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_10-30-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_10-30-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.434432s.

[11-02-2021_10-30-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 43.972155s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_10-31-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_10-31-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.431053s.

[11-02-2021_10-31-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-32-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 73.237811s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-32-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_10-32-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_10-32-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.458286s.

[11-02-2021_10-32-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-33-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 55.220686s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-33-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_10-33-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_10-33-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.472297s.

[11-02-2021_10-33-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-34-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 54.200109s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-34-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_10-34-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_10-34-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.464599s.

[11-02-2021_10-34-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 63.194599s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_10-35-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_10-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.484244s.

[11-02-2021_10-35-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 97.239516s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_10-36-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_10-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.569803s.

[11-02-2021_10-36-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 106.040273s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_10-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_10-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.515624s.

[11-02-2021_10-38-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 96.722797s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_10-40-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_10-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.519829s.

[11-02-2021_10-40-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 80.581445s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_10-41-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_10-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.579117s.

[11-02-2021_10-41-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 87.388500s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_10-43-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_10-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.549996s.

[11-02-2021_10-43-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 99.706653s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_10-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_10-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.532028s.

[11-02-2021_10-44-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 104.563043s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_10-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_10-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.538140s.

[11-02-2021_10-46-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-48-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 128.866959s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-48-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_10-48-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_10-48-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.572009s.

[11-02-2021_10-48-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-49-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 73.940829s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-49-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_10-49-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_10-49-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.556716s.

[11-02-2021_10-49-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-51-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 80.665989s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-51-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_10-51-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_10-51-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.670832s.

[11-02-2021_10-51-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-52-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 65.326456s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-52-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_10-52-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_10-52-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.584937s.

[11-02-2021_10-52-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 71.499720s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_10-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_10-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.594989s.

[11-02-2021_10-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 86.311935s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_10-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_10-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.594365s.

[11-02-2021_10-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Model found:
Model :: Total atoms = 14860, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 12.353371s:
Result = SAT, Stop condition = SAT

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving completed in 1670.773410s because STOP_CON_REACHED.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 17.304517s, Solving time = 1651.000542s, Total time = 1670.773410s
Final Model :: Total atoms = 14860, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.184723s, Solving time = 0.008965s, Total time = 0.193687s
2 : Statistics :: Grounding time = 0.065853s, Solving time = 0.006686s, Total time = 0.072539s
3 : Statistics :: Grounding time = 0.069334s, Solving time = 0.007525s, Total time = 0.076859s
4 : Statistics :: Grounding time = 0.066502s, Solving time = 0.012054s, Total time = 0.078556s
5 : Statistics :: Grounding time = 0.068956s, Solving time = 0.016350s, Total time = 0.085306s
6 : Statistics :: Grounding time = 0.072838s, Solving time = 0.015793s, Total time = 0.088631s
7 : Statistics :: Grounding time = 0.075006s, Solving time = 0.017236s, Total time = 0.092242s
8 : Statistics :: Grounding time = 0.082776s, Solving time = 0.019914s, Total time = 0.102690s
9 : Statistics :: Grounding time = 0.079018s, Solving time = 0.023217s, Total time = 0.102235s
10 : Statistics :: Grounding time = 0.077628s, Solving time = 0.024728s, Total time = 0.102356s
11 : Statistics :: Grounding time = 0.078489s, Solving time = 0.023532s, Total time = 0.102020s
12 : Statistics :: Grounding time = 0.079028s, Solving time = 0.029882s, Total time = 0.108910s
13 : Statistics :: Grounding time = 0.083069s, Solving time = 0.037334s, Total time = 0.120403s
14 : Statistics :: Grounding time = 0.080949s, Solving time = 0.032035s, Total time = 0.112984s
15 : Statistics :: Grounding time = 0.082793s, Solving time = 0.040408s, Total time = 0.123201s
16 : Statistics :: Grounding time = 0.084245s, Solving time = 0.054224s, Total time = 0.138469s
17 : Statistics :: Grounding time = 0.086273s, Solving time = 0.075515s, Total time = 0.161788s
18 : Statistics :: Grounding time = 0.087875s, Solving time = 0.079883s, Total time = 0.167758s
19 : Statistics :: Grounding time = 0.094048s, Solving time = 0.063880s, Total time = 0.157928s
20 : Statistics :: Grounding time = 0.088675s, Solving time = 0.064863s, Total time = 0.153538s
21 : Statistics :: Grounding time = 0.089631s, Solving time = 0.099592s, Total time = 0.189224s
22 : Statistics :: Grounding time = 0.090438s, Solving time = 0.147563s, Total time = 0.238001s
23 : Statistics :: Grounding time = 0.097025s, Solving time = 0.260646s, Total time = 0.357671s
24 : Statistics :: Grounding time = 0.097700s, Solving time = 0.356979s, Total time = 0.454679s
25 : Statistics :: Grounding time = 0.095956s, Solving time = 0.621030s, Total time = 0.716985s
26 : Statistics :: Grounding time = 0.096173s, Solving time = 0.349697s, Total time = 0.445869s
27 : Statistics :: Grounding time = 0.100325s, Solving time = 0.499928s, Total time = 0.600253s
28 : Statistics :: Grounding time = 0.098071s, Solving time = 0.589393s, Total time = 0.687464s
29 : Statistics :: Grounding time = 0.110916s, Solving time = 0.744610s, Total time = 0.855526s
30 : Statistics :: Grounding time = 0.104404s, Solving time = 0.906541s, Total time = 1.010945s
31 : Statistics :: Grounding time = 0.102875s, Solving time = 0.933355s, Total time = 1.036230s
32 : Statistics :: Grounding time = 0.106272s, Solving time = 0.884701s, Total time = 0.990973s
33 : Statistics :: Grounding time = 0.109324s, Solving time = 0.826205s, Total time = 0.935529s
34 : Statistics :: Grounding time = 0.108852s, Solving time = 1.173512s, Total time = 1.282364s
35 : Statistics :: Grounding time = 0.109896s, Solving time = 1.949355s, Total time = 2.059251s
36 : Statistics :: Grounding time = 0.110407s, Solving time = 3.069578s, Total time = 3.179985s
37 : Statistics :: Grounding time = 0.111900s, Solving time = 3.428305s, Total time = 3.540205s
38 : Statistics :: Grounding time = 0.112221s, Solving time = 5.038011s, Total time = 5.150232s
39 : Statistics :: Grounding time = 0.114250s, Solving time = 4.367118s, Total time = 4.481368s
40 : Statistics :: Grounding time = 0.356797s, Solving time = 5.455587s, Total time = 5.812384s
41 : Statistics :: Grounding time = 0.359756s, Solving time = 6.612233s, Total time = 6.971989s
42 : Statistics :: Grounding time = 0.367055s, Solving time = 6.750874s, Total time = 7.117929s
43 : Statistics :: Grounding time = 0.380472s, Solving time = 9.753526s, Total time = 10.133998s
44 : Statistics :: Grounding time = 0.401261s, Solving time = 13.354343s, Total time = 13.755604s
45 : Statistics :: Grounding time = 0.397044s, Solving time = 18.070702s, Total time = 18.467747s
46 : Statistics :: Grounding time = 0.405164s, Solving time = 19.572667s, Total time = 19.977832s
47 : Statistics :: Grounding time = 0.413539s, Solving time = 25.808802s, Total time = 26.222341s
48 : Statistics :: Grounding time = 0.428535s, Solving time = 37.685661s, Total time = 38.114196s
49 : Statistics :: Grounding time = 0.434432s, Solving time = 43.972155s, Total time = 44.406587s
50 : Statistics :: Grounding time = 0.431053s, Solving time = 73.237811s, Total time = 73.668864s
51 : Statistics :: Grounding time = 0.458286s, Solving time = 55.220686s, Total time = 55.678971s
52 : Statistics :: Grounding time = 0.472297s, Solving time = 54.200109s, Total time = 54.672406s
53 : Statistics :: Grounding time = 0.464599s, Solving time = 63.194599s, Total time = 63.659198s
54 : Statistics :: Grounding time = 0.484244s, Solving time = 97.239516s, Total time = 97.723760s
55 : Statistics :: Grounding time = 0.569803s, Solving time = 106.040273s, Total time = 106.610076s
56 : Statistics :: Grounding time = 0.515624s, Solving time = 96.722797s, Total time = 97.238422s
57 : Statistics :: Grounding time = 0.519829s, Solving time = 80.581445s, Total time = 81.101274s
58 : Statistics :: Grounding time = 0.579117s, Solving time = 87.388500s, Total time = 87.967617s
59 : Statistics :: Grounding time = 0.549996s, Solving time = 99.706653s, Total time = 100.256649s
60 : Statistics :: Grounding time = 0.532028s, Solving time = 104.563043s, Total time = 105.095072s
61 : Statistics :: Grounding time = 0.538140s, Solving time = 128.866959s, Total time = 129.405099s
62 : Statistics :: Grounding time = 0.572009s, Solving time = 73.940829s, Total time = 74.512839s
63 : Statistics :: Grounding time = 0.556716s, Solving time = 80.665989s, Total time = 81.222705s
64 : Statistics :: Grounding time = 0.670832s, Solving time = 65.326456s, Total time = 65.997288s
65 : Statistics :: Grounding time = 0.584937s, Solving time = 71.499720s, Total time = 72.084657s
66 : Statistics :: Grounding time = 0.594989s, Solving time = 86.311935s, Total time = 86.906924s
67 : Statistics :: Grounding time = 0.594365s, Solving time = 12.353371s, Total time = 12.947735s

[11-02-2021_10-55-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 17.304517s, Solving time = 1651.000542s, Total time = 1670.773410s
Model :: Total atoms = 14860, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[11-02-2021_10-55-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_2,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_2,extended),28)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_2,(block,6)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_2,(block,3)),34)
occurs(1,talos,configure(manipulator_limb_2,retracted),35)
occurs(1,talos,move((puzzle_room,0)),36)
occurs(1,talos,move((hallway,2)),37)
occurs(1,talos,move((hallway,1)),38)
occurs(1,talos,move((hallway,0)),39)
occurs(1,talos,move((store_room,1)),40)
occurs(1,talos,move((store_room,0)),41)
occurs(1,talos,configure(manipulator_limb_2,extended),42)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),43)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),44)
occurs(1,talos,configure(manipulator_limb_2,retracted),45)
occurs(1,talos,configure(manipulator_limb_1,extended),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),48)
occurs(1,talos,configure(manipulator_limb_1,retracted),49)
occurs(1,talos,move((store_room,1)),50)
occurs(1,talos,move((hallway,0)),51)
occurs(1,talos,move((hallway,1)),52)
occurs(1,talos,move((hallway,2)),53)
occurs(1,talos,move((puzzle_room,0)),54)
occurs(1,talos,move((puzzle_room,1)),55)
occurs(1,talos,configure(manipulator_limb_1,extended),56)
occurs(1,talos,configure(manipulator_limb_2,extended),57)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),58)
occurs(1,talos,release(manipulator_end_1,(block,5)),59)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),60)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),61)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),62)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),63)
occurs(1,talos,release(manipulator_end_1,(block,2)),64)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),65)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),66)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),67)

[11-02-2021_10-55-12] INFO :: Experiment >> 

      ================================================      
          Experimental run 19 : Time 1671.240146s           
      ================================================      

[11-02-2021_10-55-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_3.lp'], Anon #1), Main #1, 8, False, True))

[11-02-2021_10-55-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Instantiated.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 224 rules into program part ash_initial_state.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 56 rules into program part ash_goal_state.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building started.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building completed.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding base program parts.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.017089s.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving base program parts.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.002887s.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving started.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.185479s.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.008663s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.062967s.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.005278s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.062430s.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.007273s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[11-02-2021_10-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.065908s.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.011265s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.069681s.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.016654s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.072994s.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.014443s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.076119s.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.015846s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.077884s.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.018582s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.087140s.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.019709s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.076636s.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.019116s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.078299s.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.019042s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.077809s.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.022453s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.078655s.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.023619s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[11-02-2021_10-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.078805s.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.022844s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.079866s.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.023458s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.080523s.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.026292s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.082773s.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.029542s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.083571s.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.036982s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.084533s.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.049933s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.085600s.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.059162s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.086851s.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.070349s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.087952s.

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.070985s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.090590s.

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.080559s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.092350s.

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.123725s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.100831s.

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.128094s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.094520s.

[11-02-2021_10-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.188489s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.096277s.

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.273658s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.099338s.

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.341069s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[11-02-2021_10-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[11-02-2021_10-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.099009s.

[11-02-2021_10-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.605145s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[11-02-2021_10-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[11-02-2021_10-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.105607s.

[11-02-2021_10-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.817393s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[11-02-2021_10-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[11-02-2021_10-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.109973s.

[11-02-2021_10-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.271156s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[11-02-2021_10-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[11-02-2021_10-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.103491s.

[11-02-2021_10-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.654413s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[11-02-2021_10-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[11-02-2021_10-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.104608s.

[11-02-2021_10-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.618652s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[11-02-2021_10-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[11-02-2021_10-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.104688s.

[11-02-2021_10-55-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.587046s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[11-02-2021_10-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[11-02-2021_10-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.106915s.

[11-02-2021_10-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.465605s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[11-02-2021_10-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[11-02-2021_10-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.111038s.

[11-02-2021_10-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.879006s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[11-02-2021_10-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[11-02-2021_10-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.120673s.

[11-02-2021_10-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 2.730104s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[11-02-2021_10-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[11-02-2021_10-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.111508s.

[11-02-2021_10-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 2.943066s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[11-02-2021_10-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[11-02-2021_10-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.113421s.

[11-02-2021_10-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 3.275613s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [40]:
Current step bound = 40
End step min = 0
End step max = None

[11-02-2021_10-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0])].

[11-02-2021_10-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.116450s.

[11-02-2021_10-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 3.820302s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [41]:
Current step bound = 41
End step min = 0
End step max = None

[11-02-2021_10-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0])].

[11-02-2021_10-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.115296s.

[11-02-2021_10-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 4.850461s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [42]:
Current step bound = 42
End step min = 0
End step max = None

[11-02-2021_10-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0])].

[11-02-2021_10-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.415945s.

[11-02-2021_10-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 5.021959s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [43]:
Current step bound = 43
End step min = 0
End step max = None

[11-02-2021_10-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0])].

[11-02-2021_10-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.372257s.

[11-02-2021_10-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 7.375343s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [44]:
Current step bound = 44
End step min = 0
End step max = None

[11-02-2021_10-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0])].

[11-02-2021_10-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.373352s.

[11-02-2021_10-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 8.826179s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [45]:
Current step bound = 45
End step min = 0
End step max = None

[11-02-2021_10-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0])].

[11-02-2021_10-56-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.382609s.

[11-02-2021_10-56-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-56-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 11.258215s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-56-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [46]:
Current step bound = 46
End step min = 0
End step max = None

[11-02-2021_10-56-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0])].

[11-02-2021_10-56-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.394883s.

[11-02-2021_10-56-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 16.276259s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [47]:
Current step bound = 47
End step min = 0
End step max = None

[11-02-2021_10-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0])].

[11-02-2021_10-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.418437s.

[11-02-2021_10-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 18.134250s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [48]:
Current step bound = 48
End step min = 0
End step max = None

[11-02-2021_10-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0])].

[11-02-2021_10-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.414946s.

[11-02-2021_10-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 24.881910s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [49]:
Current step bound = 49
End step min = 0
End step max = None

[11-02-2021_10-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0])].

[11-02-2021_10-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.419019s.

[11-02-2021_10-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 29.283192s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [50]:
Current step bound = 50
End step min = 0
End step max = None

[11-02-2021_10-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0])].

[11-02-2021_10-57-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.433550s.

[11-02-2021_10-57-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-58-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 44.308490s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-58-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [51]:
Current step bound = 51
End step min = 0
End step max = None

[11-02-2021_10-58-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0])].

[11-02-2021_10-58-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.446324s.

[11-02-2021_10-58-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_10-59-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 54.096872s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_10-59-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [52]:
Current step bound = 52
End step min = 0
End step max = None

[11-02-2021_10-59-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0])].

[11-02-2021_10-59-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.448192s.

[11-02-2021_10-59-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-00-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 63.643284s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-00-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [53]:
Current step bound = 53
End step min = 0
End step max = None

[11-02-2021_11-00-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0])].

[11-02-2021_11-00-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.467458s.

[11-02-2021_11-00-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-02-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 87.038478s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-02-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [54]:
Current step bound = 54
End step min = 0
End step max = None

[11-02-2021_11-02-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0])].

[11-02-2021_11-02-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.491997s.

[11-02-2021_11-02-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-03-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 92.998447s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-03-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [55]:
Current step bound = 55
End step min = 0
End step max = None

[11-02-2021_11-03-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0])].

[11-02-2021_11-03-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.554954s.

[11-02-2021_11-03-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-05-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 95.394094s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-05-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [56]:
Current step bound = 56
End step min = 0
End step max = None

[11-02-2021_11-05-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [56]), ('domain_rules', [56]), ('state_module', [56]), ('plan_module', [56, 0])].

[11-02-2021_11-05-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.506453s.

[11-02-2021_11-05-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-07-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 137.506845s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-07-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [57]:
Current step bound = 57
End step min = 0
End step max = None

[11-02-2021_11-07-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [57]), ('domain_rules', [57]), ('state_module', [57]), ('plan_module', [57, 0])].

[11-02-2021_11-07-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.583888s.

[11-02-2021_11-07-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 132.366129s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [58]:
Current step bound = 58
End step min = 0
End step max = None

[11-02-2021_11-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [58]), ('domain_rules', [58]), ('state_module', [58]), ('plan_module', [58, 0])].

[11-02-2021_11-09-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.518678s.

[11-02-2021_11-09-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-11-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 123.421604s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-11-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [59]:
Current step bound = 59
End step min = 0
End step max = None

[11-02-2021_11-11-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [59]), ('domain_rules', [59]), ('state_module', [59]), ('plan_module', [59, 0])].

[11-02-2021_11-11-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.511013s.

[11-02-2021_11-11-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 102.563980s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [60]:
Current step bound = 60
End step min = 0
End step max = None

[11-02-2021_11-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [60]), ('domain_rules', [60]), ('state_module', [60]), ('plan_module', [60, 0])].

[11-02-2021_11-13-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.526848s.

[11-02-2021_11-13-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 140.127269s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [61]:
Current step bound = 61
End step min = 0
End step max = None

[11-02-2021_11-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [61]), ('domain_rules', [61]), ('state_module', [61]), ('plan_module', [61, 0])].

[11-02-2021_11-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.546000s.

[11-02-2021_11-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-18-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 143.409355s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-18-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [62]:
Current step bound = 62
End step min = 0
End step max = None

[11-02-2021_11-18-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [62]), ('domain_rules', [62]), ('state_module', [62]), ('plan_module', [62, 0])].

[11-02-2021_11-18-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.540542s.

[11-02-2021_11-18-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 221.713867s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-21-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [63]:
Current step bound = 63
End step min = 0
End step max = None

[11-02-2021_11-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [63]), ('domain_rules', [63]), ('state_module', [63]), ('plan_module', [63, 0])].

[11-02-2021_11-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.671039s.

[11-02-2021_11-21-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-24-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 145.768444s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-24-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [64]:
Current step bound = 64
End step min = 0
End step max = None

[11-02-2021_11-24-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [64]), ('domain_rules', [64]), ('state_module', [64]), ('plan_module', [64, 0])].

[11-02-2021_11-24-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.562312s.

[11-02-2021_11-24-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 122.096010s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [65]:
Current step bound = 65
End step min = 0
End step max = None

[11-02-2021_11-26-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [65]), ('domain_rules', [65]), ('state_module', [65]), ('plan_module', [65, 0])].

[11-02-2021_11-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.558504s.

[11-02-2021_11-26-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-28-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 136.512705s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-28-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [66]:
Current step bound = 66
End step min = 0
End step max = None

[11-02-2021_11-28-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [66]), ('domain_rules', [66]), ('state_module', [66]), ('plan_module', [66, 0])].

[11-02-2021_11-28-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.588720s.

[11-02-2021_11-28-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-30-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 115.066484s:
Result = UNSAT, Stop condition = SAT

[11-02-2021_11-30-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [67]:
Current step bound = 67
End step min = 0
End step max = None

[11-02-2021_11-30-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [67]), ('domain_rules', [67]), ('state_module', [67]), ('plan_module', [67, 0])].

[11-02-2021_11-30-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.602657s.

[11-02-2021_11-30-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[11-02-2021_11-30-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Model found:
Model :: Total atoms = 14857, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_11-30-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 12.258194s:
Result = SAT, Stop condition = SAT

[11-02-2021_11-30-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving completed in 2140.663509s because STOP_CON_REACHED.

[11-02-2021_11-30-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 16.586722s, Solving time = 2121.595788s, Total time = 2140.663509s
Final Model :: Total atoms = 14857, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_11-30-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.185479s, Solving time = 0.008663s, Total time = 0.194142s
2 : Statistics :: Grounding time = 0.062967s, Solving time = 0.005278s, Total time = 0.068245s
3 : Statistics :: Grounding time = 0.062430s, Solving time = 0.007273s, Total time = 0.069703s
4 : Statistics :: Grounding time = 0.065908s, Solving time = 0.011265s, Total time = 0.077174s
5 : Statistics :: Grounding time = 0.069681s, Solving time = 0.016654s, Total time = 0.086335s
6 : Statistics :: Grounding time = 0.072994s, Solving time = 0.014443s, Total time = 0.087437s
7 : Statistics :: Grounding time = 0.076119s, Solving time = 0.015846s, Total time = 0.091965s
8 : Statistics :: Grounding time = 0.077884s, Solving time = 0.018582s, Total time = 0.096465s
9 : Statistics :: Grounding time = 0.087140s, Solving time = 0.019709s, Total time = 0.106849s
10 : Statistics :: Grounding time = 0.076636s, Solving time = 0.019116s, Total time = 0.095753s
11 : Statistics :: Grounding time = 0.078299s, Solving time = 0.019042s, Total time = 0.097340s
12 : Statistics :: Grounding time = 0.077809s, Solving time = 0.022453s, Total time = 0.100262s
13 : Statistics :: Grounding time = 0.078655s, Solving time = 0.023619s, Total time = 0.102274s
14 : Statistics :: Grounding time = 0.078805s, Solving time = 0.022844s, Total time = 0.101649s
15 : Statistics :: Grounding time = 0.079866s, Solving time = 0.023458s, Total time = 0.103323s
16 : Statistics :: Grounding time = 0.080523s, Solving time = 0.026292s, Total time = 0.106815s
17 : Statistics :: Grounding time = 0.082773s, Solving time = 0.029542s, Total time = 0.112314s
18 : Statistics :: Grounding time = 0.083571s, Solving time = 0.036982s, Total time = 0.120553s
19 : Statistics :: Grounding time = 0.084533s, Solving time = 0.049933s, Total time = 0.134466s
20 : Statistics :: Grounding time = 0.085600s, Solving time = 0.059162s, Total time = 0.144762s
21 : Statistics :: Grounding time = 0.086851s, Solving time = 0.070349s, Total time = 0.157200s
22 : Statistics :: Grounding time = 0.087952s, Solving time = 0.070985s, Total time = 0.158937s
23 : Statistics :: Grounding time = 0.090590s, Solving time = 0.080559s, Total time = 0.171149s
24 : Statistics :: Grounding time = 0.092350s, Solving time = 0.123725s, Total time = 0.216075s
25 : Statistics :: Grounding time = 0.100831s, Solving time = 0.128094s, Total time = 0.228925s
26 : Statistics :: Grounding time = 0.094520s, Solving time = 0.188489s, Total time = 0.283009s
27 : Statistics :: Grounding time = 0.096277s, Solving time = 0.273658s, Total time = 0.369935s
28 : Statistics :: Grounding time = 0.099338s, Solving time = 0.341069s, Total time = 0.440407s
29 : Statistics :: Grounding time = 0.099009s, Solving time = 0.605145s, Total time = 0.704153s
30 : Statistics :: Grounding time = 0.105607s, Solving time = 0.817393s, Total time = 0.923000s
31 : Statistics :: Grounding time = 0.109973s, Solving time = 1.271156s, Total time = 1.381130s
32 : Statistics :: Grounding time = 0.103491s, Solving time = 1.654413s, Total time = 1.757904s
33 : Statistics :: Grounding time = 0.104608s, Solving time = 1.618652s, Total time = 1.723260s
34 : Statistics :: Grounding time = 0.104688s, Solving time = 1.587046s, Total time = 1.691734s
35 : Statistics :: Grounding time = 0.106915s, Solving time = 1.465605s, Total time = 1.572520s
36 : Statistics :: Grounding time = 0.111038s, Solving time = 1.879006s, Total time = 1.990044s
37 : Statistics :: Grounding time = 0.120673s, Solving time = 2.730104s, Total time = 2.850777s
38 : Statistics :: Grounding time = 0.111508s, Solving time = 2.943066s, Total time = 3.054575s
39 : Statistics :: Grounding time = 0.113421s, Solving time = 3.275613s, Total time = 3.389035s
40 : Statistics :: Grounding time = 0.116450s, Solving time = 3.820302s, Total time = 3.936752s
41 : Statistics :: Grounding time = 0.115296s, Solving time = 4.850461s, Total time = 4.965756s
42 : Statistics :: Grounding time = 0.415945s, Solving time = 5.021959s, Total time = 5.437904s
43 : Statistics :: Grounding time = 0.372257s, Solving time = 7.375343s, Total time = 7.747600s
44 : Statistics :: Grounding time = 0.373352s, Solving time = 8.826179s, Total time = 9.199531s
45 : Statistics :: Grounding time = 0.382609s, Solving time = 11.258215s, Total time = 11.640824s
46 : Statistics :: Grounding time = 0.394883s, Solving time = 16.276259s, Total time = 16.671142s
47 : Statistics :: Grounding time = 0.418437s, Solving time = 18.134250s, Total time = 18.552686s
48 : Statistics :: Grounding time = 0.414946s, Solving time = 24.881910s, Total time = 25.296855s
49 : Statistics :: Grounding time = 0.419019s, Solving time = 29.283192s, Total time = 29.702211s
50 : Statistics :: Grounding time = 0.433550s, Solving time = 44.308490s, Total time = 44.742039s
51 : Statistics :: Grounding time = 0.446324s, Solving time = 54.096872s, Total time = 54.543196s
52 : Statistics :: Grounding time = 0.448192s, Solving time = 63.643284s, Total time = 64.091476s
53 : Statistics :: Grounding time = 0.467458s, Solving time = 87.038478s, Total time = 87.505935s
54 : Statistics :: Grounding time = 0.491997s, Solving time = 92.998447s, Total time = 93.490444s
55 : Statistics :: Grounding time = 0.554954s, Solving time = 95.394094s, Total time = 95.949048s
56 : Statistics :: Grounding time = 0.506453s, Solving time = 137.506845s, Total time = 138.013298s
57 : Statistics :: Grounding time = 0.583888s, Solving time = 132.366129s, Total time = 132.950017s
58 : Statistics :: Grounding time = 0.518678s, Solving time = 123.421604s, Total time = 123.940283s
59 : Statistics :: Grounding time = 0.511013s, Solving time = 102.563980s, Total time = 103.074993s
60 : Statistics :: Grounding time = 0.526848s, Solving time = 140.127269s, Total time = 140.654117s
61 : Statistics :: Grounding time = 0.546000s, Solving time = 143.409355s, Total time = 143.955355s
62 : Statistics :: Grounding time = 0.540542s, Solving time = 221.713867s, Total time = 222.254409s
63 : Statistics :: Grounding time = 0.671039s, Solving time = 145.768444s, Total time = 146.439483s
64 : Statistics :: Grounding time = 0.562312s, Solving time = 122.096010s, Total time = 122.658323s
65 : Statistics :: Grounding time = 0.558504s, Solving time = 136.512705s, Total time = 137.071208s
66 : Statistics :: Grounding time = 0.588720s, Solving time = 115.066484s, Total time = 115.655204s
67 : Statistics :: Grounding time = 0.602657s, Solving time = 12.258194s, Total time = 12.860851s

[11-02-2021_11-30-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 16.586722s, Solving time = 2121.595788s, Total time = 2140.663509s
Model :: Total atoms = 14857, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[11-02-2021_11-30-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((store_room,1)),10)
occurs(1,talos,move((store_room,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),13)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),14)
occurs(1,talos,configure(manipulator_limb_2,retracted),15)
occurs(1,talos,move((store_room,1)),16)
occurs(1,talos,move((hallway,0)),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,2)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),21)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),22)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),23)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),24)
occurs(1,talos,configure(manipulator_limb_1,retracted),25)
occurs(1,talos,move((puzzle_room,0)),26)
occurs(1,talos,move((puzzle_room,1)),27)
occurs(1,talos,configure(manipulator_limb_2,extended),28)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),29)
occurs(1,talos,release(manipulator_end_2,(block,6)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),32)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),33)
occurs(1,talos,release(manipulator_end_2,(block,3)),34)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),35)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),36)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),37)
occurs(1,talos,release(manipulator_end_2,(block,2)),38)
occurs(1,talos,configure(manipulator_limb_2,retracted),39)
occurs(1,talos,move((puzzle_room,0)),40)
occurs(1,talos,move((hallway,2)),41)
occurs(1,talos,move((hallway,1)),42)
occurs(1,talos,move((hallway,0)),43)
occurs(1,talos,move((store_room,1)),44)
occurs(1,talos,move((store_room,0)),45)
occurs(1,talos,configure(manipulator_limb_1,extended),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),47)
occurs(1,talos,configure(manipulator_limb_2,extended),48)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),49)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),50)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),51)
occurs(1,talos,configure(manipulator_limb_2,retracted),52)
occurs(1,talos,configure(manipulator_limb_1,retracted),53)
occurs(1,talos,move((store_room,1)),54)
occurs(1,talos,move((hallway,0)),55)
occurs(1,talos,move((hallway,1)),56)
occurs(1,talos,move((hallway,2)),57)
occurs(1,talos,move((puzzle_room,0)),58)
occurs(1,talos,move((puzzle_room,1)),59)
occurs(1,talos,configure(manipulator_limb_1,extended),60)
occurs(1,talos,configure(manipulator_limb_2,extended),61)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),62)
occurs(1,talos,release(manipulator_end_1,(block,5)),63)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),64)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),65)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),66)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),67)

[11-02-2021_11-30-53] INFO :: Experiment >> 

      ================================================      
          Experimental run 20 : Time 2141.201413s           
      ================================================      

[11-02-2021_11-30-53] INFO :: Experiment >> 

  ################################################################################################  
    All 20 experimental runs complete : Real time 34904.499871s, Proccessing time 268849.484375s    
  ################################################################################################  

[11-02-2021_11-30-53] INFO :: Experiment >> 

          ========================================          
                     Experimental Data                      
          ========================================          

 RU  IT  AL         GT           ST           TT   S   A
  0   1   1  19.398252  1807.812652  1829.920899  67  67
  1   1   1  16.706048  1508.520511  1527.541034  67  67
  2   1   1  16.958693  1674.864803  1694.158647  67  67
  3   1   1  17.208899  1966.311279  1986.034150  67  67
  4   1   1  17.497749  2230.264086  2250.304423  67  67
  5   1   1  18.095061  1936.136579  1956.834347  67  67
  6   1   1  17.364401  2063.599083  2083.382294  67  67
  7   1   1  16.552894  1420.970520  1439.773865  67  67
  8   1   1  16.657743  1460.799762  1479.765349  67  67
  9   1   1  16.539888  1562.685340  1581.656500  67  67
 10   1   1  16.334249  1418.969210  1437.473716  67  67
 11   1   1  15.864395  1421.844059  1439.901935  67  67
 12   1   1  16.763790  1980.162013  1999.391947  67  67
 13   1   1  17.227669  1671.239522  1690.956974  67  67
 14   1   1  17.246599  1489.704544  1509.341716  67  67
 15   1   1  16.153299  1287.256232  1305.571182  67  67
 16   1   1  15.652642  1885.318224  1903.106375  67  67
 17   1   1  16.767160  1948.152203  1967.318506  67  67
 18   1   1  17.304517  1651.000542  1670.773410  67  67
 19   1   1  16.586722  2121.595788  2140.663509  67  67

[11-02-2021_11-30-53] INFO :: __main__ >> Exiting with code 0

