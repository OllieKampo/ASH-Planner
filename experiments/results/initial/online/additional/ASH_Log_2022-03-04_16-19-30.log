[04-03-2022_16-19-30] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[04-03-2022_16-19-30] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[04-03-2022_16-19-30] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[04-03-2022_16-19-30] DEBUG :: __main__ >> Command line arguments:
'--config=.\\experiments\\configurations\\test.config'
'-op'
'test'

[04-03-2022_16-19-30] DEBUG :: __main__ >> Configuration file loaded: .\experiments\configurations\test.config

[04-03-2022_16-19-30] DEBUG :: __main__ >> Configuration file arguments:
'./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp'
'./problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'
'-opti'
'5=None'
'4=None'
'3=None'
'2=None'
'1=None'
'-m'
'hcr'
'-t'
'sequential'
'-yield'
'True'
'-min_bound'
'False'
'-conc'
'True'
'-strat'
'hasty'
'-bound'
'5=0.5'
'4=0.5'
'3=0.5'
'2=0.5'
'-method'
'ground-first'
'-preempt_mode'
'optimise'
'-preempt_pos_fgoals'
'True'
'-preempt_neg_fgoals'
'False'
'-order_fgoals'
'True'
'-order_tasks'
'True'
'-tl'
'1800'
'-ll'
'300'
'-ir'
'0'
'-er'
'2'
'-xf'
'-df'
'-ff'
'-op'
'test'

[04-03-2022_16-19-30] DEBUG :: __main__ >> Parsed command line arguments:
('files', ['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'])
('load_schema', None)
('config_file_naming', False)
('plan_file', './solutions/plans/ASH_Plan_2022-03-04_16-19-30.txt')
('log_file', './logs/ASH_Log_2022-03-04_16-19-30.log')
('excel_file', './experiments/results/ASH_Excel_2022-03-04_16-19-30.xlsx')
('data_file', './experiments/results/ASH_Data_2022-03-04_16-19-30.dat')
('data_sep', ' ')
('data_end', '\n')
('figure_file', './experiments/results/ASH_Figure_2022-03-04_16-19-30.png')
('save_schema', './solutions/schemas/ASH_Schema_2022-03-04_16-19-30.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'standard')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', False)
('display_figure', True)
('operation', 'test')
('experimental_runs', 2)
('initial_runs', 0)
('optimum', {5: None, 4: None, 3: None, 2: None, 1: None})
('threads', 8)
('planning_time_limit', 1800)
('search_length_limit', 300)
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', True)
('minimise_actions', None)
('sequential_yielding', True)
('detect_interleaving', False)
('minimum_search_length_bound', False)
('make_observable', False)
('problem_space', None)
('problem_space_level', 1)
('top_level', None)
('bottom_level', 1)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('online_method', 'ground-first')
('division_strategy', 'hasty')
('division_strategy_bounds', {5: 0.5, 4: 0.5, 3: 0.5, 2: 0.5})
('bound_type', 'incremental_time')
('save_grounding', False)
('backwards_horizon', 0)
('preemptive_division', False)
('interrupting_division', False)
('moving_average', 1)
('left_blend_quantities', 0)
('right_blend_quantities', 0)
('avoid_refining_sgoals_marked_for_blending', False)
('treat_tasks_as_independent', False)
('divide_tasks_on_final_goal_intermediate_achievement_ordering', True)
('final_goal_intermediate_achievement_ordering_preferences', True)
('positive_final_goal_preemptive_achievement', True)
('negative_final_goal_preemptive_achievement', False)
('final_goal_preemptive_achievement_mode', 'optimise')

[04-03-2022_16-19-31] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp
                ./problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp]

[04-03-2022_16-19-31] DEBUG :: core.Planner >> The domain files ['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'] were loaded successfully, contain all domain program parts, and contain problem program parts: {'entities': True, 'initial_state': True, 'static_state': True, 'goal_state': True}.

[04-03-2022_16-19-31] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', None)
	('silent', True)
	('warnings', False)
	('message_limit', 20)
	('enable_tqdm', False)

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if;
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively,
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either;
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete;
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level;
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total quantity of actions in a plan, False to disable.
%%%%    order_fgoals: bool - A Boolean, True to enable enforce the task critical final-goal literal intermediate ordering preferences as a minimisation problem, False to disable.
%%%%    preempt_pos_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-mptively achieving positive final-goal literals, False to disable.
%%%%    preempt_neg_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-emptively achieving negative final-goal literals, False to disable.
%%%%    preempt_mode: {heuristic, optimise} - A string defining the type of statements used to enforce pre-emptive achievement of final-goal literals.
%%%%                                          Heuristic uses domain heuristic rules which affect solving throughout all search steps.
%%%%                                          Optimise uses weak constraint rules which maximise pre-emptive achievement of final-goals in the end state only.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Eliminate any unnecessary actions from the plan by minimising the total quantity of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final-goal intermediate achievement ordering preferences;
%%      - Solve the perference order problem as a minimisation problem,
%%      - TODO
% :~ not goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
%    fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * step) @ 3, AL, F, V, B]
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
   fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * (-step)) @ 3, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B),
                fluent(AL, _, F, V), pl(AL), boolean(B), order_fgoals = true.

%% Final goal preemptive achievement heuristics;
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true), fluent(AL, inertial, F, V), pl(AL),
                                        step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]

:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ 0, AL, ROBOT, A, F, V, step]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Solution checking constraint - The problem is satisfiable only iff all currently included goals are achieved
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- step > minimum_search_length_bound, incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
% :- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Enforce conformance constraints by ensuring plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    first: int - A natural number defining the first inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    last: int - A natural number defining the last inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    type: {simultaneous, sequential} - A string defining the sub-goal stage achievement type of subgoal stages.
%%%%    yield: bool - A Boolean, True to enable sequential yield planning mode, False to use standard planning mode.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint
%% and the step it was first commited at during sequential yield planning progression through the goal sequence.
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given;
%%          - Explicitly and fixed iff this program grounding will not be saved,
%%          - By a dynamic external context function (allowing it to be modified) if this program
%%            grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first),
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% The current sub-goal stage sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

%% Search heuristic that prefers planning actions that achieve a sub-goal literal in the current sub-goal stage;
%%      - This works only for sub-goal stages containing literals that are indentical to the state literals at the current planning level.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%% At first, it might seem effective to provide a tasking model, formed by abstracting away the robot's manipulator arms.
%% This means the robot no longer needs to reason about grasping objects, which simplifies the manipulation problem.
%% However, the abstract plan lengths are not reduced hugely by this abstraction.
%% In particular, the transportation problem is still quite complex because each block must still be collected individually.
%% We also still have to consider how many objects the robot could actually hold at any given time.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 5.

%% Abstraction types
#const reduc = 4. % Refine both
#const conde = 2. % Refine both
#const groun = 1. % Refine both
model_type(5, tasking). % Classical
model_type(4, reduced).
model_type(3, condensed).
model_type(2, condensed).
model_type(1, ground).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(5, robot).
class(5, armed_robot).
class(5, location).
class(5, room).
class(5, object).
class(5, grounded).
class(5, graspable).
class(5, placeable).
class(5, block).
class(5, surface).
class(5, table).
class(5, colour).

%% Classes deleted by redefinition
class(4, manipulator_arm).
class(4, grasper).

%% Classes deleted by reduction
class(3, door).
class(3, handle).
class(3, configurable).
class(3, extensible).

%% Classes deleted in second condensed model
class(2, zone).
class(2, manipulator_limb).
class(2, manipulator_end).
class(2, side).

%% Classes deleted in first condensed model
class(1, cell).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, zone).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Manipulator arms can grasp objects because they are composed of a end effector
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator arms are extensible because they are composed of a manipulator limb
override_class(manipulator_arm, manipulator_limb, extensible).

%% A room is composed from a set of zones
override_class(room, zone, location).

%% A zone is composed from a set of cells
override_class(zone, cell, location).

%% A table has multiple sides that compose its surface
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               AL_1 < TL, AL_2 < TL,
                                               model_type(TL, tasking),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%% In the redefined model robots can be transporting objects
fluent(AL_1, inertial, transporting(ROBO, OBJ), B) :- insta_of(AL_2, armed_robot, ROBO),
                                                      insta_of(AL_1, graspable, OBJ), OBJ != nothing,
                                                      AL_1 >= TL, model_type(TL, tasking),
                                                      sl(AL_2), sl(AL_1),
                                                      AL_2 >= AL_1,
                                                      boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                   insta_of(AL, table, TABLE),
                                                   sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 insta_of(AL, table, TABLE),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                        insta_of(AL, table, TABLE),
                                                        sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete_tower(COLOUR, TABLE), B) :- insta_of(AL, colour, COLOUR),
                                                         insta_of(AL, table, TABLE),
                                                         sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% In the redefined model robots can collect objects
action(AL, concurrent, manipulation, ROBO, collect(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can deposit objects
action(AL, concurrent, manipulation, ROBO, deposit(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can pick up and put down objects with a single action
action(AL, concurrent, manipulation, ROBO, place_upon(OBJ, SURFACE)) :- insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, placeable, OBJ),
                                                          insta_of(AL, surface, SURFACE),
                                                          AL >= TL, model_type(TL, tasking), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%% In the redefined model, when a robot collects an object it is transporting that object
effect(AL, ROBO, collect(OBJ), transporting(ROBO, OBJ), true) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                                 fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, graspable, OBJ),
                                                                 AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot collects an object the object is on nothing
effect(AL, ROBO, collect(OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                    fluent(AL, inertial, on(OBJ), nothing),
                                                    insta_of(AL, armed_robot, ROBO),
                                                    insta_of(AL, graspable, OBJ),
                                                    AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot deposits an object it is no longer transporting that object
effect(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, deposit(OBJ)),
                                                                  fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                  insta_of(RL, armed_robot, ROBO),
                                                                  insta_of(RL, graspable, OBJ),
                                                                  AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface the object is on that surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                fluent(AL, inertial, on(OBJ), SURFACE),
                                                                OBJ != SURFACE, SURFACE != nothing,
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, placeable, OBJ),
                                                                insta_of(AL, surface, SURFACE),
                                                                AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                              fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                              OBJ != SURFACE, SURFACE != nothing,
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, placeable, OBJ),
                                                                              insta_of(AL, surface, SURFACE),
                                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
#program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%% An armed robot can only collect an object when it is in the same location as that object
precond(AL, ROBO, collect(OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                        action(AL, _, _, ROBO, collect(OBJ)),
                                                        fluent(AL, inertial, in(ROBO), L),
                                                        fluent(AL, inertial, in(OBJ), L),
                                                        insta_of(AL, armed_robot, ROBO),
                                                        insta_of(AL, graspable, OBJ),
                                                        insta_of(AL, location, L),
                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, collect(OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                         action(AL, _, _, ROBO, collect(OBJ)),
                                                         fluent(AL, inertial, in(ROBO), L),
                                                         fluent(AL, inertial, in(OBJ), L),
                                                         insta_of(AL, armed_robot, ROBO),
                                                         insta_of(AL, graspable, OBJ),
                                                         insta_of(AL, location, L),
                                                         AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot collect an object that has another object on top of it
precond(AL, ROBO, collect(OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                              action(AL, _, _, ROBO, collect(OBJ_1)),
                                                              fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                              insta_of(AL, armed_robot, ROBO),
                                                              insta_of(AL, placeable, OBJ_1),
                                                              insta_of(AL, surface, OBJ_1),
                                                              insta_of(AL, surface, SURFACE),
                                                              insta_of(AL, placeable, OBJ_2),
                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only deposit an object when it is transporting that object
precond(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), true, true) :- OBJ != nothing,
                                                                        action(AL, _, _, ROBO, deposit(OBJ)),
                                                                        fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, graspable, OBJ),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only place an object upon a surface when it is in the same location as both the object and the surface
precond(AL, ROBO, place_upon(OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                        holds(AL, in(OBJ), L, t - 1),
                                                                        action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                        fluent(AL, inertial, in(SURFACE), L),
                                                                        fluent(AL, inertial, in(ROBO), L),
                                                                        fluent(AL, inertial, in(OBJ), L),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, placeable, OBJ),
                                                                        insta_of(AL, surface, SURFACE),
                                                                        insta_of(AL, location, L),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                    holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    fluent(AL, inertial, in(OBJ), L),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                     holds(AL, in(OBJ), L, t - 1),
                                                                     action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                     fluent(AL, inertial, in(SURFACE), L),
                                                                     fluent(AL, inertial, in(ROBO), L),
                                                                     fluent(AL, inertial, in(OBJ), L),
                                                                     insta_of(AL, armed_robot, ROBO),
                                                                     insta_of(AL, placeable, OBJ),
                                                                     insta_of(AL, surface, SURFACE),
                                                                     insta_of(AL, location, L),
                                                                     AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon a surface if there is another object on top of it
precond(AL, ROBO, place_upon(OBJ_1, SURFACE), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ_1, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, surface, OBJ_1),
                                                                          insta_of(AL, surface, SURFACE),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon another object that is on nothing
precond(AL, ROBO, place_upon(OBJ_1, OBJ_2), on(OBJ_2), nothing, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), nothing),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          insta_of(AL, surface, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%% A robot cannot grasp an object with two graspers simultaneously
:- holds(AL, grasping(DESC_1), OBJ, t),
   holds(AL, grasping(DESC_2), OBJ, t),
   fluent(AL, inertial, grasping(DESC_1), OBJ),
   fluent(AL, inertial, grasping(DESC_2), OBJ),
   DESC_1 != DESC_2,
   desce_of(AL, ROBO, DESC_1),
   desce_of(AL, ROBO, DESC_2),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC_1),
   insta_of(AL, grasper, DESC_2),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   sl(AL).

%% A robot cannot transport more objects than it has manipulator arms
% :- N = #count { OBJ : holds(AL_1, transporting(ROBO, OBJ), true, t),
%                       fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
%                       insta_of(AL_1, graspable, OBJ) },
%    M = #count { ARM : desce_of(AL_2, ROBO, ARM),
%                       insta_of(AL_2, manipulator_arm, ARM),
%                       al(AL_2), AL_1 >= AL_2 },
%    N > M, block_number(N), block_number(M),
%    insta_of(AL_1, robot, ROBO),
%    AL_1 >= TL, model_type(TL, tasking), sl(AL_1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either;
%%      - On a table,
%%      - On a descenant surface of a table.
holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        insta_of(AL, surface, SURFACE),
                                        sl(AL).

%% A block is in a tower if it is either;
%%      - The base of the tower,
%%      - On a block that is in the tower.
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE, TABLE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE, TABLE), true),
                                            insta_of(AL, block, BASE),
                                            insta_of(AL, table, TABLE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE, TABLE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                                    holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                                    holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                                    holds(AL, tower_base(BASE, TABLE), true, t),
                                                    fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                                    fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                    fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
                                                    BLOCK_1 = (block, N_1), block_number(N_1),
                                                    BLOCK_2 = (block, N_2), block_number(N_2),
                                                    BLOCK_1 != BLOCK_2, N_1 > N_2,
                                                    insta_of(AL, block, BLOCK_1),
                                                    insta_of(AL, block, BLOCK_2),
                                                    insta_of(AL, block, BASE),
                                                    insta_of(AL, table, TABLE),
                                                    sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete_tower(COLOUR, TABLE), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                                          is(AL, colour_of(BLOCK, COLOUR)),
                                                                          fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                                          static(AL, colour_of(BLOCK, COLOUR)),
                                                                          insta_of(AL, block, BLOCK) },
                                                     blocks_per_tower(N),
                                                     holds(AL, unordered_tower(BASE, TABLE), false, t),
                                                     holds(AL, tower_base(BASE, TABLE), true, t),
                                                     fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                     fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                     fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                     is(AL, colour_of(BASE, COLOUR)),
                                                     static(AL, colour_of(BASE, COLOUR)),
                                                     insta_of(AL, colour, COLOUR),
                                                     insta_of(AL, block, BASE),
                                                     insta_of(AL, table, TABLE),
                                                     sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
#program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.

%% If a robot is transporting an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, transporting(ROBO, OBJ), true, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, transporting(ROBO, OBJ), true),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ),
                              insta_of(AL_4, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3.

%% If a robot is grasping an object with any of its graspers than it is transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), true, t) :- holds(AL_2, grasping(COMP), OBJ, t),
                                                 fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
                                                 fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                 desce_of(AL_2, ROBO, COMP),
                                                 insta_of(AL_1, graspable, OBJ),
                                                 insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                 insta_of(AL_3, grasper, COMP),
                                                 insta_of(AL_4, robot, ROBO),
                                                 AL_1 >= TL, model_type(TL, tasking),
                                                 sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                 sl(AL_3), AL_3 >= AL_2,
                                                 sl(AL_4), AL_4 >= AL_1.

%% If a robot is not grasping an object with any of its manipulator arms then it is not transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), false, t) :- 0 = #count { COMP : holds(AL_2, grasping(COMP), OBJ, t),
                                                                      fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                                      desce_of(AL_2, ROBO, COMP),
                                                                      insta_of(AL_3, grasper, COMP),
                                                                      sl(AL_3), AL_3 >= AL_2 },
                                                  fluent(AL_1, inertial, transporting(ROBO, OBJ), false),
                                                  has_desce(AL_2, ROBO, grasper),
                                                  insta_of(AL_1, graspable, OBJ),
                                                  insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                  insta_of(AL_4, robot, ROBO),
                                                  AL_1 >= TL, model_type(TL, tasking),
                                                  sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                  sl(AL_4), AL_4 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Medium Problem Specification :: Version 3                             %%
%%                                                                       %%
%% Nine block setup, with the additional three on the table,             %%
%% and with 3-4 times larger number of cells per room.                   %%
%% This problem has longer manipulation plans at all levels,             %%
%% and longer ground level locomotion plans.                             %%
%%                                                                       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected(((starting_room_1, 1), 5, 1), ((hallway_1, 1), 4, 0))).

is(1, connected(((store_room_1, 1), 5, 1), ((hallway_1, 0), 0, 1))).
is(1, connected(((hallway_1, 2), 8, 1), ((puzzle_room_1, 0), 0, 1))).

is(1, connected(((hallway_1, 1), 4, 1), ((hallway_2, 1), 4, 0))).

is(1, connected(((store_room_2, 1), 5, 1), ((hallway_2, 0), 0, 1))).
is(1, connected(((hallway_2, 2), 8, 1), ((puzzle_room_2, 0), 0, 1))).

%% Door connection between the hallways, and the; store and puzzle rooms
is(1, connected_by_door(store_room_door, ((store_room_1, 1), 5, 1), ((hallway_1, 0), 0, 1))).
is(1, connected_by_door(puzzle_room_door, ((hallway_1, 2), 8, 1), ((puzzle_room_1, 0), 0, 1))).

is(1, connected_by_door(store_room_door, ((store_room_2, 1), 5, 1), ((hallway_2, 0), 0, 1))).
is(1, connected_by_door(puzzle_room_door, ((hallway_2, 2), 8, 1), ((puzzle_room_2, 0), 0, 1))).

%% The doors' handles are located on either side of it
is(1, in(store_room_1_door_handle_inner, ((store_room_1, 1), 5, 1))).
is(1, in(store_room_1_door_handle_outer, ((hallway_1, 0), 0, 1))).
is(1, in(puzzle_room_1_door_handle_inner, ((puzzle_room_1, 0), 0, 1))).
is(1, in(puzzle_room_1_door_handle_outer, ((hallway_1, 2), 8, 1))).

is(1, in(store_room_2_door_handle_inner, ((store_room_2, 1), 5, 1))).
is(1, in(store_room_2_door_handle_outer, ((hallway_2, 0), 0, 1))).
is(1, in(puzzle_room_2_door_handle_inner, ((puzzle_room_2, 0), 0, 1))).
is(1, in(puzzle_room_2_door_handle_outer, ((hallway_2, 2), 8, 1))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 6, N <= 9, al(AL).
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N > 9, N <= 12, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 12, N <= 15, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 15, N <= 18, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected(((R, N_1), X_1, Y), ((R, N_2), X_2, Y))) :- insta_of(1, cell, ((R, N_1), X_1, Y)),
                                                            insta_of(1, cell, ((R, N_2), X_2, Y)),
                                                            X_2 = X_1 + 1.
is(1, connected((A, X, Y_1), (A, X, Y_2))) :- insta_of(1, cell, (A, X, Y_1)),
                                              insta_of(1, cell, (A, X, Y_2)),
                                              Y_2 = Y_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), ((starting_room_1, 0), 0, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_1_table), ((puzzle_room_1, 1), 5, 0), 0).
holds(1, in(puzzle_room_2_table), ((puzzle_room_2, 1), 5, 0), 0).

%% The first three blocks are stacked on the puzzle room table:
%%      - This configuration presents the Sussman anomoly.
holds(1, on((block, 1)), puzzle_room_1_table_left, 0).
holds(1, on((block, 2)), puzzle_room_1_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
holds(1, on((block, 10)), puzzle_room_2_table_left, 0).
holds(1, on((block, 11)), puzzle_room_2_table_right, 0).
holds(1, on((block, 12)), (block, 10), 0).

%% The other three blocks are on the floor in the store room:
%%      - Talos will have to make at least two trips to the store room to collect these.
holds(1, in((block, 4)), ((store_room_1, 0), 0, 0), 0).
holds(1, in((block, 5)), ((store_room_1, 0), 0, 0), 0).
holds(1, in((block, 6)), ((store_room_1, 0), 0, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).
holds(1, in((block, 13)), ((store_room_2, 0), 0, 0), 0).
holds(1, in((block, 14)), ((store_room_2, 0), 0, 0), 0).
holds(1, in((block, 15)), ((store_room_2, 0), 0, 0), 0).
holds(1, on((block, 13)), nothing, 0).
holds(1, on((block, 14)), nothing, 0).
holds(1, on((block, 15)), nothing, 0).

%% The additional three blocks are placed with two in the middle of the table and one in the store room:
%%      - Talos will not have to make additional trips to the store room as a result of this.
holds(1, on((block, 7)), puzzle_room_1_table_middle, 0).
holds(1, in((block, 8)), ((store_room_1, 0), 0, 1), 0).
holds(1, on((block, 9)), (block, 7), 0).
holds(1, on((block, 8)), nothing, 0).
holds(1, on((block, 16)), puzzle_room_2_table_middle, 0).
holds(1, in((block, 17)), ((store_room_2, 0), 0, 1), 0).
holds(1, on((block, 18)), (block, 16), 0).
holds(1, on((block, 17)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete_tower(COLOUR, TABLE)) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, unordered_tower(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

final_goal(AL, complete_tower(COLOUR, TABLE), true, true) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
final_goal(1, on((block, 3)), puzzle_room_1_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_1_table_right, true).
final_goal(1, on((block, 9)), puzzle_room_1_table_middle, true).
final_goal(1, on((block, 12)), puzzle_room_2_table_left, true).
final_goal(1, on((block, 15)), puzzle_room_2_table_right, true).
final_goal(1, on((block, 18)), puzzle_room_2_table_middle, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Ancestry Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal_order(AL, complete_tower(COLOUR, puzzle_room_1_table), true, true, 1) :- insta_of(AL, colour, COLOUR), al(AL).
goal_order(AL, complete_tower(COLOUR, puzzle_room_2_table), true, true, 2) :- insta_of(AL, colour, COLOUR), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are nine blocks
block_number(1..18).
blocks_per_tower(3).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room_1).
entity(room, store_room_1).
entity(room, puzzle_room_1).
entity(room, hallway_1).
entity(room, store_room_2).
entity(room, puzzle_room_2).
entity(room, hallway_2).

%% All the rooms have two cells except the hallway which has three
n(0..9).
size(starting_room_1, 6, 2).
size(store_room_1, 6, 2).
size(hallway_1, 9, 2).
size(puzzle_room_1, 6, 2).
size(store_room_2, 6, 2).
size(hallway_2, 9, 2).
size(puzzle_room_2, 6, 2).

%% Zones with two cell widths
zone_width(3).
entity(zone, (ROOM, N)) :- entity(room, ROOM), size(ROOM, N_MAX, _), N < (N_MAX / W), zone_width(W), n(N).
zone_x((ROOM, N), (N * W) + P) :- P >= 0, P < W, zone_width(W), entity(zone, (ROOM, N)), n(P), n(N).
entity(cell, ((ROOM, N), X, Y)) :- zone_x((ROOM, N), X), entity(room, ROOM), entity(zone, (ROOM, N)), size(ROOM, X_MAX, Y_MAX), X < X_MAX, Y < Y_MAX, n(N), n(X), n(Y).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_1_door).
entity(door, puzzle_room_1_door).
entity(door, store_room_2_door).
entity(door, puzzle_room_2_door).

%% The door has two handles
entity(handle, store_room_1_door_handle_inner).
entity(handle, store_room_1_door_handle_outer).
entity(handle, puzzle_room_1_door_handle_inner).
entity(handle, puzzle_room_1_door_handle_outer).
entity(handle, store_room_2_door_handle_inner).
entity(handle, store_room_2_door_handle_outer).
entity(handle, puzzle_room_2_door_handle_inner).
entity(handle, puzzle_room_2_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_1_table).
entity(table, puzzle_room_2_table).

%% The table has three sides
entity(side, puzzle_room_1_table_left).
entity(side, puzzle_room_1_table_middle).
entity(side, puzzle_room_1_table_right).
entity(side, puzzle_room_2_table_left).
entity(side, puzzle_room_2_table_middle).
entity(side, puzzle_room_2_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).
entity(colour, yellow).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, N)) :- entity(room, ROOM), entity(zone, (ROOM, N)), n(N).
ancestry_relation((ROOM, N), ((ROOM, N), X, Y)) :- entity(room, ROOM), entity(zone, (ROOM, N)), entity(cell, ((ROOM, N), X, Y)), n(N), n(X), n(Y).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_1_door, store_room_1_door_handle_inner).
ancestry_relation(store_room_1_door, store_room_1_door_handle_outer).
ancestry_relation(puzzle_room_1_door, puzzle_room_1_door_handle_inner).
ancestry_relation(puzzle_room_1_door, puzzle_room_1_door_handle_outer).
ancestry_relation(store_room_2_door, store_room_2_door_handle_inner).
ancestry_relation(store_room_2_door, store_room_2_door_handle_outer).
ancestry_relation(puzzle_room_2_door, puzzle_room_2_door_handle_inner).
ancestry_relation(puzzle_room_2_door, puzzle_room_2_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_left).
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_middle).
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_right).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_left).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_middle).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_right).

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Logic program code parsed successfully.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated successfully.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 443 rules

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.0037122000000000543s

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:97:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:466:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:642:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:655:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:656:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:660:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:661:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:662:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:666:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:667:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:668:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:672:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:673:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:685:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:686:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:687:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:693:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:694:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:699:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:700:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.010270s.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.001206s with result Satisfiable.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[04-03-2022_16-19-31] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.010270s, Solving = 0.001206s, Total = 0.011476s, Memory = (RSS = 105.660156Mb, VMS = 92.464844Mb)
Final Model :: Total atoms = 84, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-03-2022_16-19-31] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-5] instantiated successfully

[04-03-2022_16-19-31] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'ASH')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-03-2022_16-19-31] DEBUG :: Logic Program ASH #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if;
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively,
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either;
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete;
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level;
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total quantity of actions in a plan, False to disable.
%%%%    order_fgoals: bool - A Boolean, True to enable enforce the task critical final-goal literal intermediate ordering preferences as a minimisation problem, False to disable.
%%%%    preempt_pos_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-mptively achieving positive final-goal literals, False to disable.
%%%%    preempt_neg_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-emptively achieving negative final-goal literals, False to disable.
%%%%    preempt_mode: {heuristic, optimise} - A string defining the type of statements used to enforce pre-emptive achievement of final-goal literals.
%%%%                                          Heuristic uses domain heuristic rules which affect solving throughout all search steps.
%%%%                                          Optimise uses weak constraint rules which maximise pre-emptive achievement of final-goals in the end state only.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Eliminate any unnecessary actions from the plan by minimising the total quantity of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final-goal intermediate achievement ordering preferences;
%%      - Solve the perference order problem as a minimisation problem,
%%      - TODO
% :~ not goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
%    fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * step) @ 3, AL, F, V, B]
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
   fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * (-step)) @ 3, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B),
                fluent(AL, _, F, V), pl(AL), boolean(B), order_fgoals = true.

%% Final goal preemptive achievement heuristics;
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true), fluent(AL, inertial, F, V), pl(AL),
                                        step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]

:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ 0, AL, ROBOT, A, F, V, step]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Solution checking constraint - The problem is satisfiable only iff all currently included goals are achieved
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- step > minimum_search_length_bound, incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
% :- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Enforce conformance constraints by ensuring plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    first: int - A natural number defining the first inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    last: int - A natural number defining the last inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    type: {simultaneous, sequential} - A string defining the sub-goal stage achievement type of subgoal stages.
%%%%    yield: bool - A Boolean, True to enable sequential yield planning mode, False to use standard planning mode.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint
%% and the step it was first commited at during sequential yield planning progression through the goal sequence.
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given;
%%          - Explicitly and fixed iff this program grounding will not be saved,
%%          - By a dynamic external context function (allowing it to be modified) if this program
%%            grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first),
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% The current sub-goal stage sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

%% Search heuristic that prefers planning actions that achieve a sub-goal literal in the current sub-goal stage;
%%      - This works only for sub-goal stages containing literals that are indentical to the state literals at the current planning level.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%% At first, it might seem effective to provide a tasking model, formed by abstracting away the robot's manipulator arms.
%% This means the robot no longer needs to reason about grasping objects, which simplifies the manipulation problem.
%% However, the abstract plan lengths are not reduced hugely by this abstraction.
%% In particular, the transportation problem is still quite complex because each block must still be collected individually.
%% We also still have to consider how many objects the robot could actually hold at any given time.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 5.

%% Abstraction types
#const reduc = 4. % Refine both
#const conde = 2. % Refine both
#const groun = 1. % Refine both
model_type(5, tasking). % Classical
model_type(4, reduced).
model_type(3, condensed).
model_type(2, condensed).
model_type(1, ground).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(5, robot).
class(5, armed_robot).
class(5, location).
class(5, room).
class(5, object).
class(5, grounded).
class(5, graspable).
class(5, placeable).
class(5, block).
class(5, surface).
class(5, table).
class(5, colour).

%% Classes deleted by redefinition
class(4, manipulator_arm).
class(4, grasper).

%% Classes deleted by reduction
class(3, door).
class(3, handle).
class(3, configurable).
class(3, extensible).

%% Classes deleted in second condensed model
class(2, zone).
class(2, manipulator_limb).
class(2, manipulator_end).
class(2, side).

%% Classes deleted in first condensed model
class(1, cell).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, zone).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Manipulator arms can grasp objects because they are composed of a end effector
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator arms are extensible because they are composed of a manipulator limb
override_class(manipulator_arm, manipulator_limb, extensible).

%% A room is composed from a set of zones
override_class(room, zone, location).

%% A zone is composed from a set of cells
override_class(zone, cell, location).

%% A table has multiple sides that compose its surface
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               AL_1 < TL, AL_2 < TL,
                                               model_type(TL, tasking),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%% In the redefined model robots can be transporting objects
fluent(AL_1, inertial, transporting(ROBO, OBJ), B) :- insta_of(AL_2, armed_robot, ROBO),
                                                      insta_of(AL_1, graspable, OBJ), OBJ != nothing,
                                                      AL_1 >= TL, model_type(TL, tasking),
                                                      sl(AL_2), sl(AL_1),
                                                      AL_2 >= AL_1,
                                                      boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                   insta_of(AL, table, TABLE),
                                                   sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 insta_of(AL, table, TABLE),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                        insta_of(AL, table, TABLE),
                                                        sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete_tower(COLOUR, TABLE), B) :- insta_of(AL, colour, COLOUR),
                                                         insta_of(AL, table, TABLE),
                                                         sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% In the redefined model robots can collect objects
action(AL, concurrent, manipulation, ROBO, collect(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can deposit objects
action(AL, concurrent, manipulation, ROBO, deposit(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can pick up and put down objects with a single action
action(AL, concurrent, manipulation, ROBO, place_upon(OBJ, SURFACE)) :- insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, placeable, OBJ),
                                                          insta_of(AL, surface, SURFACE),
                                                          AL >= TL, model_type(TL, tasking), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%% In the redefined model, when a robot collects an object it is transporting that object
effect(AL, ROBO, collect(OBJ), transporting(ROBO, OBJ), true) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                                 fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, graspable, OBJ),
                                                                 AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot collects an object the object is on nothing
effect(AL, ROBO, collect(OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                    fluent(AL, inertial, on(OBJ), nothing),
                                                    insta_of(AL, armed_robot, ROBO),
                                                    insta_of(AL, graspable, OBJ),
                                                    AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot deposits an object it is no longer transporting that object
effect(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, deposit(OBJ)),
                                                                  fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                  insta_of(RL, armed_robot, ROBO),
                                                                  insta_of(RL, graspable, OBJ),
                                                                  AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface the object is on that surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                fluent(AL, inertial, on(OBJ), SURFACE),
                                                                OBJ != SURFACE, SURFACE != nothing,
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, placeable, OBJ),
                                                                insta_of(AL, surface, SURFACE),
                                                                AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                              fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                              OBJ != SURFACE, SURFACE != nothing,
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, placeable, OBJ),
                                                                              insta_of(AL, surface, SURFACE),
                                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
#program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%% An armed robot can only collect an object when it is in the same location as that object
precond(AL, ROBO, collect(OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                        action(AL, _, _, ROBO, collect(OBJ)),
                                                        fluent(AL, inertial, in(ROBO), L),
                                                        fluent(AL, inertial, in(OBJ), L),
                                                        insta_of(AL, armed_robot, ROBO),
                                                        insta_of(AL, graspable, OBJ),
                                                        insta_of(AL, location, L),
                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, collect(OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                         action(AL, _, _, ROBO, collect(OBJ)),
                                                         fluent(AL, inertial, in(ROBO), L),
                                                         fluent(AL, inertial, in(OBJ), L),
                                                         insta_of(AL, armed_robot, ROBO),
                                                         insta_of(AL, graspable, OBJ),
                                                         insta_of(AL, location, L),
                                                         AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot collect an object that has another object on top of it
precond(AL, ROBO, collect(OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                              action(AL, _, _, ROBO, collect(OBJ_1)),
                                                              fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                              insta_of(AL, armed_robot, ROBO),
                                                              insta_of(AL, placeable, OBJ_1),
                                                              insta_of(AL, surface, OBJ_1),
                                                              insta_of(AL, surface, SURFACE),
                                                              insta_of(AL, placeable, OBJ_2),
                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only deposit an object when it is transporting that object
precond(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), true, true) :- OBJ != nothing,
                                                                        action(AL, _, _, ROBO, deposit(OBJ)),
                                                                        fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, graspable, OBJ),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only place an object upon a surface when it is in the same location as both the object and the surface
precond(AL, ROBO, place_upon(OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                        holds(AL, in(OBJ), L, t - 1),
                                                                        action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                        fluent(AL, inertial, in(SURFACE), L),
                                                                        fluent(AL, inertial, in(ROBO), L),
                                                                        fluent(AL, inertial, in(OBJ), L),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, placeable, OBJ),
                                                                        insta_of(AL, surface, SURFACE),
                                                                        insta_of(AL, location, L),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                    holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    fluent(AL, inertial, in(OBJ), L),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                     holds(AL, in(OBJ), L, t - 1),
                                                                     action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                     fluent(AL, inertial, in(SURFACE), L),
                                                                     fluent(AL, inertial, in(ROBO), L),
                                                                     fluent(AL, inertial, in(OBJ), L),
                                                                     insta_of(AL, armed_robot, ROBO),
                                                                     insta_of(AL, placeable, OBJ),
                                                                     insta_of(AL, surface, SURFACE),
                                                                     insta_of(AL, location, L),
                                                                     AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon a surface if there is another object on top of it
precond(AL, ROBO, place_upon(OBJ_1, SURFACE), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ_1, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, surface, OBJ_1),
                                                                          insta_of(AL, surface, SURFACE),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon another object that is on nothing
precond(AL, ROBO, place_upon(OBJ_1, OBJ_2), on(OBJ_2), nothing, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), nothing),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          insta_of(AL, surface, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%% A robot cannot grasp an object with two graspers simultaneously
:- holds(AL, grasping(DESC_1), OBJ, t),
   holds(AL, grasping(DESC_2), OBJ, t),
   fluent(AL, inertial, grasping(DESC_1), OBJ),
   fluent(AL, inertial, grasping(DESC_2), OBJ),
   DESC_1 != DESC_2,
   desce_of(AL, ROBO, DESC_1),
   desce_of(AL, ROBO, DESC_2),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC_1),
   insta_of(AL, grasper, DESC_2),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   sl(AL).

%% A robot cannot transport more objects than it has manipulator arms
% :- N = #count { OBJ : holds(AL_1, transporting(ROBO, OBJ), true, t),
%                       fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
%                       insta_of(AL_1, graspable, OBJ) },
%    M = #count { ARM : desce_of(AL_2, ROBO, ARM),
%                       insta_of(AL_2, manipulator_arm, ARM),
%                       al(AL_2), AL_1 >= AL_2 },
%    N > M, block_number(N), block_number(M),
%    insta_of(AL_1, robot, ROBO),
%    AL_1 >= TL, model_type(TL, tasking), sl(AL_1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either;
%%      - On a table,
%%      - On a descenant surface of a table.
holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        insta_of(AL, surface, SURFACE),
                                        sl(AL).

%% A block is in a tower if it is either;
%%      - The base of the tower,
%%      - On a block that is in the tower.
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE, TABLE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE, TABLE), true),
                                            insta_of(AL, block, BASE),
                                            insta_of(AL, table, TABLE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE, TABLE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                                    holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                                    holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                                    holds(AL, tower_base(BASE, TABLE), true, t),
                                                    fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                                    fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                    fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
                                                    BLOCK_1 = (block, N_1), block_number(N_1),
                                                    BLOCK_2 = (block, N_2), block_number(N_2),
                                                    BLOCK_1 != BLOCK_2, N_1 > N_2,
                                                    insta_of(AL, block, BLOCK_1),
                                                    insta_of(AL, block, BLOCK_2),
                                                    insta_of(AL, block, BASE),
                                                    insta_of(AL, table, TABLE),
                                                    sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete_tower(COLOUR, TABLE), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                                          is(AL, colour_of(BLOCK, COLOUR)),
                                                                          fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                                          static(AL, colour_of(BLOCK, COLOUR)),
                                                                          insta_of(AL, block, BLOCK) },
                                                     blocks_per_tower(N),
                                                     holds(AL, unordered_tower(BASE, TABLE), false, t),
                                                     holds(AL, tower_base(BASE, TABLE), true, t),
                                                     fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                     fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                     fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                     is(AL, colour_of(BASE, COLOUR)),
                                                     static(AL, colour_of(BASE, COLOUR)),
                                                     insta_of(AL, colour, COLOUR),
                                                     insta_of(AL, block, BASE),
                                                     insta_of(AL, table, TABLE),
                                                     sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
#program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.

%% If a robot is transporting an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, transporting(ROBO, OBJ), true, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, transporting(ROBO, OBJ), true),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ),
                              insta_of(AL_4, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3.

%% If a robot is grasping an object with any of its graspers than it is transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), true, t) :- holds(AL_2, grasping(COMP), OBJ, t),
                                                 fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
                                                 fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                 desce_of(AL_2, ROBO, COMP),
                                                 insta_of(AL_1, graspable, OBJ),
                                                 insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                 insta_of(AL_3, grasper, COMP),
                                                 insta_of(AL_4, robot, ROBO),
                                                 AL_1 >= TL, model_type(TL, tasking),
                                                 sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                 sl(AL_3), AL_3 >= AL_2,
                                                 sl(AL_4), AL_4 >= AL_1.

%% If a robot is not grasping an object with any of its manipulator arms then it is not transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), false, t) :- 0 = #count { COMP : holds(AL_2, grasping(COMP), OBJ, t),
                                                                      fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                                      desce_of(AL_2, ROBO, COMP),
                                                                      insta_of(AL_3, grasper, COMP),
                                                                      sl(AL_3), AL_3 >= AL_2 },
                                                  fluent(AL_1, inertial, transporting(ROBO, OBJ), false),
                                                  has_desce(AL_2, ROBO, grasper),
                                                  insta_of(AL_1, graspable, OBJ),
                                                  insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                  insta_of(AL_4, robot, ROBO),
                                                  AL_1 >= TL, model_type(TL, tasking),
                                                  sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                  sl(AL_4), AL_4 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Medium Problem Specification :: Version 3                             %%
%%                                                                       %%
%% Nine block setup, with the additional three on the table,             %%
%% and with 3-4 times larger number of cells per room.                   %%
%% This problem has longer manipulation plans at all levels,             %%
%% and longer ground level locomotion plans.                             %%
%%                                                                       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected(((starting_room_1, 1), 5, 1), ((hallway_1, 1), 4, 0))).

is(1, connected(((store_room_1, 1), 5, 1), ((hallway_1, 0), 0, 1))).
is(1, connected(((hallway_1, 2), 8, 1), ((puzzle_room_1, 0), 0, 1))).

is(1, connected(((hallway_1, 1), 4, 1), ((hallway_2, 1), 4, 0))).

is(1, connected(((store_room_2, 1), 5, 1), ((hallway_2, 0), 0, 1))).
is(1, connected(((hallway_2, 2), 8, 1), ((puzzle_room_2, 0), 0, 1))).

%% Door connection between the hallways, and the; store and puzzle rooms
is(1, connected_by_door(store_room_door, ((store_room_1, 1), 5, 1), ((hallway_1, 0), 0, 1))).
is(1, connected_by_door(puzzle_room_door, ((hallway_1, 2), 8, 1), ((puzzle_room_1, 0), 0, 1))).

is(1, connected_by_door(store_room_door, ((store_room_2, 1), 5, 1), ((hallway_2, 0), 0, 1))).
is(1, connected_by_door(puzzle_room_door, ((hallway_2, 2), 8, 1), ((puzzle_room_2, 0), 0, 1))).

%% The doors' handles are located on either side of it
is(1, in(store_room_1_door_handle_inner, ((store_room_1, 1), 5, 1))).
is(1, in(store_room_1_door_handle_outer, ((hallway_1, 0), 0, 1))).
is(1, in(puzzle_room_1_door_handle_inner, ((puzzle_room_1, 0), 0, 1))).
is(1, in(puzzle_room_1_door_handle_outer, ((hallway_1, 2), 8, 1))).

is(1, in(store_room_2_door_handle_inner, ((store_room_2, 1), 5, 1))).
is(1, in(store_room_2_door_handle_outer, ((hallway_2, 0), 0, 1))).
is(1, in(puzzle_room_2_door_handle_inner, ((puzzle_room_2, 0), 0, 1))).
is(1, in(puzzle_room_2_door_handle_outer, ((hallway_2, 2), 8, 1))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 6, N <= 9, al(AL).
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N > 9, N <= 12, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 12, N <= 15, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 15, N <= 18, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected(((R, N_1), X_1, Y), ((R, N_2), X_2, Y))) :- insta_of(1, cell, ((R, N_1), X_1, Y)),
                                                            insta_of(1, cell, ((R, N_2), X_2, Y)),
                                                            X_2 = X_1 + 1.
is(1, connected((A, X, Y_1), (A, X, Y_2))) :- insta_of(1, cell, (A, X, Y_1)),
                                              insta_of(1, cell, (A, X, Y_2)),
                                              Y_2 = Y_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), ((starting_room_1, 0), 0, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_1_table), ((puzzle_room_1, 1), 5, 0), 0).
holds(1, in(puzzle_room_2_table), ((puzzle_room_2, 1), 5, 0), 0).

%% The first three blocks are stacked on the puzzle room table:
%%      - This configuration presents the Sussman anomoly.
holds(1, on((block, 1)), puzzle_room_1_table_left, 0).
holds(1, on((block, 2)), puzzle_room_1_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
holds(1, on((block, 10)), puzzle_room_2_table_left, 0).
holds(1, on((block, 11)), puzzle_room_2_table_right, 0).
holds(1, on((block, 12)), (block, 10), 0).

%% The other three blocks are on the floor in the store room:
%%      - Talos will have to make at least two trips to the store room to collect these.
holds(1, in((block, 4)), ((store_room_1, 0), 0, 0), 0).
holds(1, in((block, 5)), ((store_room_1, 0), 0, 0), 0).
holds(1, in((block, 6)), ((store_room_1, 0), 0, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).
holds(1, in((block, 13)), ((store_room_2, 0), 0, 0), 0).
holds(1, in((block, 14)), ((store_room_2, 0), 0, 0), 0).
holds(1, in((block, 15)), ((store_room_2, 0), 0, 0), 0).
holds(1, on((block, 13)), nothing, 0).
holds(1, on((block, 14)), nothing, 0).
holds(1, on((block, 15)), nothing, 0).

%% The additional three blocks are placed with two in the middle of the table and one in the store room:
%%      - Talos will not have to make additional trips to the store room as a result of this.
holds(1, on((block, 7)), puzzle_room_1_table_middle, 0).
holds(1, in((block, 8)), ((store_room_1, 0), 0, 1), 0).
holds(1, on((block, 9)), (block, 7), 0).
holds(1, on((block, 8)), nothing, 0).
holds(1, on((block, 16)), puzzle_room_2_table_middle, 0).
holds(1, in((block, 17)), ((store_room_2, 0), 0, 1), 0).
holds(1, on((block, 18)), (block, 16), 0).
holds(1, on((block, 17)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete_tower(COLOUR, TABLE)) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, unordered_tower(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

final_goal(AL, complete_tower(COLOUR, TABLE), true, true) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
final_goal(1, on((block, 3)), puzzle_room_1_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_1_table_right, true).
final_goal(1, on((block, 9)), puzzle_room_1_table_middle, true).
final_goal(1, on((block, 12)), puzzle_room_2_table_left, true).
final_goal(1, on((block, 15)), puzzle_room_2_table_right, true).
final_goal(1, on((block, 18)), puzzle_room_2_table_middle, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Ancestry Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal_order(AL, complete_tower(COLOUR, puzzle_room_1_table), true, true, 1) :- insta_of(AL, colour, COLOUR), al(AL).
goal_order(AL, complete_tower(COLOUR, puzzle_room_2_table), true, true, 2) :- insta_of(AL, colour, COLOUR), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are nine blocks
block_number(1..18).
blocks_per_tower(3).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room_1).
entity(room, store_room_1).
entity(room, puzzle_room_1).
entity(room, hallway_1).
entity(room, store_room_2).
entity(room, puzzle_room_2).
entity(room, hallway_2).

%% All the rooms have two cells except the hallway which has three
n(0..9).
size(starting_room_1, 6, 2).
size(store_room_1, 6, 2).
size(hallway_1, 9, 2).
size(puzzle_room_1, 6, 2).
size(store_room_2, 6, 2).
size(hallway_2, 9, 2).
size(puzzle_room_2, 6, 2).

%% Zones with two cell widths
zone_width(3).
entity(zone, (ROOM, N)) :- entity(room, ROOM), size(ROOM, N_MAX, _), N < (N_MAX / W), zone_width(W), n(N).
zone_x((ROOM, N), (N * W) + P) :- P >= 0, P < W, zone_width(W), entity(zone, (ROOM, N)), n(P), n(N).
entity(cell, ((ROOM, N), X, Y)) :- zone_x((ROOM, N), X), entity(room, ROOM), entity(zone, (ROOM, N)), size(ROOM, X_MAX, Y_MAX), X < X_MAX, Y < Y_MAX, n(N), n(X), n(Y).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_1_door).
entity(door, puzzle_room_1_door).
entity(door, store_room_2_door).
entity(door, puzzle_room_2_door).

%% The door has two handles
entity(handle, store_room_1_door_handle_inner).
entity(handle, store_room_1_door_handle_outer).
entity(handle, puzzle_room_1_door_handle_inner).
entity(handle, puzzle_room_1_door_handle_outer).
entity(handle, store_room_2_door_handle_inner).
entity(handle, store_room_2_door_handle_outer).
entity(handle, puzzle_room_2_door_handle_inner).
entity(handle, puzzle_room_2_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_1_table).
entity(table, puzzle_room_2_table).

%% The table has three sides
entity(side, puzzle_room_1_table_left).
entity(side, puzzle_room_1_table_middle).
entity(side, puzzle_room_1_table_right).
entity(side, puzzle_room_2_table_left).
entity(side, puzzle_room_2_table_middle).
entity(side, puzzle_room_2_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).
entity(colour, yellow).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, N)) :- entity(room, ROOM), entity(zone, (ROOM, N)), n(N).
ancestry_relation((ROOM, N), ((ROOM, N), X, Y)) :- entity(room, ROOM), entity(zone, (ROOM, N)), entity(cell, ((ROOM, N), X, Y)), n(N), n(X), n(Y).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_1_door, store_room_1_door_handle_inner).
ancestry_relation(store_room_1_door, store_room_1_door_handle_outer).
ancestry_relation(puzzle_room_1_door, puzzle_room_1_door_handle_inner).
ancestry_relation(puzzle_room_1_door, puzzle_room_1_door_handle_outer).
ancestry_relation(store_room_2_door, store_room_2_door_handle_inner).
ancestry_relation(store_room_2_door, store_room_2_door_handle_outer).
ancestry_relation(puzzle_room_2_door, puzzle_room_2_door_handle_inner).
ancestry_relation(puzzle_room_2_door, puzzle_room_2_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_left).
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_middle).
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_right).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_left).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_middle).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_right).

[04-03-2022_16-19-31] DEBUG :: Logic Program ASH #1 >> Logic program code parsed successfully.

[04-03-2022_16-19-31] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-19-31] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[04-03-2022_16-19-31] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[04-03-2022_16-19-31] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[04-03-2022_16-19-31] DEBUG :: Logic Program ASH #1 >> Logic program instantiated successfully.

[04-03-2022_16-19-31] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,_,ROBOT,A) } :- pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = true.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); minimise_actions = true. [1@2,ROBOT,A,step]
:~ goal_satisfied(AL,F,V,B,step); goal_order(AL,F,V,B,ORDER); final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); max_order(M); order_fgoals = true. [(((M+1)-ORDER)*-step)@3,AL,F,V,B]
max_order(M) :- M = #max { ORDER: goal_order(AL,F,V,B,ORDER) }; final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); order_fgoals = true.
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = heuristic. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = heuristic. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = heuristic. [10@0,false]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = heuristic. [10@0,false]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = optimise. [-1@1,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = optimise. [-1@1,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = optimise. [1@0,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = optimise. [1@0,AL,ROBOT,A,F,V,step]
#program check(step).
:~ gen_search_space_at(step); incomplete_plan((step-1)); enforce_achieve_fgoals((step-1)). [1@1,step]
#external query(step). [false]
#external gen_search_space_at(step). [false]
#false :- step > minimum_search_length_bound; incomplete_plan(step); not gen_search_space_at(step); query(step).
#const minimum_search_length_bound = -1.
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; step >= S; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)) :- last != none.
sgoals_index((first..L)) :- last = none; L = @get_total_last_sgoals(PL); pl(PL).
current_sub_goal((AL+1),ROBOT,A,F,V,first,(start+1)) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); holds((AL+1),F,V,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); not unachieved_sgoals((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); include_sgoals((I_SG+1),step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,true,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,false,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,false,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,true,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 5.
#const reduc = 4.
#const conde = 2.
#const groun = 1.
model_type(5,tasking).
model_type(4,reduced).
model_type(3,condensed).
model_type(2,condensed).
model_type(1,ground).
class(5,robot).
class(5,armed_robot).
class(5,location).
class(5,room).
class(5,object).
class(5,grounded).
class(5,graspable).
class(5,placeable).
class(5,block).
class(5,surface).
class(5,table).
class(5,colour).
class(4,manipulator_arm).
class(4,grasper).
class(3,door).
class(3,handle).
class(3,configurable).
class(3,extensible).
class(2,zone).
class(2,manipulator_limb).
class(2,manipulator_end).
class(2,side).
class(1,cell).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,zone).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,zone,location).
override_class(zone,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL_I,manipulator_end); AL <= AL_I; AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1 < TL; AL_2 < TL; model_type(TL,tasking); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,transporting(ROBO,OBJ),B) :- insta_of(AL_2,armed_robot,ROBO); insta_of(AL_1,graspable,OBJ); OBJ != nothing; AL_1 >= TL; model_type(TL,tasking); sl(AL_2); sl(AL_1); AL_2 >= AL_1; boolean(B).
fluent(AL,defined,tower_base(BASE,TABLE),B) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE,TABLE),B) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,complete_tower(COLOUR,TABLE),B) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); sl(AL); boolean(B).
action(AL,sequential,locomotion,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,manipulation,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,configuration,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < TL; model_type(TL,tasking); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < TL; model_type(TL,tasking); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,collect(OBJ)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); OBJ != nothing; AL >= TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,deposit(OBJ)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); OBJ != nothing; AL >= TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,place_upon(OBJ,SURFACE)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= TL; model_type(TL,tasking); sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); action(AL,_,_,ROBO,actuate(DESC,D)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
effect(AL,ROBO,collect(OBJ),transporting(ROBO,OBJ),true) :- action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),true); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,collect(OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,on(OBJ),nothing); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,deposit(OBJ),transporting(ROBO,OBJ),false) :- action(AL,_,_,ROBO,deposit(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),false); insta_of(RL,armed_robot,ROBO); insta_of(RL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,place_upon(OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,place_upon(OBJ,SURFACE),transporting(ROBO,OBJ),false) :- action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,transporting(ROBO,OBJ),false); OBJ != SURFACE; SURFACE != nothing; insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= TL; model_type(TL,tasking); pl(AL).
#program action_preconditions(t).
precond(AL,ROBO,move(L_2),in(ROBO),L_1,false) :- not is(AL,connected(L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO,collect(OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,collect(OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,collect(OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,collect(OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,surface,SURFACE); insta_of(AL,placeable,OBJ_2); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,deposit(OBJ),transporting(ROBO,OBJ),true,true) :- OBJ != nothing; action(AL,_,_,ROBO,deposit(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),true); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ_1,SURFACE),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,place_upon(OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),OBJ_1); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,surface,SURFACE); insta_of(AL,placeable,OBJ_2); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ_1,OBJ_2),on(OBJ_2),nothing,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,on(OBJ_2),nothing); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,surface,OBJ_2); AL >= TL; model_type(TL,tasking); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
#false :- holds(AL,grasping(DESC_1),OBJ,t); holds(AL,grasping(DESC_2),OBJ,t); fluent(AL,inertial,grasping(DESC_1),OBJ); fluent(AL,inertial,grasping(DESC_2),OBJ); DESC_1 != DESC_2; desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
holds(AL,tower_base(BASE,TABLE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE,TABLE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); insta_of(AL,surface,SURFACE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE,TABLE),true); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE,TABLE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,unordered_tower(BASE,TABLE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); block_number(N_1); BLOCK_2 = (block,N_2); block_number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,complete_tower(COLOUR,TABLE),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; blocks_per_tower(N); holds(AL,unordered_tower(BASE,TABLE),false,t); holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,complete_tower(COLOUR,TABLE),true); fluent(AL,defined,unordered_tower(BASE,TABLE),true); fluent(AL,defined,tower_base(BASE,TABLE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,transporting(ROBO,OBJ),true,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,transporting(ROBO,OBJ),true); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3.
holds(AL_1,transporting(ROBO,OBJ),true,t) :- holds(AL_2,grasping(COMP),OBJ,t); fluent(AL_1,inertial,transporting(ROBO,OBJ),true); fluent(AL_2,inertial,grasping(COMP),OBJ); desce_of(AL_2,ROBO,COMP); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); OBJ != nothing; insta_of(AL_3,grasper,COMP); insta_of(AL_4,robot,ROBO); AL_1 >= TL; model_type(TL,tasking); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,transporting(ROBO,OBJ),false,t) :- 0 = #count { COMP: holds(AL_2,grasping(COMP),OBJ,t), fluent(AL_2,inertial,grasping(COMP),OBJ), desce_of(AL_2,ROBO,COMP), insta_of(AL_3,grasper,COMP), sl(AL_3), AL_3 >= AL_2 }; fluent(AL_1,inertial,transporting(ROBO,OBJ),false); has_desce(AL_2,ROBO,grasper); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); OBJ != nothing; insta_of(AL_4,robot,ROBO); AL_1 >= TL; model_type(TL,tasking); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_4); AL_4 >= AL_1.
#program static_state.
is(1,connected(((starting_room_1,1),5,1),((hallway_1,1),4,0))).
is(1,connected(((store_room_1,1),5,1),((hallway_1,0),0,1))).
is(1,connected(((hallway_1,2),8,1),((puzzle_room_1,0),0,1))).
is(1,connected(((hallway_1,1),4,1),((hallway_2,1),4,0))).
is(1,connected(((store_room_2,1),5,1),((hallway_2,0),0,1))).
is(1,connected(((hallway_2,2),8,1),((puzzle_room_2,0),0,1))).
is(1,connected_by_door(store_room_door,((store_room_1,1),5,1),((hallway_1,0),0,1))).
is(1,connected_by_door(puzzle_room_door,((hallway_1,2),8,1),((puzzle_room_1,0),0,1))).
is(1,connected_by_door(store_room_door,((store_room_2,1),5,1),((hallway_2,0),0,1))).
is(1,connected_by_door(puzzle_room_door,((hallway_2,2),8,1),((puzzle_room_2,0),0,1))).
is(1,in(store_room_1_door_handle_inner,((store_room_1,1),5,1))).
is(1,in(store_room_1_door_handle_outer,((hallway_1,0),0,1))).
is(1,in(puzzle_room_1_door_handle_inner,((puzzle_room_1,0),0,1))).
is(1,in(puzzle_room_1_door_handle_outer,((hallway_1,2),8,1))).
is(1,in(store_room_2_door_handle_inner,((store_room_2,1),5,1))).
is(1,in(store_room_2_door_handle_outer,((hallway_2,0),0,1))).
is(1,in(puzzle_room_2_door_handle_inner,((puzzle_room_2,0),0,1))).
is(1,in(puzzle_room_2_door_handle_outer,((hallway_2,2),8,1))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(AL,colour_of((BLOCK,N),yellow)) :- static(AL,colour_of((BLOCK,N),yellow)); insta_of(AL,block,(BLOCK,N)); N > 6; N <= 9; al(AL).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N > 9; N <= 12; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 12; N <= 15; al(AL).
is(AL,colour_of((BLOCK,N),yellow)) :- static(AL,colour_of((BLOCK,N),yellow)); insta_of(AL,block,(BLOCK,N)); N > 15; N <= 18; al(AL).
is(1,connected(((R,N_1),X_1,Y),((R,N_2),X_2,Y))) :- insta_of(1,cell,((R,N_1),X_1,Y)); insta_of(1,cell,((R,N_2),X_2,Y)); X_2 = (X_1+1).
is(1,connected((A,X,Y_1),(A,X,Y_2))) :- insta_of(1,cell,(A,X,Y_1)); insta_of(1,cell,(A,X,Y_2)); Y_2 = (Y_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),((starting_room_1,0),0,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_1_table),((puzzle_room_1,1),5,0),0).
holds(1,in(puzzle_room_2_table),((puzzle_room_2,1),5,0),0).
holds(1,on((block,1)),puzzle_room_1_table_left,0).
holds(1,on((block,2)),puzzle_room_1_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,on((block,10)),puzzle_room_2_table_left,0).
holds(1,on((block,11)),puzzle_room_2_table_right,0).
holds(1,on((block,12)),(block,10),0).
holds(1,in((block,4)),((store_room_1,0),0,0),0).
holds(1,in((block,5)),((store_room_1,0),0,0),0).
holds(1,in((block,6)),((store_room_1,0),0,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
holds(1,in((block,13)),((store_room_2,0),0,0),0).
holds(1,in((block,14)),((store_room_2,0),0,0),0).
holds(1,in((block,15)),((store_room_2,0),0,0),0).
holds(1,on((block,13)),nothing,0).
holds(1,on((block,14)),nothing,0).
holds(1,on((block,15)),nothing,0).
holds(1,on((block,7)),puzzle_room_1_table_middle,0).
holds(1,in((block,8)),((store_room_1,0),0,1),0).
holds(1,on((block,9)),(block,7),0).
holds(1,on((block,8)),nothing,0).
holds(1,on((block,16)),puzzle_room_2_table_middle,0).
holds(1,in((block,17)),((store_room_2,0),0,1),0).
holds(1,on((block,18)),(block,16),0).
holds(1,on((block,17)),nothing,0).
#program goal_state.
goal_fluent(AL,complete_tower(COLOUR,TABLE)) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,unordered_tower(BASE,TABLE)) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,in_tower(BASE,BLOCK)) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); al(AL).
goal_fluent(AL,tower_base(BASE,TABLE)) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,on(BLOCK)) :- insta_of(AL,block,BLOCK); al(AL).
final_goal(AL,complete_tower(COLOUR,TABLE),true,true) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); al(AL).
final_goal(1,on((block,3)),puzzle_room_1_table_left,true).
final_goal(1,on((block,6)),puzzle_room_1_table_right,true).
final_goal(1,on((block,9)),puzzle_room_1_table_middle,true).
final_goal(1,on((block,12)),puzzle_room_2_table_left,true).
final_goal(1,on((block,15)),puzzle_room_2_table_right,true).
final_goal(1,on((block,18)),puzzle_room_2_table_middle,true).
#program entities.
goal_order(AL,complete_tower(COLOUR,puzzle_room_1_table),true,true,1) :- insta_of(AL,colour,COLOUR); al(AL).
goal_order(AL,complete_tower(COLOUR,puzzle_room_2_table),true,true,2) :- insta_of(AL,colour,COLOUR); al(AL).
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
block_number((1..18)).
blocks_per_tower(3).
entity(block,(block,N)) :- block_number(N).
entity(room,starting_room_1).
entity(room,store_room_1).
entity(room,puzzle_room_1).
entity(room,hallway_1).
entity(room,store_room_2).
entity(room,puzzle_room_2).
entity(room,hallway_2).
n((0..9)).
size(starting_room_1,6,2).
size(store_room_1,6,2).
size(hallway_1,9,2).
size(puzzle_room_1,6,2).
size(store_room_2,6,2).
size(hallway_2,9,2).
size(puzzle_room_2,6,2).
zone_width(3).
entity(zone,(ROOM,N)) :- entity(room,ROOM); size(ROOM,N_MAX,_); N < (N_MAX/W); zone_width(W); n(N).
zone_x((ROOM,N),((N*W)+P)) :- P >= 0; P < W; zone_width(W); entity(zone,(ROOM,N)); n(P); n(N).
entity(cell,((ROOM,N),X,Y)) :- zone_x((ROOM,N),X); entity(room,ROOM); entity(zone,(ROOM,N)); size(ROOM,X_MAX,Y_MAX); X < X_MAX; Y < Y_MAX; n(N); n(X); n(Y).
entity(door,store_room_1_door).
entity(door,puzzle_room_1_door).
entity(door,store_room_2_door).
entity(door,puzzle_room_2_door).
entity(handle,store_room_1_door_handle_inner).
entity(handle,store_room_1_door_handle_outer).
entity(handle,puzzle_room_1_door_handle_inner).
entity(handle,puzzle_room_1_door_handle_outer).
entity(handle,store_room_2_door_handle_inner).
entity(handle,store_room_2_door_handle_outer).
entity(handle,puzzle_room_2_door_handle_inner).
entity(handle,puzzle_room_2_door_handle_outer).
entity(table,puzzle_room_1_table).
entity(table,puzzle_room_2_table).
entity(side,puzzle_room_1_table_left).
entity(side,puzzle_room_1_table_middle).
entity(side,puzzle_room_1_table_right).
entity(side,puzzle_room_2_table_left).
entity(side,puzzle_room_2_table_middle).
entity(side,puzzle_room_2_table_right).
entity(colour,red).
entity(colour,blue).
entity(colour,yellow).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,N)) :- entity(room,ROOM); entity(zone,(ROOM,N)); n(N).
ancestry_relation((ROOM,N),((ROOM,N),X,Y)) :- entity(room,ROOM); entity(zone,(ROOM,N)); entity(cell,((ROOM,N),X,Y)); n(N); n(X); n(Y).
ancestry_relation(store_room_1_door,store_room_1_door_handle_inner).
ancestry_relation(store_room_1_door,store_room_1_door_handle_outer).
ancestry_relation(puzzle_room_1_door,puzzle_room_1_door_handle_inner).
ancestry_relation(puzzle_room_1_door,puzzle_room_1_door_handle_outer).
ancestry_relation(store_room_2_door,store_room_2_door_handle_inner).
ancestry_relation(store_room_2_door,store_room_2_door_handle_outer).
ancestry_relation(puzzle_room_2_door,puzzle_room_2_door_handle_inner).
ancestry_relation(puzzle_room_2_door,puzzle_room_2_door_handle_outer).
ancestry_relation(puzzle_room_1_table,puzzle_room_1_table_left).
ancestry_relation(puzzle_room_1_table,puzzle_room_1_table_middle).
ancestry_relation(puzzle_room_1_table,puzzle_room_1_table_right).
ancestry_relation(puzzle_room_2_table,puzzle_room_2_table_left).
ancestry_relation(puzzle_room_2_table,puzzle_room_2_table_middle).
ancestry_relation(puzzle_room_2_table,puzzle_room_2_table_right)., ASH #1)

[04-03-2022_16-19-31] INFO :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[04-03-2022_16-19-31] INFO :: ASH Planner Main #1 >> Generating initial states...

[04-03-2022_16-19-31] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[04-03-2022_16-19-31] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Initial States')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Parsing raw logic program code:


[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program code parsed successfully.

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated successfully.

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=none']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 443 rules

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.003798500000000038s

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[04-03-2022_16-19-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('entities', []), ('static_state', []), ('initial_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[04-03-2022_16-19-34] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 3.103208s.

[04-03-2022_16-19-34] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[04-03-2022_16-19-35] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.956592s with result Satisfiable.

[04-03-2022_16-19-35] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[04-03-2022_16-19-35] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-19-35] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[04-03-2022_16-19-35] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[04-03-2022_16-19-35] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 3.103208s, Solving = 0.956592s, Total = 4.059800s, Memory = (RSS = 314.582031Mb, VMS = 311.253906Mb)
Final Model :: Total atoms = 69689, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[04-03-2022_16-19-35] INFO :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 3.103208s, Solving = 0.956592s, Total = 4.059800s, Memory = (RSS = 314.582031Mb, VMS = 311.253906Mb)
Final Model :: Total atoms = 69689, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[04-03-2022_16-19-35] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 5            
      ================================================      

holds(5, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(5, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(5, complete_tower(red,puzzle_room_1_table), false, 0)
holds(5, complete_tower(red,puzzle_room_2_table), false, 0)
holds(5, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(5, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(5, in((block,1)), puzzle_room_1, 0)
holds(5, in((block,10)), puzzle_room_2, 0)
holds(5, in((block,11)), puzzle_room_2, 0)
holds(5, in((block,12)), puzzle_room_2, 0)
holds(5, in((block,13)), store_room_2, 0)
holds(5, in((block,14)), store_room_2, 0)
holds(5, in((block,15)), store_room_2, 0)
holds(5, in((block,16)), puzzle_room_2, 0)
holds(5, in((block,17)), store_room_2, 0)
holds(5, in((block,18)), puzzle_room_2, 0)
holds(5, in((block,2)), puzzle_room_1, 0)
holds(5, in((block,3)), puzzle_room_1, 0)
holds(5, in((block,4)), store_room_1, 0)
holds(5, in((block,5)), store_room_1, 0)
holds(5, in((block,6)), store_room_1, 0)
holds(5, in((block,7)), puzzle_room_1, 0)
holds(5, in((block,8)), store_room_1, 0)
holds(5, in((block,9)), puzzle_room_1, 0)
holds(5, in(puzzle_room_1_table), puzzle_room_1, 0)
holds(5, in(puzzle_room_2_table), puzzle_room_2, 0)
holds(5, in(talos), starting_room_1, 0)
holds(5, in_tower((block,1),(block,1)), true, 0)
holds(5, in_tower((block,1),(block,10)), false, 0)
holds(5, in_tower((block,1),(block,11)), false, 0)
holds(5, in_tower((block,1),(block,12)), false, 0)
holds(5, in_tower((block,1),(block,13)), false, 0)
holds(5, in_tower((block,1),(block,14)), false, 0)
holds(5, in_tower((block,1),(block,15)), false, 0)
holds(5, in_tower((block,1),(block,16)), false, 0)
holds(5, in_tower((block,1),(block,17)), false, 0)
holds(5, in_tower((block,1),(block,18)), false, 0)
holds(5, in_tower((block,1),(block,2)), false, 0)
holds(5, in_tower((block,1),(block,3)), true, 0)
holds(5, in_tower((block,1),(block,4)), false, 0)
holds(5, in_tower((block,1),(block,5)), false, 0)
holds(5, in_tower((block,1),(block,6)), false, 0)
holds(5, in_tower((block,1),(block,7)), false, 0)
holds(5, in_tower((block,1),(block,8)), false, 0)
holds(5, in_tower((block,1),(block,9)), false, 0)
holds(5, in_tower((block,10),(block,1)), false, 0)
holds(5, in_tower((block,10),(block,10)), true, 0)
holds(5, in_tower((block,10),(block,11)), false, 0)
holds(5, in_tower((block,10),(block,12)), true, 0)
holds(5, in_tower((block,10),(block,13)), false, 0)
holds(5, in_tower((block,10),(block,14)), false, 0)
holds(5, in_tower((block,10),(block,15)), false, 0)
holds(5, in_tower((block,10),(block,16)), false, 0)
holds(5, in_tower((block,10),(block,17)), false, 0)
holds(5, in_tower((block,10),(block,18)), false, 0)
holds(5, in_tower((block,10),(block,2)), false, 0)
holds(5, in_tower((block,10),(block,3)), false, 0)
holds(5, in_tower((block,10),(block,4)), false, 0)
holds(5, in_tower((block,10),(block,5)), false, 0)
holds(5, in_tower((block,10),(block,6)), false, 0)
holds(5, in_tower((block,10),(block,7)), false, 0)
holds(5, in_tower((block,10),(block,8)), false, 0)
holds(5, in_tower((block,10),(block,9)), false, 0)
holds(5, in_tower((block,11),(block,1)), false, 0)
holds(5, in_tower((block,11),(block,10)), false, 0)
holds(5, in_tower((block,11),(block,11)), true, 0)
holds(5, in_tower((block,11),(block,12)), false, 0)
holds(5, in_tower((block,11),(block,13)), false, 0)
holds(5, in_tower((block,11),(block,14)), false, 0)
holds(5, in_tower((block,11),(block,15)), false, 0)
holds(5, in_tower((block,11),(block,16)), false, 0)
holds(5, in_tower((block,11),(block,17)), false, 0)
holds(5, in_tower((block,11),(block,18)), false, 0)
holds(5, in_tower((block,11),(block,2)), false, 0)
holds(5, in_tower((block,11),(block,3)), false, 0)
holds(5, in_tower((block,11),(block,4)), false, 0)
holds(5, in_tower((block,11),(block,5)), false, 0)
holds(5, in_tower((block,11),(block,6)), false, 0)
holds(5, in_tower((block,11),(block,7)), false, 0)
holds(5, in_tower((block,11),(block,8)), false, 0)
holds(5, in_tower((block,11),(block,9)), false, 0)
holds(5, in_tower((block,12),(block,1)), false, 0)
holds(5, in_tower((block,12),(block,10)), false, 0)
holds(5, in_tower((block,12),(block,11)), false, 0)
holds(5, in_tower((block,12),(block,12)), false, 0)
holds(5, in_tower((block,12),(block,13)), false, 0)
holds(5, in_tower((block,12),(block,14)), false, 0)
holds(5, in_tower((block,12),(block,15)), false, 0)
holds(5, in_tower((block,12),(block,16)), false, 0)
holds(5, in_tower((block,12),(block,17)), false, 0)
holds(5, in_tower((block,12),(block,18)), false, 0)
holds(5, in_tower((block,12),(block,2)), false, 0)
holds(5, in_tower((block,12),(block,3)), false, 0)
holds(5, in_tower((block,12),(block,4)), false, 0)
holds(5, in_tower((block,12),(block,5)), false, 0)
holds(5, in_tower((block,12),(block,6)), false, 0)
holds(5, in_tower((block,12),(block,7)), false, 0)
holds(5, in_tower((block,12),(block,8)), false, 0)
holds(5, in_tower((block,12),(block,9)), false, 0)
holds(5, in_tower((block,13),(block,1)), false, 0)
holds(5, in_tower((block,13),(block,10)), false, 0)
holds(5, in_tower((block,13),(block,11)), false, 0)
holds(5, in_tower((block,13),(block,12)), false, 0)
holds(5, in_tower((block,13),(block,13)), false, 0)
holds(5, in_tower((block,13),(block,14)), false, 0)
holds(5, in_tower((block,13),(block,15)), false, 0)
holds(5, in_tower((block,13),(block,16)), false, 0)
holds(5, in_tower((block,13),(block,17)), false, 0)
holds(5, in_tower((block,13),(block,18)), false, 0)
holds(5, in_tower((block,13),(block,2)), false, 0)
holds(5, in_tower((block,13),(block,3)), false, 0)
holds(5, in_tower((block,13),(block,4)), false, 0)
holds(5, in_tower((block,13),(block,5)), false, 0)
holds(5, in_tower((block,13),(block,6)), false, 0)
holds(5, in_tower((block,13),(block,7)), false, 0)
holds(5, in_tower((block,13),(block,8)), false, 0)
holds(5, in_tower((block,13),(block,9)), false, 0)
holds(5, in_tower((block,14),(block,1)), false, 0)
holds(5, in_tower((block,14),(block,10)), false, 0)
holds(5, in_tower((block,14),(block,11)), false, 0)
holds(5, in_tower((block,14),(block,12)), false, 0)
holds(5, in_tower((block,14),(block,13)), false, 0)
holds(5, in_tower((block,14),(block,14)), false, 0)
holds(5, in_tower((block,14),(block,15)), false, 0)
holds(5, in_tower((block,14),(block,16)), false, 0)
holds(5, in_tower((block,14),(block,17)), false, 0)
holds(5, in_tower((block,14),(block,18)), false, 0)
holds(5, in_tower((block,14),(block,2)), false, 0)
holds(5, in_tower((block,14),(block,3)), false, 0)
holds(5, in_tower((block,14),(block,4)), false, 0)
holds(5, in_tower((block,14),(block,5)), false, 0)
holds(5, in_tower((block,14),(block,6)), false, 0)
holds(5, in_tower((block,14),(block,7)), false, 0)
holds(5, in_tower((block,14),(block,8)), false, 0)
holds(5, in_tower((block,14),(block,9)), false, 0)
holds(5, in_tower((block,15),(block,1)), false, 0)
holds(5, in_tower((block,15),(block,10)), false, 0)
holds(5, in_tower((block,15),(block,11)), false, 0)
holds(5, in_tower((block,15),(block,12)), false, 0)
holds(5, in_tower((block,15),(block,13)), false, 0)
holds(5, in_tower((block,15),(block,14)), false, 0)
holds(5, in_tower((block,15),(block,15)), false, 0)
holds(5, in_tower((block,15),(block,16)), false, 0)
holds(5, in_tower((block,15),(block,17)), false, 0)
holds(5, in_tower((block,15),(block,18)), false, 0)
holds(5, in_tower((block,15),(block,2)), false, 0)
holds(5, in_tower((block,15),(block,3)), false, 0)
holds(5, in_tower((block,15),(block,4)), false, 0)
holds(5, in_tower((block,15),(block,5)), false, 0)
holds(5, in_tower((block,15),(block,6)), false, 0)
holds(5, in_tower((block,15),(block,7)), false, 0)
holds(5, in_tower((block,15),(block,8)), false, 0)
holds(5, in_tower((block,15),(block,9)), false, 0)
holds(5, in_tower((block,16),(block,1)), false, 0)
holds(5, in_tower((block,16),(block,10)), false, 0)
holds(5, in_tower((block,16),(block,11)), false, 0)
holds(5, in_tower((block,16),(block,12)), false, 0)
holds(5, in_tower((block,16),(block,13)), false, 0)
holds(5, in_tower((block,16),(block,14)), false, 0)
holds(5, in_tower((block,16),(block,15)), false, 0)
holds(5, in_tower((block,16),(block,16)), true, 0)
holds(5, in_tower((block,16),(block,17)), false, 0)
holds(5, in_tower((block,16),(block,18)), true, 0)
holds(5, in_tower((block,16),(block,2)), false, 0)
holds(5, in_tower((block,16),(block,3)), false, 0)
holds(5, in_tower((block,16),(block,4)), false, 0)
holds(5, in_tower((block,16),(block,5)), false, 0)
holds(5, in_tower((block,16),(block,6)), false, 0)
holds(5, in_tower((block,16),(block,7)), false, 0)
holds(5, in_tower((block,16),(block,8)), false, 0)
holds(5, in_tower((block,16),(block,9)), false, 0)
holds(5, in_tower((block,17),(block,1)), false, 0)
holds(5, in_tower((block,17),(block,10)), false, 0)
holds(5, in_tower((block,17),(block,11)), false, 0)
holds(5, in_tower((block,17),(block,12)), false, 0)
holds(5, in_tower((block,17),(block,13)), false, 0)
holds(5, in_tower((block,17),(block,14)), false, 0)
holds(5, in_tower((block,17),(block,15)), false, 0)
holds(5, in_tower((block,17),(block,16)), false, 0)
holds(5, in_tower((block,17),(block,17)), false, 0)
holds(5, in_tower((block,17),(block,18)), false, 0)
holds(5, in_tower((block,17),(block,2)), false, 0)
holds(5, in_tower((block,17),(block,3)), false, 0)
holds(5, in_tower((block,17),(block,4)), false, 0)
holds(5, in_tower((block,17),(block,5)), false, 0)
holds(5, in_tower((block,17),(block,6)), false, 0)
holds(5, in_tower((block,17),(block,7)), false, 0)
holds(5, in_tower((block,17),(block,8)), false, 0)
holds(5, in_tower((block,17),(block,9)), false, 0)
holds(5, in_tower((block,18),(block,1)), false, 0)
holds(5, in_tower((block,18),(block,10)), false, 0)
holds(5, in_tower((block,18),(block,11)), false, 0)
holds(5, in_tower((block,18),(block,12)), false, 0)
holds(5, in_tower((block,18),(block,13)), false, 0)
holds(5, in_tower((block,18),(block,14)), false, 0)
holds(5, in_tower((block,18),(block,15)), false, 0)
holds(5, in_tower((block,18),(block,16)), false, 0)
holds(5, in_tower((block,18),(block,17)), false, 0)
holds(5, in_tower((block,18),(block,18)), false, 0)
holds(5, in_tower((block,18),(block,2)), false, 0)
holds(5, in_tower((block,18),(block,3)), false, 0)
holds(5, in_tower((block,18),(block,4)), false, 0)
holds(5, in_tower((block,18),(block,5)), false, 0)
holds(5, in_tower((block,18),(block,6)), false, 0)
holds(5, in_tower((block,18),(block,7)), false, 0)
holds(5, in_tower((block,18),(block,8)), false, 0)
holds(5, in_tower((block,18),(block,9)), false, 0)
holds(5, in_tower((block,2),(block,1)), false, 0)
holds(5, in_tower((block,2),(block,10)), false, 0)
holds(5, in_tower((block,2),(block,11)), false, 0)
holds(5, in_tower((block,2),(block,12)), false, 0)
holds(5, in_tower((block,2),(block,13)), false, 0)
holds(5, in_tower((block,2),(block,14)), false, 0)
holds(5, in_tower((block,2),(block,15)), false, 0)
holds(5, in_tower((block,2),(block,16)), false, 0)
holds(5, in_tower((block,2),(block,17)), false, 0)
holds(5, in_tower((block,2),(block,18)), false, 0)
holds(5, in_tower((block,2),(block,2)), true, 0)
holds(5, in_tower((block,2),(block,3)), false, 0)
holds(5, in_tower((block,2),(block,4)), false, 0)
holds(5, in_tower((block,2),(block,5)), false, 0)
holds(5, in_tower((block,2),(block,6)), false, 0)
holds(5, in_tower((block,2),(block,7)), false, 0)
holds(5, in_tower((block,2),(block,8)), false, 0)
holds(5, in_tower((block,2),(block,9)), false, 0)
holds(5, in_tower((block,3),(block,1)), false, 0)
holds(5, in_tower((block,3),(block,10)), false, 0)
holds(5, in_tower((block,3),(block,11)), false, 0)
holds(5, in_tower((block,3),(block,12)), false, 0)
holds(5, in_tower((block,3),(block,13)), false, 0)
holds(5, in_tower((block,3),(block,14)), false, 0)
holds(5, in_tower((block,3),(block,15)), false, 0)
holds(5, in_tower((block,3),(block,16)), false, 0)
holds(5, in_tower((block,3),(block,17)), false, 0)
holds(5, in_tower((block,3),(block,18)), false, 0)
holds(5, in_tower((block,3),(block,2)), false, 0)
holds(5, in_tower((block,3),(block,3)), false, 0)
holds(5, in_tower((block,3),(block,4)), false, 0)
holds(5, in_tower((block,3),(block,5)), false, 0)
holds(5, in_tower((block,3),(block,6)), false, 0)
holds(5, in_tower((block,3),(block,7)), false, 0)
holds(5, in_tower((block,3),(block,8)), false, 0)
holds(5, in_tower((block,3),(block,9)), false, 0)
holds(5, in_tower((block,4),(block,1)), false, 0)
holds(5, in_tower((block,4),(block,10)), false, 0)
holds(5, in_tower((block,4),(block,11)), false, 0)
holds(5, in_tower((block,4),(block,12)), false, 0)
holds(5, in_tower((block,4),(block,13)), false, 0)
holds(5, in_tower((block,4),(block,14)), false, 0)
holds(5, in_tower((block,4),(block,15)), false, 0)
holds(5, in_tower((block,4),(block,16)), false, 0)
holds(5, in_tower((block,4),(block,17)), false, 0)
holds(5, in_tower((block,4),(block,18)), false, 0)
holds(5, in_tower((block,4),(block,2)), false, 0)
holds(5, in_tower((block,4),(block,3)), false, 0)
holds(5, in_tower((block,4),(block,4)), false, 0)
holds(5, in_tower((block,4),(block,5)), false, 0)
holds(5, in_tower((block,4),(block,6)), false, 0)
holds(5, in_tower((block,4),(block,7)), false, 0)
holds(5, in_tower((block,4),(block,8)), false, 0)
holds(5, in_tower((block,4),(block,9)), false, 0)
holds(5, in_tower((block,5),(block,1)), false, 0)
holds(5, in_tower((block,5),(block,10)), false, 0)
holds(5, in_tower((block,5),(block,11)), false, 0)
holds(5, in_tower((block,5),(block,12)), false, 0)
holds(5, in_tower((block,5),(block,13)), false, 0)
holds(5, in_tower((block,5),(block,14)), false, 0)
holds(5, in_tower((block,5),(block,15)), false, 0)
holds(5, in_tower((block,5),(block,16)), false, 0)
holds(5, in_tower((block,5),(block,17)), false, 0)
holds(5, in_tower((block,5),(block,18)), false, 0)
holds(5, in_tower((block,5),(block,2)), false, 0)
holds(5, in_tower((block,5),(block,3)), false, 0)
holds(5, in_tower((block,5),(block,4)), false, 0)
holds(5, in_tower((block,5),(block,5)), false, 0)
holds(5, in_tower((block,5),(block,6)), false, 0)
holds(5, in_tower((block,5),(block,7)), false, 0)
holds(5, in_tower((block,5),(block,8)), false, 0)
holds(5, in_tower((block,5),(block,9)), false, 0)
holds(5, in_tower((block,6),(block,1)), false, 0)
holds(5, in_tower((block,6),(block,10)), false, 0)
holds(5, in_tower((block,6),(block,11)), false, 0)
holds(5, in_tower((block,6),(block,12)), false, 0)
holds(5, in_tower((block,6),(block,13)), false, 0)
holds(5, in_tower((block,6),(block,14)), false, 0)
holds(5, in_tower((block,6),(block,15)), false, 0)
holds(5, in_tower((block,6),(block,16)), false, 0)
holds(5, in_tower((block,6),(block,17)), false, 0)
holds(5, in_tower((block,6),(block,18)), false, 0)
holds(5, in_tower((block,6),(block,2)), false, 0)
holds(5, in_tower((block,6),(block,3)), false, 0)
holds(5, in_tower((block,6),(block,4)), false, 0)
holds(5, in_tower((block,6),(block,5)), false, 0)
holds(5, in_tower((block,6),(block,6)), false, 0)
holds(5, in_tower((block,6),(block,7)), false, 0)
holds(5, in_tower((block,6),(block,8)), false, 0)
holds(5, in_tower((block,6),(block,9)), false, 0)
holds(5, in_tower((block,7),(block,1)), false, 0)
holds(5, in_tower((block,7),(block,10)), false, 0)
holds(5, in_tower((block,7),(block,11)), false, 0)
holds(5, in_tower((block,7),(block,12)), false, 0)
holds(5, in_tower((block,7),(block,13)), false, 0)
holds(5, in_tower((block,7),(block,14)), false, 0)
holds(5, in_tower((block,7),(block,15)), false, 0)
holds(5, in_tower((block,7),(block,16)), false, 0)
holds(5, in_tower((block,7),(block,17)), false, 0)
holds(5, in_tower((block,7),(block,18)), false, 0)
holds(5, in_tower((block,7),(block,2)), false, 0)
holds(5, in_tower((block,7),(block,3)), false, 0)
holds(5, in_tower((block,7),(block,4)), false, 0)
holds(5, in_tower((block,7),(block,5)), false, 0)
holds(5, in_tower((block,7),(block,6)), false, 0)
holds(5, in_tower((block,7),(block,7)), true, 0)
holds(5, in_tower((block,7),(block,8)), false, 0)
holds(5, in_tower((block,7),(block,9)), true, 0)
holds(5, in_tower((block,8),(block,1)), false, 0)
holds(5, in_tower((block,8),(block,10)), false, 0)
holds(5, in_tower((block,8),(block,11)), false, 0)
holds(5, in_tower((block,8),(block,12)), false, 0)
holds(5, in_tower((block,8),(block,13)), false, 0)
holds(5, in_tower((block,8),(block,14)), false, 0)
holds(5, in_tower((block,8),(block,15)), false, 0)
holds(5, in_tower((block,8),(block,16)), false, 0)
holds(5, in_tower((block,8),(block,17)), false, 0)
holds(5, in_tower((block,8),(block,18)), false, 0)
holds(5, in_tower((block,8),(block,2)), false, 0)
holds(5, in_tower((block,8),(block,3)), false, 0)
holds(5, in_tower((block,8),(block,4)), false, 0)
holds(5, in_tower((block,8),(block,5)), false, 0)
holds(5, in_tower((block,8),(block,6)), false, 0)
holds(5, in_tower((block,8),(block,7)), false, 0)
holds(5, in_tower((block,8),(block,8)), false, 0)
holds(5, in_tower((block,8),(block,9)), false, 0)
holds(5, in_tower((block,9),(block,1)), false, 0)
holds(5, in_tower((block,9),(block,10)), false, 0)
holds(5, in_tower((block,9),(block,11)), false, 0)
holds(5, in_tower((block,9),(block,12)), false, 0)
holds(5, in_tower((block,9),(block,13)), false, 0)
holds(5, in_tower((block,9),(block,14)), false, 0)
holds(5, in_tower((block,9),(block,15)), false, 0)
holds(5, in_tower((block,9),(block,16)), false, 0)
holds(5, in_tower((block,9),(block,17)), false, 0)
holds(5, in_tower((block,9),(block,18)), false, 0)
holds(5, in_tower((block,9),(block,2)), false, 0)
holds(5, in_tower((block,9),(block,3)), false, 0)
holds(5, in_tower((block,9),(block,4)), false, 0)
holds(5, in_tower((block,9),(block,5)), false, 0)
holds(5, in_tower((block,9),(block,6)), false, 0)
holds(5, in_tower((block,9),(block,7)), false, 0)
holds(5, in_tower((block,9),(block,8)), false, 0)
holds(5, in_tower((block,9),(block,9)), false, 0)
holds(5, on((block,1)), puzzle_room_1_table, 0)
holds(5, on((block,10)), puzzle_room_2_table, 0)
holds(5, on((block,11)), puzzle_room_2_table, 0)
holds(5, on((block,12)), (block,10), 0)
holds(5, on((block,13)), nothing, 0)
holds(5, on((block,14)), nothing, 0)
holds(5, on((block,15)), nothing, 0)
holds(5, on((block,16)), puzzle_room_2_table, 0)
holds(5, on((block,17)), nothing, 0)
holds(5, on((block,18)), (block,16), 0)
holds(5, on((block,2)), puzzle_room_1_table, 0)
holds(5, on((block,3)), (block,1), 0)
holds(5, on((block,4)), nothing, 0)
holds(5, on((block,5)), nothing, 0)
holds(5, on((block,6)), nothing, 0)
holds(5, on((block,7)), puzzle_room_1_table, 0)
holds(5, on((block,8)), nothing, 0)
holds(5, on((block,9)), (block,7), 0)
holds(5, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(5, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(5, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(5, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(5, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(5, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(5, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(5, transporting(talos,(block,1)), false, 0)
holds(5, transporting(talos,(block,10)), false, 0)
holds(5, transporting(talos,(block,11)), false, 0)
holds(5, transporting(talos,(block,12)), false, 0)
holds(5, transporting(talos,(block,13)), false, 0)
holds(5, transporting(talos,(block,14)), false, 0)
holds(5, transporting(talos,(block,15)), false, 0)
holds(5, transporting(talos,(block,16)), false, 0)
holds(5, transporting(talos,(block,17)), false, 0)
holds(5, transporting(talos,(block,18)), false, 0)
holds(5, transporting(talos,(block,2)), false, 0)
holds(5, transporting(talos,(block,3)), false, 0)
holds(5, transporting(talos,(block,4)), false, 0)
holds(5, transporting(talos,(block,5)), false, 0)
holds(5, transporting(talos,(block,6)), false, 0)
holds(5, transporting(talos,(block,7)), false, 0)
holds(5, transporting(talos,(block,8)), false, 0)
holds(5, transporting(talos,(block,9)), false, 0)
holds(5, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(5, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(5, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(5, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(5, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[04-03-2022_16-19-35] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 4            
      ================================================      

holds(4, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(4, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(4, complete_tower(red,puzzle_room_1_table), false, 0)
holds(4, complete_tower(red,puzzle_room_2_table), false, 0)
holds(4, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(4, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(4, grasping(manipulator_arm_1), nothing, 0)
holds(4, grasping(manipulator_arm_2), nothing, 0)
holds(4, in((block,1)), puzzle_room_1, 0)
holds(4, in((block,10)), puzzle_room_2, 0)
holds(4, in((block,11)), puzzle_room_2, 0)
holds(4, in((block,12)), puzzle_room_2, 0)
holds(4, in((block,13)), store_room_2, 0)
holds(4, in((block,14)), store_room_2, 0)
holds(4, in((block,15)), store_room_2, 0)
holds(4, in((block,16)), puzzle_room_2, 0)
holds(4, in((block,17)), store_room_2, 0)
holds(4, in((block,18)), puzzle_room_2, 0)
holds(4, in((block,2)), puzzle_room_1, 0)
holds(4, in((block,3)), puzzle_room_1, 0)
holds(4, in((block,4)), store_room_1, 0)
holds(4, in((block,5)), store_room_1, 0)
holds(4, in((block,6)), store_room_1, 0)
holds(4, in((block,7)), puzzle_room_1, 0)
holds(4, in((block,8)), store_room_1, 0)
holds(4, in((block,9)), puzzle_room_1, 0)
holds(4, in(manipulator_arm_1), starting_room_1, 0)
holds(4, in(manipulator_arm_2), starting_room_1, 0)
holds(4, in(puzzle_room_1_table), puzzle_room_1, 0)
holds(4, in(puzzle_room_2_table), puzzle_room_2, 0)
holds(4, in(talos), starting_room_1, 0)
holds(4, in_tower((block,1),(block,1)), true, 0)
holds(4, in_tower((block,1),(block,10)), false, 0)
holds(4, in_tower((block,1),(block,11)), false, 0)
holds(4, in_tower((block,1),(block,12)), false, 0)
holds(4, in_tower((block,1),(block,13)), false, 0)
holds(4, in_tower((block,1),(block,14)), false, 0)
holds(4, in_tower((block,1),(block,15)), false, 0)
holds(4, in_tower((block,1),(block,16)), false, 0)
holds(4, in_tower((block,1),(block,17)), false, 0)
holds(4, in_tower((block,1),(block,18)), false, 0)
holds(4, in_tower((block,1),(block,2)), false, 0)
holds(4, in_tower((block,1),(block,3)), true, 0)
holds(4, in_tower((block,1),(block,4)), false, 0)
holds(4, in_tower((block,1),(block,5)), false, 0)
holds(4, in_tower((block,1),(block,6)), false, 0)
holds(4, in_tower((block,1),(block,7)), false, 0)
holds(4, in_tower((block,1),(block,8)), false, 0)
holds(4, in_tower((block,1),(block,9)), false, 0)
holds(4, in_tower((block,10),(block,1)), false, 0)
holds(4, in_tower((block,10),(block,10)), true, 0)
holds(4, in_tower((block,10),(block,11)), false, 0)
holds(4, in_tower((block,10),(block,12)), true, 0)
holds(4, in_tower((block,10),(block,13)), false, 0)
holds(4, in_tower((block,10),(block,14)), false, 0)
holds(4, in_tower((block,10),(block,15)), false, 0)
holds(4, in_tower((block,10),(block,16)), false, 0)
holds(4, in_tower((block,10),(block,17)), false, 0)
holds(4, in_tower((block,10),(block,18)), false, 0)
holds(4, in_tower((block,10),(block,2)), false, 0)
holds(4, in_tower((block,10),(block,3)), false, 0)
holds(4, in_tower((block,10),(block,4)), false, 0)
holds(4, in_tower((block,10),(block,5)), false, 0)
holds(4, in_tower((block,10),(block,6)), false, 0)
holds(4, in_tower((block,10),(block,7)), false, 0)
holds(4, in_tower((block,10),(block,8)), false, 0)
holds(4, in_tower((block,10),(block,9)), false, 0)
holds(4, in_tower((block,11),(block,1)), false, 0)
holds(4, in_tower((block,11),(block,10)), false, 0)
holds(4, in_tower((block,11),(block,11)), true, 0)
holds(4, in_tower((block,11),(block,12)), false, 0)
holds(4, in_tower((block,11),(block,13)), false, 0)
holds(4, in_tower((block,11),(block,14)), false, 0)
holds(4, in_tower((block,11),(block,15)), false, 0)
holds(4, in_tower((block,11),(block,16)), false, 0)
holds(4, in_tower((block,11),(block,17)), false, 0)
holds(4, in_tower((block,11),(block,18)), false, 0)
holds(4, in_tower((block,11),(block,2)), false, 0)
holds(4, in_tower((block,11),(block,3)), false, 0)
holds(4, in_tower((block,11),(block,4)), false, 0)
holds(4, in_tower((block,11),(block,5)), false, 0)
holds(4, in_tower((block,11),(block,6)), false, 0)
holds(4, in_tower((block,11),(block,7)), false, 0)
holds(4, in_tower((block,11),(block,8)), false, 0)
holds(4, in_tower((block,11),(block,9)), false, 0)
holds(4, in_tower((block,12),(block,1)), false, 0)
holds(4, in_tower((block,12),(block,10)), false, 0)
holds(4, in_tower((block,12),(block,11)), false, 0)
holds(4, in_tower((block,12),(block,12)), false, 0)
holds(4, in_tower((block,12),(block,13)), false, 0)
holds(4, in_tower((block,12),(block,14)), false, 0)
holds(4, in_tower((block,12),(block,15)), false, 0)
holds(4, in_tower((block,12),(block,16)), false, 0)
holds(4, in_tower((block,12),(block,17)), false, 0)
holds(4, in_tower((block,12),(block,18)), false, 0)
holds(4, in_tower((block,12),(block,2)), false, 0)
holds(4, in_tower((block,12),(block,3)), false, 0)
holds(4, in_tower((block,12),(block,4)), false, 0)
holds(4, in_tower((block,12),(block,5)), false, 0)
holds(4, in_tower((block,12),(block,6)), false, 0)
holds(4, in_tower((block,12),(block,7)), false, 0)
holds(4, in_tower((block,12),(block,8)), false, 0)
holds(4, in_tower((block,12),(block,9)), false, 0)
holds(4, in_tower((block,13),(block,1)), false, 0)
holds(4, in_tower((block,13),(block,10)), false, 0)
holds(4, in_tower((block,13),(block,11)), false, 0)
holds(4, in_tower((block,13),(block,12)), false, 0)
holds(4, in_tower((block,13),(block,13)), false, 0)
holds(4, in_tower((block,13),(block,14)), false, 0)
holds(4, in_tower((block,13),(block,15)), false, 0)
holds(4, in_tower((block,13),(block,16)), false, 0)
holds(4, in_tower((block,13),(block,17)), false, 0)
holds(4, in_tower((block,13),(block,18)), false, 0)
holds(4, in_tower((block,13),(block,2)), false, 0)
holds(4, in_tower((block,13),(block,3)), false, 0)
holds(4, in_tower((block,13),(block,4)), false, 0)
holds(4, in_tower((block,13),(block,5)), false, 0)
holds(4, in_tower((block,13),(block,6)), false, 0)
holds(4, in_tower((block,13),(block,7)), false, 0)
holds(4, in_tower((block,13),(block,8)), false, 0)
holds(4, in_tower((block,13),(block,9)), false, 0)
holds(4, in_tower((block,14),(block,1)), false, 0)
holds(4, in_tower((block,14),(block,10)), false, 0)
holds(4, in_tower((block,14),(block,11)), false, 0)
holds(4, in_tower((block,14),(block,12)), false, 0)
holds(4, in_tower((block,14),(block,13)), false, 0)
holds(4, in_tower((block,14),(block,14)), false, 0)
holds(4, in_tower((block,14),(block,15)), false, 0)
holds(4, in_tower((block,14),(block,16)), false, 0)
holds(4, in_tower((block,14),(block,17)), false, 0)
holds(4, in_tower((block,14),(block,18)), false, 0)
holds(4, in_tower((block,14),(block,2)), false, 0)
holds(4, in_tower((block,14),(block,3)), false, 0)
holds(4, in_tower((block,14),(block,4)), false, 0)
holds(4, in_tower((block,14),(block,5)), false, 0)
holds(4, in_tower((block,14),(block,6)), false, 0)
holds(4, in_tower((block,14),(block,7)), false, 0)
holds(4, in_tower((block,14),(block,8)), false, 0)
holds(4, in_tower((block,14),(block,9)), false, 0)
holds(4, in_tower((block,15),(block,1)), false, 0)
holds(4, in_tower((block,15),(block,10)), false, 0)
holds(4, in_tower((block,15),(block,11)), false, 0)
holds(4, in_tower((block,15),(block,12)), false, 0)
holds(4, in_tower((block,15),(block,13)), false, 0)
holds(4, in_tower((block,15),(block,14)), false, 0)
holds(4, in_tower((block,15),(block,15)), false, 0)
holds(4, in_tower((block,15),(block,16)), false, 0)
holds(4, in_tower((block,15),(block,17)), false, 0)
holds(4, in_tower((block,15),(block,18)), false, 0)
holds(4, in_tower((block,15),(block,2)), false, 0)
holds(4, in_tower((block,15),(block,3)), false, 0)
holds(4, in_tower((block,15),(block,4)), false, 0)
holds(4, in_tower((block,15),(block,5)), false, 0)
holds(4, in_tower((block,15),(block,6)), false, 0)
holds(4, in_tower((block,15),(block,7)), false, 0)
holds(4, in_tower((block,15),(block,8)), false, 0)
holds(4, in_tower((block,15),(block,9)), false, 0)
holds(4, in_tower((block,16),(block,1)), false, 0)
holds(4, in_tower((block,16),(block,10)), false, 0)
holds(4, in_tower((block,16),(block,11)), false, 0)
holds(4, in_tower((block,16),(block,12)), false, 0)
holds(4, in_tower((block,16),(block,13)), false, 0)
holds(4, in_tower((block,16),(block,14)), false, 0)
holds(4, in_tower((block,16),(block,15)), false, 0)
holds(4, in_tower((block,16),(block,16)), true, 0)
holds(4, in_tower((block,16),(block,17)), false, 0)
holds(4, in_tower((block,16),(block,18)), true, 0)
holds(4, in_tower((block,16),(block,2)), false, 0)
holds(4, in_tower((block,16),(block,3)), false, 0)
holds(4, in_tower((block,16),(block,4)), false, 0)
holds(4, in_tower((block,16),(block,5)), false, 0)
holds(4, in_tower((block,16),(block,6)), false, 0)
holds(4, in_tower((block,16),(block,7)), false, 0)
holds(4, in_tower((block,16),(block,8)), false, 0)
holds(4, in_tower((block,16),(block,9)), false, 0)
holds(4, in_tower((block,17),(block,1)), false, 0)
holds(4, in_tower((block,17),(block,10)), false, 0)
holds(4, in_tower((block,17),(block,11)), false, 0)
holds(4, in_tower((block,17),(block,12)), false, 0)
holds(4, in_tower((block,17),(block,13)), false, 0)
holds(4, in_tower((block,17),(block,14)), false, 0)
holds(4, in_tower((block,17),(block,15)), false, 0)
holds(4, in_tower((block,17),(block,16)), false, 0)
holds(4, in_tower((block,17),(block,17)), false, 0)
holds(4, in_tower((block,17),(block,18)), false, 0)
holds(4, in_tower((block,17),(block,2)), false, 0)
holds(4, in_tower((block,17),(block,3)), false, 0)
holds(4, in_tower((block,17),(block,4)), false, 0)
holds(4, in_tower((block,17),(block,5)), false, 0)
holds(4, in_tower((block,17),(block,6)), false, 0)
holds(4, in_tower((block,17),(block,7)), false, 0)
holds(4, in_tower((block,17),(block,8)), false, 0)
holds(4, in_tower((block,17),(block,9)), false, 0)
holds(4, in_tower((block,18),(block,1)), false, 0)
holds(4, in_tower((block,18),(block,10)), false, 0)
holds(4, in_tower((block,18),(block,11)), false, 0)
holds(4, in_tower((block,18),(block,12)), false, 0)
holds(4, in_tower((block,18),(block,13)), false, 0)
holds(4, in_tower((block,18),(block,14)), false, 0)
holds(4, in_tower((block,18),(block,15)), false, 0)
holds(4, in_tower((block,18),(block,16)), false, 0)
holds(4, in_tower((block,18),(block,17)), false, 0)
holds(4, in_tower((block,18),(block,18)), false, 0)
holds(4, in_tower((block,18),(block,2)), false, 0)
holds(4, in_tower((block,18),(block,3)), false, 0)
holds(4, in_tower((block,18),(block,4)), false, 0)
holds(4, in_tower((block,18),(block,5)), false, 0)
holds(4, in_tower((block,18),(block,6)), false, 0)
holds(4, in_tower((block,18),(block,7)), false, 0)
holds(4, in_tower((block,18),(block,8)), false, 0)
holds(4, in_tower((block,18),(block,9)), false, 0)
holds(4, in_tower((block,2),(block,1)), false, 0)
holds(4, in_tower((block,2),(block,10)), false, 0)
holds(4, in_tower((block,2),(block,11)), false, 0)
holds(4, in_tower((block,2),(block,12)), false, 0)
holds(4, in_tower((block,2),(block,13)), false, 0)
holds(4, in_tower((block,2),(block,14)), false, 0)
holds(4, in_tower((block,2),(block,15)), false, 0)
holds(4, in_tower((block,2),(block,16)), false, 0)
holds(4, in_tower((block,2),(block,17)), false, 0)
holds(4, in_tower((block,2),(block,18)), false, 0)
holds(4, in_tower((block,2),(block,2)), true, 0)
holds(4, in_tower((block,2),(block,3)), false, 0)
holds(4, in_tower((block,2),(block,4)), false, 0)
holds(4, in_tower((block,2),(block,5)), false, 0)
holds(4, in_tower((block,2),(block,6)), false, 0)
holds(4, in_tower((block,2),(block,7)), false, 0)
holds(4, in_tower((block,2),(block,8)), false, 0)
holds(4, in_tower((block,2),(block,9)), false, 0)
holds(4, in_tower((block,3),(block,1)), false, 0)
holds(4, in_tower((block,3),(block,10)), false, 0)
holds(4, in_tower((block,3),(block,11)), false, 0)
holds(4, in_tower((block,3),(block,12)), false, 0)
holds(4, in_tower((block,3),(block,13)), false, 0)
holds(4, in_tower((block,3),(block,14)), false, 0)
holds(4, in_tower((block,3),(block,15)), false, 0)
holds(4, in_tower((block,3),(block,16)), false, 0)
holds(4, in_tower((block,3),(block,17)), false, 0)
holds(4, in_tower((block,3),(block,18)), false, 0)
holds(4, in_tower((block,3),(block,2)), false, 0)
holds(4, in_tower((block,3),(block,3)), false, 0)
holds(4, in_tower((block,3),(block,4)), false, 0)
holds(4, in_tower((block,3),(block,5)), false, 0)
holds(4, in_tower((block,3),(block,6)), false, 0)
holds(4, in_tower((block,3),(block,7)), false, 0)
holds(4, in_tower((block,3),(block,8)), false, 0)
holds(4, in_tower((block,3),(block,9)), false, 0)
holds(4, in_tower((block,4),(block,1)), false, 0)
holds(4, in_tower((block,4),(block,10)), false, 0)
holds(4, in_tower((block,4),(block,11)), false, 0)
holds(4, in_tower((block,4),(block,12)), false, 0)
holds(4, in_tower((block,4),(block,13)), false, 0)
holds(4, in_tower((block,4),(block,14)), false, 0)
holds(4, in_tower((block,4),(block,15)), false, 0)
holds(4, in_tower((block,4),(block,16)), false, 0)
holds(4, in_tower((block,4),(block,17)), false, 0)
holds(4, in_tower((block,4),(block,18)), false, 0)
holds(4, in_tower((block,4),(block,2)), false, 0)
holds(4, in_tower((block,4),(block,3)), false, 0)
holds(4, in_tower((block,4),(block,4)), false, 0)
holds(4, in_tower((block,4),(block,5)), false, 0)
holds(4, in_tower((block,4),(block,6)), false, 0)
holds(4, in_tower((block,4),(block,7)), false, 0)
holds(4, in_tower((block,4),(block,8)), false, 0)
holds(4, in_tower((block,4),(block,9)), false, 0)
holds(4, in_tower((block,5),(block,1)), false, 0)
holds(4, in_tower((block,5),(block,10)), false, 0)
holds(4, in_tower((block,5),(block,11)), false, 0)
holds(4, in_tower((block,5),(block,12)), false, 0)
holds(4, in_tower((block,5),(block,13)), false, 0)
holds(4, in_tower((block,5),(block,14)), false, 0)
holds(4, in_tower((block,5),(block,15)), false, 0)
holds(4, in_tower((block,5),(block,16)), false, 0)
holds(4, in_tower((block,5),(block,17)), false, 0)
holds(4, in_tower((block,5),(block,18)), false, 0)
holds(4, in_tower((block,5),(block,2)), false, 0)
holds(4, in_tower((block,5),(block,3)), false, 0)
holds(4, in_tower((block,5),(block,4)), false, 0)
holds(4, in_tower((block,5),(block,5)), false, 0)
holds(4, in_tower((block,5),(block,6)), false, 0)
holds(4, in_tower((block,5),(block,7)), false, 0)
holds(4, in_tower((block,5),(block,8)), false, 0)
holds(4, in_tower((block,5),(block,9)), false, 0)
holds(4, in_tower((block,6),(block,1)), false, 0)
holds(4, in_tower((block,6),(block,10)), false, 0)
holds(4, in_tower((block,6),(block,11)), false, 0)
holds(4, in_tower((block,6),(block,12)), false, 0)
holds(4, in_tower((block,6),(block,13)), false, 0)
holds(4, in_tower((block,6),(block,14)), false, 0)
holds(4, in_tower((block,6),(block,15)), false, 0)
holds(4, in_tower((block,6),(block,16)), false, 0)
holds(4, in_tower((block,6),(block,17)), false, 0)
holds(4, in_tower((block,6),(block,18)), false, 0)
holds(4, in_tower((block,6),(block,2)), false, 0)
holds(4, in_tower((block,6),(block,3)), false, 0)
holds(4, in_tower((block,6),(block,4)), false, 0)
holds(4, in_tower((block,6),(block,5)), false, 0)
holds(4, in_tower((block,6),(block,6)), false, 0)
holds(4, in_tower((block,6),(block,7)), false, 0)
holds(4, in_tower((block,6),(block,8)), false, 0)
holds(4, in_tower((block,6),(block,9)), false, 0)
holds(4, in_tower((block,7),(block,1)), false, 0)
holds(4, in_tower((block,7),(block,10)), false, 0)
holds(4, in_tower((block,7),(block,11)), false, 0)
holds(4, in_tower((block,7),(block,12)), false, 0)
holds(4, in_tower((block,7),(block,13)), false, 0)
holds(4, in_tower((block,7),(block,14)), false, 0)
holds(4, in_tower((block,7),(block,15)), false, 0)
holds(4, in_tower((block,7),(block,16)), false, 0)
holds(4, in_tower((block,7),(block,17)), false, 0)
holds(4, in_tower((block,7),(block,18)), false, 0)
holds(4, in_tower((block,7),(block,2)), false, 0)
holds(4, in_tower((block,7),(block,3)), false, 0)
holds(4, in_tower((block,7),(block,4)), false, 0)
holds(4, in_tower((block,7),(block,5)), false, 0)
holds(4, in_tower((block,7),(block,6)), false, 0)
holds(4, in_tower((block,7),(block,7)), true, 0)
holds(4, in_tower((block,7),(block,8)), false, 0)
holds(4, in_tower((block,7),(block,9)), true, 0)
holds(4, in_tower((block,8),(block,1)), false, 0)
holds(4, in_tower((block,8),(block,10)), false, 0)
holds(4, in_tower((block,8),(block,11)), false, 0)
holds(4, in_tower((block,8),(block,12)), false, 0)
holds(4, in_tower((block,8),(block,13)), false, 0)
holds(4, in_tower((block,8),(block,14)), false, 0)
holds(4, in_tower((block,8),(block,15)), false, 0)
holds(4, in_tower((block,8),(block,16)), false, 0)
holds(4, in_tower((block,8),(block,17)), false, 0)
holds(4, in_tower((block,8),(block,18)), false, 0)
holds(4, in_tower((block,8),(block,2)), false, 0)
holds(4, in_tower((block,8),(block,3)), false, 0)
holds(4, in_tower((block,8),(block,4)), false, 0)
holds(4, in_tower((block,8),(block,5)), false, 0)
holds(4, in_tower((block,8),(block,6)), false, 0)
holds(4, in_tower((block,8),(block,7)), false, 0)
holds(4, in_tower((block,8),(block,8)), false, 0)
holds(4, in_tower((block,8),(block,9)), false, 0)
holds(4, in_tower((block,9),(block,1)), false, 0)
holds(4, in_tower((block,9),(block,10)), false, 0)
holds(4, in_tower((block,9),(block,11)), false, 0)
holds(4, in_tower((block,9),(block,12)), false, 0)
holds(4, in_tower((block,9),(block,13)), false, 0)
holds(4, in_tower((block,9),(block,14)), false, 0)
holds(4, in_tower((block,9),(block,15)), false, 0)
holds(4, in_tower((block,9),(block,16)), false, 0)
holds(4, in_tower((block,9),(block,17)), false, 0)
holds(4, in_tower((block,9),(block,18)), false, 0)
holds(4, in_tower((block,9),(block,2)), false, 0)
holds(4, in_tower((block,9),(block,3)), false, 0)
holds(4, in_tower((block,9),(block,4)), false, 0)
holds(4, in_tower((block,9),(block,5)), false, 0)
holds(4, in_tower((block,9),(block,6)), false, 0)
holds(4, in_tower((block,9),(block,7)), false, 0)
holds(4, in_tower((block,9),(block,8)), false, 0)
holds(4, in_tower((block,9),(block,9)), false, 0)
holds(4, on((block,1)), puzzle_room_1_table, 0)
holds(4, on((block,10)), puzzle_room_2_table, 0)
holds(4, on((block,11)), puzzle_room_2_table, 0)
holds(4, on((block,12)), (block,10), 0)
holds(4, on((block,13)), nothing, 0)
holds(4, on((block,14)), nothing, 0)
holds(4, on((block,15)), nothing, 0)
holds(4, on((block,16)), puzzle_room_2_table, 0)
holds(4, on((block,17)), nothing, 0)
holds(4, on((block,18)), (block,16), 0)
holds(4, on((block,2)), puzzle_room_1_table, 0)
holds(4, on((block,3)), (block,1), 0)
holds(4, on((block,4)), nothing, 0)
holds(4, on((block,5)), nothing, 0)
holds(4, on((block,6)), nothing, 0)
holds(4, on((block,7)), puzzle_room_1_table, 0)
holds(4, on((block,8)), nothing, 0)
holds(4, on((block,9)), (block,7), 0)
holds(4, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(4, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(4, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(4, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(4, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(4, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(4, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(4, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(4, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(4, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(4, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[04-03-2022_16-19-35] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 3            
      ================================================      

holds(3, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(3, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(3, complete_tower(red,puzzle_room_1_table), false, 0)
holds(3, complete_tower(red,puzzle_room_2_table), false, 0)
holds(3, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(3, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(3, configuration(manipulator_arm_1), retracted, 0)
holds(3, configuration(manipulator_arm_2), retracted, 0)
holds(3, configuration(puzzle_room_1_door), closed, 0)
holds(3, configuration(puzzle_room_2_door), closed, 0)
holds(3, configuration(store_room_1_door), closed, 0)
holds(3, configuration(store_room_2_door), closed, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room_1, 0)
holds(3, in((block,10)), puzzle_room_2, 0)
holds(3, in((block,11)), puzzle_room_2, 0)
holds(3, in((block,12)), puzzle_room_2, 0)
holds(3, in((block,13)), store_room_2, 0)
holds(3, in((block,14)), store_room_2, 0)
holds(3, in((block,15)), store_room_2, 0)
holds(3, in((block,16)), puzzle_room_2, 0)
holds(3, in((block,17)), store_room_2, 0)
holds(3, in((block,18)), puzzle_room_2, 0)
holds(3, in((block,2)), puzzle_room_1, 0)
holds(3, in((block,3)), puzzle_room_1, 0)
holds(3, in((block,4)), store_room_1, 0)
holds(3, in((block,5)), store_room_1, 0)
holds(3, in((block,6)), store_room_1, 0)
holds(3, in((block,7)), puzzle_room_1, 0)
holds(3, in((block,8)), store_room_1, 0)
holds(3, in((block,9)), puzzle_room_1, 0)
holds(3, in(manipulator_arm_1), starting_room_1, 0)
holds(3, in(manipulator_arm_2), starting_room_1, 0)
holds(3, in(puzzle_room_1_table), puzzle_room_1, 0)
holds(3, in(puzzle_room_2_table), puzzle_room_2, 0)
holds(3, in(talos), starting_room_1, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,10)), false, 0)
holds(3, in_tower((block,1),(block,11)), false, 0)
holds(3, in_tower((block,1),(block,12)), false, 0)
holds(3, in_tower((block,1),(block,13)), false, 0)
holds(3, in_tower((block,1),(block,14)), false, 0)
holds(3, in_tower((block,1),(block,15)), false, 0)
holds(3, in_tower((block,1),(block,16)), false, 0)
holds(3, in_tower((block,1),(block,17)), false, 0)
holds(3, in_tower((block,1),(block,18)), false, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,1),(block,7)), false, 0)
holds(3, in_tower((block,1),(block,8)), false, 0)
holds(3, in_tower((block,1),(block,9)), false, 0)
holds(3, in_tower((block,10),(block,1)), false, 0)
holds(3, in_tower((block,10),(block,10)), true, 0)
holds(3, in_tower((block,10),(block,11)), false, 0)
holds(3, in_tower((block,10),(block,12)), true, 0)
holds(3, in_tower((block,10),(block,13)), false, 0)
holds(3, in_tower((block,10),(block,14)), false, 0)
holds(3, in_tower((block,10),(block,15)), false, 0)
holds(3, in_tower((block,10),(block,16)), false, 0)
holds(3, in_tower((block,10),(block,17)), false, 0)
holds(3, in_tower((block,10),(block,18)), false, 0)
holds(3, in_tower((block,10),(block,2)), false, 0)
holds(3, in_tower((block,10),(block,3)), false, 0)
holds(3, in_tower((block,10),(block,4)), false, 0)
holds(3, in_tower((block,10),(block,5)), false, 0)
holds(3, in_tower((block,10),(block,6)), false, 0)
holds(3, in_tower((block,10),(block,7)), false, 0)
holds(3, in_tower((block,10),(block,8)), false, 0)
holds(3, in_tower((block,10),(block,9)), false, 0)
holds(3, in_tower((block,11),(block,1)), false, 0)
holds(3, in_tower((block,11),(block,10)), false, 0)
holds(3, in_tower((block,11),(block,11)), true, 0)
holds(3, in_tower((block,11),(block,12)), false, 0)
holds(3, in_tower((block,11),(block,13)), false, 0)
holds(3, in_tower((block,11),(block,14)), false, 0)
holds(3, in_tower((block,11),(block,15)), false, 0)
holds(3, in_tower((block,11),(block,16)), false, 0)
holds(3, in_tower((block,11),(block,17)), false, 0)
holds(3, in_tower((block,11),(block,18)), false, 0)
holds(3, in_tower((block,11),(block,2)), false, 0)
holds(3, in_tower((block,11),(block,3)), false, 0)
holds(3, in_tower((block,11),(block,4)), false, 0)
holds(3, in_tower((block,11),(block,5)), false, 0)
holds(3, in_tower((block,11),(block,6)), false, 0)
holds(3, in_tower((block,11),(block,7)), false, 0)
holds(3, in_tower((block,11),(block,8)), false, 0)
holds(3, in_tower((block,11),(block,9)), false, 0)
holds(3, in_tower((block,12),(block,1)), false, 0)
holds(3, in_tower((block,12),(block,10)), false, 0)
holds(3, in_tower((block,12),(block,11)), false, 0)
holds(3, in_tower((block,12),(block,12)), false, 0)
holds(3, in_tower((block,12),(block,13)), false, 0)
holds(3, in_tower((block,12),(block,14)), false, 0)
holds(3, in_tower((block,12),(block,15)), false, 0)
holds(3, in_tower((block,12),(block,16)), false, 0)
holds(3, in_tower((block,12),(block,17)), false, 0)
holds(3, in_tower((block,12),(block,18)), false, 0)
holds(3, in_tower((block,12),(block,2)), false, 0)
holds(3, in_tower((block,12),(block,3)), false, 0)
holds(3, in_tower((block,12),(block,4)), false, 0)
holds(3, in_tower((block,12),(block,5)), false, 0)
holds(3, in_tower((block,12),(block,6)), false, 0)
holds(3, in_tower((block,12),(block,7)), false, 0)
holds(3, in_tower((block,12),(block,8)), false, 0)
holds(3, in_tower((block,12),(block,9)), false, 0)
holds(3, in_tower((block,13),(block,1)), false, 0)
holds(3, in_tower((block,13),(block,10)), false, 0)
holds(3, in_tower((block,13),(block,11)), false, 0)
holds(3, in_tower((block,13),(block,12)), false, 0)
holds(3, in_tower((block,13),(block,13)), false, 0)
holds(3, in_tower((block,13),(block,14)), false, 0)
holds(3, in_tower((block,13),(block,15)), false, 0)
holds(3, in_tower((block,13),(block,16)), false, 0)
holds(3, in_tower((block,13),(block,17)), false, 0)
holds(3, in_tower((block,13),(block,18)), false, 0)
holds(3, in_tower((block,13),(block,2)), false, 0)
holds(3, in_tower((block,13),(block,3)), false, 0)
holds(3, in_tower((block,13),(block,4)), false, 0)
holds(3, in_tower((block,13),(block,5)), false, 0)
holds(3, in_tower((block,13),(block,6)), false, 0)
holds(3, in_tower((block,13),(block,7)), false, 0)
holds(3, in_tower((block,13),(block,8)), false, 0)
holds(3, in_tower((block,13),(block,9)), false, 0)
holds(3, in_tower((block,14),(block,1)), false, 0)
holds(3, in_tower((block,14),(block,10)), false, 0)
holds(3, in_tower((block,14),(block,11)), false, 0)
holds(3, in_tower((block,14),(block,12)), false, 0)
holds(3, in_tower((block,14),(block,13)), false, 0)
holds(3, in_tower((block,14),(block,14)), false, 0)
holds(3, in_tower((block,14),(block,15)), false, 0)
holds(3, in_tower((block,14),(block,16)), false, 0)
holds(3, in_tower((block,14),(block,17)), false, 0)
holds(3, in_tower((block,14),(block,18)), false, 0)
holds(3, in_tower((block,14),(block,2)), false, 0)
holds(3, in_tower((block,14),(block,3)), false, 0)
holds(3, in_tower((block,14),(block,4)), false, 0)
holds(3, in_tower((block,14),(block,5)), false, 0)
holds(3, in_tower((block,14),(block,6)), false, 0)
holds(3, in_tower((block,14),(block,7)), false, 0)
holds(3, in_tower((block,14),(block,8)), false, 0)
holds(3, in_tower((block,14),(block,9)), false, 0)
holds(3, in_tower((block,15),(block,1)), false, 0)
holds(3, in_tower((block,15),(block,10)), false, 0)
holds(3, in_tower((block,15),(block,11)), false, 0)
holds(3, in_tower((block,15),(block,12)), false, 0)
holds(3, in_tower((block,15),(block,13)), false, 0)
holds(3, in_tower((block,15),(block,14)), false, 0)
holds(3, in_tower((block,15),(block,15)), false, 0)
holds(3, in_tower((block,15),(block,16)), false, 0)
holds(3, in_tower((block,15),(block,17)), false, 0)
holds(3, in_tower((block,15),(block,18)), false, 0)
holds(3, in_tower((block,15),(block,2)), false, 0)
holds(3, in_tower((block,15),(block,3)), false, 0)
holds(3, in_tower((block,15),(block,4)), false, 0)
holds(3, in_tower((block,15),(block,5)), false, 0)
holds(3, in_tower((block,15),(block,6)), false, 0)
holds(3, in_tower((block,15),(block,7)), false, 0)
holds(3, in_tower((block,15),(block,8)), false, 0)
holds(3, in_tower((block,15),(block,9)), false, 0)
holds(3, in_tower((block,16),(block,1)), false, 0)
holds(3, in_tower((block,16),(block,10)), false, 0)
holds(3, in_tower((block,16),(block,11)), false, 0)
holds(3, in_tower((block,16),(block,12)), false, 0)
holds(3, in_tower((block,16),(block,13)), false, 0)
holds(3, in_tower((block,16),(block,14)), false, 0)
holds(3, in_tower((block,16),(block,15)), false, 0)
holds(3, in_tower((block,16),(block,16)), true, 0)
holds(3, in_tower((block,16),(block,17)), false, 0)
holds(3, in_tower((block,16),(block,18)), true, 0)
holds(3, in_tower((block,16),(block,2)), false, 0)
holds(3, in_tower((block,16),(block,3)), false, 0)
holds(3, in_tower((block,16),(block,4)), false, 0)
holds(3, in_tower((block,16),(block,5)), false, 0)
holds(3, in_tower((block,16),(block,6)), false, 0)
holds(3, in_tower((block,16),(block,7)), false, 0)
holds(3, in_tower((block,16),(block,8)), false, 0)
holds(3, in_tower((block,16),(block,9)), false, 0)
holds(3, in_tower((block,17),(block,1)), false, 0)
holds(3, in_tower((block,17),(block,10)), false, 0)
holds(3, in_tower((block,17),(block,11)), false, 0)
holds(3, in_tower((block,17),(block,12)), false, 0)
holds(3, in_tower((block,17),(block,13)), false, 0)
holds(3, in_tower((block,17),(block,14)), false, 0)
holds(3, in_tower((block,17),(block,15)), false, 0)
holds(3, in_tower((block,17),(block,16)), false, 0)
holds(3, in_tower((block,17),(block,17)), false, 0)
holds(3, in_tower((block,17),(block,18)), false, 0)
holds(3, in_tower((block,17),(block,2)), false, 0)
holds(3, in_tower((block,17),(block,3)), false, 0)
holds(3, in_tower((block,17),(block,4)), false, 0)
holds(3, in_tower((block,17),(block,5)), false, 0)
holds(3, in_tower((block,17),(block,6)), false, 0)
holds(3, in_tower((block,17),(block,7)), false, 0)
holds(3, in_tower((block,17),(block,8)), false, 0)
holds(3, in_tower((block,17),(block,9)), false, 0)
holds(3, in_tower((block,18),(block,1)), false, 0)
holds(3, in_tower((block,18),(block,10)), false, 0)
holds(3, in_tower((block,18),(block,11)), false, 0)
holds(3, in_tower((block,18),(block,12)), false, 0)
holds(3, in_tower((block,18),(block,13)), false, 0)
holds(3, in_tower((block,18),(block,14)), false, 0)
holds(3, in_tower((block,18),(block,15)), false, 0)
holds(3, in_tower((block,18),(block,16)), false, 0)
holds(3, in_tower((block,18),(block,17)), false, 0)
holds(3, in_tower((block,18),(block,18)), false, 0)
holds(3, in_tower((block,18),(block,2)), false, 0)
holds(3, in_tower((block,18),(block,3)), false, 0)
holds(3, in_tower((block,18),(block,4)), false, 0)
holds(3, in_tower((block,18),(block,5)), false, 0)
holds(3, in_tower((block,18),(block,6)), false, 0)
holds(3, in_tower((block,18),(block,7)), false, 0)
holds(3, in_tower((block,18),(block,8)), false, 0)
holds(3, in_tower((block,18),(block,9)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,10)), false, 0)
holds(3, in_tower((block,2),(block,11)), false, 0)
holds(3, in_tower((block,2),(block,12)), false, 0)
holds(3, in_tower((block,2),(block,13)), false, 0)
holds(3, in_tower((block,2),(block,14)), false, 0)
holds(3, in_tower((block,2),(block,15)), false, 0)
holds(3, in_tower((block,2),(block,16)), false, 0)
holds(3, in_tower((block,2),(block,17)), false, 0)
holds(3, in_tower((block,2),(block,18)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,7)), false, 0)
holds(3, in_tower((block,2),(block,8)), false, 0)
holds(3, in_tower((block,2),(block,9)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,10)), false, 0)
holds(3, in_tower((block,3),(block,11)), false, 0)
holds(3, in_tower((block,3),(block,12)), false, 0)
holds(3, in_tower((block,3),(block,13)), false, 0)
holds(3, in_tower((block,3),(block,14)), false, 0)
holds(3, in_tower((block,3),(block,15)), false, 0)
holds(3, in_tower((block,3),(block,16)), false, 0)
holds(3, in_tower((block,3),(block,17)), false, 0)
holds(3, in_tower((block,3),(block,18)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,7)), false, 0)
holds(3, in_tower((block,3),(block,8)), false, 0)
holds(3, in_tower((block,3),(block,9)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,10)), false, 0)
holds(3, in_tower((block,4),(block,11)), false, 0)
holds(3, in_tower((block,4),(block,12)), false, 0)
holds(3, in_tower((block,4),(block,13)), false, 0)
holds(3, in_tower((block,4),(block,14)), false, 0)
holds(3, in_tower((block,4),(block,15)), false, 0)
holds(3, in_tower((block,4),(block,16)), false, 0)
holds(3, in_tower((block,4),(block,17)), false, 0)
holds(3, in_tower((block,4),(block,18)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,7)), false, 0)
holds(3, in_tower((block,4),(block,8)), false, 0)
holds(3, in_tower((block,4),(block,9)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,10)), false, 0)
holds(3, in_tower((block,5),(block,11)), false, 0)
holds(3, in_tower((block,5),(block,12)), false, 0)
holds(3, in_tower((block,5),(block,13)), false, 0)
holds(3, in_tower((block,5),(block,14)), false, 0)
holds(3, in_tower((block,5),(block,15)), false, 0)
holds(3, in_tower((block,5),(block,16)), false, 0)
holds(3, in_tower((block,5),(block,17)), false, 0)
holds(3, in_tower((block,5),(block,18)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,7)), false, 0)
holds(3, in_tower((block,5),(block,8)), false, 0)
holds(3, in_tower((block,5),(block,9)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,10)), false, 0)
holds(3, in_tower((block,6),(block,11)), false, 0)
holds(3, in_tower((block,6),(block,12)), false, 0)
holds(3, in_tower((block,6),(block,13)), false, 0)
holds(3, in_tower((block,6),(block,14)), false, 0)
holds(3, in_tower((block,6),(block,15)), false, 0)
holds(3, in_tower((block,6),(block,16)), false, 0)
holds(3, in_tower((block,6),(block,17)), false, 0)
holds(3, in_tower((block,6),(block,18)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,7)), false, 0)
holds(3, in_tower((block,6),(block,8)), false, 0)
holds(3, in_tower((block,6),(block,9)), false, 0)
holds(3, in_tower((block,7),(block,1)), false, 0)
holds(3, in_tower((block,7),(block,10)), false, 0)
holds(3, in_tower((block,7),(block,11)), false, 0)
holds(3, in_tower((block,7),(block,12)), false, 0)
holds(3, in_tower((block,7),(block,13)), false, 0)
holds(3, in_tower((block,7),(block,14)), false, 0)
holds(3, in_tower((block,7),(block,15)), false, 0)
holds(3, in_tower((block,7),(block,16)), false, 0)
holds(3, in_tower((block,7),(block,17)), false, 0)
holds(3, in_tower((block,7),(block,18)), false, 0)
holds(3, in_tower((block,7),(block,2)), false, 0)
holds(3, in_tower((block,7),(block,3)), false, 0)
holds(3, in_tower((block,7),(block,4)), false, 0)
holds(3, in_tower((block,7),(block,5)), false, 0)
holds(3, in_tower((block,7),(block,6)), false, 0)
holds(3, in_tower((block,7),(block,7)), true, 0)
holds(3, in_tower((block,7),(block,8)), false, 0)
holds(3, in_tower((block,7),(block,9)), true, 0)
holds(3, in_tower((block,8),(block,1)), false, 0)
holds(3, in_tower((block,8),(block,10)), false, 0)
holds(3, in_tower((block,8),(block,11)), false, 0)
holds(3, in_tower((block,8),(block,12)), false, 0)
holds(3, in_tower((block,8),(block,13)), false, 0)
holds(3, in_tower((block,8),(block,14)), false, 0)
holds(3, in_tower((block,8),(block,15)), false, 0)
holds(3, in_tower((block,8),(block,16)), false, 0)
holds(3, in_tower((block,8),(block,17)), false, 0)
holds(3, in_tower((block,8),(block,18)), false, 0)
holds(3, in_tower((block,8),(block,2)), false, 0)
holds(3, in_tower((block,8),(block,3)), false, 0)
holds(3, in_tower((block,8),(block,4)), false, 0)
holds(3, in_tower((block,8),(block,5)), false, 0)
holds(3, in_tower((block,8),(block,6)), false, 0)
holds(3, in_tower((block,8),(block,7)), false, 0)
holds(3, in_tower((block,8),(block,8)), false, 0)
holds(3, in_tower((block,8),(block,9)), false, 0)
holds(3, in_tower((block,9),(block,1)), false, 0)
holds(3, in_tower((block,9),(block,10)), false, 0)
holds(3, in_tower((block,9),(block,11)), false, 0)
holds(3, in_tower((block,9),(block,12)), false, 0)
holds(3, in_tower((block,9),(block,13)), false, 0)
holds(3, in_tower((block,9),(block,14)), false, 0)
holds(3, in_tower((block,9),(block,15)), false, 0)
holds(3, in_tower((block,9),(block,16)), false, 0)
holds(3, in_tower((block,9),(block,17)), false, 0)
holds(3, in_tower((block,9),(block,18)), false, 0)
holds(3, in_tower((block,9),(block,2)), false, 0)
holds(3, in_tower((block,9),(block,3)), false, 0)
holds(3, in_tower((block,9),(block,4)), false, 0)
holds(3, in_tower((block,9),(block,5)), false, 0)
holds(3, in_tower((block,9),(block,6)), false, 0)
holds(3, in_tower((block,9),(block,7)), false, 0)
holds(3, in_tower((block,9),(block,8)), false, 0)
holds(3, in_tower((block,9),(block,9)), false, 0)
holds(3, on((block,1)), puzzle_room_1_table, 0)
holds(3, on((block,10)), puzzle_room_2_table, 0)
holds(3, on((block,11)), puzzle_room_2_table, 0)
holds(3, on((block,12)), (block,10), 0)
holds(3, on((block,13)), nothing, 0)
holds(3, on((block,14)), nothing, 0)
holds(3, on((block,15)), nothing, 0)
holds(3, on((block,16)), puzzle_room_2_table, 0)
holds(3, on((block,17)), nothing, 0)
holds(3, on((block,18)), (block,16), 0)
holds(3, on((block,2)), puzzle_room_1_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, on((block,7)), puzzle_room_1_table, 0)
holds(3, on((block,8)), nothing, 0)
holds(3, on((block,9)), (block,7), 0)
holds(3, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(3, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(3, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(3, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(3, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(3, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(3, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(3, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(3, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(3, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(3, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[04-03-2022_16-19-35] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 2            
      ================================================      

holds(2, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(2, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(2, complete_tower(red,puzzle_room_1_table), false, 0)
holds(2, complete_tower(red,puzzle_room_2_table), false, 0)
holds(2, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(2, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(2, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(2, configuration(manipulator_limb_1), retracted, 0)
holds(2, configuration(manipulator_limb_2), retracted, 0)
holds(2, configuration(puzzle_room_1_door), closed, 0)
holds(2, configuration(puzzle_room_2_door), closed, 0)
holds(2, configuration(store_room_1_door), closed, 0)
holds(2, configuration(store_room_2_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, grasping(manipulator_end_1), nothing, 0)
holds(2, grasping(manipulator_end_2), nothing, 0)
holds(2, in((block,1)), (puzzle_room_1,1), 0)
holds(2, in((block,10)), (puzzle_room_2,1), 0)
holds(2, in((block,11)), (puzzle_room_2,1), 0)
holds(2, in((block,12)), (puzzle_room_2,1), 0)
holds(2, in((block,13)), (store_room_2,0), 0)
holds(2, in((block,14)), (store_room_2,0), 0)
holds(2, in((block,15)), (store_room_2,0), 0)
holds(2, in((block,16)), (puzzle_room_2,1), 0)
holds(2, in((block,17)), (store_room_2,0), 0)
holds(2, in((block,18)), (puzzle_room_2,1), 0)
holds(2, in((block,2)), (puzzle_room_1,1), 0)
holds(2, in((block,3)), (puzzle_room_1,1), 0)
holds(2, in((block,4)), (store_room_1,0), 0)
holds(2, in((block,5)), (store_room_1,0), 0)
holds(2, in((block,6)), (store_room_1,0), 0)
holds(2, in((block,7)), (puzzle_room_1,1), 0)
holds(2, in((block,8)), (store_room_1,0), 0)
holds(2, in((block,9)), (puzzle_room_1,1), 0)
holds(2, in(manipulator_arm_1), (starting_room_1,0), 0)
holds(2, in(manipulator_arm_2), (starting_room_1,0), 0)
holds(2, in(manipulator_end_1), (starting_room_1,0), 0)
holds(2, in(manipulator_end_2), (starting_room_1,0), 0)
holds(2, in(manipulator_limb_1), (starting_room_1,0), 0)
holds(2, in(manipulator_limb_2), (starting_room_1,0), 0)
holds(2, in(puzzle_room_1_table), (puzzle_room_1,1), 0)
holds(2, in(puzzle_room_1_table_left), (puzzle_room_1,1), 0)
holds(2, in(puzzle_room_1_table_middle), (puzzle_room_1,1), 0)
holds(2, in(puzzle_room_1_table_right), (puzzle_room_1,1), 0)
holds(2, in(puzzle_room_2_table), (puzzle_room_2,1), 0)
holds(2, in(puzzle_room_2_table_left), (puzzle_room_2,1), 0)
holds(2, in(puzzle_room_2_table_middle), (puzzle_room_2,1), 0)
holds(2, in(puzzle_room_2_table_right), (puzzle_room_2,1), 0)
holds(2, in(talos), (starting_room_1,0), 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,10)), false, 0)
holds(2, in_tower((block,1),(block,11)), false, 0)
holds(2, in_tower((block,1),(block,12)), false, 0)
holds(2, in_tower((block,1),(block,13)), false, 0)
holds(2, in_tower((block,1),(block,14)), false, 0)
holds(2, in_tower((block,1),(block,15)), false, 0)
holds(2, in_tower((block,1),(block,16)), false, 0)
holds(2, in_tower((block,1),(block,17)), false, 0)
holds(2, in_tower((block,1),(block,18)), false, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,1),(block,7)), false, 0)
holds(2, in_tower((block,1),(block,8)), false, 0)
holds(2, in_tower((block,1),(block,9)), false, 0)
holds(2, in_tower((block,10),(block,1)), false, 0)
holds(2, in_tower((block,10),(block,10)), true, 0)
holds(2, in_tower((block,10),(block,11)), false, 0)
holds(2, in_tower((block,10),(block,12)), true, 0)
holds(2, in_tower((block,10),(block,13)), false, 0)
holds(2, in_tower((block,10),(block,14)), false, 0)
holds(2, in_tower((block,10),(block,15)), false, 0)
holds(2, in_tower((block,10),(block,16)), false, 0)
holds(2, in_tower((block,10),(block,17)), false, 0)
holds(2, in_tower((block,10),(block,18)), false, 0)
holds(2, in_tower((block,10),(block,2)), false, 0)
holds(2, in_tower((block,10),(block,3)), false, 0)
holds(2, in_tower((block,10),(block,4)), false, 0)
holds(2, in_tower((block,10),(block,5)), false, 0)
holds(2, in_tower((block,10),(block,6)), false, 0)
holds(2, in_tower((block,10),(block,7)), false, 0)
holds(2, in_tower((block,10),(block,8)), false, 0)
holds(2, in_tower((block,10),(block,9)), false, 0)
holds(2, in_tower((block,11),(block,1)), false, 0)
holds(2, in_tower((block,11),(block,10)), false, 0)
holds(2, in_tower((block,11),(block,11)), true, 0)
holds(2, in_tower((block,11),(block,12)), false, 0)
holds(2, in_tower((block,11),(block,13)), false, 0)
holds(2, in_tower((block,11),(block,14)), false, 0)
holds(2, in_tower((block,11),(block,15)), false, 0)
holds(2, in_tower((block,11),(block,16)), false, 0)
holds(2, in_tower((block,11),(block,17)), false, 0)
holds(2, in_tower((block,11),(block,18)), false, 0)
holds(2, in_tower((block,11),(block,2)), false, 0)
holds(2, in_tower((block,11),(block,3)), false, 0)
holds(2, in_tower((block,11),(block,4)), false, 0)
holds(2, in_tower((block,11),(block,5)), false, 0)
holds(2, in_tower((block,11),(block,6)), false, 0)
holds(2, in_tower((block,11),(block,7)), false, 0)
holds(2, in_tower((block,11),(block,8)), false, 0)
holds(2, in_tower((block,11),(block,9)), false, 0)
holds(2, in_tower((block,12),(block,1)), false, 0)
holds(2, in_tower((block,12),(block,10)), false, 0)
holds(2, in_tower((block,12),(block,11)), false, 0)
holds(2, in_tower((block,12),(block,12)), false, 0)
holds(2, in_tower((block,12),(block,13)), false, 0)
holds(2, in_tower((block,12),(block,14)), false, 0)
holds(2, in_tower((block,12),(block,15)), false, 0)
holds(2, in_tower((block,12),(block,16)), false, 0)
holds(2, in_tower((block,12),(block,17)), false, 0)
holds(2, in_tower((block,12),(block,18)), false, 0)
holds(2, in_tower((block,12),(block,2)), false, 0)
holds(2, in_tower((block,12),(block,3)), false, 0)
holds(2, in_tower((block,12),(block,4)), false, 0)
holds(2, in_tower((block,12),(block,5)), false, 0)
holds(2, in_tower((block,12),(block,6)), false, 0)
holds(2, in_tower((block,12),(block,7)), false, 0)
holds(2, in_tower((block,12),(block,8)), false, 0)
holds(2, in_tower((block,12),(block,9)), false, 0)
holds(2, in_tower((block,13),(block,1)), false, 0)
holds(2, in_tower((block,13),(block,10)), false, 0)
holds(2, in_tower((block,13),(block,11)), false, 0)
holds(2, in_tower((block,13),(block,12)), false, 0)
holds(2, in_tower((block,13),(block,13)), false, 0)
holds(2, in_tower((block,13),(block,14)), false, 0)
holds(2, in_tower((block,13),(block,15)), false, 0)
holds(2, in_tower((block,13),(block,16)), false, 0)
holds(2, in_tower((block,13),(block,17)), false, 0)
holds(2, in_tower((block,13),(block,18)), false, 0)
holds(2, in_tower((block,13),(block,2)), false, 0)
holds(2, in_tower((block,13),(block,3)), false, 0)
holds(2, in_tower((block,13),(block,4)), false, 0)
holds(2, in_tower((block,13),(block,5)), false, 0)
holds(2, in_tower((block,13),(block,6)), false, 0)
holds(2, in_tower((block,13),(block,7)), false, 0)
holds(2, in_tower((block,13),(block,8)), false, 0)
holds(2, in_tower((block,13),(block,9)), false, 0)
holds(2, in_tower((block,14),(block,1)), false, 0)
holds(2, in_tower((block,14),(block,10)), false, 0)
holds(2, in_tower((block,14),(block,11)), false, 0)
holds(2, in_tower((block,14),(block,12)), false, 0)
holds(2, in_tower((block,14),(block,13)), false, 0)
holds(2, in_tower((block,14),(block,14)), false, 0)
holds(2, in_tower((block,14),(block,15)), false, 0)
holds(2, in_tower((block,14),(block,16)), false, 0)
holds(2, in_tower((block,14),(block,17)), false, 0)
holds(2, in_tower((block,14),(block,18)), false, 0)
holds(2, in_tower((block,14),(block,2)), false, 0)
holds(2, in_tower((block,14),(block,3)), false, 0)
holds(2, in_tower((block,14),(block,4)), false, 0)
holds(2, in_tower((block,14),(block,5)), false, 0)
holds(2, in_tower((block,14),(block,6)), false, 0)
holds(2, in_tower((block,14),(block,7)), false, 0)
holds(2, in_tower((block,14),(block,8)), false, 0)
holds(2, in_tower((block,14),(block,9)), false, 0)
holds(2, in_tower((block,15),(block,1)), false, 0)
holds(2, in_tower((block,15),(block,10)), false, 0)
holds(2, in_tower((block,15),(block,11)), false, 0)
holds(2, in_tower((block,15),(block,12)), false, 0)
holds(2, in_tower((block,15),(block,13)), false, 0)
holds(2, in_tower((block,15),(block,14)), false, 0)
holds(2, in_tower((block,15),(block,15)), false, 0)
holds(2, in_tower((block,15),(block,16)), false, 0)
holds(2, in_tower((block,15),(block,17)), false, 0)
holds(2, in_tower((block,15),(block,18)), false, 0)
holds(2, in_tower((block,15),(block,2)), false, 0)
holds(2, in_tower((block,15),(block,3)), false, 0)
holds(2, in_tower((block,15),(block,4)), false, 0)
holds(2, in_tower((block,15),(block,5)), false, 0)
holds(2, in_tower((block,15),(block,6)), false, 0)
holds(2, in_tower((block,15),(block,7)), false, 0)
holds(2, in_tower((block,15),(block,8)), false, 0)
holds(2, in_tower((block,15),(block,9)), false, 0)
holds(2, in_tower((block,16),(block,1)), false, 0)
holds(2, in_tower((block,16),(block,10)), false, 0)
holds(2, in_tower((block,16),(block,11)), false, 0)
holds(2, in_tower((block,16),(block,12)), false, 0)
holds(2, in_tower((block,16),(block,13)), false, 0)
holds(2, in_tower((block,16),(block,14)), false, 0)
holds(2, in_tower((block,16),(block,15)), false, 0)
holds(2, in_tower((block,16),(block,16)), true, 0)
holds(2, in_tower((block,16),(block,17)), false, 0)
holds(2, in_tower((block,16),(block,18)), true, 0)
holds(2, in_tower((block,16),(block,2)), false, 0)
holds(2, in_tower((block,16),(block,3)), false, 0)
holds(2, in_tower((block,16),(block,4)), false, 0)
holds(2, in_tower((block,16),(block,5)), false, 0)
holds(2, in_tower((block,16),(block,6)), false, 0)
holds(2, in_tower((block,16),(block,7)), false, 0)
holds(2, in_tower((block,16),(block,8)), false, 0)
holds(2, in_tower((block,16),(block,9)), false, 0)
holds(2, in_tower((block,17),(block,1)), false, 0)
holds(2, in_tower((block,17),(block,10)), false, 0)
holds(2, in_tower((block,17),(block,11)), false, 0)
holds(2, in_tower((block,17),(block,12)), false, 0)
holds(2, in_tower((block,17),(block,13)), false, 0)
holds(2, in_tower((block,17),(block,14)), false, 0)
holds(2, in_tower((block,17),(block,15)), false, 0)
holds(2, in_tower((block,17),(block,16)), false, 0)
holds(2, in_tower((block,17),(block,17)), false, 0)
holds(2, in_tower((block,17),(block,18)), false, 0)
holds(2, in_tower((block,17),(block,2)), false, 0)
holds(2, in_tower((block,17),(block,3)), false, 0)
holds(2, in_tower((block,17),(block,4)), false, 0)
holds(2, in_tower((block,17),(block,5)), false, 0)
holds(2, in_tower((block,17),(block,6)), false, 0)
holds(2, in_tower((block,17),(block,7)), false, 0)
holds(2, in_tower((block,17),(block,8)), false, 0)
holds(2, in_tower((block,17),(block,9)), false, 0)
holds(2, in_tower((block,18),(block,1)), false, 0)
holds(2, in_tower((block,18),(block,10)), false, 0)
holds(2, in_tower((block,18),(block,11)), false, 0)
holds(2, in_tower((block,18),(block,12)), false, 0)
holds(2, in_tower((block,18),(block,13)), false, 0)
holds(2, in_tower((block,18),(block,14)), false, 0)
holds(2, in_tower((block,18),(block,15)), false, 0)
holds(2, in_tower((block,18),(block,16)), false, 0)
holds(2, in_tower((block,18),(block,17)), false, 0)
holds(2, in_tower((block,18),(block,18)), false, 0)
holds(2, in_tower((block,18),(block,2)), false, 0)
holds(2, in_tower((block,18),(block,3)), false, 0)
holds(2, in_tower((block,18),(block,4)), false, 0)
holds(2, in_tower((block,18),(block,5)), false, 0)
holds(2, in_tower((block,18),(block,6)), false, 0)
holds(2, in_tower((block,18),(block,7)), false, 0)
holds(2, in_tower((block,18),(block,8)), false, 0)
holds(2, in_tower((block,18),(block,9)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,10)), false, 0)
holds(2, in_tower((block,2),(block,11)), false, 0)
holds(2, in_tower((block,2),(block,12)), false, 0)
holds(2, in_tower((block,2),(block,13)), false, 0)
holds(2, in_tower((block,2),(block,14)), false, 0)
holds(2, in_tower((block,2),(block,15)), false, 0)
holds(2, in_tower((block,2),(block,16)), false, 0)
holds(2, in_tower((block,2),(block,17)), false, 0)
holds(2, in_tower((block,2),(block,18)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,7)), false, 0)
holds(2, in_tower((block,2),(block,8)), false, 0)
holds(2, in_tower((block,2),(block,9)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,10)), false, 0)
holds(2, in_tower((block,3),(block,11)), false, 0)
holds(2, in_tower((block,3),(block,12)), false, 0)
holds(2, in_tower((block,3),(block,13)), false, 0)
holds(2, in_tower((block,3),(block,14)), false, 0)
holds(2, in_tower((block,3),(block,15)), false, 0)
holds(2, in_tower((block,3),(block,16)), false, 0)
holds(2, in_tower((block,3),(block,17)), false, 0)
holds(2, in_tower((block,3),(block,18)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,7)), false, 0)
holds(2, in_tower((block,3),(block,8)), false, 0)
holds(2, in_tower((block,3),(block,9)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,10)), false, 0)
holds(2, in_tower((block,4),(block,11)), false, 0)
holds(2, in_tower((block,4),(block,12)), false, 0)
holds(2, in_tower((block,4),(block,13)), false, 0)
holds(2, in_tower((block,4),(block,14)), false, 0)
holds(2, in_tower((block,4),(block,15)), false, 0)
holds(2, in_tower((block,4),(block,16)), false, 0)
holds(2, in_tower((block,4),(block,17)), false, 0)
holds(2, in_tower((block,4),(block,18)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,7)), false, 0)
holds(2, in_tower((block,4),(block,8)), false, 0)
holds(2, in_tower((block,4),(block,9)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,10)), false, 0)
holds(2, in_tower((block,5),(block,11)), false, 0)
holds(2, in_tower((block,5),(block,12)), false, 0)
holds(2, in_tower((block,5),(block,13)), false, 0)
holds(2, in_tower((block,5),(block,14)), false, 0)
holds(2, in_tower((block,5),(block,15)), false, 0)
holds(2, in_tower((block,5),(block,16)), false, 0)
holds(2, in_tower((block,5),(block,17)), false, 0)
holds(2, in_tower((block,5),(block,18)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,7)), false, 0)
holds(2, in_tower((block,5),(block,8)), false, 0)
holds(2, in_tower((block,5),(block,9)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,10)), false, 0)
holds(2, in_tower((block,6),(block,11)), false, 0)
holds(2, in_tower((block,6),(block,12)), false, 0)
holds(2, in_tower((block,6),(block,13)), false, 0)
holds(2, in_tower((block,6),(block,14)), false, 0)
holds(2, in_tower((block,6),(block,15)), false, 0)
holds(2, in_tower((block,6),(block,16)), false, 0)
holds(2, in_tower((block,6),(block,17)), false, 0)
holds(2, in_tower((block,6),(block,18)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,7)), false, 0)
holds(2, in_tower((block,6),(block,8)), false, 0)
holds(2, in_tower((block,6),(block,9)), false, 0)
holds(2, in_tower((block,7),(block,1)), false, 0)
holds(2, in_tower((block,7),(block,10)), false, 0)
holds(2, in_tower((block,7),(block,11)), false, 0)
holds(2, in_tower((block,7),(block,12)), false, 0)
holds(2, in_tower((block,7),(block,13)), false, 0)
holds(2, in_tower((block,7),(block,14)), false, 0)
holds(2, in_tower((block,7),(block,15)), false, 0)
holds(2, in_tower((block,7),(block,16)), false, 0)
holds(2, in_tower((block,7),(block,17)), false, 0)
holds(2, in_tower((block,7),(block,18)), false, 0)
holds(2, in_tower((block,7),(block,2)), false, 0)
holds(2, in_tower((block,7),(block,3)), false, 0)
holds(2, in_tower((block,7),(block,4)), false, 0)
holds(2, in_tower((block,7),(block,5)), false, 0)
holds(2, in_tower((block,7),(block,6)), false, 0)
holds(2, in_tower((block,7),(block,7)), true, 0)
holds(2, in_tower((block,7),(block,8)), false, 0)
holds(2, in_tower((block,7),(block,9)), true, 0)
holds(2, in_tower((block,8),(block,1)), false, 0)
holds(2, in_tower((block,8),(block,10)), false, 0)
holds(2, in_tower((block,8),(block,11)), false, 0)
holds(2, in_tower((block,8),(block,12)), false, 0)
holds(2, in_tower((block,8),(block,13)), false, 0)
holds(2, in_tower((block,8),(block,14)), false, 0)
holds(2, in_tower((block,8),(block,15)), false, 0)
holds(2, in_tower((block,8),(block,16)), false, 0)
holds(2, in_tower((block,8),(block,17)), false, 0)
holds(2, in_tower((block,8),(block,18)), false, 0)
holds(2, in_tower((block,8),(block,2)), false, 0)
holds(2, in_tower((block,8),(block,3)), false, 0)
holds(2, in_tower((block,8),(block,4)), false, 0)
holds(2, in_tower((block,8),(block,5)), false, 0)
holds(2, in_tower((block,8),(block,6)), false, 0)
holds(2, in_tower((block,8),(block,7)), false, 0)
holds(2, in_tower((block,8),(block,8)), false, 0)
holds(2, in_tower((block,8),(block,9)), false, 0)
holds(2, in_tower((block,9),(block,1)), false, 0)
holds(2, in_tower((block,9),(block,10)), false, 0)
holds(2, in_tower((block,9),(block,11)), false, 0)
holds(2, in_tower((block,9),(block,12)), false, 0)
holds(2, in_tower((block,9),(block,13)), false, 0)
holds(2, in_tower((block,9),(block,14)), false, 0)
holds(2, in_tower((block,9),(block,15)), false, 0)
holds(2, in_tower((block,9),(block,16)), false, 0)
holds(2, in_tower((block,9),(block,17)), false, 0)
holds(2, in_tower((block,9),(block,18)), false, 0)
holds(2, in_tower((block,9),(block,2)), false, 0)
holds(2, in_tower((block,9),(block,3)), false, 0)
holds(2, in_tower((block,9),(block,4)), false, 0)
holds(2, in_tower((block,9),(block,5)), false, 0)
holds(2, in_tower((block,9),(block,6)), false, 0)
holds(2, in_tower((block,9),(block,7)), false, 0)
holds(2, in_tower((block,9),(block,8)), false, 0)
holds(2, in_tower((block,9),(block,9)), false, 0)
holds(2, on((block,1)), puzzle_room_1_table_left, 0)
holds(2, on((block,10)), puzzle_room_2_table_left, 0)
holds(2, on((block,11)), puzzle_room_2_table_right, 0)
holds(2, on((block,12)), (block,10), 0)
holds(2, on((block,13)), nothing, 0)
holds(2, on((block,14)), nothing, 0)
holds(2, on((block,15)), nothing, 0)
holds(2, on((block,16)), puzzle_room_2_table_middle, 0)
holds(2, on((block,17)), nothing, 0)
holds(2, on((block,18)), (block,16), 0)
holds(2, on((block,2)), puzzle_room_1_table_right, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, on((block,7)), puzzle_room_1_table_middle, 0)
holds(2, on((block,8)), nothing, 0)
holds(2, on((block,9)), (block,7), 0)
holds(2, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(2, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(2, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(2, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(2, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(2, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(2, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(2, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(2, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(2, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(2, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[04-03-2022_16-19-36] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 1            
      ================================================      

holds(1, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(1, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(1, complete_tower(red,puzzle_room_1_table), false, 0)
holds(1, complete_tower(red,puzzle_room_2_table), false, 0)
holds(1, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(1, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_1_door), closed, 0)
holds(1, configuration(puzzle_room_2_door), closed, 0)
holds(1, configuration(store_room_1_door), closed, 0)
holds(1, configuration(store_room_2_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), ((puzzle_room_1,1),5,0), 0)
holds(1, in((block,10)), ((puzzle_room_2,1),5,0), 0)
holds(1, in((block,11)), ((puzzle_room_2,1),5,0), 0)
holds(1, in((block,12)), ((puzzle_room_2,1),5,0), 0)
holds(1, in((block,13)), ((store_room_2,0),0,0), 0)
holds(1, in((block,14)), ((store_room_2,0),0,0), 0)
holds(1, in((block,15)), ((store_room_2,0),0,0), 0)
holds(1, in((block,16)), ((puzzle_room_2,1),5,0), 0)
holds(1, in((block,17)), ((store_room_2,0),0,1), 0)
holds(1, in((block,18)), ((puzzle_room_2,1),5,0), 0)
holds(1, in((block,2)), ((puzzle_room_1,1),5,0), 0)
holds(1, in((block,3)), ((puzzle_room_1,1),5,0), 0)
holds(1, in((block,4)), ((store_room_1,0),0,0), 0)
holds(1, in((block,5)), ((store_room_1,0),0,0), 0)
holds(1, in((block,6)), ((store_room_1,0),0,0), 0)
holds(1, in((block,7)), ((puzzle_room_1,1),5,0), 0)
holds(1, in((block,8)), ((store_room_1,0),0,1), 0)
holds(1, in((block,9)), ((puzzle_room_1,1),5,0), 0)
holds(1, in(manipulator_arm_1), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_arm_2), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_end_1), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_end_2), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_limb_1), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_limb_2), ((starting_room_1,0),0,0), 0)
holds(1, in(puzzle_room_1_table), ((puzzle_room_1,1),5,0), 0)
holds(1, in(puzzle_room_1_table_left), ((puzzle_room_1,1),5,0), 0)
holds(1, in(puzzle_room_1_table_middle), ((puzzle_room_1,1),5,0), 0)
holds(1, in(puzzle_room_1_table_right), ((puzzle_room_1,1),5,0), 0)
holds(1, in(puzzle_room_2_table), ((puzzle_room_2,1),5,0), 0)
holds(1, in(puzzle_room_2_table_left), ((puzzle_room_2,1),5,0), 0)
holds(1, in(puzzle_room_2_table_middle), ((puzzle_room_2,1),5,0), 0)
holds(1, in(puzzle_room_2_table_right), ((puzzle_room_2,1),5,0), 0)
holds(1, in(talos), ((starting_room_1,0),0,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,10)), false, 0)
holds(1, in_tower((block,1),(block,11)), false, 0)
holds(1, in_tower((block,1),(block,12)), false, 0)
holds(1, in_tower((block,1),(block,13)), false, 0)
holds(1, in_tower((block,1),(block,14)), false, 0)
holds(1, in_tower((block,1),(block,15)), false, 0)
holds(1, in_tower((block,1),(block,16)), false, 0)
holds(1, in_tower((block,1),(block,17)), false, 0)
holds(1, in_tower((block,1),(block,18)), false, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,1),(block,7)), false, 0)
holds(1, in_tower((block,1),(block,8)), false, 0)
holds(1, in_tower((block,1),(block,9)), false, 0)
holds(1, in_tower((block,10),(block,1)), false, 0)
holds(1, in_tower((block,10),(block,10)), true, 0)
holds(1, in_tower((block,10),(block,11)), false, 0)
holds(1, in_tower((block,10),(block,12)), true, 0)
holds(1, in_tower((block,10),(block,13)), false, 0)
holds(1, in_tower((block,10),(block,14)), false, 0)
holds(1, in_tower((block,10),(block,15)), false, 0)
holds(1, in_tower((block,10),(block,16)), false, 0)
holds(1, in_tower((block,10),(block,17)), false, 0)
holds(1, in_tower((block,10),(block,18)), false, 0)
holds(1, in_tower((block,10),(block,2)), false, 0)
holds(1, in_tower((block,10),(block,3)), false, 0)
holds(1, in_tower((block,10),(block,4)), false, 0)
holds(1, in_tower((block,10),(block,5)), false, 0)
holds(1, in_tower((block,10),(block,6)), false, 0)
holds(1, in_tower((block,10),(block,7)), false, 0)
holds(1, in_tower((block,10),(block,8)), false, 0)
holds(1, in_tower((block,10),(block,9)), false, 0)
holds(1, in_tower((block,11),(block,1)), false, 0)
holds(1, in_tower((block,11),(block,10)), false, 0)
holds(1, in_tower((block,11),(block,11)), true, 0)
holds(1, in_tower((block,11),(block,12)), false, 0)
holds(1, in_tower((block,11),(block,13)), false, 0)
holds(1, in_tower((block,11),(block,14)), false, 0)
holds(1, in_tower((block,11),(block,15)), false, 0)
holds(1, in_tower((block,11),(block,16)), false, 0)
holds(1, in_tower((block,11),(block,17)), false, 0)
holds(1, in_tower((block,11),(block,18)), false, 0)
holds(1, in_tower((block,11),(block,2)), false, 0)
holds(1, in_tower((block,11),(block,3)), false, 0)
holds(1, in_tower((block,11),(block,4)), false, 0)
holds(1, in_tower((block,11),(block,5)), false, 0)
holds(1, in_tower((block,11),(block,6)), false, 0)
holds(1, in_tower((block,11),(block,7)), false, 0)
holds(1, in_tower((block,11),(block,8)), false, 0)
holds(1, in_tower((block,11),(block,9)), false, 0)
holds(1, in_tower((block,12),(block,1)), false, 0)
holds(1, in_tower((block,12),(block,10)), false, 0)
holds(1, in_tower((block,12),(block,11)), false, 0)
holds(1, in_tower((block,12),(block,12)), false, 0)
holds(1, in_tower((block,12),(block,13)), false, 0)
holds(1, in_tower((block,12),(block,14)), false, 0)
holds(1, in_tower((block,12),(block,15)), false, 0)
holds(1, in_tower((block,12),(block,16)), false, 0)
holds(1, in_tower((block,12),(block,17)), false, 0)
holds(1, in_tower((block,12),(block,18)), false, 0)
holds(1, in_tower((block,12),(block,2)), false, 0)
holds(1, in_tower((block,12),(block,3)), false, 0)
holds(1, in_tower((block,12),(block,4)), false, 0)
holds(1, in_tower((block,12),(block,5)), false, 0)
holds(1, in_tower((block,12),(block,6)), false, 0)
holds(1, in_tower((block,12),(block,7)), false, 0)
holds(1, in_tower((block,12),(block,8)), false, 0)
holds(1, in_tower((block,12),(block,9)), false, 0)
holds(1, in_tower((block,13),(block,1)), false, 0)
holds(1, in_tower((block,13),(block,10)), false, 0)
holds(1, in_tower((block,13),(block,11)), false, 0)
holds(1, in_tower((block,13),(block,12)), false, 0)
holds(1, in_tower((block,13),(block,13)), false, 0)
holds(1, in_tower((block,13),(block,14)), false, 0)
holds(1, in_tower((block,13),(block,15)), false, 0)
holds(1, in_tower((block,13),(block,16)), false, 0)
holds(1, in_tower((block,13),(block,17)), false, 0)
holds(1, in_tower((block,13),(block,18)), false, 0)
holds(1, in_tower((block,13),(block,2)), false, 0)
holds(1, in_tower((block,13),(block,3)), false, 0)
holds(1, in_tower((block,13),(block,4)), false, 0)
holds(1, in_tower((block,13),(block,5)), false, 0)
holds(1, in_tower((block,13),(block,6)), false, 0)
holds(1, in_tower((block,13),(block,7)), false, 0)
holds(1, in_tower((block,13),(block,8)), false, 0)
holds(1, in_tower((block,13),(block,9)), false, 0)
holds(1, in_tower((block,14),(block,1)), false, 0)
holds(1, in_tower((block,14),(block,10)), false, 0)
holds(1, in_tower((block,14),(block,11)), false, 0)
holds(1, in_tower((block,14),(block,12)), false, 0)
holds(1, in_tower((block,14),(block,13)), false, 0)
holds(1, in_tower((block,14),(block,14)), false, 0)
holds(1, in_tower((block,14),(block,15)), false, 0)
holds(1, in_tower((block,14),(block,16)), false, 0)
holds(1, in_tower((block,14),(block,17)), false, 0)
holds(1, in_tower((block,14),(block,18)), false, 0)
holds(1, in_tower((block,14),(block,2)), false, 0)
holds(1, in_tower((block,14),(block,3)), false, 0)
holds(1, in_tower((block,14),(block,4)), false, 0)
holds(1, in_tower((block,14),(block,5)), false, 0)
holds(1, in_tower((block,14),(block,6)), false, 0)
holds(1, in_tower((block,14),(block,7)), false, 0)
holds(1, in_tower((block,14),(block,8)), false, 0)
holds(1, in_tower((block,14),(block,9)), false, 0)
holds(1, in_tower((block,15),(block,1)), false, 0)
holds(1, in_tower((block,15),(block,10)), false, 0)
holds(1, in_tower((block,15),(block,11)), false, 0)
holds(1, in_tower((block,15),(block,12)), false, 0)
holds(1, in_tower((block,15),(block,13)), false, 0)
holds(1, in_tower((block,15),(block,14)), false, 0)
holds(1, in_tower((block,15),(block,15)), false, 0)
holds(1, in_tower((block,15),(block,16)), false, 0)
holds(1, in_tower((block,15),(block,17)), false, 0)
holds(1, in_tower((block,15),(block,18)), false, 0)
holds(1, in_tower((block,15),(block,2)), false, 0)
holds(1, in_tower((block,15),(block,3)), false, 0)
holds(1, in_tower((block,15),(block,4)), false, 0)
holds(1, in_tower((block,15),(block,5)), false, 0)
holds(1, in_tower((block,15),(block,6)), false, 0)
holds(1, in_tower((block,15),(block,7)), false, 0)
holds(1, in_tower((block,15),(block,8)), false, 0)
holds(1, in_tower((block,15),(block,9)), false, 0)
holds(1, in_tower((block,16),(block,1)), false, 0)
holds(1, in_tower((block,16),(block,10)), false, 0)
holds(1, in_tower((block,16),(block,11)), false, 0)
holds(1, in_tower((block,16),(block,12)), false, 0)
holds(1, in_tower((block,16),(block,13)), false, 0)
holds(1, in_tower((block,16),(block,14)), false, 0)
holds(1, in_tower((block,16),(block,15)), false, 0)
holds(1, in_tower((block,16),(block,16)), true, 0)
holds(1, in_tower((block,16),(block,17)), false, 0)
holds(1, in_tower((block,16),(block,18)), true, 0)
holds(1, in_tower((block,16),(block,2)), false, 0)
holds(1, in_tower((block,16),(block,3)), false, 0)
holds(1, in_tower((block,16),(block,4)), false, 0)
holds(1, in_tower((block,16),(block,5)), false, 0)
holds(1, in_tower((block,16),(block,6)), false, 0)
holds(1, in_tower((block,16),(block,7)), false, 0)
holds(1, in_tower((block,16),(block,8)), false, 0)
holds(1, in_tower((block,16),(block,9)), false, 0)
holds(1, in_tower((block,17),(block,1)), false, 0)
holds(1, in_tower((block,17),(block,10)), false, 0)
holds(1, in_tower((block,17),(block,11)), false, 0)
holds(1, in_tower((block,17),(block,12)), false, 0)
holds(1, in_tower((block,17),(block,13)), false, 0)
holds(1, in_tower((block,17),(block,14)), false, 0)
holds(1, in_tower((block,17),(block,15)), false, 0)
holds(1, in_tower((block,17),(block,16)), false, 0)
holds(1, in_tower((block,17),(block,17)), false, 0)
holds(1, in_tower((block,17),(block,18)), false, 0)
holds(1, in_tower((block,17),(block,2)), false, 0)
holds(1, in_tower((block,17),(block,3)), false, 0)
holds(1, in_tower((block,17),(block,4)), false, 0)
holds(1, in_tower((block,17),(block,5)), false, 0)
holds(1, in_tower((block,17),(block,6)), false, 0)
holds(1, in_tower((block,17),(block,7)), false, 0)
holds(1, in_tower((block,17),(block,8)), false, 0)
holds(1, in_tower((block,17),(block,9)), false, 0)
holds(1, in_tower((block,18),(block,1)), false, 0)
holds(1, in_tower((block,18),(block,10)), false, 0)
holds(1, in_tower((block,18),(block,11)), false, 0)
holds(1, in_tower((block,18),(block,12)), false, 0)
holds(1, in_tower((block,18),(block,13)), false, 0)
holds(1, in_tower((block,18),(block,14)), false, 0)
holds(1, in_tower((block,18),(block,15)), false, 0)
holds(1, in_tower((block,18),(block,16)), false, 0)
holds(1, in_tower((block,18),(block,17)), false, 0)
holds(1, in_tower((block,18),(block,18)), false, 0)
holds(1, in_tower((block,18),(block,2)), false, 0)
holds(1, in_tower((block,18),(block,3)), false, 0)
holds(1, in_tower((block,18),(block,4)), false, 0)
holds(1, in_tower((block,18),(block,5)), false, 0)
holds(1, in_tower((block,18),(block,6)), false, 0)
holds(1, in_tower((block,18),(block,7)), false, 0)
holds(1, in_tower((block,18),(block,8)), false, 0)
holds(1, in_tower((block,18),(block,9)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,10)), false, 0)
holds(1, in_tower((block,2),(block,11)), false, 0)
holds(1, in_tower((block,2),(block,12)), false, 0)
holds(1, in_tower((block,2),(block,13)), false, 0)
holds(1, in_tower((block,2),(block,14)), false, 0)
holds(1, in_tower((block,2),(block,15)), false, 0)
holds(1, in_tower((block,2),(block,16)), false, 0)
holds(1, in_tower((block,2),(block,17)), false, 0)
holds(1, in_tower((block,2),(block,18)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,7)), false, 0)
holds(1, in_tower((block,2),(block,8)), false, 0)
holds(1, in_tower((block,2),(block,9)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,10)), false, 0)
holds(1, in_tower((block,3),(block,11)), false, 0)
holds(1, in_tower((block,3),(block,12)), false, 0)
holds(1, in_tower((block,3),(block,13)), false, 0)
holds(1, in_tower((block,3),(block,14)), false, 0)
holds(1, in_tower((block,3),(block,15)), false, 0)
holds(1, in_tower((block,3),(block,16)), false, 0)
holds(1, in_tower((block,3),(block,17)), false, 0)
holds(1, in_tower((block,3),(block,18)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,7)), false, 0)
holds(1, in_tower((block,3),(block,8)), false, 0)
holds(1, in_tower((block,3),(block,9)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,10)), false, 0)
holds(1, in_tower((block,4),(block,11)), false, 0)
holds(1, in_tower((block,4),(block,12)), false, 0)
holds(1, in_tower((block,4),(block,13)), false, 0)
holds(1, in_tower((block,4),(block,14)), false, 0)
holds(1, in_tower((block,4),(block,15)), false, 0)
holds(1, in_tower((block,4),(block,16)), false, 0)
holds(1, in_tower((block,4),(block,17)), false, 0)
holds(1, in_tower((block,4),(block,18)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,7)), false, 0)
holds(1, in_tower((block,4),(block,8)), false, 0)
holds(1, in_tower((block,4),(block,9)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,10)), false, 0)
holds(1, in_tower((block,5),(block,11)), false, 0)
holds(1, in_tower((block,5),(block,12)), false, 0)
holds(1, in_tower((block,5),(block,13)), false, 0)
holds(1, in_tower((block,5),(block,14)), false, 0)
holds(1, in_tower((block,5),(block,15)), false, 0)
holds(1, in_tower((block,5),(block,16)), false, 0)
holds(1, in_tower((block,5),(block,17)), false, 0)
holds(1, in_tower((block,5),(block,18)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,7)), false, 0)
holds(1, in_tower((block,5),(block,8)), false, 0)
holds(1, in_tower((block,5),(block,9)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,10)), false, 0)
holds(1, in_tower((block,6),(block,11)), false, 0)
holds(1, in_tower((block,6),(block,12)), false, 0)
holds(1, in_tower((block,6),(block,13)), false, 0)
holds(1, in_tower((block,6),(block,14)), false, 0)
holds(1, in_tower((block,6),(block,15)), false, 0)
holds(1, in_tower((block,6),(block,16)), false, 0)
holds(1, in_tower((block,6),(block,17)), false, 0)
holds(1, in_tower((block,6),(block,18)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,7)), false, 0)
holds(1, in_tower((block,6),(block,8)), false, 0)
holds(1, in_tower((block,6),(block,9)), false, 0)
holds(1, in_tower((block,7),(block,1)), false, 0)
holds(1, in_tower((block,7),(block,10)), false, 0)
holds(1, in_tower((block,7),(block,11)), false, 0)
holds(1, in_tower((block,7),(block,12)), false, 0)
holds(1, in_tower((block,7),(block,13)), false, 0)
holds(1, in_tower((block,7),(block,14)), false, 0)
holds(1, in_tower((block,7),(block,15)), false, 0)
holds(1, in_tower((block,7),(block,16)), false, 0)
holds(1, in_tower((block,7),(block,17)), false, 0)
holds(1, in_tower((block,7),(block,18)), false, 0)
holds(1, in_tower((block,7),(block,2)), false, 0)
holds(1, in_tower((block,7),(block,3)), false, 0)
holds(1, in_tower((block,7),(block,4)), false, 0)
holds(1, in_tower((block,7),(block,5)), false, 0)
holds(1, in_tower((block,7),(block,6)), false, 0)
holds(1, in_tower((block,7),(block,7)), true, 0)
holds(1, in_tower((block,7),(block,8)), false, 0)
holds(1, in_tower((block,7),(block,9)), true, 0)
holds(1, in_tower((block,8),(block,1)), false, 0)
holds(1, in_tower((block,8),(block,10)), false, 0)
holds(1, in_tower((block,8),(block,11)), false, 0)
holds(1, in_tower((block,8),(block,12)), false, 0)
holds(1, in_tower((block,8),(block,13)), false, 0)
holds(1, in_tower((block,8),(block,14)), false, 0)
holds(1, in_tower((block,8),(block,15)), false, 0)
holds(1, in_tower((block,8),(block,16)), false, 0)
holds(1, in_tower((block,8),(block,17)), false, 0)
holds(1, in_tower((block,8),(block,18)), false, 0)
holds(1, in_tower((block,8),(block,2)), false, 0)
holds(1, in_tower((block,8),(block,3)), false, 0)
holds(1, in_tower((block,8),(block,4)), false, 0)
holds(1, in_tower((block,8),(block,5)), false, 0)
holds(1, in_tower((block,8),(block,6)), false, 0)
holds(1, in_tower((block,8),(block,7)), false, 0)
holds(1, in_tower((block,8),(block,8)), false, 0)
holds(1, in_tower((block,8),(block,9)), false, 0)
holds(1, in_tower((block,9),(block,1)), false, 0)
holds(1, in_tower((block,9),(block,10)), false, 0)
holds(1, in_tower((block,9),(block,11)), false, 0)
holds(1, in_tower((block,9),(block,12)), false, 0)
holds(1, in_tower((block,9),(block,13)), false, 0)
holds(1, in_tower((block,9),(block,14)), false, 0)
holds(1, in_tower((block,9),(block,15)), false, 0)
holds(1, in_tower((block,9),(block,16)), false, 0)
holds(1, in_tower((block,9),(block,17)), false, 0)
holds(1, in_tower((block,9),(block,18)), false, 0)
holds(1, in_tower((block,9),(block,2)), false, 0)
holds(1, in_tower((block,9),(block,3)), false, 0)
holds(1, in_tower((block,9),(block,4)), false, 0)
holds(1, in_tower((block,9),(block,5)), false, 0)
holds(1, in_tower((block,9),(block,6)), false, 0)
holds(1, in_tower((block,9),(block,7)), false, 0)
holds(1, in_tower((block,9),(block,8)), false, 0)
holds(1, in_tower((block,9),(block,9)), false, 0)
holds(1, on((block,1)), puzzle_room_1_table_left, 0)
holds(1, on((block,10)), puzzle_room_2_table_left, 0)
holds(1, on((block,11)), puzzle_room_2_table_right, 0)
holds(1, on((block,12)), (block,10), 0)
holds(1, on((block,13)), nothing, 0)
holds(1, on((block,14)), nothing, 0)
holds(1, on((block,15)), nothing, 0)
holds(1, on((block,16)), puzzle_room_2_table_middle, 0)
holds(1, on((block,17)), nothing, 0)
holds(1, on((block,18)), (block,16), 0)
holds(1, on((block,2)), puzzle_room_1_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, on((block,7)), puzzle_room_1_table_middle, 0)
holds(1, on((block,8)), nothing, 0)
holds(1, on((block,9)), (block,7), 0)
holds(1, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(1, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(1, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(1, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(1, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(1, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(1, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(1, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(1, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(1, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(1, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[04-03-2022_16-19-36] INFO :: ASH Planner Main #1 >> Generating final-goals...

[04-03-2022_16-19-36] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[04-03-2022_16-19-36] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Final Goals')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Parsing raw logic program code:


[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program code parsed successfully.

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated successfully.

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=none']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 443 rules

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.0031364000000007053s

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[04-03-2022_16-19-36] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('entities', []), ('static_state', []), ('goal_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[04-03-2022_16-19-37] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 1.068665s.

[04-03-2022_16-19-37] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 3.019470s with result Satisfiable.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 1.068665s, Solving = 3.019470s, Total = 4.088135s, Memory = (RSS = 283.328125Mb, VMS = 275.847656Mb)
Final Model :: Total atoms = 77586, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-03-2022_16-19-40] INFO :: ASH Planner Main #1 >> Final-goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 1.068665s, Solving = 3.019470s, Total = 4.088135s, Memory = (RSS = 283.328125Mb, VMS = 275.847656Mb)
Final Model :: Total atoms = 77586, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-03-2022_16-19-40] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 5         
      ================================================      

final_goal(5, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(5, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(5, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(5, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(5, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(5, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(5, in_tower((block,1),(block,1)), false, true)
final_goal(5, in_tower((block,1),(block,10)), false, true)
final_goal(5, in_tower((block,1),(block,11)), false, true)
final_goal(5, in_tower((block,1),(block,12)), false, true)
final_goal(5, in_tower((block,1),(block,13)), false, true)
final_goal(5, in_tower((block,1),(block,14)), false, true)
final_goal(5, in_tower((block,1),(block,15)), false, true)
final_goal(5, in_tower((block,1),(block,16)), false, true)
final_goal(5, in_tower((block,1),(block,17)), false, true)
final_goal(5, in_tower((block,1),(block,18)), false, true)
final_goal(5, in_tower((block,1),(block,2)), false, true)
final_goal(5, in_tower((block,1),(block,3)), false, true)
final_goal(5, in_tower((block,1),(block,4)), false, true)
final_goal(5, in_tower((block,1),(block,5)), false, true)
final_goal(5, in_tower((block,1),(block,6)), false, true)
final_goal(5, in_tower((block,1),(block,7)), false, true)
final_goal(5, in_tower((block,1),(block,8)), false, true)
final_goal(5, in_tower((block,1),(block,9)), false, true)
final_goal(5, in_tower((block,10),(block,1)), false, true)
final_goal(5, in_tower((block,10),(block,10)), false, true)
final_goal(5, in_tower((block,10),(block,11)), false, true)
final_goal(5, in_tower((block,10),(block,12)), false, true)
final_goal(5, in_tower((block,10),(block,13)), false, true)
final_goal(5, in_tower((block,10),(block,14)), false, true)
final_goal(5, in_tower((block,10),(block,15)), false, true)
final_goal(5, in_tower((block,10),(block,16)), false, true)
final_goal(5, in_tower((block,10),(block,17)), false, true)
final_goal(5, in_tower((block,10),(block,18)), false, true)
final_goal(5, in_tower((block,10),(block,2)), false, true)
final_goal(5, in_tower((block,10),(block,3)), false, true)
final_goal(5, in_tower((block,10),(block,4)), false, true)
final_goal(5, in_tower((block,10),(block,5)), false, true)
final_goal(5, in_tower((block,10),(block,6)), false, true)
final_goal(5, in_tower((block,10),(block,7)), false, true)
final_goal(5, in_tower((block,10),(block,8)), false, true)
final_goal(5, in_tower((block,10),(block,9)), false, true)
final_goal(5, in_tower((block,11),(block,1)), false, true)
final_goal(5, in_tower((block,11),(block,10)), false, true)
final_goal(5, in_tower((block,11),(block,11)), false, true)
final_goal(5, in_tower((block,11),(block,12)), false, true)
final_goal(5, in_tower((block,11),(block,13)), false, true)
final_goal(5, in_tower((block,11),(block,14)), false, true)
final_goal(5, in_tower((block,11),(block,15)), false, true)
final_goal(5, in_tower((block,11),(block,16)), false, true)
final_goal(5, in_tower((block,11),(block,17)), false, true)
final_goal(5, in_tower((block,11),(block,18)), false, true)
final_goal(5, in_tower((block,11),(block,2)), false, true)
final_goal(5, in_tower((block,11),(block,3)), false, true)
final_goal(5, in_tower((block,11),(block,4)), false, true)
final_goal(5, in_tower((block,11),(block,5)), false, true)
final_goal(5, in_tower((block,11),(block,6)), false, true)
final_goal(5, in_tower((block,11),(block,7)), false, true)
final_goal(5, in_tower((block,11),(block,8)), false, true)
final_goal(5, in_tower((block,11),(block,9)), false, true)
final_goal(5, in_tower((block,12),(block,1)), false, true)
final_goal(5, in_tower((block,12),(block,10)), true, true)
final_goal(5, in_tower((block,12),(block,11)), true, true)
final_goal(5, in_tower((block,12),(block,12)), true, true)
final_goal(5, in_tower((block,12),(block,13)), false, true)
final_goal(5, in_tower((block,12),(block,14)), false, true)
final_goal(5, in_tower((block,12),(block,15)), false, true)
final_goal(5, in_tower((block,12),(block,16)), false, true)
final_goal(5, in_tower((block,12),(block,17)), false, true)
final_goal(5, in_tower((block,12),(block,18)), false, true)
final_goal(5, in_tower((block,12),(block,2)), false, true)
final_goal(5, in_tower((block,12),(block,3)), false, true)
final_goal(5, in_tower((block,12),(block,4)), false, true)
final_goal(5, in_tower((block,12),(block,5)), false, true)
final_goal(5, in_tower((block,12),(block,6)), false, true)
final_goal(5, in_tower((block,12),(block,7)), false, true)
final_goal(5, in_tower((block,12),(block,8)), false, true)
final_goal(5, in_tower((block,12),(block,9)), false, true)
final_goal(5, in_tower((block,13),(block,1)), false, true)
final_goal(5, in_tower((block,13),(block,10)), false, true)
final_goal(5, in_tower((block,13),(block,11)), false, true)
final_goal(5, in_tower((block,13),(block,12)), false, true)
final_goal(5, in_tower((block,13),(block,13)), false, true)
final_goal(5, in_tower((block,13),(block,14)), false, true)
final_goal(5, in_tower((block,13),(block,15)), false, true)
final_goal(5, in_tower((block,13),(block,16)), false, true)
final_goal(5, in_tower((block,13),(block,17)), false, true)
final_goal(5, in_tower((block,13),(block,18)), false, true)
final_goal(5, in_tower((block,13),(block,2)), false, true)
final_goal(5, in_tower((block,13),(block,3)), false, true)
final_goal(5, in_tower((block,13),(block,4)), false, true)
final_goal(5, in_tower((block,13),(block,5)), false, true)
final_goal(5, in_tower((block,13),(block,6)), false, true)
final_goal(5, in_tower((block,13),(block,7)), false, true)
final_goal(5, in_tower((block,13),(block,8)), false, true)
final_goal(5, in_tower((block,13),(block,9)), false, true)
final_goal(5, in_tower((block,14),(block,1)), false, true)
final_goal(5, in_tower((block,14),(block,10)), false, true)
final_goal(5, in_tower((block,14),(block,11)), false, true)
final_goal(5, in_tower((block,14),(block,12)), false, true)
final_goal(5, in_tower((block,14),(block,13)), false, true)
final_goal(5, in_tower((block,14),(block,14)), false, true)
final_goal(5, in_tower((block,14),(block,15)), false, true)
final_goal(5, in_tower((block,14),(block,16)), false, true)
final_goal(5, in_tower((block,14),(block,17)), false, true)
final_goal(5, in_tower((block,14),(block,18)), false, true)
final_goal(5, in_tower((block,14),(block,2)), false, true)
final_goal(5, in_tower((block,14),(block,3)), false, true)
final_goal(5, in_tower((block,14),(block,4)), false, true)
final_goal(5, in_tower((block,14),(block,5)), false, true)
final_goal(5, in_tower((block,14),(block,6)), false, true)
final_goal(5, in_tower((block,14),(block,7)), false, true)
final_goal(5, in_tower((block,14),(block,8)), false, true)
final_goal(5, in_tower((block,14),(block,9)), false, true)
final_goal(5, in_tower((block,15),(block,1)), false, true)
final_goal(5, in_tower((block,15),(block,10)), false, true)
final_goal(5, in_tower((block,15),(block,11)), false, true)
final_goal(5, in_tower((block,15),(block,12)), false, true)
final_goal(5, in_tower((block,15),(block,13)), true, true)
final_goal(5, in_tower((block,15),(block,14)), true, true)
final_goal(5, in_tower((block,15),(block,15)), true, true)
final_goal(5, in_tower((block,15),(block,16)), false, true)
final_goal(5, in_tower((block,15),(block,17)), false, true)
final_goal(5, in_tower((block,15),(block,18)), false, true)
final_goal(5, in_tower((block,15),(block,2)), false, true)
final_goal(5, in_tower((block,15),(block,3)), false, true)
final_goal(5, in_tower((block,15),(block,4)), false, true)
final_goal(5, in_tower((block,15),(block,5)), false, true)
final_goal(5, in_tower((block,15),(block,6)), false, true)
final_goal(5, in_tower((block,15),(block,7)), false, true)
final_goal(5, in_tower((block,15),(block,8)), false, true)
final_goal(5, in_tower((block,15),(block,9)), false, true)
final_goal(5, in_tower((block,16),(block,1)), false, true)
final_goal(5, in_tower((block,16),(block,10)), false, true)
final_goal(5, in_tower((block,16),(block,11)), false, true)
final_goal(5, in_tower((block,16),(block,12)), false, true)
final_goal(5, in_tower((block,16),(block,13)), false, true)
final_goal(5, in_tower((block,16),(block,14)), false, true)
final_goal(5, in_tower((block,16),(block,15)), false, true)
final_goal(5, in_tower((block,16),(block,16)), false, true)
final_goal(5, in_tower((block,16),(block,17)), false, true)
final_goal(5, in_tower((block,16),(block,18)), false, true)
final_goal(5, in_tower((block,16),(block,2)), false, true)
final_goal(5, in_tower((block,16),(block,3)), false, true)
final_goal(5, in_tower((block,16),(block,4)), false, true)
final_goal(5, in_tower((block,16),(block,5)), false, true)
final_goal(5, in_tower((block,16),(block,6)), false, true)
final_goal(5, in_tower((block,16),(block,7)), false, true)
final_goal(5, in_tower((block,16),(block,8)), false, true)
final_goal(5, in_tower((block,16),(block,9)), false, true)
final_goal(5, in_tower((block,17),(block,1)), false, true)
final_goal(5, in_tower((block,17),(block,10)), false, true)
final_goal(5, in_tower((block,17),(block,11)), false, true)
final_goal(5, in_tower((block,17),(block,12)), false, true)
final_goal(5, in_tower((block,17),(block,13)), false, true)
final_goal(5, in_tower((block,17),(block,14)), false, true)
final_goal(5, in_tower((block,17),(block,15)), false, true)
final_goal(5, in_tower((block,17),(block,16)), false, true)
final_goal(5, in_tower((block,17),(block,17)), false, true)
final_goal(5, in_tower((block,17),(block,18)), false, true)
final_goal(5, in_tower((block,17),(block,2)), false, true)
final_goal(5, in_tower((block,17),(block,3)), false, true)
final_goal(5, in_tower((block,17),(block,4)), false, true)
final_goal(5, in_tower((block,17),(block,5)), false, true)
final_goal(5, in_tower((block,17),(block,6)), false, true)
final_goal(5, in_tower((block,17),(block,7)), false, true)
final_goal(5, in_tower((block,17),(block,8)), false, true)
final_goal(5, in_tower((block,17),(block,9)), false, true)
final_goal(5, in_tower((block,18),(block,1)), false, true)
final_goal(5, in_tower((block,18),(block,10)), false, true)
final_goal(5, in_tower((block,18),(block,11)), false, true)
final_goal(5, in_tower((block,18),(block,12)), false, true)
final_goal(5, in_tower((block,18),(block,13)), false, true)
final_goal(5, in_tower((block,18),(block,14)), false, true)
final_goal(5, in_tower((block,18),(block,15)), false, true)
final_goal(5, in_tower((block,18),(block,16)), true, true)
final_goal(5, in_tower((block,18),(block,17)), true, true)
final_goal(5, in_tower((block,18),(block,18)), true, true)
final_goal(5, in_tower((block,18),(block,2)), false, true)
final_goal(5, in_tower((block,18),(block,3)), false, true)
final_goal(5, in_tower((block,18),(block,4)), false, true)
final_goal(5, in_tower((block,18),(block,5)), false, true)
final_goal(5, in_tower((block,18),(block,6)), false, true)
final_goal(5, in_tower((block,18),(block,7)), false, true)
final_goal(5, in_tower((block,18),(block,8)), false, true)
final_goal(5, in_tower((block,18),(block,9)), false, true)
final_goal(5, in_tower((block,2),(block,1)), false, true)
final_goal(5, in_tower((block,2),(block,10)), false, true)
final_goal(5, in_tower((block,2),(block,11)), false, true)
final_goal(5, in_tower((block,2),(block,12)), false, true)
final_goal(5, in_tower((block,2),(block,13)), false, true)
final_goal(5, in_tower((block,2),(block,14)), false, true)
final_goal(5, in_tower((block,2),(block,15)), false, true)
final_goal(5, in_tower((block,2),(block,16)), false, true)
final_goal(5, in_tower((block,2),(block,17)), false, true)
final_goal(5, in_tower((block,2),(block,18)), false, true)
final_goal(5, in_tower((block,2),(block,2)), false, true)
final_goal(5, in_tower((block,2),(block,3)), false, true)
final_goal(5, in_tower((block,2),(block,4)), false, true)
final_goal(5, in_tower((block,2),(block,5)), false, true)
final_goal(5, in_tower((block,2),(block,6)), false, true)
final_goal(5, in_tower((block,2),(block,7)), false, true)
final_goal(5, in_tower((block,2),(block,8)), false, true)
final_goal(5, in_tower((block,2),(block,9)), false, true)
final_goal(5, in_tower((block,3),(block,1)), true, true)
final_goal(5, in_tower((block,3),(block,10)), false, true)
final_goal(5, in_tower((block,3),(block,11)), false, true)
final_goal(5, in_tower((block,3),(block,12)), false, true)
final_goal(5, in_tower((block,3),(block,13)), false, true)
final_goal(5, in_tower((block,3),(block,14)), false, true)
final_goal(5, in_tower((block,3),(block,15)), false, true)
final_goal(5, in_tower((block,3),(block,16)), false, true)
final_goal(5, in_tower((block,3),(block,17)), false, true)
final_goal(5, in_tower((block,3),(block,18)), false, true)
final_goal(5, in_tower((block,3),(block,2)), true, true)
final_goal(5, in_tower((block,3),(block,3)), true, true)
final_goal(5, in_tower((block,3),(block,4)), false, true)
final_goal(5, in_tower((block,3),(block,5)), false, true)
final_goal(5, in_tower((block,3),(block,6)), false, true)
final_goal(5, in_tower((block,3),(block,7)), false, true)
final_goal(5, in_tower((block,3),(block,8)), false, true)
final_goal(5, in_tower((block,3),(block,9)), false, true)
final_goal(5, in_tower((block,4),(block,1)), false, true)
final_goal(5, in_tower((block,4),(block,10)), false, true)
final_goal(5, in_tower((block,4),(block,11)), false, true)
final_goal(5, in_tower((block,4),(block,12)), false, true)
final_goal(5, in_tower((block,4),(block,13)), false, true)
final_goal(5, in_tower((block,4),(block,14)), false, true)
final_goal(5, in_tower((block,4),(block,15)), false, true)
final_goal(5, in_tower((block,4),(block,16)), false, true)
final_goal(5, in_tower((block,4),(block,17)), false, true)
final_goal(5, in_tower((block,4),(block,18)), false, true)
final_goal(5, in_tower((block,4),(block,2)), false, true)
final_goal(5, in_tower((block,4),(block,3)), false, true)
final_goal(5, in_tower((block,4),(block,4)), false, true)
final_goal(5, in_tower((block,4),(block,5)), false, true)
final_goal(5, in_tower((block,4),(block,6)), false, true)
final_goal(5, in_tower((block,4),(block,7)), false, true)
final_goal(5, in_tower((block,4),(block,8)), false, true)
final_goal(5, in_tower((block,4),(block,9)), false, true)
final_goal(5, in_tower((block,5),(block,1)), false, true)
final_goal(5, in_tower((block,5),(block,10)), false, true)
final_goal(5, in_tower((block,5),(block,11)), false, true)
final_goal(5, in_tower((block,5),(block,12)), false, true)
final_goal(5, in_tower((block,5),(block,13)), false, true)
final_goal(5, in_tower((block,5),(block,14)), false, true)
final_goal(5, in_tower((block,5),(block,15)), false, true)
final_goal(5, in_tower((block,5),(block,16)), false, true)
final_goal(5, in_tower((block,5),(block,17)), false, true)
final_goal(5, in_tower((block,5),(block,18)), false, true)
final_goal(5, in_tower((block,5),(block,2)), false, true)
final_goal(5, in_tower((block,5),(block,3)), false, true)
final_goal(5, in_tower((block,5),(block,4)), false, true)
final_goal(5, in_tower((block,5),(block,5)), false, true)
final_goal(5, in_tower((block,5),(block,6)), false, true)
final_goal(5, in_tower((block,5),(block,7)), false, true)
final_goal(5, in_tower((block,5),(block,8)), false, true)
final_goal(5, in_tower((block,5),(block,9)), false, true)
final_goal(5, in_tower((block,6),(block,1)), false, true)
final_goal(5, in_tower((block,6),(block,10)), false, true)
final_goal(5, in_tower((block,6),(block,11)), false, true)
final_goal(5, in_tower((block,6),(block,12)), false, true)
final_goal(5, in_tower((block,6),(block,13)), false, true)
final_goal(5, in_tower((block,6),(block,14)), false, true)
final_goal(5, in_tower((block,6),(block,15)), false, true)
final_goal(5, in_tower((block,6),(block,16)), false, true)
final_goal(5, in_tower((block,6),(block,17)), false, true)
final_goal(5, in_tower((block,6),(block,18)), false, true)
final_goal(5, in_tower((block,6),(block,2)), false, true)
final_goal(5, in_tower((block,6),(block,3)), false, true)
final_goal(5, in_tower((block,6),(block,4)), true, true)
final_goal(5, in_tower((block,6),(block,5)), true, true)
final_goal(5, in_tower((block,6),(block,6)), true, true)
final_goal(5, in_tower((block,6),(block,7)), false, true)
final_goal(5, in_tower((block,6),(block,8)), false, true)
final_goal(5, in_tower((block,6),(block,9)), false, true)
final_goal(5, in_tower((block,7),(block,1)), false, true)
final_goal(5, in_tower((block,7),(block,10)), false, true)
final_goal(5, in_tower((block,7),(block,11)), false, true)
final_goal(5, in_tower((block,7),(block,12)), false, true)
final_goal(5, in_tower((block,7),(block,13)), false, true)
final_goal(5, in_tower((block,7),(block,14)), false, true)
final_goal(5, in_tower((block,7),(block,15)), false, true)
final_goal(5, in_tower((block,7),(block,16)), false, true)
final_goal(5, in_tower((block,7),(block,17)), false, true)
final_goal(5, in_tower((block,7),(block,18)), false, true)
final_goal(5, in_tower((block,7),(block,2)), false, true)
final_goal(5, in_tower((block,7),(block,3)), false, true)
final_goal(5, in_tower((block,7),(block,4)), false, true)
final_goal(5, in_tower((block,7),(block,5)), false, true)
final_goal(5, in_tower((block,7),(block,6)), false, true)
final_goal(5, in_tower((block,7),(block,7)), false, true)
final_goal(5, in_tower((block,7),(block,8)), false, true)
final_goal(5, in_tower((block,7),(block,9)), false, true)
final_goal(5, in_tower((block,8),(block,1)), false, true)
final_goal(5, in_tower((block,8),(block,10)), false, true)
final_goal(5, in_tower((block,8),(block,11)), false, true)
final_goal(5, in_tower((block,8),(block,12)), false, true)
final_goal(5, in_tower((block,8),(block,13)), false, true)
final_goal(5, in_tower((block,8),(block,14)), false, true)
final_goal(5, in_tower((block,8),(block,15)), false, true)
final_goal(5, in_tower((block,8),(block,16)), false, true)
final_goal(5, in_tower((block,8),(block,17)), false, true)
final_goal(5, in_tower((block,8),(block,18)), false, true)
final_goal(5, in_tower((block,8),(block,2)), false, true)
final_goal(5, in_tower((block,8),(block,3)), false, true)
final_goal(5, in_tower((block,8),(block,4)), false, true)
final_goal(5, in_tower((block,8),(block,5)), false, true)
final_goal(5, in_tower((block,8),(block,6)), false, true)
final_goal(5, in_tower((block,8),(block,7)), false, true)
final_goal(5, in_tower((block,8),(block,8)), false, true)
final_goal(5, in_tower((block,8),(block,9)), false, true)
final_goal(5, in_tower((block,9),(block,1)), false, true)
final_goal(5, in_tower((block,9),(block,10)), false, true)
final_goal(5, in_tower((block,9),(block,11)), false, true)
final_goal(5, in_tower((block,9),(block,12)), false, true)
final_goal(5, in_tower((block,9),(block,13)), false, true)
final_goal(5, in_tower((block,9),(block,14)), false, true)
final_goal(5, in_tower((block,9),(block,15)), false, true)
final_goal(5, in_tower((block,9),(block,16)), false, true)
final_goal(5, in_tower((block,9),(block,17)), false, true)
final_goal(5, in_tower((block,9),(block,18)), false, true)
final_goal(5, in_tower((block,9),(block,2)), false, true)
final_goal(5, in_tower((block,9),(block,3)), false, true)
final_goal(5, in_tower((block,9),(block,4)), false, true)
final_goal(5, in_tower((block,9),(block,5)), false, true)
final_goal(5, in_tower((block,9),(block,6)), false, true)
final_goal(5, in_tower((block,9),(block,7)), true, true)
final_goal(5, in_tower((block,9),(block,8)), true, true)
final_goal(5, in_tower((block,9),(block,9)), true, true)
final_goal(5, on((block,1)), (block,2), true)
final_goal(5, on((block,10)), (block,11), true)
final_goal(5, on((block,11)), (block,12), true)
final_goal(5, on((block,12)), puzzle_room_2_table, true)
final_goal(5, on((block,13)), (block,14), true)
final_goal(5, on((block,14)), (block,15), true)
final_goal(5, on((block,15)), puzzle_room_2_table, true)
final_goal(5, on((block,16)), (block,17), true)
final_goal(5, on((block,17)), (block,18), true)
final_goal(5, on((block,18)), puzzle_room_2_table, true)
final_goal(5, on((block,2)), (block,3), true)
final_goal(5, on((block,3)), puzzle_room_1_table, true)
final_goal(5, on((block,4)), (block,5), true)
final_goal(5, on((block,5)), (block,6), true)
final_goal(5, on((block,6)), puzzle_room_1_table, true)
final_goal(5, on((block,7)), (block,8), true)
final_goal(5, on((block,8)), (block,9), true)
final_goal(5, on((block,9)), puzzle_room_1_table, true)
final_goal(5, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(5, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(5, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(5, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(5, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(5, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(5, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), false, true)

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 5         
      ================================================      

final_goal(5, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(5, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(5, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(5, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(5, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(5, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(5, in_tower((block,1),(block,1)), true, false)
final_goal(5, in_tower((block,1),(block,10)), true, false)
final_goal(5, in_tower((block,1),(block,11)), true, false)
final_goal(5, in_tower((block,1),(block,12)), true, false)
final_goal(5, in_tower((block,1),(block,13)), true, false)
final_goal(5, in_tower((block,1),(block,14)), true, false)
final_goal(5, in_tower((block,1),(block,15)), true, false)
final_goal(5, in_tower((block,1),(block,16)), true, false)
final_goal(5, in_tower((block,1),(block,17)), true, false)
final_goal(5, in_tower((block,1),(block,18)), true, false)
final_goal(5, in_tower((block,1),(block,2)), true, false)
final_goal(5, in_tower((block,1),(block,3)), true, false)
final_goal(5, in_tower((block,1),(block,4)), true, false)
final_goal(5, in_tower((block,1),(block,5)), true, false)
final_goal(5, in_tower((block,1),(block,6)), true, false)
final_goal(5, in_tower((block,1),(block,7)), true, false)
final_goal(5, in_tower((block,1),(block,8)), true, false)
final_goal(5, in_tower((block,1),(block,9)), true, false)
final_goal(5, in_tower((block,10),(block,1)), true, false)
final_goal(5, in_tower((block,10),(block,10)), true, false)
final_goal(5, in_tower((block,10),(block,11)), true, false)
final_goal(5, in_tower((block,10),(block,12)), true, false)
final_goal(5, in_tower((block,10),(block,13)), true, false)
final_goal(5, in_tower((block,10),(block,14)), true, false)
final_goal(5, in_tower((block,10),(block,15)), true, false)
final_goal(5, in_tower((block,10),(block,16)), true, false)
final_goal(5, in_tower((block,10),(block,17)), true, false)
final_goal(5, in_tower((block,10),(block,18)), true, false)
final_goal(5, in_tower((block,10),(block,2)), true, false)
final_goal(5, in_tower((block,10),(block,3)), true, false)
final_goal(5, in_tower((block,10),(block,4)), true, false)
final_goal(5, in_tower((block,10),(block,5)), true, false)
final_goal(5, in_tower((block,10),(block,6)), true, false)
final_goal(5, in_tower((block,10),(block,7)), true, false)
final_goal(5, in_tower((block,10),(block,8)), true, false)
final_goal(5, in_tower((block,10),(block,9)), true, false)
final_goal(5, in_tower((block,11),(block,1)), true, false)
final_goal(5, in_tower((block,11),(block,10)), true, false)
final_goal(5, in_tower((block,11),(block,11)), true, false)
final_goal(5, in_tower((block,11),(block,12)), true, false)
final_goal(5, in_tower((block,11),(block,13)), true, false)
final_goal(5, in_tower((block,11),(block,14)), true, false)
final_goal(5, in_tower((block,11),(block,15)), true, false)
final_goal(5, in_tower((block,11),(block,16)), true, false)
final_goal(5, in_tower((block,11),(block,17)), true, false)
final_goal(5, in_tower((block,11),(block,18)), true, false)
final_goal(5, in_tower((block,11),(block,2)), true, false)
final_goal(5, in_tower((block,11),(block,3)), true, false)
final_goal(5, in_tower((block,11),(block,4)), true, false)
final_goal(5, in_tower((block,11),(block,5)), true, false)
final_goal(5, in_tower((block,11),(block,6)), true, false)
final_goal(5, in_tower((block,11),(block,7)), true, false)
final_goal(5, in_tower((block,11),(block,8)), true, false)
final_goal(5, in_tower((block,11),(block,9)), true, false)
final_goal(5, in_tower((block,12),(block,1)), true, false)
final_goal(5, in_tower((block,12),(block,10)), false, false)
final_goal(5, in_tower((block,12),(block,11)), false, false)
final_goal(5, in_tower((block,12),(block,12)), false, false)
final_goal(5, in_tower((block,12),(block,13)), true, false)
final_goal(5, in_tower((block,12),(block,14)), true, false)
final_goal(5, in_tower((block,12),(block,15)), true, false)
final_goal(5, in_tower((block,12),(block,16)), true, false)
final_goal(5, in_tower((block,12),(block,17)), true, false)
final_goal(5, in_tower((block,12),(block,18)), true, false)
final_goal(5, in_tower((block,12),(block,2)), true, false)
final_goal(5, in_tower((block,12),(block,3)), true, false)
final_goal(5, in_tower((block,12),(block,4)), true, false)
final_goal(5, in_tower((block,12),(block,5)), true, false)
final_goal(5, in_tower((block,12),(block,6)), true, false)
final_goal(5, in_tower((block,12),(block,7)), true, false)
final_goal(5, in_tower((block,12),(block,8)), true, false)
final_goal(5, in_tower((block,12),(block,9)), true, false)
final_goal(5, in_tower((block,13),(block,1)), true, false)
final_goal(5, in_tower((block,13),(block,10)), true, false)
final_goal(5, in_tower((block,13),(block,11)), true, false)
final_goal(5, in_tower((block,13),(block,12)), true, false)
final_goal(5, in_tower((block,13),(block,13)), true, false)
final_goal(5, in_tower((block,13),(block,14)), true, false)
final_goal(5, in_tower((block,13),(block,15)), true, false)
final_goal(5, in_tower((block,13),(block,16)), true, false)
final_goal(5, in_tower((block,13),(block,17)), true, false)
final_goal(5, in_tower((block,13),(block,18)), true, false)
final_goal(5, in_tower((block,13),(block,2)), true, false)
final_goal(5, in_tower((block,13),(block,3)), true, false)
final_goal(5, in_tower((block,13),(block,4)), true, false)
final_goal(5, in_tower((block,13),(block,5)), true, false)
final_goal(5, in_tower((block,13),(block,6)), true, false)
final_goal(5, in_tower((block,13),(block,7)), true, false)
final_goal(5, in_tower((block,13),(block,8)), true, false)
final_goal(5, in_tower((block,13),(block,9)), true, false)
final_goal(5, in_tower((block,14),(block,1)), true, false)
final_goal(5, in_tower((block,14),(block,10)), true, false)
final_goal(5, in_tower((block,14),(block,11)), true, false)
final_goal(5, in_tower((block,14),(block,12)), true, false)
final_goal(5, in_tower((block,14),(block,13)), true, false)
final_goal(5, in_tower((block,14),(block,14)), true, false)
final_goal(5, in_tower((block,14),(block,15)), true, false)
final_goal(5, in_tower((block,14),(block,16)), true, false)
final_goal(5, in_tower((block,14),(block,17)), true, false)
final_goal(5, in_tower((block,14),(block,18)), true, false)
final_goal(5, in_tower((block,14),(block,2)), true, false)
final_goal(5, in_tower((block,14),(block,3)), true, false)
final_goal(5, in_tower((block,14),(block,4)), true, false)
final_goal(5, in_tower((block,14),(block,5)), true, false)
final_goal(5, in_tower((block,14),(block,6)), true, false)
final_goal(5, in_tower((block,14),(block,7)), true, false)
final_goal(5, in_tower((block,14),(block,8)), true, false)
final_goal(5, in_tower((block,14),(block,9)), true, false)
final_goal(5, in_tower((block,15),(block,1)), true, false)
final_goal(5, in_tower((block,15),(block,10)), true, false)
final_goal(5, in_tower((block,15),(block,11)), true, false)
final_goal(5, in_tower((block,15),(block,12)), true, false)
final_goal(5, in_tower((block,15),(block,13)), false, false)
final_goal(5, in_tower((block,15),(block,14)), false, false)
final_goal(5, in_tower((block,15),(block,15)), false, false)
final_goal(5, in_tower((block,15),(block,16)), true, false)
final_goal(5, in_tower((block,15),(block,17)), true, false)
final_goal(5, in_tower((block,15),(block,18)), true, false)
final_goal(5, in_tower((block,15),(block,2)), true, false)
final_goal(5, in_tower((block,15),(block,3)), true, false)
final_goal(5, in_tower((block,15),(block,4)), true, false)
final_goal(5, in_tower((block,15),(block,5)), true, false)
final_goal(5, in_tower((block,15),(block,6)), true, false)
final_goal(5, in_tower((block,15),(block,7)), true, false)
final_goal(5, in_tower((block,15),(block,8)), true, false)
final_goal(5, in_tower((block,15),(block,9)), true, false)
final_goal(5, in_tower((block,16),(block,1)), true, false)
final_goal(5, in_tower((block,16),(block,10)), true, false)
final_goal(5, in_tower((block,16),(block,11)), true, false)
final_goal(5, in_tower((block,16),(block,12)), true, false)
final_goal(5, in_tower((block,16),(block,13)), true, false)
final_goal(5, in_tower((block,16),(block,14)), true, false)
final_goal(5, in_tower((block,16),(block,15)), true, false)
final_goal(5, in_tower((block,16),(block,16)), true, false)
final_goal(5, in_tower((block,16),(block,17)), true, false)
final_goal(5, in_tower((block,16),(block,18)), true, false)
final_goal(5, in_tower((block,16),(block,2)), true, false)
final_goal(5, in_tower((block,16),(block,3)), true, false)
final_goal(5, in_tower((block,16),(block,4)), true, false)
final_goal(5, in_tower((block,16),(block,5)), true, false)
final_goal(5, in_tower((block,16),(block,6)), true, false)
final_goal(5, in_tower((block,16),(block,7)), true, false)
final_goal(5, in_tower((block,16),(block,8)), true, false)
final_goal(5, in_tower((block,16),(block,9)), true, false)
final_goal(5, in_tower((block,17),(block,1)), true, false)
final_goal(5, in_tower((block,17),(block,10)), true, false)
final_goal(5, in_tower((block,17),(block,11)), true, false)
final_goal(5, in_tower((block,17),(block,12)), true, false)
final_goal(5, in_tower((block,17),(block,13)), true, false)
final_goal(5, in_tower((block,17),(block,14)), true, false)
final_goal(5, in_tower((block,17),(block,15)), true, false)
final_goal(5, in_tower((block,17),(block,16)), true, false)
final_goal(5, in_tower((block,17),(block,17)), true, false)
final_goal(5, in_tower((block,17),(block,18)), true, false)
final_goal(5, in_tower((block,17),(block,2)), true, false)
final_goal(5, in_tower((block,17),(block,3)), true, false)
final_goal(5, in_tower((block,17),(block,4)), true, false)
final_goal(5, in_tower((block,17),(block,5)), true, false)
final_goal(5, in_tower((block,17),(block,6)), true, false)
final_goal(5, in_tower((block,17),(block,7)), true, false)
final_goal(5, in_tower((block,17),(block,8)), true, false)
final_goal(5, in_tower((block,17),(block,9)), true, false)
final_goal(5, in_tower((block,18),(block,1)), true, false)
final_goal(5, in_tower((block,18),(block,10)), true, false)
final_goal(5, in_tower((block,18),(block,11)), true, false)
final_goal(5, in_tower((block,18),(block,12)), true, false)
final_goal(5, in_tower((block,18),(block,13)), true, false)
final_goal(5, in_tower((block,18),(block,14)), true, false)
final_goal(5, in_tower((block,18),(block,15)), true, false)
final_goal(5, in_tower((block,18),(block,16)), false, false)
final_goal(5, in_tower((block,18),(block,17)), false, false)
final_goal(5, in_tower((block,18),(block,18)), false, false)
final_goal(5, in_tower((block,18),(block,2)), true, false)
final_goal(5, in_tower((block,18),(block,3)), true, false)
final_goal(5, in_tower((block,18),(block,4)), true, false)
final_goal(5, in_tower((block,18),(block,5)), true, false)
final_goal(5, in_tower((block,18),(block,6)), true, false)
final_goal(5, in_tower((block,18),(block,7)), true, false)
final_goal(5, in_tower((block,18),(block,8)), true, false)
final_goal(5, in_tower((block,18),(block,9)), true, false)
final_goal(5, in_tower((block,2),(block,1)), true, false)
final_goal(5, in_tower((block,2),(block,10)), true, false)
final_goal(5, in_tower((block,2),(block,11)), true, false)
final_goal(5, in_tower((block,2),(block,12)), true, false)
final_goal(5, in_tower((block,2),(block,13)), true, false)
final_goal(5, in_tower((block,2),(block,14)), true, false)
final_goal(5, in_tower((block,2),(block,15)), true, false)
final_goal(5, in_tower((block,2),(block,16)), true, false)
final_goal(5, in_tower((block,2),(block,17)), true, false)
final_goal(5, in_tower((block,2),(block,18)), true, false)
final_goal(5, in_tower((block,2),(block,2)), true, false)
final_goal(5, in_tower((block,2),(block,3)), true, false)
final_goal(5, in_tower((block,2),(block,4)), true, false)
final_goal(5, in_tower((block,2),(block,5)), true, false)
final_goal(5, in_tower((block,2),(block,6)), true, false)
final_goal(5, in_tower((block,2),(block,7)), true, false)
final_goal(5, in_tower((block,2),(block,8)), true, false)
final_goal(5, in_tower((block,2),(block,9)), true, false)
final_goal(5, in_tower((block,3),(block,1)), false, false)
final_goal(5, in_tower((block,3),(block,10)), true, false)
final_goal(5, in_tower((block,3),(block,11)), true, false)
final_goal(5, in_tower((block,3),(block,12)), true, false)
final_goal(5, in_tower((block,3),(block,13)), true, false)
final_goal(5, in_tower((block,3),(block,14)), true, false)
final_goal(5, in_tower((block,3),(block,15)), true, false)
final_goal(5, in_tower((block,3),(block,16)), true, false)
final_goal(5, in_tower((block,3),(block,17)), true, false)
final_goal(5, in_tower((block,3),(block,18)), true, false)
final_goal(5, in_tower((block,3),(block,2)), false, false)
final_goal(5, in_tower((block,3),(block,3)), false, false)
final_goal(5, in_tower((block,3),(block,4)), true, false)
final_goal(5, in_tower((block,3),(block,5)), true, false)
final_goal(5, in_tower((block,3),(block,6)), true, false)
final_goal(5, in_tower((block,3),(block,7)), true, false)
final_goal(5, in_tower((block,3),(block,8)), true, false)
final_goal(5, in_tower((block,3),(block,9)), true, false)
final_goal(5, in_tower((block,4),(block,1)), true, false)
final_goal(5, in_tower((block,4),(block,10)), true, false)
final_goal(5, in_tower((block,4),(block,11)), true, false)
final_goal(5, in_tower((block,4),(block,12)), true, false)
final_goal(5, in_tower((block,4),(block,13)), true, false)
final_goal(5, in_tower((block,4),(block,14)), true, false)
final_goal(5, in_tower((block,4),(block,15)), true, false)
final_goal(5, in_tower((block,4),(block,16)), true, false)
final_goal(5, in_tower((block,4),(block,17)), true, false)
final_goal(5, in_tower((block,4),(block,18)), true, false)
final_goal(5, in_tower((block,4),(block,2)), true, false)
final_goal(5, in_tower((block,4),(block,3)), true, false)
final_goal(5, in_tower((block,4),(block,4)), true, false)
final_goal(5, in_tower((block,4),(block,5)), true, false)
final_goal(5, in_tower((block,4),(block,6)), true, false)
final_goal(5, in_tower((block,4),(block,7)), true, false)
final_goal(5, in_tower((block,4),(block,8)), true, false)
final_goal(5, in_tower((block,4),(block,9)), true, false)
final_goal(5, in_tower((block,5),(block,1)), true, false)
final_goal(5, in_tower((block,5),(block,10)), true, false)
final_goal(5, in_tower((block,5),(block,11)), true, false)
final_goal(5, in_tower((block,5),(block,12)), true, false)
final_goal(5, in_tower((block,5),(block,13)), true, false)
final_goal(5, in_tower((block,5),(block,14)), true, false)
final_goal(5, in_tower((block,5),(block,15)), true, false)
final_goal(5, in_tower((block,5),(block,16)), true, false)
final_goal(5, in_tower((block,5),(block,17)), true, false)
final_goal(5, in_tower((block,5),(block,18)), true, false)
final_goal(5, in_tower((block,5),(block,2)), true, false)
final_goal(5, in_tower((block,5),(block,3)), true, false)
final_goal(5, in_tower((block,5),(block,4)), true, false)
final_goal(5, in_tower((block,5),(block,5)), true, false)
final_goal(5, in_tower((block,5),(block,6)), true, false)
final_goal(5, in_tower((block,5),(block,7)), true, false)
final_goal(5, in_tower((block,5),(block,8)), true, false)
final_goal(5, in_tower((block,5),(block,9)), true, false)
final_goal(5, in_tower((block,6),(block,1)), true, false)
final_goal(5, in_tower((block,6),(block,10)), true, false)
final_goal(5, in_tower((block,6),(block,11)), true, false)
final_goal(5, in_tower((block,6),(block,12)), true, false)
final_goal(5, in_tower((block,6),(block,13)), true, false)
final_goal(5, in_tower((block,6),(block,14)), true, false)
final_goal(5, in_tower((block,6),(block,15)), true, false)
final_goal(5, in_tower((block,6),(block,16)), true, false)
final_goal(5, in_tower((block,6),(block,17)), true, false)
final_goal(5, in_tower((block,6),(block,18)), true, false)
final_goal(5, in_tower((block,6),(block,2)), true, false)
final_goal(5, in_tower((block,6),(block,3)), true, false)
final_goal(5, in_tower((block,6),(block,4)), false, false)
final_goal(5, in_tower((block,6),(block,5)), false, false)
final_goal(5, in_tower((block,6),(block,6)), false, false)
final_goal(5, in_tower((block,6),(block,7)), true, false)
final_goal(5, in_tower((block,6),(block,8)), true, false)
final_goal(5, in_tower((block,6),(block,9)), true, false)
final_goal(5, in_tower((block,7),(block,1)), true, false)
final_goal(5, in_tower((block,7),(block,10)), true, false)
final_goal(5, in_tower((block,7),(block,11)), true, false)
final_goal(5, in_tower((block,7),(block,12)), true, false)
final_goal(5, in_tower((block,7),(block,13)), true, false)
final_goal(5, in_tower((block,7),(block,14)), true, false)
final_goal(5, in_tower((block,7),(block,15)), true, false)
final_goal(5, in_tower((block,7),(block,16)), true, false)
final_goal(5, in_tower((block,7),(block,17)), true, false)
final_goal(5, in_tower((block,7),(block,18)), true, false)
final_goal(5, in_tower((block,7),(block,2)), true, false)
final_goal(5, in_tower((block,7),(block,3)), true, false)
final_goal(5, in_tower((block,7),(block,4)), true, false)
final_goal(5, in_tower((block,7),(block,5)), true, false)
final_goal(5, in_tower((block,7),(block,6)), true, false)
final_goal(5, in_tower((block,7),(block,7)), true, false)
final_goal(5, in_tower((block,7),(block,8)), true, false)
final_goal(5, in_tower((block,7),(block,9)), true, false)
final_goal(5, in_tower((block,8),(block,1)), true, false)
final_goal(5, in_tower((block,8),(block,10)), true, false)
final_goal(5, in_tower((block,8),(block,11)), true, false)
final_goal(5, in_tower((block,8),(block,12)), true, false)
final_goal(5, in_tower((block,8),(block,13)), true, false)
final_goal(5, in_tower((block,8),(block,14)), true, false)
final_goal(5, in_tower((block,8),(block,15)), true, false)
final_goal(5, in_tower((block,8),(block,16)), true, false)
final_goal(5, in_tower((block,8),(block,17)), true, false)
final_goal(5, in_tower((block,8),(block,18)), true, false)
final_goal(5, in_tower((block,8),(block,2)), true, false)
final_goal(5, in_tower((block,8),(block,3)), true, false)
final_goal(5, in_tower((block,8),(block,4)), true, false)
final_goal(5, in_tower((block,8),(block,5)), true, false)
final_goal(5, in_tower((block,8),(block,6)), true, false)
final_goal(5, in_tower((block,8),(block,7)), true, false)
final_goal(5, in_tower((block,8),(block,8)), true, false)
final_goal(5, in_tower((block,8),(block,9)), true, false)
final_goal(5, in_tower((block,9),(block,1)), true, false)
final_goal(5, in_tower((block,9),(block,10)), true, false)
final_goal(5, in_tower((block,9),(block,11)), true, false)
final_goal(5, in_tower((block,9),(block,12)), true, false)
final_goal(5, in_tower((block,9),(block,13)), true, false)
final_goal(5, in_tower((block,9),(block,14)), true, false)
final_goal(5, in_tower((block,9),(block,15)), true, false)
final_goal(5, in_tower((block,9),(block,16)), true, false)
final_goal(5, in_tower((block,9),(block,17)), true, false)
final_goal(5, in_tower((block,9),(block,18)), true, false)
final_goal(5, in_tower((block,9),(block,2)), true, false)
final_goal(5, in_tower((block,9),(block,3)), true, false)
final_goal(5, in_tower((block,9),(block,4)), true, false)
final_goal(5, in_tower((block,9),(block,5)), true, false)
final_goal(5, in_tower((block,9),(block,6)), true, false)
final_goal(5, in_tower((block,9),(block,7)), false, false)
final_goal(5, in_tower((block,9),(block,8)), false, false)
final_goal(5, in_tower((block,9),(block,9)), false, false)
final_goal(5, on((block,1)), (block,10), false)
final_goal(5, on((block,1)), (block,11), false)
final_goal(5, on((block,1)), (block,12), false)
final_goal(5, on((block,1)), (block,13), false)
final_goal(5, on((block,1)), (block,14), false)
final_goal(5, on((block,1)), (block,15), false)
final_goal(5, on((block,1)), (block,16), false)
final_goal(5, on((block,1)), (block,17), false)
final_goal(5, on((block,1)), (block,18), false)
final_goal(5, on((block,1)), (block,3), false)
final_goal(5, on((block,1)), (block,4), false)
final_goal(5, on((block,1)), (block,5), false)
final_goal(5, on((block,1)), (block,6), false)
final_goal(5, on((block,1)), (block,7), false)
final_goal(5, on((block,1)), (block,8), false)
final_goal(5, on((block,1)), (block,9), false)
final_goal(5, on((block,1)), nothing, false)
final_goal(5, on((block,1)), puzzle_room_1_table, false)
final_goal(5, on((block,1)), puzzle_room_2_table, false)
final_goal(5, on((block,10)), (block,1), false)
final_goal(5, on((block,10)), (block,12), false)
final_goal(5, on((block,10)), (block,13), false)
final_goal(5, on((block,10)), (block,14), false)
final_goal(5, on((block,10)), (block,15), false)
final_goal(5, on((block,10)), (block,16), false)
final_goal(5, on((block,10)), (block,17), false)
final_goal(5, on((block,10)), (block,18), false)
final_goal(5, on((block,10)), (block,2), false)
final_goal(5, on((block,10)), (block,3), false)
final_goal(5, on((block,10)), (block,4), false)
final_goal(5, on((block,10)), (block,5), false)
final_goal(5, on((block,10)), (block,6), false)
final_goal(5, on((block,10)), (block,7), false)
final_goal(5, on((block,10)), (block,8), false)
final_goal(5, on((block,10)), (block,9), false)
final_goal(5, on((block,10)), nothing, false)
final_goal(5, on((block,10)), puzzle_room_1_table, false)
final_goal(5, on((block,10)), puzzle_room_2_table, false)
final_goal(5, on((block,11)), (block,1), false)
final_goal(5, on((block,11)), (block,10), false)
final_goal(5, on((block,11)), (block,13), false)
final_goal(5, on((block,11)), (block,14), false)
final_goal(5, on((block,11)), (block,15), false)
final_goal(5, on((block,11)), (block,16), false)
final_goal(5, on((block,11)), (block,17), false)
final_goal(5, on((block,11)), (block,18), false)
final_goal(5, on((block,11)), (block,2), false)
final_goal(5, on((block,11)), (block,3), false)
final_goal(5, on((block,11)), (block,4), false)
final_goal(5, on((block,11)), (block,5), false)
final_goal(5, on((block,11)), (block,6), false)
final_goal(5, on((block,11)), (block,7), false)
final_goal(5, on((block,11)), (block,8), false)
final_goal(5, on((block,11)), (block,9), false)
final_goal(5, on((block,11)), nothing, false)
final_goal(5, on((block,11)), puzzle_room_1_table, false)
final_goal(5, on((block,11)), puzzle_room_2_table, false)
final_goal(5, on((block,12)), (block,1), false)
final_goal(5, on((block,12)), (block,10), false)
final_goal(5, on((block,12)), (block,11), false)
final_goal(5, on((block,12)), (block,13), false)
final_goal(5, on((block,12)), (block,14), false)
final_goal(5, on((block,12)), (block,15), false)
final_goal(5, on((block,12)), (block,16), false)
final_goal(5, on((block,12)), (block,17), false)
final_goal(5, on((block,12)), (block,18), false)
final_goal(5, on((block,12)), (block,2), false)
final_goal(5, on((block,12)), (block,3), false)
final_goal(5, on((block,12)), (block,4), false)
final_goal(5, on((block,12)), (block,5), false)
final_goal(5, on((block,12)), (block,6), false)
final_goal(5, on((block,12)), (block,7), false)
final_goal(5, on((block,12)), (block,8), false)
final_goal(5, on((block,12)), (block,9), false)
final_goal(5, on((block,12)), nothing, false)
final_goal(5, on((block,12)), puzzle_room_1_table, false)
final_goal(5, on((block,13)), (block,1), false)
final_goal(5, on((block,13)), (block,10), false)
final_goal(5, on((block,13)), (block,11), false)
final_goal(5, on((block,13)), (block,12), false)
final_goal(5, on((block,13)), (block,15), false)
final_goal(5, on((block,13)), (block,16), false)
final_goal(5, on((block,13)), (block,17), false)
final_goal(5, on((block,13)), (block,18), false)
final_goal(5, on((block,13)), (block,2), false)
final_goal(5, on((block,13)), (block,3), false)
final_goal(5, on((block,13)), (block,4), false)
final_goal(5, on((block,13)), (block,5), false)
final_goal(5, on((block,13)), (block,6), false)
final_goal(5, on((block,13)), (block,7), false)
final_goal(5, on((block,13)), (block,8), false)
final_goal(5, on((block,13)), (block,9), false)
final_goal(5, on((block,13)), nothing, false)
final_goal(5, on((block,13)), puzzle_room_1_table, false)
final_goal(5, on((block,13)), puzzle_room_2_table, false)
final_goal(5, on((block,14)), (block,1), false)
final_goal(5, on((block,14)), (block,10), false)
final_goal(5, on((block,14)), (block,11), false)
final_goal(5, on((block,14)), (block,12), false)
final_goal(5, on((block,14)), (block,13), false)
final_goal(5, on((block,14)), (block,16), false)
final_goal(5, on((block,14)), (block,17), false)
final_goal(5, on((block,14)), (block,18), false)
final_goal(5, on((block,14)), (block,2), false)
final_goal(5, on((block,14)), (block,3), false)
final_goal(5, on((block,14)), (block,4), false)
final_goal(5, on((block,14)), (block,5), false)
final_goal(5, on((block,14)), (block,6), false)
final_goal(5, on((block,14)), (block,7), false)
final_goal(5, on((block,14)), (block,8), false)
final_goal(5, on((block,14)), (block,9), false)
final_goal(5, on((block,14)), nothing, false)
final_goal(5, on((block,14)), puzzle_room_1_table, false)
final_goal(5, on((block,14)), puzzle_room_2_table, false)
final_goal(5, on((block,15)), (block,1), false)
final_goal(5, on((block,15)), (block,10), false)
final_goal(5, on((block,15)), (block,11), false)
final_goal(5, on((block,15)), (block,12), false)
final_goal(5, on((block,15)), (block,13), false)
final_goal(5, on((block,15)), (block,14), false)
final_goal(5, on((block,15)), (block,16), false)
final_goal(5, on((block,15)), (block,17), false)
final_goal(5, on((block,15)), (block,18), false)
final_goal(5, on((block,15)), (block,2), false)
final_goal(5, on((block,15)), (block,3), false)
final_goal(5, on((block,15)), (block,4), false)
final_goal(5, on((block,15)), (block,5), false)
final_goal(5, on((block,15)), (block,6), false)
final_goal(5, on((block,15)), (block,7), false)
final_goal(5, on((block,15)), (block,8), false)
final_goal(5, on((block,15)), (block,9), false)
final_goal(5, on((block,15)), nothing, false)
final_goal(5, on((block,15)), puzzle_room_1_table, false)
final_goal(5, on((block,16)), (block,1), false)
final_goal(5, on((block,16)), (block,10), false)
final_goal(5, on((block,16)), (block,11), false)
final_goal(5, on((block,16)), (block,12), false)
final_goal(5, on((block,16)), (block,13), false)
final_goal(5, on((block,16)), (block,14), false)
final_goal(5, on((block,16)), (block,15), false)
final_goal(5, on((block,16)), (block,18), false)
final_goal(5, on((block,16)), (block,2), false)
final_goal(5, on((block,16)), (block,3), false)
final_goal(5, on((block,16)), (block,4), false)
final_goal(5, on((block,16)), (block,5), false)
final_goal(5, on((block,16)), (block,6), false)
final_goal(5, on((block,16)), (block,7), false)
final_goal(5, on((block,16)), (block,8), false)
final_goal(5, on((block,16)), (block,9), false)
final_goal(5, on((block,16)), nothing, false)
final_goal(5, on((block,16)), puzzle_room_1_table, false)
final_goal(5, on((block,16)), puzzle_room_2_table, false)
final_goal(5, on((block,17)), (block,1), false)
final_goal(5, on((block,17)), (block,10), false)
final_goal(5, on((block,17)), (block,11), false)
final_goal(5, on((block,17)), (block,12), false)
final_goal(5, on((block,17)), (block,13), false)
final_goal(5, on((block,17)), (block,14), false)
final_goal(5, on((block,17)), (block,15), false)
final_goal(5, on((block,17)), (block,16), false)
final_goal(5, on((block,17)), (block,2), false)
final_goal(5, on((block,17)), (block,3), false)
final_goal(5, on((block,17)), (block,4), false)
final_goal(5, on((block,17)), (block,5), false)
final_goal(5, on((block,17)), (block,6), false)
final_goal(5, on((block,17)), (block,7), false)
final_goal(5, on((block,17)), (block,8), false)
final_goal(5, on((block,17)), (block,9), false)
final_goal(5, on((block,17)), nothing, false)
final_goal(5, on((block,17)), puzzle_room_1_table, false)
final_goal(5, on((block,17)), puzzle_room_2_table, false)
final_goal(5, on((block,18)), (block,1), false)
final_goal(5, on((block,18)), (block,10), false)
final_goal(5, on((block,18)), (block,11), false)
final_goal(5, on((block,18)), (block,12), false)
final_goal(5, on((block,18)), (block,13), false)
final_goal(5, on((block,18)), (block,14), false)
final_goal(5, on((block,18)), (block,15), false)
final_goal(5, on((block,18)), (block,16), false)
final_goal(5, on((block,18)), (block,17), false)
final_goal(5, on((block,18)), (block,2), false)
final_goal(5, on((block,18)), (block,3), false)
final_goal(5, on((block,18)), (block,4), false)
final_goal(5, on((block,18)), (block,5), false)
final_goal(5, on((block,18)), (block,6), false)
final_goal(5, on((block,18)), (block,7), false)
final_goal(5, on((block,18)), (block,8), false)
final_goal(5, on((block,18)), (block,9), false)
final_goal(5, on((block,18)), nothing, false)
final_goal(5, on((block,18)), puzzle_room_1_table, false)
final_goal(5, on((block,2)), (block,1), false)
final_goal(5, on((block,2)), (block,10), false)
final_goal(5, on((block,2)), (block,11), false)
final_goal(5, on((block,2)), (block,12), false)
final_goal(5, on((block,2)), (block,13), false)
final_goal(5, on((block,2)), (block,14), false)
final_goal(5, on((block,2)), (block,15), false)
final_goal(5, on((block,2)), (block,16), false)
final_goal(5, on((block,2)), (block,17), false)
final_goal(5, on((block,2)), (block,18), false)
final_goal(5, on((block,2)), (block,4), false)
final_goal(5, on((block,2)), (block,5), false)
final_goal(5, on((block,2)), (block,6), false)
final_goal(5, on((block,2)), (block,7), false)
final_goal(5, on((block,2)), (block,8), false)
final_goal(5, on((block,2)), (block,9), false)
final_goal(5, on((block,2)), nothing, false)
final_goal(5, on((block,2)), puzzle_room_1_table, false)
final_goal(5, on((block,2)), puzzle_room_2_table, false)
final_goal(5, on((block,3)), (block,1), false)
final_goal(5, on((block,3)), (block,10), false)
final_goal(5, on((block,3)), (block,11), false)
final_goal(5, on((block,3)), (block,12), false)
final_goal(5, on((block,3)), (block,13), false)
final_goal(5, on((block,3)), (block,14), false)
final_goal(5, on((block,3)), (block,15), false)
final_goal(5, on((block,3)), (block,16), false)
final_goal(5, on((block,3)), (block,17), false)
final_goal(5, on((block,3)), (block,18), false)
final_goal(5, on((block,3)), (block,2), false)
final_goal(5, on((block,3)), (block,4), false)
final_goal(5, on((block,3)), (block,5), false)
final_goal(5, on((block,3)), (block,6), false)
final_goal(5, on((block,3)), (block,7), false)
final_goal(5, on((block,3)), (block,8), false)
final_goal(5, on((block,3)), (block,9), false)
final_goal(5, on((block,3)), nothing, false)
final_goal(5, on((block,3)), puzzle_room_2_table, false)
final_goal(5, on((block,4)), (block,1), false)
final_goal(5, on((block,4)), (block,10), false)
final_goal(5, on((block,4)), (block,11), false)
final_goal(5, on((block,4)), (block,12), false)
final_goal(5, on((block,4)), (block,13), false)
final_goal(5, on((block,4)), (block,14), false)
final_goal(5, on((block,4)), (block,15), false)
final_goal(5, on((block,4)), (block,16), false)
final_goal(5, on((block,4)), (block,17), false)
final_goal(5, on((block,4)), (block,18), false)
final_goal(5, on((block,4)), (block,2), false)
final_goal(5, on((block,4)), (block,3), false)
final_goal(5, on((block,4)), (block,6), false)
final_goal(5, on((block,4)), (block,7), false)
final_goal(5, on((block,4)), (block,8), false)
final_goal(5, on((block,4)), (block,9), false)
final_goal(5, on((block,4)), nothing, false)
final_goal(5, on((block,4)), puzzle_room_1_table, false)
final_goal(5, on((block,4)), puzzle_room_2_table, false)
final_goal(5, on((block,5)), (block,1), false)
final_goal(5, on((block,5)), (block,10), false)
final_goal(5, on((block,5)), (block,11), false)
final_goal(5, on((block,5)), (block,12), false)
final_goal(5, on((block,5)), (block,13), false)
final_goal(5, on((block,5)), (block,14), false)
final_goal(5, on((block,5)), (block,15), false)
final_goal(5, on((block,5)), (block,16), false)
final_goal(5, on((block,5)), (block,17), false)
final_goal(5, on((block,5)), (block,18), false)
final_goal(5, on((block,5)), (block,2), false)
final_goal(5, on((block,5)), (block,3), false)
final_goal(5, on((block,5)), (block,4), false)
final_goal(5, on((block,5)), (block,7), false)
final_goal(5, on((block,5)), (block,8), false)
final_goal(5, on((block,5)), (block,9), false)
final_goal(5, on((block,5)), nothing, false)
final_goal(5, on((block,5)), puzzle_room_1_table, false)
final_goal(5, on((block,5)), puzzle_room_2_table, false)
final_goal(5, on((block,6)), (block,1), false)
final_goal(5, on((block,6)), (block,10), false)
final_goal(5, on((block,6)), (block,11), false)
final_goal(5, on((block,6)), (block,12), false)
final_goal(5, on((block,6)), (block,13), false)
final_goal(5, on((block,6)), (block,14), false)
final_goal(5, on((block,6)), (block,15), false)
final_goal(5, on((block,6)), (block,16), false)
final_goal(5, on((block,6)), (block,17), false)
final_goal(5, on((block,6)), (block,18), false)
final_goal(5, on((block,6)), (block,2), false)
final_goal(5, on((block,6)), (block,3), false)
final_goal(5, on((block,6)), (block,4), false)
final_goal(5, on((block,6)), (block,5), false)
final_goal(5, on((block,6)), (block,7), false)
final_goal(5, on((block,6)), (block,8), false)
final_goal(5, on((block,6)), (block,9), false)
final_goal(5, on((block,6)), nothing, false)
final_goal(5, on((block,6)), puzzle_room_2_table, false)
final_goal(5, on((block,7)), (block,1), false)
final_goal(5, on((block,7)), (block,10), false)
final_goal(5, on((block,7)), (block,11), false)
final_goal(5, on((block,7)), (block,12), false)
final_goal(5, on((block,7)), (block,13), false)
final_goal(5, on((block,7)), (block,14), false)
final_goal(5, on((block,7)), (block,15), false)
final_goal(5, on((block,7)), (block,16), false)
final_goal(5, on((block,7)), (block,17), false)
final_goal(5, on((block,7)), (block,18), false)
final_goal(5, on((block,7)), (block,2), false)
final_goal(5, on((block,7)), (block,3), false)
final_goal(5, on((block,7)), (block,4), false)
final_goal(5, on((block,7)), (block,5), false)
final_goal(5, on((block,7)), (block,6), false)
final_goal(5, on((block,7)), (block,9), false)
final_goal(5, on((block,7)), nothing, false)
final_goal(5, on((block,7)), puzzle_room_1_table, false)
final_goal(5, on((block,7)), puzzle_room_2_table, false)
final_goal(5, on((block,8)), (block,1), false)
final_goal(5, on((block,8)), (block,10), false)
final_goal(5, on((block,8)), (block,11), false)
final_goal(5, on((block,8)), (block,12), false)
final_goal(5, on((block,8)), (block,13), false)
final_goal(5, on((block,8)), (block,14), false)
final_goal(5, on((block,8)), (block,15), false)
final_goal(5, on((block,8)), (block,16), false)
final_goal(5, on((block,8)), (block,17), false)
final_goal(5, on((block,8)), (block,18), false)
final_goal(5, on((block,8)), (block,2), false)
final_goal(5, on((block,8)), (block,3), false)
final_goal(5, on((block,8)), (block,4), false)
final_goal(5, on((block,8)), (block,5), false)
final_goal(5, on((block,8)), (block,6), false)
final_goal(5, on((block,8)), (block,7), false)
final_goal(5, on((block,8)), nothing, false)
final_goal(5, on((block,8)), puzzle_room_1_table, false)
final_goal(5, on((block,8)), puzzle_room_2_table, false)
final_goal(5, on((block,9)), (block,1), false)
final_goal(5, on((block,9)), (block,10), false)
final_goal(5, on((block,9)), (block,11), false)
final_goal(5, on((block,9)), (block,12), false)
final_goal(5, on((block,9)), (block,13), false)
final_goal(5, on((block,9)), (block,14), false)
final_goal(5, on((block,9)), (block,15), false)
final_goal(5, on((block,9)), (block,16), false)
final_goal(5, on((block,9)), (block,17), false)
final_goal(5, on((block,9)), (block,18), false)
final_goal(5, on((block,9)), (block,2), false)
final_goal(5, on((block,9)), (block,3), false)
final_goal(5, on((block,9)), (block,4), false)
final_goal(5, on((block,9)), (block,5), false)
final_goal(5, on((block,9)), (block,6), false)
final_goal(5, on((block,9)), (block,7), false)
final_goal(5, on((block,9)), (block,8), false)
final_goal(5, on((block,9)), nothing, false)
final_goal(5, on((block,9)), puzzle_room_2_table, false)
final_goal(5, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(5, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(5, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(5, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(5, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(5, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(5, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), true, false)

[04-03-2022_16-19-40] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 4         
      ================================================      

final_goal(4, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(4, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(4, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(4, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(4, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(4, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(4, in_tower((block,1),(block,1)), false, true)
final_goal(4, in_tower((block,1),(block,10)), false, true)
final_goal(4, in_tower((block,1),(block,11)), false, true)
final_goal(4, in_tower((block,1),(block,12)), false, true)
final_goal(4, in_tower((block,1),(block,13)), false, true)
final_goal(4, in_tower((block,1),(block,14)), false, true)
final_goal(4, in_tower((block,1),(block,15)), false, true)
final_goal(4, in_tower((block,1),(block,16)), false, true)
final_goal(4, in_tower((block,1),(block,17)), false, true)
final_goal(4, in_tower((block,1),(block,18)), false, true)
final_goal(4, in_tower((block,1),(block,2)), false, true)
final_goal(4, in_tower((block,1),(block,3)), false, true)
final_goal(4, in_tower((block,1),(block,4)), false, true)
final_goal(4, in_tower((block,1),(block,5)), false, true)
final_goal(4, in_tower((block,1),(block,6)), false, true)
final_goal(4, in_tower((block,1),(block,7)), false, true)
final_goal(4, in_tower((block,1),(block,8)), false, true)
final_goal(4, in_tower((block,1),(block,9)), false, true)
final_goal(4, in_tower((block,10),(block,1)), false, true)
final_goal(4, in_tower((block,10),(block,10)), false, true)
final_goal(4, in_tower((block,10),(block,11)), false, true)
final_goal(4, in_tower((block,10),(block,12)), false, true)
final_goal(4, in_tower((block,10),(block,13)), false, true)
final_goal(4, in_tower((block,10),(block,14)), false, true)
final_goal(4, in_tower((block,10),(block,15)), false, true)
final_goal(4, in_tower((block,10),(block,16)), false, true)
final_goal(4, in_tower((block,10),(block,17)), false, true)
final_goal(4, in_tower((block,10),(block,18)), false, true)
final_goal(4, in_tower((block,10),(block,2)), false, true)
final_goal(4, in_tower((block,10),(block,3)), false, true)
final_goal(4, in_tower((block,10),(block,4)), false, true)
final_goal(4, in_tower((block,10),(block,5)), false, true)
final_goal(4, in_tower((block,10),(block,6)), false, true)
final_goal(4, in_tower((block,10),(block,7)), false, true)
final_goal(4, in_tower((block,10),(block,8)), false, true)
final_goal(4, in_tower((block,10),(block,9)), false, true)
final_goal(4, in_tower((block,11),(block,1)), false, true)
final_goal(4, in_tower((block,11),(block,10)), false, true)
final_goal(4, in_tower((block,11),(block,11)), false, true)
final_goal(4, in_tower((block,11),(block,12)), false, true)
final_goal(4, in_tower((block,11),(block,13)), false, true)
final_goal(4, in_tower((block,11),(block,14)), false, true)
final_goal(4, in_tower((block,11),(block,15)), false, true)
final_goal(4, in_tower((block,11),(block,16)), false, true)
final_goal(4, in_tower((block,11),(block,17)), false, true)
final_goal(4, in_tower((block,11),(block,18)), false, true)
final_goal(4, in_tower((block,11),(block,2)), false, true)
final_goal(4, in_tower((block,11),(block,3)), false, true)
final_goal(4, in_tower((block,11),(block,4)), false, true)
final_goal(4, in_tower((block,11),(block,5)), false, true)
final_goal(4, in_tower((block,11),(block,6)), false, true)
final_goal(4, in_tower((block,11),(block,7)), false, true)
final_goal(4, in_tower((block,11),(block,8)), false, true)
final_goal(4, in_tower((block,11),(block,9)), false, true)
final_goal(4, in_tower((block,12),(block,1)), false, true)
final_goal(4, in_tower((block,12),(block,10)), true, true)
final_goal(4, in_tower((block,12),(block,11)), true, true)
final_goal(4, in_tower((block,12),(block,12)), true, true)
final_goal(4, in_tower((block,12),(block,13)), false, true)
final_goal(4, in_tower((block,12),(block,14)), false, true)
final_goal(4, in_tower((block,12),(block,15)), false, true)
final_goal(4, in_tower((block,12),(block,16)), false, true)
final_goal(4, in_tower((block,12),(block,17)), false, true)
final_goal(4, in_tower((block,12),(block,18)), false, true)
final_goal(4, in_tower((block,12),(block,2)), false, true)
final_goal(4, in_tower((block,12),(block,3)), false, true)
final_goal(4, in_tower((block,12),(block,4)), false, true)
final_goal(4, in_tower((block,12),(block,5)), false, true)
final_goal(4, in_tower((block,12),(block,6)), false, true)
final_goal(4, in_tower((block,12),(block,7)), false, true)
final_goal(4, in_tower((block,12),(block,8)), false, true)
final_goal(4, in_tower((block,12),(block,9)), false, true)
final_goal(4, in_tower((block,13),(block,1)), false, true)
final_goal(4, in_tower((block,13),(block,10)), false, true)
final_goal(4, in_tower((block,13),(block,11)), false, true)
final_goal(4, in_tower((block,13),(block,12)), false, true)
final_goal(4, in_tower((block,13),(block,13)), false, true)
final_goal(4, in_tower((block,13),(block,14)), false, true)
final_goal(4, in_tower((block,13),(block,15)), false, true)
final_goal(4, in_tower((block,13),(block,16)), false, true)
final_goal(4, in_tower((block,13),(block,17)), false, true)
final_goal(4, in_tower((block,13),(block,18)), false, true)
final_goal(4, in_tower((block,13),(block,2)), false, true)
final_goal(4, in_tower((block,13),(block,3)), false, true)
final_goal(4, in_tower((block,13),(block,4)), false, true)
final_goal(4, in_tower((block,13),(block,5)), false, true)
final_goal(4, in_tower((block,13),(block,6)), false, true)
final_goal(4, in_tower((block,13),(block,7)), false, true)
final_goal(4, in_tower((block,13),(block,8)), false, true)
final_goal(4, in_tower((block,13),(block,9)), false, true)
final_goal(4, in_tower((block,14),(block,1)), false, true)
final_goal(4, in_tower((block,14),(block,10)), false, true)
final_goal(4, in_tower((block,14),(block,11)), false, true)
final_goal(4, in_tower((block,14),(block,12)), false, true)
final_goal(4, in_tower((block,14),(block,13)), false, true)
final_goal(4, in_tower((block,14),(block,14)), false, true)
final_goal(4, in_tower((block,14),(block,15)), false, true)
final_goal(4, in_tower((block,14),(block,16)), false, true)
final_goal(4, in_tower((block,14),(block,17)), false, true)
final_goal(4, in_tower((block,14),(block,18)), false, true)
final_goal(4, in_tower((block,14),(block,2)), false, true)
final_goal(4, in_tower((block,14),(block,3)), false, true)
final_goal(4, in_tower((block,14),(block,4)), false, true)
final_goal(4, in_tower((block,14),(block,5)), false, true)
final_goal(4, in_tower((block,14),(block,6)), false, true)
final_goal(4, in_tower((block,14),(block,7)), false, true)
final_goal(4, in_tower((block,14),(block,8)), false, true)
final_goal(4, in_tower((block,14),(block,9)), false, true)
final_goal(4, in_tower((block,15),(block,1)), false, true)
final_goal(4, in_tower((block,15),(block,10)), false, true)
final_goal(4, in_tower((block,15),(block,11)), false, true)
final_goal(4, in_tower((block,15),(block,12)), false, true)
final_goal(4, in_tower((block,15),(block,13)), true, true)
final_goal(4, in_tower((block,15),(block,14)), true, true)
final_goal(4, in_tower((block,15),(block,15)), true, true)
final_goal(4, in_tower((block,15),(block,16)), false, true)
final_goal(4, in_tower((block,15),(block,17)), false, true)
final_goal(4, in_tower((block,15),(block,18)), false, true)
final_goal(4, in_tower((block,15),(block,2)), false, true)
final_goal(4, in_tower((block,15),(block,3)), false, true)
final_goal(4, in_tower((block,15),(block,4)), false, true)
final_goal(4, in_tower((block,15),(block,5)), false, true)
final_goal(4, in_tower((block,15),(block,6)), false, true)
final_goal(4, in_tower((block,15),(block,7)), false, true)
final_goal(4, in_tower((block,15),(block,8)), false, true)
final_goal(4, in_tower((block,15),(block,9)), false, true)
final_goal(4, in_tower((block,16),(block,1)), false, true)
final_goal(4, in_tower((block,16),(block,10)), false, true)
final_goal(4, in_tower((block,16),(block,11)), false, true)
final_goal(4, in_tower((block,16),(block,12)), false, true)
final_goal(4, in_tower((block,16),(block,13)), false, true)
final_goal(4, in_tower((block,16),(block,14)), false, true)
final_goal(4, in_tower((block,16),(block,15)), false, true)
final_goal(4, in_tower((block,16),(block,16)), false, true)
final_goal(4, in_tower((block,16),(block,17)), false, true)
final_goal(4, in_tower((block,16),(block,18)), false, true)
final_goal(4, in_tower((block,16),(block,2)), false, true)
final_goal(4, in_tower((block,16),(block,3)), false, true)
final_goal(4, in_tower((block,16),(block,4)), false, true)
final_goal(4, in_tower((block,16),(block,5)), false, true)
final_goal(4, in_tower((block,16),(block,6)), false, true)
final_goal(4, in_tower((block,16),(block,7)), false, true)
final_goal(4, in_tower((block,16),(block,8)), false, true)
final_goal(4, in_tower((block,16),(block,9)), false, true)
final_goal(4, in_tower((block,17),(block,1)), false, true)
final_goal(4, in_tower((block,17),(block,10)), false, true)
final_goal(4, in_tower((block,17),(block,11)), false, true)
final_goal(4, in_tower((block,17),(block,12)), false, true)
final_goal(4, in_tower((block,17),(block,13)), false, true)
final_goal(4, in_tower((block,17),(block,14)), false, true)
final_goal(4, in_tower((block,17),(block,15)), false, true)
final_goal(4, in_tower((block,17),(block,16)), false, true)
final_goal(4, in_tower((block,17),(block,17)), false, true)
final_goal(4, in_tower((block,17),(block,18)), false, true)
final_goal(4, in_tower((block,17),(block,2)), false, true)
final_goal(4, in_tower((block,17),(block,3)), false, true)
final_goal(4, in_tower((block,17),(block,4)), false, true)
final_goal(4, in_tower((block,17),(block,5)), false, true)
final_goal(4, in_tower((block,17),(block,6)), false, true)
final_goal(4, in_tower((block,17),(block,7)), false, true)
final_goal(4, in_tower((block,17),(block,8)), false, true)
final_goal(4, in_tower((block,17),(block,9)), false, true)
final_goal(4, in_tower((block,18),(block,1)), false, true)
final_goal(4, in_tower((block,18),(block,10)), false, true)
final_goal(4, in_tower((block,18),(block,11)), false, true)
final_goal(4, in_tower((block,18),(block,12)), false, true)
final_goal(4, in_tower((block,18),(block,13)), false, true)
final_goal(4, in_tower((block,18),(block,14)), false, true)
final_goal(4, in_tower((block,18),(block,15)), false, true)
final_goal(4, in_tower((block,18),(block,16)), true, true)
final_goal(4, in_tower((block,18),(block,17)), true, true)
final_goal(4, in_tower((block,18),(block,18)), true, true)
final_goal(4, in_tower((block,18),(block,2)), false, true)
final_goal(4, in_tower((block,18),(block,3)), false, true)
final_goal(4, in_tower((block,18),(block,4)), false, true)
final_goal(4, in_tower((block,18),(block,5)), false, true)
final_goal(4, in_tower((block,18),(block,6)), false, true)
final_goal(4, in_tower((block,18),(block,7)), false, true)
final_goal(4, in_tower((block,18),(block,8)), false, true)
final_goal(4, in_tower((block,18),(block,9)), false, true)
final_goal(4, in_tower((block,2),(block,1)), false, true)
final_goal(4, in_tower((block,2),(block,10)), false, true)
final_goal(4, in_tower((block,2),(block,11)), false, true)
final_goal(4, in_tower((block,2),(block,12)), false, true)
final_goal(4, in_tower((block,2),(block,13)), false, true)
final_goal(4, in_tower((block,2),(block,14)), false, true)
final_goal(4, in_tower((block,2),(block,15)), false, true)
final_goal(4, in_tower((block,2),(block,16)), false, true)
final_goal(4, in_tower((block,2),(block,17)), false, true)
final_goal(4, in_tower((block,2),(block,18)), false, true)
final_goal(4, in_tower((block,2),(block,2)), false, true)
final_goal(4, in_tower((block,2),(block,3)), false, true)
final_goal(4, in_tower((block,2),(block,4)), false, true)
final_goal(4, in_tower((block,2),(block,5)), false, true)
final_goal(4, in_tower((block,2),(block,6)), false, true)
final_goal(4, in_tower((block,2),(block,7)), false, true)
final_goal(4, in_tower((block,2),(block,8)), false, true)
final_goal(4, in_tower((block,2),(block,9)), false, true)
final_goal(4, in_tower((block,3),(block,1)), true, true)
final_goal(4, in_tower((block,3),(block,10)), false, true)
final_goal(4, in_tower((block,3),(block,11)), false, true)
final_goal(4, in_tower((block,3),(block,12)), false, true)
final_goal(4, in_tower((block,3),(block,13)), false, true)
final_goal(4, in_tower((block,3),(block,14)), false, true)
final_goal(4, in_tower((block,3),(block,15)), false, true)
final_goal(4, in_tower((block,3),(block,16)), false, true)
final_goal(4, in_tower((block,3),(block,17)), false, true)
final_goal(4, in_tower((block,3),(block,18)), false, true)
final_goal(4, in_tower((block,3),(block,2)), true, true)
final_goal(4, in_tower((block,3),(block,3)), true, true)
final_goal(4, in_tower((block,3),(block,4)), false, true)
final_goal(4, in_tower((block,3),(block,5)), false, true)
final_goal(4, in_tower((block,3),(block,6)), false, true)
final_goal(4, in_tower((block,3),(block,7)), false, true)
final_goal(4, in_tower((block,3),(block,8)), false, true)
final_goal(4, in_tower((block,3),(block,9)), false, true)
final_goal(4, in_tower((block,4),(block,1)), false, true)
final_goal(4, in_tower((block,4),(block,10)), false, true)
final_goal(4, in_tower((block,4),(block,11)), false, true)
final_goal(4, in_tower((block,4),(block,12)), false, true)
final_goal(4, in_tower((block,4),(block,13)), false, true)
final_goal(4, in_tower((block,4),(block,14)), false, true)
final_goal(4, in_tower((block,4),(block,15)), false, true)
final_goal(4, in_tower((block,4),(block,16)), false, true)
final_goal(4, in_tower((block,4),(block,17)), false, true)
final_goal(4, in_tower((block,4),(block,18)), false, true)
final_goal(4, in_tower((block,4),(block,2)), false, true)
final_goal(4, in_tower((block,4),(block,3)), false, true)
final_goal(4, in_tower((block,4),(block,4)), false, true)
final_goal(4, in_tower((block,4),(block,5)), false, true)
final_goal(4, in_tower((block,4),(block,6)), false, true)
final_goal(4, in_tower((block,4),(block,7)), false, true)
final_goal(4, in_tower((block,4),(block,8)), false, true)
final_goal(4, in_tower((block,4),(block,9)), false, true)
final_goal(4, in_tower((block,5),(block,1)), false, true)
final_goal(4, in_tower((block,5),(block,10)), false, true)
final_goal(4, in_tower((block,5),(block,11)), false, true)
final_goal(4, in_tower((block,5),(block,12)), false, true)
final_goal(4, in_tower((block,5),(block,13)), false, true)
final_goal(4, in_tower((block,5),(block,14)), false, true)
final_goal(4, in_tower((block,5),(block,15)), false, true)
final_goal(4, in_tower((block,5),(block,16)), false, true)
final_goal(4, in_tower((block,5),(block,17)), false, true)
final_goal(4, in_tower((block,5),(block,18)), false, true)
final_goal(4, in_tower((block,5),(block,2)), false, true)
final_goal(4, in_tower((block,5),(block,3)), false, true)
final_goal(4, in_tower((block,5),(block,4)), false, true)
final_goal(4, in_tower((block,5),(block,5)), false, true)
final_goal(4, in_tower((block,5),(block,6)), false, true)
final_goal(4, in_tower((block,5),(block,7)), false, true)
final_goal(4, in_tower((block,5),(block,8)), false, true)
final_goal(4, in_tower((block,5),(block,9)), false, true)
final_goal(4, in_tower((block,6),(block,1)), false, true)
final_goal(4, in_tower((block,6),(block,10)), false, true)
final_goal(4, in_tower((block,6),(block,11)), false, true)
final_goal(4, in_tower((block,6),(block,12)), false, true)
final_goal(4, in_tower((block,6),(block,13)), false, true)
final_goal(4, in_tower((block,6),(block,14)), false, true)
final_goal(4, in_tower((block,6),(block,15)), false, true)
final_goal(4, in_tower((block,6),(block,16)), false, true)
final_goal(4, in_tower((block,6),(block,17)), false, true)
final_goal(4, in_tower((block,6),(block,18)), false, true)
final_goal(4, in_tower((block,6),(block,2)), false, true)
final_goal(4, in_tower((block,6),(block,3)), false, true)
final_goal(4, in_tower((block,6),(block,4)), true, true)
final_goal(4, in_tower((block,6),(block,5)), true, true)
final_goal(4, in_tower((block,6),(block,6)), true, true)
final_goal(4, in_tower((block,6),(block,7)), false, true)
final_goal(4, in_tower((block,6),(block,8)), false, true)
final_goal(4, in_tower((block,6),(block,9)), false, true)
final_goal(4, in_tower((block,7),(block,1)), false, true)
final_goal(4, in_tower((block,7),(block,10)), false, true)
final_goal(4, in_tower((block,7),(block,11)), false, true)
final_goal(4, in_tower((block,7),(block,12)), false, true)
final_goal(4, in_tower((block,7),(block,13)), false, true)
final_goal(4, in_tower((block,7),(block,14)), false, true)
final_goal(4, in_tower((block,7),(block,15)), false, true)
final_goal(4, in_tower((block,7),(block,16)), false, true)
final_goal(4, in_tower((block,7),(block,17)), false, true)
final_goal(4, in_tower((block,7),(block,18)), false, true)
final_goal(4, in_tower((block,7),(block,2)), false, true)
final_goal(4, in_tower((block,7),(block,3)), false, true)
final_goal(4, in_tower((block,7),(block,4)), false, true)
final_goal(4, in_tower((block,7),(block,5)), false, true)
final_goal(4, in_tower((block,7),(block,6)), false, true)
final_goal(4, in_tower((block,7),(block,7)), false, true)
final_goal(4, in_tower((block,7),(block,8)), false, true)
final_goal(4, in_tower((block,7),(block,9)), false, true)
final_goal(4, in_tower((block,8),(block,1)), false, true)
final_goal(4, in_tower((block,8),(block,10)), false, true)
final_goal(4, in_tower((block,8),(block,11)), false, true)
final_goal(4, in_tower((block,8),(block,12)), false, true)
final_goal(4, in_tower((block,8),(block,13)), false, true)
final_goal(4, in_tower((block,8),(block,14)), false, true)
final_goal(4, in_tower((block,8),(block,15)), false, true)
final_goal(4, in_tower((block,8),(block,16)), false, true)
final_goal(4, in_tower((block,8),(block,17)), false, true)
final_goal(4, in_tower((block,8),(block,18)), false, true)
final_goal(4, in_tower((block,8),(block,2)), false, true)
final_goal(4, in_tower((block,8),(block,3)), false, true)
final_goal(4, in_tower((block,8),(block,4)), false, true)
final_goal(4, in_tower((block,8),(block,5)), false, true)
final_goal(4, in_tower((block,8),(block,6)), false, true)
final_goal(4, in_tower((block,8),(block,7)), false, true)
final_goal(4, in_tower((block,8),(block,8)), false, true)
final_goal(4, in_tower((block,8),(block,9)), false, true)
final_goal(4, in_tower((block,9),(block,1)), false, true)
final_goal(4, in_tower((block,9),(block,10)), false, true)
final_goal(4, in_tower((block,9),(block,11)), false, true)
final_goal(4, in_tower((block,9),(block,12)), false, true)
final_goal(4, in_tower((block,9),(block,13)), false, true)
final_goal(4, in_tower((block,9),(block,14)), false, true)
final_goal(4, in_tower((block,9),(block,15)), false, true)
final_goal(4, in_tower((block,9),(block,16)), false, true)
final_goal(4, in_tower((block,9),(block,17)), false, true)
final_goal(4, in_tower((block,9),(block,18)), false, true)
final_goal(4, in_tower((block,9),(block,2)), false, true)
final_goal(4, in_tower((block,9),(block,3)), false, true)
final_goal(4, in_tower((block,9),(block,4)), false, true)
final_goal(4, in_tower((block,9),(block,5)), false, true)
final_goal(4, in_tower((block,9),(block,6)), false, true)
final_goal(4, in_tower((block,9),(block,7)), true, true)
final_goal(4, in_tower((block,9),(block,8)), true, true)
final_goal(4, in_tower((block,9),(block,9)), true, true)
final_goal(4, on((block,1)), (block,2), true)
final_goal(4, on((block,10)), (block,11), true)
final_goal(4, on((block,11)), (block,12), true)
final_goal(4, on((block,12)), puzzle_room_2_table, true)
final_goal(4, on((block,13)), (block,14), true)
final_goal(4, on((block,14)), (block,15), true)
final_goal(4, on((block,15)), puzzle_room_2_table, true)
final_goal(4, on((block,16)), (block,17), true)
final_goal(4, on((block,17)), (block,18), true)
final_goal(4, on((block,18)), puzzle_room_2_table, true)
final_goal(4, on((block,2)), (block,3), true)
final_goal(4, on((block,3)), puzzle_room_1_table, true)
final_goal(4, on((block,4)), (block,5), true)
final_goal(4, on((block,5)), (block,6), true)
final_goal(4, on((block,6)), puzzle_room_1_table, true)
final_goal(4, on((block,7)), (block,8), true)
final_goal(4, on((block,8)), (block,9), true)
final_goal(4, on((block,9)), puzzle_room_1_table, true)
final_goal(4, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(4, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(4, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(4, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(4, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(4, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(4, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,9),puzzle_room_2_table), false, true)

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 4         
      ================================================      

final_goal(4, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(4, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(4, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(4, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(4, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(4, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(4, in_tower((block,1),(block,1)), true, false)
final_goal(4, in_tower((block,1),(block,10)), true, false)
final_goal(4, in_tower((block,1),(block,11)), true, false)
final_goal(4, in_tower((block,1),(block,12)), true, false)
final_goal(4, in_tower((block,1),(block,13)), true, false)
final_goal(4, in_tower((block,1),(block,14)), true, false)
final_goal(4, in_tower((block,1),(block,15)), true, false)
final_goal(4, in_tower((block,1),(block,16)), true, false)
final_goal(4, in_tower((block,1),(block,17)), true, false)
final_goal(4, in_tower((block,1),(block,18)), true, false)
final_goal(4, in_tower((block,1),(block,2)), true, false)
final_goal(4, in_tower((block,1),(block,3)), true, false)
final_goal(4, in_tower((block,1),(block,4)), true, false)
final_goal(4, in_tower((block,1),(block,5)), true, false)
final_goal(4, in_tower((block,1),(block,6)), true, false)
final_goal(4, in_tower((block,1),(block,7)), true, false)
final_goal(4, in_tower((block,1),(block,8)), true, false)
final_goal(4, in_tower((block,1),(block,9)), true, false)
final_goal(4, in_tower((block,10),(block,1)), true, false)
final_goal(4, in_tower((block,10),(block,10)), true, false)
final_goal(4, in_tower((block,10),(block,11)), true, false)
final_goal(4, in_tower((block,10),(block,12)), true, false)
final_goal(4, in_tower((block,10),(block,13)), true, false)
final_goal(4, in_tower((block,10),(block,14)), true, false)
final_goal(4, in_tower((block,10),(block,15)), true, false)
final_goal(4, in_tower((block,10),(block,16)), true, false)
final_goal(4, in_tower((block,10),(block,17)), true, false)
final_goal(4, in_tower((block,10),(block,18)), true, false)
final_goal(4, in_tower((block,10),(block,2)), true, false)
final_goal(4, in_tower((block,10),(block,3)), true, false)
final_goal(4, in_tower((block,10),(block,4)), true, false)
final_goal(4, in_tower((block,10),(block,5)), true, false)
final_goal(4, in_tower((block,10),(block,6)), true, false)
final_goal(4, in_tower((block,10),(block,7)), true, false)
final_goal(4, in_tower((block,10),(block,8)), true, false)
final_goal(4, in_tower((block,10),(block,9)), true, false)
final_goal(4, in_tower((block,11),(block,1)), true, false)
final_goal(4, in_tower((block,11),(block,10)), true, false)
final_goal(4, in_tower((block,11),(block,11)), true, false)
final_goal(4, in_tower((block,11),(block,12)), true, false)
final_goal(4, in_tower((block,11),(block,13)), true, false)
final_goal(4, in_tower((block,11),(block,14)), true, false)
final_goal(4, in_tower((block,11),(block,15)), true, false)
final_goal(4, in_tower((block,11),(block,16)), true, false)
final_goal(4, in_tower((block,11),(block,17)), true, false)
final_goal(4, in_tower((block,11),(block,18)), true, false)
final_goal(4, in_tower((block,11),(block,2)), true, false)
final_goal(4, in_tower((block,11),(block,3)), true, false)
final_goal(4, in_tower((block,11),(block,4)), true, false)
final_goal(4, in_tower((block,11),(block,5)), true, false)
final_goal(4, in_tower((block,11),(block,6)), true, false)
final_goal(4, in_tower((block,11),(block,7)), true, false)
final_goal(4, in_tower((block,11),(block,8)), true, false)
final_goal(4, in_tower((block,11),(block,9)), true, false)
final_goal(4, in_tower((block,12),(block,1)), true, false)
final_goal(4, in_tower((block,12),(block,10)), false, false)
final_goal(4, in_tower((block,12),(block,11)), false, false)
final_goal(4, in_tower((block,12),(block,12)), false, false)
final_goal(4, in_tower((block,12),(block,13)), true, false)
final_goal(4, in_tower((block,12),(block,14)), true, false)
final_goal(4, in_tower((block,12),(block,15)), true, false)
final_goal(4, in_tower((block,12),(block,16)), true, false)
final_goal(4, in_tower((block,12),(block,17)), true, false)
final_goal(4, in_tower((block,12),(block,18)), true, false)
final_goal(4, in_tower((block,12),(block,2)), true, false)
final_goal(4, in_tower((block,12),(block,3)), true, false)
final_goal(4, in_tower((block,12),(block,4)), true, false)
final_goal(4, in_tower((block,12),(block,5)), true, false)
final_goal(4, in_tower((block,12),(block,6)), true, false)
final_goal(4, in_tower((block,12),(block,7)), true, false)
final_goal(4, in_tower((block,12),(block,8)), true, false)
final_goal(4, in_tower((block,12),(block,9)), true, false)
final_goal(4, in_tower((block,13),(block,1)), true, false)
final_goal(4, in_tower((block,13),(block,10)), true, false)
final_goal(4, in_tower((block,13),(block,11)), true, false)
final_goal(4, in_tower((block,13),(block,12)), true, false)
final_goal(4, in_tower((block,13),(block,13)), true, false)
final_goal(4, in_tower((block,13),(block,14)), true, false)
final_goal(4, in_tower((block,13),(block,15)), true, false)
final_goal(4, in_tower((block,13),(block,16)), true, false)
final_goal(4, in_tower((block,13),(block,17)), true, false)
final_goal(4, in_tower((block,13),(block,18)), true, false)
final_goal(4, in_tower((block,13),(block,2)), true, false)
final_goal(4, in_tower((block,13),(block,3)), true, false)
final_goal(4, in_tower((block,13),(block,4)), true, false)
final_goal(4, in_tower((block,13),(block,5)), true, false)
final_goal(4, in_tower((block,13),(block,6)), true, false)
final_goal(4, in_tower((block,13),(block,7)), true, false)
final_goal(4, in_tower((block,13),(block,8)), true, false)
final_goal(4, in_tower((block,13),(block,9)), true, false)
final_goal(4, in_tower((block,14),(block,1)), true, false)
final_goal(4, in_tower((block,14),(block,10)), true, false)
final_goal(4, in_tower((block,14),(block,11)), true, false)
final_goal(4, in_tower((block,14),(block,12)), true, false)
final_goal(4, in_tower((block,14),(block,13)), true, false)
final_goal(4, in_tower((block,14),(block,14)), true, false)
final_goal(4, in_tower((block,14),(block,15)), true, false)
final_goal(4, in_tower((block,14),(block,16)), true, false)
final_goal(4, in_tower((block,14),(block,17)), true, false)
final_goal(4, in_tower((block,14),(block,18)), true, false)
final_goal(4, in_tower((block,14),(block,2)), true, false)
final_goal(4, in_tower((block,14),(block,3)), true, false)
final_goal(4, in_tower((block,14),(block,4)), true, false)
final_goal(4, in_tower((block,14),(block,5)), true, false)
final_goal(4, in_tower((block,14),(block,6)), true, false)
final_goal(4, in_tower((block,14),(block,7)), true, false)
final_goal(4, in_tower((block,14),(block,8)), true, false)
final_goal(4, in_tower((block,14),(block,9)), true, false)
final_goal(4, in_tower((block,15),(block,1)), true, false)
final_goal(4, in_tower((block,15),(block,10)), true, false)
final_goal(4, in_tower((block,15),(block,11)), true, false)
final_goal(4, in_tower((block,15),(block,12)), true, false)
final_goal(4, in_tower((block,15),(block,13)), false, false)
final_goal(4, in_tower((block,15),(block,14)), false, false)
final_goal(4, in_tower((block,15),(block,15)), false, false)
final_goal(4, in_tower((block,15),(block,16)), true, false)
final_goal(4, in_tower((block,15),(block,17)), true, false)
final_goal(4, in_tower((block,15),(block,18)), true, false)
final_goal(4, in_tower((block,15),(block,2)), true, false)
final_goal(4, in_tower((block,15),(block,3)), true, false)
final_goal(4, in_tower((block,15),(block,4)), true, false)
final_goal(4, in_tower((block,15),(block,5)), true, false)
final_goal(4, in_tower((block,15),(block,6)), true, false)
final_goal(4, in_tower((block,15),(block,7)), true, false)
final_goal(4, in_tower((block,15),(block,8)), true, false)
final_goal(4, in_tower((block,15),(block,9)), true, false)
final_goal(4, in_tower((block,16),(block,1)), true, false)
final_goal(4, in_tower((block,16),(block,10)), true, false)
final_goal(4, in_tower((block,16),(block,11)), true, false)
final_goal(4, in_tower((block,16),(block,12)), true, false)
final_goal(4, in_tower((block,16),(block,13)), true, false)
final_goal(4, in_tower((block,16),(block,14)), true, false)
final_goal(4, in_tower((block,16),(block,15)), true, false)
final_goal(4, in_tower((block,16),(block,16)), true, false)
final_goal(4, in_tower((block,16),(block,17)), true, false)
final_goal(4, in_tower((block,16),(block,18)), true, false)
final_goal(4, in_tower((block,16),(block,2)), true, false)
final_goal(4, in_tower((block,16),(block,3)), true, false)
final_goal(4, in_tower((block,16),(block,4)), true, false)
final_goal(4, in_tower((block,16),(block,5)), true, false)
final_goal(4, in_tower((block,16),(block,6)), true, false)
final_goal(4, in_tower((block,16),(block,7)), true, false)
final_goal(4, in_tower((block,16),(block,8)), true, false)
final_goal(4, in_tower((block,16),(block,9)), true, false)
final_goal(4, in_tower((block,17),(block,1)), true, false)
final_goal(4, in_tower((block,17),(block,10)), true, false)
final_goal(4, in_tower((block,17),(block,11)), true, false)
final_goal(4, in_tower((block,17),(block,12)), true, false)
final_goal(4, in_tower((block,17),(block,13)), true, false)
final_goal(4, in_tower((block,17),(block,14)), true, false)
final_goal(4, in_tower((block,17),(block,15)), true, false)
final_goal(4, in_tower((block,17),(block,16)), true, false)
final_goal(4, in_tower((block,17),(block,17)), true, false)
final_goal(4, in_tower((block,17),(block,18)), true, false)
final_goal(4, in_tower((block,17),(block,2)), true, false)
final_goal(4, in_tower((block,17),(block,3)), true, false)
final_goal(4, in_tower((block,17),(block,4)), true, false)
final_goal(4, in_tower((block,17),(block,5)), true, false)
final_goal(4, in_tower((block,17),(block,6)), true, false)
final_goal(4, in_tower((block,17),(block,7)), true, false)
final_goal(4, in_tower((block,17),(block,8)), true, false)
final_goal(4, in_tower((block,17),(block,9)), true, false)
final_goal(4, in_tower((block,18),(block,1)), true, false)
final_goal(4, in_tower((block,18),(block,10)), true, false)
final_goal(4, in_tower((block,18),(block,11)), true, false)
final_goal(4, in_tower((block,18),(block,12)), true, false)
final_goal(4, in_tower((block,18),(block,13)), true, false)
final_goal(4, in_tower((block,18),(block,14)), true, false)
final_goal(4, in_tower((block,18),(block,15)), true, false)
final_goal(4, in_tower((block,18),(block,16)), false, false)
final_goal(4, in_tower((block,18),(block,17)), false, false)
final_goal(4, in_tower((block,18),(block,18)), false, false)
final_goal(4, in_tower((block,18),(block,2)), true, false)
final_goal(4, in_tower((block,18),(block,3)), true, false)
final_goal(4, in_tower((block,18),(block,4)), true, false)
final_goal(4, in_tower((block,18),(block,5)), true, false)
final_goal(4, in_tower((block,18),(block,6)), true, false)
final_goal(4, in_tower((block,18),(block,7)), true, false)
final_goal(4, in_tower((block,18),(block,8)), true, false)
final_goal(4, in_tower((block,18),(block,9)), true, false)
final_goal(4, in_tower((block,2),(block,1)), true, false)
final_goal(4, in_tower((block,2),(block,10)), true, false)
final_goal(4, in_tower((block,2),(block,11)), true, false)
final_goal(4, in_tower((block,2),(block,12)), true, false)
final_goal(4, in_tower((block,2),(block,13)), true, false)
final_goal(4, in_tower((block,2),(block,14)), true, false)
final_goal(4, in_tower((block,2),(block,15)), true, false)
final_goal(4, in_tower((block,2),(block,16)), true, false)
final_goal(4, in_tower((block,2),(block,17)), true, false)
final_goal(4, in_tower((block,2),(block,18)), true, false)
final_goal(4, in_tower((block,2),(block,2)), true, false)
final_goal(4, in_tower((block,2),(block,3)), true, false)
final_goal(4, in_tower((block,2),(block,4)), true, false)
final_goal(4, in_tower((block,2),(block,5)), true, false)
final_goal(4, in_tower((block,2),(block,6)), true, false)
final_goal(4, in_tower((block,2),(block,7)), true, false)
final_goal(4, in_tower((block,2),(block,8)), true, false)
final_goal(4, in_tower((block,2),(block,9)), true, false)
final_goal(4, in_tower((block,3),(block,1)), false, false)
final_goal(4, in_tower((block,3),(block,10)), true, false)
final_goal(4, in_tower((block,3),(block,11)), true, false)
final_goal(4, in_tower((block,3),(block,12)), true, false)
final_goal(4, in_tower((block,3),(block,13)), true, false)
final_goal(4, in_tower((block,3),(block,14)), true, false)
final_goal(4, in_tower((block,3),(block,15)), true, false)
final_goal(4, in_tower((block,3),(block,16)), true, false)
final_goal(4, in_tower((block,3),(block,17)), true, false)
final_goal(4, in_tower((block,3),(block,18)), true, false)
final_goal(4, in_tower((block,3),(block,2)), false, false)
final_goal(4, in_tower((block,3),(block,3)), false, false)
final_goal(4, in_tower((block,3),(block,4)), true, false)
final_goal(4, in_tower((block,3),(block,5)), true, false)
final_goal(4, in_tower((block,3),(block,6)), true, false)
final_goal(4, in_tower((block,3),(block,7)), true, false)
final_goal(4, in_tower((block,3),(block,8)), true, false)
final_goal(4, in_tower((block,3),(block,9)), true, false)
final_goal(4, in_tower((block,4),(block,1)), true, false)
final_goal(4, in_tower((block,4),(block,10)), true, false)
final_goal(4, in_tower((block,4),(block,11)), true, false)
final_goal(4, in_tower((block,4),(block,12)), true, false)
final_goal(4, in_tower((block,4),(block,13)), true, false)
final_goal(4, in_tower((block,4),(block,14)), true, false)
final_goal(4, in_tower((block,4),(block,15)), true, false)
final_goal(4, in_tower((block,4),(block,16)), true, false)
final_goal(4, in_tower((block,4),(block,17)), true, false)
final_goal(4, in_tower((block,4),(block,18)), true, false)
final_goal(4, in_tower((block,4),(block,2)), true, false)
final_goal(4, in_tower((block,4),(block,3)), true, false)
final_goal(4, in_tower((block,4),(block,4)), true, false)
final_goal(4, in_tower((block,4),(block,5)), true, false)
final_goal(4, in_tower((block,4),(block,6)), true, false)
final_goal(4, in_tower((block,4),(block,7)), true, false)
final_goal(4, in_tower((block,4),(block,8)), true, false)
final_goal(4, in_tower((block,4),(block,9)), true, false)
final_goal(4, in_tower((block,5),(block,1)), true, false)
final_goal(4, in_tower((block,5),(block,10)), true, false)
final_goal(4, in_tower((block,5),(block,11)), true, false)
final_goal(4, in_tower((block,5),(block,12)), true, false)
final_goal(4, in_tower((block,5),(block,13)), true, false)
final_goal(4, in_tower((block,5),(block,14)), true, false)
final_goal(4, in_tower((block,5),(block,15)), true, false)
final_goal(4, in_tower((block,5),(block,16)), true, false)
final_goal(4, in_tower((block,5),(block,17)), true, false)
final_goal(4, in_tower((block,5),(block,18)), true, false)
final_goal(4, in_tower((block,5),(block,2)), true, false)
final_goal(4, in_tower((block,5),(block,3)), true, false)
final_goal(4, in_tower((block,5),(block,4)), true, false)
final_goal(4, in_tower((block,5),(block,5)), true, false)
final_goal(4, in_tower((block,5),(block,6)), true, false)
final_goal(4, in_tower((block,5),(block,7)), true, false)
final_goal(4, in_tower((block,5),(block,8)), true, false)
final_goal(4, in_tower((block,5),(block,9)), true, false)
final_goal(4, in_tower((block,6),(block,1)), true, false)
final_goal(4, in_tower((block,6),(block,10)), true, false)
final_goal(4, in_tower((block,6),(block,11)), true, false)
final_goal(4, in_tower((block,6),(block,12)), true, false)
final_goal(4, in_tower((block,6),(block,13)), true, false)
final_goal(4, in_tower((block,6),(block,14)), true, false)
final_goal(4, in_tower((block,6),(block,15)), true, false)
final_goal(4, in_tower((block,6),(block,16)), true, false)
final_goal(4, in_tower((block,6),(block,17)), true, false)
final_goal(4, in_tower((block,6),(block,18)), true, false)
final_goal(4, in_tower((block,6),(block,2)), true, false)
final_goal(4, in_tower((block,6),(block,3)), true, false)
final_goal(4, in_tower((block,6),(block,4)), false, false)
final_goal(4, in_tower((block,6),(block,5)), false, false)
final_goal(4, in_tower((block,6),(block,6)), false, false)
final_goal(4, in_tower((block,6),(block,7)), true, false)
final_goal(4, in_tower((block,6),(block,8)), true, false)
final_goal(4, in_tower((block,6),(block,9)), true, false)
final_goal(4, in_tower((block,7),(block,1)), true, false)
final_goal(4, in_tower((block,7),(block,10)), true, false)
final_goal(4, in_tower((block,7),(block,11)), true, false)
final_goal(4, in_tower((block,7),(block,12)), true, false)
final_goal(4, in_tower((block,7),(block,13)), true, false)
final_goal(4, in_tower((block,7),(block,14)), true, false)
final_goal(4, in_tower((block,7),(block,15)), true, false)
final_goal(4, in_tower((block,7),(block,16)), true, false)
final_goal(4, in_tower((block,7),(block,17)), true, false)
final_goal(4, in_tower((block,7),(block,18)), true, false)
final_goal(4, in_tower((block,7),(block,2)), true, false)
final_goal(4, in_tower((block,7),(block,3)), true, false)
final_goal(4, in_tower((block,7),(block,4)), true, false)
final_goal(4, in_tower((block,7),(block,5)), true, false)
final_goal(4, in_tower((block,7),(block,6)), true, false)
final_goal(4, in_tower((block,7),(block,7)), true, false)
final_goal(4, in_tower((block,7),(block,8)), true, false)
final_goal(4, in_tower((block,7),(block,9)), true, false)
final_goal(4, in_tower((block,8),(block,1)), true, false)
final_goal(4, in_tower((block,8),(block,10)), true, false)
final_goal(4, in_tower((block,8),(block,11)), true, false)
final_goal(4, in_tower((block,8),(block,12)), true, false)
final_goal(4, in_tower((block,8),(block,13)), true, false)
final_goal(4, in_tower((block,8),(block,14)), true, false)
final_goal(4, in_tower((block,8),(block,15)), true, false)
final_goal(4, in_tower((block,8),(block,16)), true, false)
final_goal(4, in_tower((block,8),(block,17)), true, false)
final_goal(4, in_tower((block,8),(block,18)), true, false)
final_goal(4, in_tower((block,8),(block,2)), true, false)
final_goal(4, in_tower((block,8),(block,3)), true, false)
final_goal(4, in_tower((block,8),(block,4)), true, false)
final_goal(4, in_tower((block,8),(block,5)), true, false)
final_goal(4, in_tower((block,8),(block,6)), true, false)
final_goal(4, in_tower((block,8),(block,7)), true, false)
final_goal(4, in_tower((block,8),(block,8)), true, false)
final_goal(4, in_tower((block,8),(block,9)), true, false)
final_goal(4, in_tower((block,9),(block,1)), true, false)
final_goal(4, in_tower((block,9),(block,10)), true, false)
final_goal(4, in_tower((block,9),(block,11)), true, false)
final_goal(4, in_tower((block,9),(block,12)), true, false)
final_goal(4, in_tower((block,9),(block,13)), true, false)
final_goal(4, in_tower((block,9),(block,14)), true, false)
final_goal(4, in_tower((block,9),(block,15)), true, false)
final_goal(4, in_tower((block,9),(block,16)), true, false)
final_goal(4, in_tower((block,9),(block,17)), true, false)
final_goal(4, in_tower((block,9),(block,18)), true, false)
final_goal(4, in_tower((block,9),(block,2)), true, false)
final_goal(4, in_tower((block,9),(block,3)), true, false)
final_goal(4, in_tower((block,9),(block,4)), true, false)
final_goal(4, in_tower((block,9),(block,5)), true, false)
final_goal(4, in_tower((block,9),(block,6)), true, false)
final_goal(4, in_tower((block,9),(block,7)), false, false)
final_goal(4, in_tower((block,9),(block,8)), false, false)
final_goal(4, in_tower((block,9),(block,9)), false, false)
final_goal(4, on((block,1)), (block,10), false)
final_goal(4, on((block,1)), (block,11), false)
final_goal(4, on((block,1)), (block,12), false)
final_goal(4, on((block,1)), (block,13), false)
final_goal(4, on((block,1)), (block,14), false)
final_goal(4, on((block,1)), (block,15), false)
final_goal(4, on((block,1)), (block,16), false)
final_goal(4, on((block,1)), (block,17), false)
final_goal(4, on((block,1)), (block,18), false)
final_goal(4, on((block,1)), (block,3), false)
final_goal(4, on((block,1)), (block,4), false)
final_goal(4, on((block,1)), (block,5), false)
final_goal(4, on((block,1)), (block,6), false)
final_goal(4, on((block,1)), (block,7), false)
final_goal(4, on((block,1)), (block,8), false)
final_goal(4, on((block,1)), (block,9), false)
final_goal(4, on((block,1)), nothing, false)
final_goal(4, on((block,1)), puzzle_room_1_table, false)
final_goal(4, on((block,1)), puzzle_room_2_table, false)
final_goal(4, on((block,10)), (block,1), false)
final_goal(4, on((block,10)), (block,12), false)
final_goal(4, on((block,10)), (block,13), false)
final_goal(4, on((block,10)), (block,14), false)
final_goal(4, on((block,10)), (block,15), false)
final_goal(4, on((block,10)), (block,16), false)
final_goal(4, on((block,10)), (block,17), false)
final_goal(4, on((block,10)), (block,18), false)
final_goal(4, on((block,10)), (block,2), false)
final_goal(4, on((block,10)), (block,3), false)
final_goal(4, on((block,10)), (block,4), false)
final_goal(4, on((block,10)), (block,5), false)
final_goal(4, on((block,10)), (block,6), false)
final_goal(4, on((block,10)), (block,7), false)
final_goal(4, on((block,10)), (block,8), false)
final_goal(4, on((block,10)), (block,9), false)
final_goal(4, on((block,10)), nothing, false)
final_goal(4, on((block,10)), puzzle_room_1_table, false)
final_goal(4, on((block,10)), puzzle_room_2_table, false)
final_goal(4, on((block,11)), (block,1), false)
final_goal(4, on((block,11)), (block,10), false)
final_goal(4, on((block,11)), (block,13), false)
final_goal(4, on((block,11)), (block,14), false)
final_goal(4, on((block,11)), (block,15), false)
final_goal(4, on((block,11)), (block,16), false)
final_goal(4, on((block,11)), (block,17), false)
final_goal(4, on((block,11)), (block,18), false)
final_goal(4, on((block,11)), (block,2), false)
final_goal(4, on((block,11)), (block,3), false)
final_goal(4, on((block,11)), (block,4), false)
final_goal(4, on((block,11)), (block,5), false)
final_goal(4, on((block,11)), (block,6), false)
final_goal(4, on((block,11)), (block,7), false)
final_goal(4, on((block,11)), (block,8), false)
final_goal(4, on((block,11)), (block,9), false)
final_goal(4, on((block,11)), nothing, false)
final_goal(4, on((block,11)), puzzle_room_1_table, false)
final_goal(4, on((block,11)), puzzle_room_2_table, false)
final_goal(4, on((block,12)), (block,1), false)
final_goal(4, on((block,12)), (block,10), false)
final_goal(4, on((block,12)), (block,11), false)
final_goal(4, on((block,12)), (block,13), false)
final_goal(4, on((block,12)), (block,14), false)
final_goal(4, on((block,12)), (block,15), false)
final_goal(4, on((block,12)), (block,16), false)
final_goal(4, on((block,12)), (block,17), false)
final_goal(4, on((block,12)), (block,18), false)
final_goal(4, on((block,12)), (block,2), false)
final_goal(4, on((block,12)), (block,3), false)
final_goal(4, on((block,12)), (block,4), false)
final_goal(4, on((block,12)), (block,5), false)
final_goal(4, on((block,12)), (block,6), false)
final_goal(4, on((block,12)), (block,7), false)
final_goal(4, on((block,12)), (block,8), false)
final_goal(4, on((block,12)), (block,9), false)
final_goal(4, on((block,12)), nothing, false)
final_goal(4, on((block,12)), puzzle_room_1_table, false)
final_goal(4, on((block,13)), (block,1), false)
final_goal(4, on((block,13)), (block,10), false)
final_goal(4, on((block,13)), (block,11), false)
final_goal(4, on((block,13)), (block,12), false)
final_goal(4, on((block,13)), (block,15), false)
final_goal(4, on((block,13)), (block,16), false)
final_goal(4, on((block,13)), (block,17), false)
final_goal(4, on((block,13)), (block,18), false)
final_goal(4, on((block,13)), (block,2), false)
final_goal(4, on((block,13)), (block,3), false)
final_goal(4, on((block,13)), (block,4), false)
final_goal(4, on((block,13)), (block,5), false)
final_goal(4, on((block,13)), (block,6), false)
final_goal(4, on((block,13)), (block,7), false)
final_goal(4, on((block,13)), (block,8), false)
final_goal(4, on((block,13)), (block,9), false)
final_goal(4, on((block,13)), nothing, false)
final_goal(4, on((block,13)), puzzle_room_1_table, false)
final_goal(4, on((block,13)), puzzle_room_2_table, false)
final_goal(4, on((block,14)), (block,1), false)
final_goal(4, on((block,14)), (block,10), false)
final_goal(4, on((block,14)), (block,11), false)
final_goal(4, on((block,14)), (block,12), false)
final_goal(4, on((block,14)), (block,13), false)
final_goal(4, on((block,14)), (block,16), false)
final_goal(4, on((block,14)), (block,17), false)
final_goal(4, on((block,14)), (block,18), false)
final_goal(4, on((block,14)), (block,2), false)
final_goal(4, on((block,14)), (block,3), false)
final_goal(4, on((block,14)), (block,4), false)
final_goal(4, on((block,14)), (block,5), false)
final_goal(4, on((block,14)), (block,6), false)
final_goal(4, on((block,14)), (block,7), false)
final_goal(4, on((block,14)), (block,8), false)
final_goal(4, on((block,14)), (block,9), false)
final_goal(4, on((block,14)), nothing, false)
final_goal(4, on((block,14)), puzzle_room_1_table, false)
final_goal(4, on((block,14)), puzzle_room_2_table, false)
final_goal(4, on((block,15)), (block,1), false)
final_goal(4, on((block,15)), (block,10), false)
final_goal(4, on((block,15)), (block,11), false)
final_goal(4, on((block,15)), (block,12), false)
final_goal(4, on((block,15)), (block,13), false)
final_goal(4, on((block,15)), (block,14), false)
final_goal(4, on((block,15)), (block,16), false)
final_goal(4, on((block,15)), (block,17), false)
final_goal(4, on((block,15)), (block,18), false)
final_goal(4, on((block,15)), (block,2), false)
final_goal(4, on((block,15)), (block,3), false)
final_goal(4, on((block,15)), (block,4), false)
final_goal(4, on((block,15)), (block,5), false)
final_goal(4, on((block,15)), (block,6), false)
final_goal(4, on((block,15)), (block,7), false)
final_goal(4, on((block,15)), (block,8), false)
final_goal(4, on((block,15)), (block,9), false)
final_goal(4, on((block,15)), nothing, false)
final_goal(4, on((block,15)), puzzle_room_1_table, false)
final_goal(4, on((block,16)), (block,1), false)
final_goal(4, on((block,16)), (block,10), false)
final_goal(4, on((block,16)), (block,11), false)
final_goal(4, on((block,16)), (block,12), false)
final_goal(4, on((block,16)), (block,13), false)
final_goal(4, on((block,16)), (block,14), false)
final_goal(4, on((block,16)), (block,15), false)
final_goal(4, on((block,16)), (block,18), false)
final_goal(4, on((block,16)), (block,2), false)
final_goal(4, on((block,16)), (block,3), false)
final_goal(4, on((block,16)), (block,4), false)
final_goal(4, on((block,16)), (block,5), false)
final_goal(4, on((block,16)), (block,6), false)
final_goal(4, on((block,16)), (block,7), false)
final_goal(4, on((block,16)), (block,8), false)
final_goal(4, on((block,16)), (block,9), false)
final_goal(4, on((block,16)), nothing, false)
final_goal(4, on((block,16)), puzzle_room_1_table, false)
final_goal(4, on((block,16)), puzzle_room_2_table, false)
final_goal(4, on((block,17)), (block,1), false)
final_goal(4, on((block,17)), (block,10), false)
final_goal(4, on((block,17)), (block,11), false)
final_goal(4, on((block,17)), (block,12), false)
final_goal(4, on((block,17)), (block,13), false)
final_goal(4, on((block,17)), (block,14), false)
final_goal(4, on((block,17)), (block,15), false)
final_goal(4, on((block,17)), (block,16), false)
final_goal(4, on((block,17)), (block,2), false)
final_goal(4, on((block,17)), (block,3), false)
final_goal(4, on((block,17)), (block,4), false)
final_goal(4, on((block,17)), (block,5), false)
final_goal(4, on((block,17)), (block,6), false)
final_goal(4, on((block,17)), (block,7), false)
final_goal(4, on((block,17)), (block,8), false)
final_goal(4, on((block,17)), (block,9), false)
final_goal(4, on((block,17)), nothing, false)
final_goal(4, on((block,17)), puzzle_room_1_table, false)
final_goal(4, on((block,17)), puzzle_room_2_table, false)
final_goal(4, on((block,18)), (block,1), false)
final_goal(4, on((block,18)), (block,10), false)
final_goal(4, on((block,18)), (block,11), false)
final_goal(4, on((block,18)), (block,12), false)
final_goal(4, on((block,18)), (block,13), false)
final_goal(4, on((block,18)), (block,14), false)
final_goal(4, on((block,18)), (block,15), false)
final_goal(4, on((block,18)), (block,16), false)
final_goal(4, on((block,18)), (block,17), false)
final_goal(4, on((block,18)), (block,2), false)
final_goal(4, on((block,18)), (block,3), false)
final_goal(4, on((block,18)), (block,4), false)
final_goal(4, on((block,18)), (block,5), false)
final_goal(4, on((block,18)), (block,6), false)
final_goal(4, on((block,18)), (block,7), false)
final_goal(4, on((block,18)), (block,8), false)
final_goal(4, on((block,18)), (block,9), false)
final_goal(4, on((block,18)), nothing, false)
final_goal(4, on((block,18)), puzzle_room_1_table, false)
final_goal(4, on((block,2)), (block,1), false)
final_goal(4, on((block,2)), (block,10), false)
final_goal(4, on((block,2)), (block,11), false)
final_goal(4, on((block,2)), (block,12), false)
final_goal(4, on((block,2)), (block,13), false)
final_goal(4, on((block,2)), (block,14), false)
final_goal(4, on((block,2)), (block,15), false)
final_goal(4, on((block,2)), (block,16), false)
final_goal(4, on((block,2)), (block,17), false)
final_goal(4, on((block,2)), (block,18), false)
final_goal(4, on((block,2)), (block,4), false)
final_goal(4, on((block,2)), (block,5), false)
final_goal(4, on((block,2)), (block,6), false)
final_goal(4, on((block,2)), (block,7), false)
final_goal(4, on((block,2)), (block,8), false)
final_goal(4, on((block,2)), (block,9), false)
final_goal(4, on((block,2)), nothing, false)
final_goal(4, on((block,2)), puzzle_room_1_table, false)
final_goal(4, on((block,2)), puzzle_room_2_table, false)
final_goal(4, on((block,3)), (block,1), false)
final_goal(4, on((block,3)), (block,10), false)
final_goal(4, on((block,3)), (block,11), false)
final_goal(4, on((block,3)), (block,12), false)
final_goal(4, on((block,3)), (block,13), false)
final_goal(4, on((block,3)), (block,14), false)
final_goal(4, on((block,3)), (block,15), false)
final_goal(4, on((block,3)), (block,16), false)
final_goal(4, on((block,3)), (block,17), false)
final_goal(4, on((block,3)), (block,18), false)
final_goal(4, on((block,3)), (block,2), false)
final_goal(4, on((block,3)), (block,4), false)
final_goal(4, on((block,3)), (block,5), false)
final_goal(4, on((block,3)), (block,6), false)
final_goal(4, on((block,3)), (block,7), false)
final_goal(4, on((block,3)), (block,8), false)
final_goal(4, on((block,3)), (block,9), false)
final_goal(4, on((block,3)), nothing, false)
final_goal(4, on((block,3)), puzzle_room_2_table, false)
final_goal(4, on((block,4)), (block,1), false)
final_goal(4, on((block,4)), (block,10), false)
final_goal(4, on((block,4)), (block,11), false)
final_goal(4, on((block,4)), (block,12), false)
final_goal(4, on((block,4)), (block,13), false)
final_goal(4, on((block,4)), (block,14), false)
final_goal(4, on((block,4)), (block,15), false)
final_goal(4, on((block,4)), (block,16), false)
final_goal(4, on((block,4)), (block,17), false)
final_goal(4, on((block,4)), (block,18), false)
final_goal(4, on((block,4)), (block,2), false)
final_goal(4, on((block,4)), (block,3), false)
final_goal(4, on((block,4)), (block,6), false)
final_goal(4, on((block,4)), (block,7), false)
final_goal(4, on((block,4)), (block,8), false)
final_goal(4, on((block,4)), (block,9), false)
final_goal(4, on((block,4)), nothing, false)
final_goal(4, on((block,4)), puzzle_room_1_table, false)
final_goal(4, on((block,4)), puzzle_room_2_table, false)
final_goal(4, on((block,5)), (block,1), false)
final_goal(4, on((block,5)), (block,10), false)
final_goal(4, on((block,5)), (block,11), false)
final_goal(4, on((block,5)), (block,12), false)
final_goal(4, on((block,5)), (block,13), false)
final_goal(4, on((block,5)), (block,14), false)
final_goal(4, on((block,5)), (block,15), false)
final_goal(4, on((block,5)), (block,16), false)
final_goal(4, on((block,5)), (block,17), false)
final_goal(4, on((block,5)), (block,18), false)
final_goal(4, on((block,5)), (block,2), false)
final_goal(4, on((block,5)), (block,3), false)
final_goal(4, on((block,5)), (block,4), false)
final_goal(4, on((block,5)), (block,7), false)
final_goal(4, on((block,5)), (block,8), false)
final_goal(4, on((block,5)), (block,9), false)
final_goal(4, on((block,5)), nothing, false)
final_goal(4, on((block,5)), puzzle_room_1_table, false)
final_goal(4, on((block,5)), puzzle_room_2_table, false)
final_goal(4, on((block,6)), (block,1), false)
final_goal(4, on((block,6)), (block,10), false)
final_goal(4, on((block,6)), (block,11), false)
final_goal(4, on((block,6)), (block,12), false)
final_goal(4, on((block,6)), (block,13), false)
final_goal(4, on((block,6)), (block,14), false)
final_goal(4, on((block,6)), (block,15), false)
final_goal(4, on((block,6)), (block,16), false)
final_goal(4, on((block,6)), (block,17), false)
final_goal(4, on((block,6)), (block,18), false)
final_goal(4, on((block,6)), (block,2), false)
final_goal(4, on((block,6)), (block,3), false)
final_goal(4, on((block,6)), (block,4), false)
final_goal(4, on((block,6)), (block,5), false)
final_goal(4, on((block,6)), (block,7), false)
final_goal(4, on((block,6)), (block,8), false)
final_goal(4, on((block,6)), (block,9), false)
final_goal(4, on((block,6)), nothing, false)
final_goal(4, on((block,6)), puzzle_room_2_table, false)
final_goal(4, on((block,7)), (block,1), false)
final_goal(4, on((block,7)), (block,10), false)
final_goal(4, on((block,7)), (block,11), false)
final_goal(4, on((block,7)), (block,12), false)
final_goal(4, on((block,7)), (block,13), false)
final_goal(4, on((block,7)), (block,14), false)
final_goal(4, on((block,7)), (block,15), false)
final_goal(4, on((block,7)), (block,16), false)
final_goal(4, on((block,7)), (block,17), false)
final_goal(4, on((block,7)), (block,18), false)
final_goal(4, on((block,7)), (block,2), false)
final_goal(4, on((block,7)), (block,3), false)
final_goal(4, on((block,7)), (block,4), false)
final_goal(4, on((block,7)), (block,5), false)
final_goal(4, on((block,7)), (block,6), false)
final_goal(4, on((block,7)), (block,9), false)
final_goal(4, on((block,7)), nothing, false)
final_goal(4, on((block,7)), puzzle_room_1_table, false)
final_goal(4, on((block,7)), puzzle_room_2_table, false)
final_goal(4, on((block,8)), (block,1), false)
final_goal(4, on((block,8)), (block,10), false)
final_goal(4, on((block,8)), (block,11), false)
final_goal(4, on((block,8)), (block,12), false)
final_goal(4, on((block,8)), (block,13), false)
final_goal(4, on((block,8)), (block,14), false)
final_goal(4, on((block,8)), (block,15), false)
final_goal(4, on((block,8)), (block,16), false)
final_goal(4, on((block,8)), (block,17), false)
final_goal(4, on((block,8)), (block,18), false)
final_goal(4, on((block,8)), (block,2), false)
final_goal(4, on((block,8)), (block,3), false)
final_goal(4, on((block,8)), (block,4), false)
final_goal(4, on((block,8)), (block,5), false)
final_goal(4, on((block,8)), (block,6), false)
final_goal(4, on((block,8)), (block,7), false)
final_goal(4, on((block,8)), nothing, false)
final_goal(4, on((block,8)), puzzle_room_1_table, false)
final_goal(4, on((block,8)), puzzle_room_2_table, false)
final_goal(4, on((block,9)), (block,1), false)
final_goal(4, on((block,9)), (block,10), false)
final_goal(4, on((block,9)), (block,11), false)
final_goal(4, on((block,9)), (block,12), false)
final_goal(4, on((block,9)), (block,13), false)
final_goal(4, on((block,9)), (block,14), false)
final_goal(4, on((block,9)), (block,15), false)
final_goal(4, on((block,9)), (block,16), false)
final_goal(4, on((block,9)), (block,17), false)
final_goal(4, on((block,9)), (block,18), false)
final_goal(4, on((block,9)), (block,2), false)
final_goal(4, on((block,9)), (block,3), false)
final_goal(4, on((block,9)), (block,4), false)
final_goal(4, on((block,9)), (block,5), false)
final_goal(4, on((block,9)), (block,6), false)
final_goal(4, on((block,9)), (block,7), false)
final_goal(4, on((block,9)), (block,8), false)
final_goal(4, on((block,9)), nothing, false)
final_goal(4, on((block,9)), puzzle_room_2_table, false)
final_goal(4, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(4, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(4, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(4, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(4, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(4, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(4, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,9),puzzle_room_2_table), true, false)

[04-03-2022_16-19-40] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 3         
      ================================================      

final_goal(3, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(3, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(3, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(3, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(3, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(3, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(3, in_tower((block,1),(block,1)), false, true)
final_goal(3, in_tower((block,1),(block,10)), false, true)
final_goal(3, in_tower((block,1),(block,11)), false, true)
final_goal(3, in_tower((block,1),(block,12)), false, true)
final_goal(3, in_tower((block,1),(block,13)), false, true)
final_goal(3, in_tower((block,1),(block,14)), false, true)
final_goal(3, in_tower((block,1),(block,15)), false, true)
final_goal(3, in_tower((block,1),(block,16)), false, true)
final_goal(3, in_tower((block,1),(block,17)), false, true)
final_goal(3, in_tower((block,1),(block,18)), false, true)
final_goal(3, in_tower((block,1),(block,2)), false, true)
final_goal(3, in_tower((block,1),(block,3)), false, true)
final_goal(3, in_tower((block,1),(block,4)), false, true)
final_goal(3, in_tower((block,1),(block,5)), false, true)
final_goal(3, in_tower((block,1),(block,6)), false, true)
final_goal(3, in_tower((block,1),(block,7)), false, true)
final_goal(3, in_tower((block,1),(block,8)), false, true)
final_goal(3, in_tower((block,1),(block,9)), false, true)
final_goal(3, in_tower((block,10),(block,1)), false, true)
final_goal(3, in_tower((block,10),(block,10)), false, true)
final_goal(3, in_tower((block,10),(block,11)), false, true)
final_goal(3, in_tower((block,10),(block,12)), false, true)
final_goal(3, in_tower((block,10),(block,13)), false, true)
final_goal(3, in_tower((block,10),(block,14)), false, true)
final_goal(3, in_tower((block,10),(block,15)), false, true)
final_goal(3, in_tower((block,10),(block,16)), false, true)
final_goal(3, in_tower((block,10),(block,17)), false, true)
final_goal(3, in_tower((block,10),(block,18)), false, true)
final_goal(3, in_tower((block,10),(block,2)), false, true)
final_goal(3, in_tower((block,10),(block,3)), false, true)
final_goal(3, in_tower((block,10),(block,4)), false, true)
final_goal(3, in_tower((block,10),(block,5)), false, true)
final_goal(3, in_tower((block,10),(block,6)), false, true)
final_goal(3, in_tower((block,10),(block,7)), false, true)
final_goal(3, in_tower((block,10),(block,8)), false, true)
final_goal(3, in_tower((block,10),(block,9)), false, true)
final_goal(3, in_tower((block,11),(block,1)), false, true)
final_goal(3, in_tower((block,11),(block,10)), false, true)
final_goal(3, in_tower((block,11),(block,11)), false, true)
final_goal(3, in_tower((block,11),(block,12)), false, true)
final_goal(3, in_tower((block,11),(block,13)), false, true)
final_goal(3, in_tower((block,11),(block,14)), false, true)
final_goal(3, in_tower((block,11),(block,15)), false, true)
final_goal(3, in_tower((block,11),(block,16)), false, true)
final_goal(3, in_tower((block,11),(block,17)), false, true)
final_goal(3, in_tower((block,11),(block,18)), false, true)
final_goal(3, in_tower((block,11),(block,2)), false, true)
final_goal(3, in_tower((block,11),(block,3)), false, true)
final_goal(3, in_tower((block,11),(block,4)), false, true)
final_goal(3, in_tower((block,11),(block,5)), false, true)
final_goal(3, in_tower((block,11),(block,6)), false, true)
final_goal(3, in_tower((block,11),(block,7)), false, true)
final_goal(3, in_tower((block,11),(block,8)), false, true)
final_goal(3, in_tower((block,11),(block,9)), false, true)
final_goal(3, in_tower((block,12),(block,1)), false, true)
final_goal(3, in_tower((block,12),(block,10)), true, true)
final_goal(3, in_tower((block,12),(block,11)), true, true)
final_goal(3, in_tower((block,12),(block,12)), true, true)
final_goal(3, in_tower((block,12),(block,13)), false, true)
final_goal(3, in_tower((block,12),(block,14)), false, true)
final_goal(3, in_tower((block,12),(block,15)), false, true)
final_goal(3, in_tower((block,12),(block,16)), false, true)
final_goal(3, in_tower((block,12),(block,17)), false, true)
final_goal(3, in_tower((block,12),(block,18)), false, true)
final_goal(3, in_tower((block,12),(block,2)), false, true)
final_goal(3, in_tower((block,12),(block,3)), false, true)
final_goal(3, in_tower((block,12),(block,4)), false, true)
final_goal(3, in_tower((block,12),(block,5)), false, true)
final_goal(3, in_tower((block,12),(block,6)), false, true)
final_goal(3, in_tower((block,12),(block,7)), false, true)
final_goal(3, in_tower((block,12),(block,8)), false, true)
final_goal(3, in_tower((block,12),(block,9)), false, true)
final_goal(3, in_tower((block,13),(block,1)), false, true)
final_goal(3, in_tower((block,13),(block,10)), false, true)
final_goal(3, in_tower((block,13),(block,11)), false, true)
final_goal(3, in_tower((block,13),(block,12)), false, true)
final_goal(3, in_tower((block,13),(block,13)), false, true)
final_goal(3, in_tower((block,13),(block,14)), false, true)
final_goal(3, in_tower((block,13),(block,15)), false, true)
final_goal(3, in_tower((block,13),(block,16)), false, true)
final_goal(3, in_tower((block,13),(block,17)), false, true)
final_goal(3, in_tower((block,13),(block,18)), false, true)
final_goal(3, in_tower((block,13),(block,2)), false, true)
final_goal(3, in_tower((block,13),(block,3)), false, true)
final_goal(3, in_tower((block,13),(block,4)), false, true)
final_goal(3, in_tower((block,13),(block,5)), false, true)
final_goal(3, in_tower((block,13),(block,6)), false, true)
final_goal(3, in_tower((block,13),(block,7)), false, true)
final_goal(3, in_tower((block,13),(block,8)), false, true)
final_goal(3, in_tower((block,13),(block,9)), false, true)
final_goal(3, in_tower((block,14),(block,1)), false, true)
final_goal(3, in_tower((block,14),(block,10)), false, true)
final_goal(3, in_tower((block,14),(block,11)), false, true)
final_goal(3, in_tower((block,14),(block,12)), false, true)
final_goal(3, in_tower((block,14),(block,13)), false, true)
final_goal(3, in_tower((block,14),(block,14)), false, true)
final_goal(3, in_tower((block,14),(block,15)), false, true)
final_goal(3, in_tower((block,14),(block,16)), false, true)
final_goal(3, in_tower((block,14),(block,17)), false, true)
final_goal(3, in_tower((block,14),(block,18)), false, true)
final_goal(3, in_tower((block,14),(block,2)), false, true)
final_goal(3, in_tower((block,14),(block,3)), false, true)
final_goal(3, in_tower((block,14),(block,4)), false, true)
final_goal(3, in_tower((block,14),(block,5)), false, true)
final_goal(3, in_tower((block,14),(block,6)), false, true)
final_goal(3, in_tower((block,14),(block,7)), false, true)
final_goal(3, in_tower((block,14),(block,8)), false, true)
final_goal(3, in_tower((block,14),(block,9)), false, true)
final_goal(3, in_tower((block,15),(block,1)), false, true)
final_goal(3, in_tower((block,15),(block,10)), false, true)
final_goal(3, in_tower((block,15),(block,11)), false, true)
final_goal(3, in_tower((block,15),(block,12)), false, true)
final_goal(3, in_tower((block,15),(block,13)), true, true)
final_goal(3, in_tower((block,15),(block,14)), true, true)
final_goal(3, in_tower((block,15),(block,15)), true, true)
final_goal(3, in_tower((block,15),(block,16)), false, true)
final_goal(3, in_tower((block,15),(block,17)), false, true)
final_goal(3, in_tower((block,15),(block,18)), false, true)
final_goal(3, in_tower((block,15),(block,2)), false, true)
final_goal(3, in_tower((block,15),(block,3)), false, true)
final_goal(3, in_tower((block,15),(block,4)), false, true)
final_goal(3, in_tower((block,15),(block,5)), false, true)
final_goal(3, in_tower((block,15),(block,6)), false, true)
final_goal(3, in_tower((block,15),(block,7)), false, true)
final_goal(3, in_tower((block,15),(block,8)), false, true)
final_goal(3, in_tower((block,15),(block,9)), false, true)
final_goal(3, in_tower((block,16),(block,1)), false, true)
final_goal(3, in_tower((block,16),(block,10)), false, true)
final_goal(3, in_tower((block,16),(block,11)), false, true)
final_goal(3, in_tower((block,16),(block,12)), false, true)
final_goal(3, in_tower((block,16),(block,13)), false, true)
final_goal(3, in_tower((block,16),(block,14)), false, true)
final_goal(3, in_tower((block,16),(block,15)), false, true)
final_goal(3, in_tower((block,16),(block,16)), false, true)
final_goal(3, in_tower((block,16),(block,17)), false, true)
final_goal(3, in_tower((block,16),(block,18)), false, true)
final_goal(3, in_tower((block,16),(block,2)), false, true)
final_goal(3, in_tower((block,16),(block,3)), false, true)
final_goal(3, in_tower((block,16),(block,4)), false, true)
final_goal(3, in_tower((block,16),(block,5)), false, true)
final_goal(3, in_tower((block,16),(block,6)), false, true)
final_goal(3, in_tower((block,16),(block,7)), false, true)
final_goal(3, in_tower((block,16),(block,8)), false, true)
final_goal(3, in_tower((block,16),(block,9)), false, true)
final_goal(3, in_tower((block,17),(block,1)), false, true)
final_goal(3, in_tower((block,17),(block,10)), false, true)
final_goal(3, in_tower((block,17),(block,11)), false, true)
final_goal(3, in_tower((block,17),(block,12)), false, true)
final_goal(3, in_tower((block,17),(block,13)), false, true)
final_goal(3, in_tower((block,17),(block,14)), false, true)
final_goal(3, in_tower((block,17),(block,15)), false, true)
final_goal(3, in_tower((block,17),(block,16)), false, true)
final_goal(3, in_tower((block,17),(block,17)), false, true)
final_goal(3, in_tower((block,17),(block,18)), false, true)
final_goal(3, in_tower((block,17),(block,2)), false, true)
final_goal(3, in_tower((block,17),(block,3)), false, true)
final_goal(3, in_tower((block,17),(block,4)), false, true)
final_goal(3, in_tower((block,17),(block,5)), false, true)
final_goal(3, in_tower((block,17),(block,6)), false, true)
final_goal(3, in_tower((block,17),(block,7)), false, true)
final_goal(3, in_tower((block,17),(block,8)), false, true)
final_goal(3, in_tower((block,17),(block,9)), false, true)
final_goal(3, in_tower((block,18),(block,1)), false, true)
final_goal(3, in_tower((block,18),(block,10)), false, true)
final_goal(3, in_tower((block,18),(block,11)), false, true)
final_goal(3, in_tower((block,18),(block,12)), false, true)
final_goal(3, in_tower((block,18),(block,13)), false, true)
final_goal(3, in_tower((block,18),(block,14)), false, true)
final_goal(3, in_tower((block,18),(block,15)), false, true)
final_goal(3, in_tower((block,18),(block,16)), true, true)
final_goal(3, in_tower((block,18),(block,17)), true, true)
final_goal(3, in_tower((block,18),(block,18)), true, true)
final_goal(3, in_tower((block,18),(block,2)), false, true)
final_goal(3, in_tower((block,18),(block,3)), false, true)
final_goal(3, in_tower((block,18),(block,4)), false, true)
final_goal(3, in_tower((block,18),(block,5)), false, true)
final_goal(3, in_tower((block,18),(block,6)), false, true)
final_goal(3, in_tower((block,18),(block,7)), false, true)
final_goal(3, in_tower((block,18),(block,8)), false, true)
final_goal(3, in_tower((block,18),(block,9)), false, true)
final_goal(3, in_tower((block,2),(block,1)), false, true)
final_goal(3, in_tower((block,2),(block,10)), false, true)
final_goal(3, in_tower((block,2),(block,11)), false, true)
final_goal(3, in_tower((block,2),(block,12)), false, true)
final_goal(3, in_tower((block,2),(block,13)), false, true)
final_goal(3, in_tower((block,2),(block,14)), false, true)
final_goal(3, in_tower((block,2),(block,15)), false, true)
final_goal(3, in_tower((block,2),(block,16)), false, true)
final_goal(3, in_tower((block,2),(block,17)), false, true)
final_goal(3, in_tower((block,2),(block,18)), false, true)
final_goal(3, in_tower((block,2),(block,2)), false, true)
final_goal(3, in_tower((block,2),(block,3)), false, true)
final_goal(3, in_tower((block,2),(block,4)), false, true)
final_goal(3, in_tower((block,2),(block,5)), false, true)
final_goal(3, in_tower((block,2),(block,6)), false, true)
final_goal(3, in_tower((block,2),(block,7)), false, true)
final_goal(3, in_tower((block,2),(block,8)), false, true)
final_goal(3, in_tower((block,2),(block,9)), false, true)
final_goal(3, in_tower((block,3),(block,1)), true, true)
final_goal(3, in_tower((block,3),(block,10)), false, true)
final_goal(3, in_tower((block,3),(block,11)), false, true)
final_goal(3, in_tower((block,3),(block,12)), false, true)
final_goal(3, in_tower((block,3),(block,13)), false, true)
final_goal(3, in_tower((block,3),(block,14)), false, true)
final_goal(3, in_tower((block,3),(block,15)), false, true)
final_goal(3, in_tower((block,3),(block,16)), false, true)
final_goal(3, in_tower((block,3),(block,17)), false, true)
final_goal(3, in_tower((block,3),(block,18)), false, true)
final_goal(3, in_tower((block,3),(block,2)), true, true)
final_goal(3, in_tower((block,3),(block,3)), true, true)
final_goal(3, in_tower((block,3),(block,4)), false, true)
final_goal(3, in_tower((block,3),(block,5)), false, true)
final_goal(3, in_tower((block,3),(block,6)), false, true)
final_goal(3, in_tower((block,3),(block,7)), false, true)
final_goal(3, in_tower((block,3),(block,8)), false, true)
final_goal(3, in_tower((block,3),(block,9)), false, true)
final_goal(3, in_tower((block,4),(block,1)), false, true)
final_goal(3, in_tower((block,4),(block,10)), false, true)
final_goal(3, in_tower((block,4),(block,11)), false, true)
final_goal(3, in_tower((block,4),(block,12)), false, true)
final_goal(3, in_tower((block,4),(block,13)), false, true)
final_goal(3, in_tower((block,4),(block,14)), false, true)
final_goal(3, in_tower((block,4),(block,15)), false, true)
final_goal(3, in_tower((block,4),(block,16)), false, true)
final_goal(3, in_tower((block,4),(block,17)), false, true)
final_goal(3, in_tower((block,4),(block,18)), false, true)
final_goal(3, in_tower((block,4),(block,2)), false, true)
final_goal(3, in_tower((block,4),(block,3)), false, true)
final_goal(3, in_tower((block,4),(block,4)), false, true)
final_goal(3, in_tower((block,4),(block,5)), false, true)
final_goal(3, in_tower((block,4),(block,6)), false, true)
final_goal(3, in_tower((block,4),(block,7)), false, true)
final_goal(3, in_tower((block,4),(block,8)), false, true)
final_goal(3, in_tower((block,4),(block,9)), false, true)
final_goal(3, in_tower((block,5),(block,1)), false, true)
final_goal(3, in_tower((block,5),(block,10)), false, true)
final_goal(3, in_tower((block,5),(block,11)), false, true)
final_goal(3, in_tower((block,5),(block,12)), false, true)
final_goal(3, in_tower((block,5),(block,13)), false, true)
final_goal(3, in_tower((block,5),(block,14)), false, true)
final_goal(3, in_tower((block,5),(block,15)), false, true)
final_goal(3, in_tower((block,5),(block,16)), false, true)
final_goal(3, in_tower((block,5),(block,17)), false, true)
final_goal(3, in_tower((block,5),(block,18)), false, true)
final_goal(3, in_tower((block,5),(block,2)), false, true)
final_goal(3, in_tower((block,5),(block,3)), false, true)
final_goal(3, in_tower((block,5),(block,4)), false, true)
final_goal(3, in_tower((block,5),(block,5)), false, true)
final_goal(3, in_tower((block,5),(block,6)), false, true)
final_goal(3, in_tower((block,5),(block,7)), false, true)
final_goal(3, in_tower((block,5),(block,8)), false, true)
final_goal(3, in_tower((block,5),(block,9)), false, true)
final_goal(3, in_tower((block,6),(block,1)), false, true)
final_goal(3, in_tower((block,6),(block,10)), false, true)
final_goal(3, in_tower((block,6),(block,11)), false, true)
final_goal(3, in_tower((block,6),(block,12)), false, true)
final_goal(3, in_tower((block,6),(block,13)), false, true)
final_goal(3, in_tower((block,6),(block,14)), false, true)
final_goal(3, in_tower((block,6),(block,15)), false, true)
final_goal(3, in_tower((block,6),(block,16)), false, true)
final_goal(3, in_tower((block,6),(block,17)), false, true)
final_goal(3, in_tower((block,6),(block,18)), false, true)
final_goal(3, in_tower((block,6),(block,2)), false, true)
final_goal(3, in_tower((block,6),(block,3)), false, true)
final_goal(3, in_tower((block,6),(block,4)), true, true)
final_goal(3, in_tower((block,6),(block,5)), true, true)
final_goal(3, in_tower((block,6),(block,6)), true, true)
final_goal(3, in_tower((block,6),(block,7)), false, true)
final_goal(3, in_tower((block,6),(block,8)), false, true)
final_goal(3, in_tower((block,6),(block,9)), false, true)
final_goal(3, in_tower((block,7),(block,1)), false, true)
final_goal(3, in_tower((block,7),(block,10)), false, true)
final_goal(3, in_tower((block,7),(block,11)), false, true)
final_goal(3, in_tower((block,7),(block,12)), false, true)
final_goal(3, in_tower((block,7),(block,13)), false, true)
final_goal(3, in_tower((block,7),(block,14)), false, true)
final_goal(3, in_tower((block,7),(block,15)), false, true)
final_goal(3, in_tower((block,7),(block,16)), false, true)
final_goal(3, in_tower((block,7),(block,17)), false, true)
final_goal(3, in_tower((block,7),(block,18)), false, true)
final_goal(3, in_tower((block,7),(block,2)), false, true)
final_goal(3, in_tower((block,7),(block,3)), false, true)
final_goal(3, in_tower((block,7),(block,4)), false, true)
final_goal(3, in_tower((block,7),(block,5)), false, true)
final_goal(3, in_tower((block,7),(block,6)), false, true)
final_goal(3, in_tower((block,7),(block,7)), false, true)
final_goal(3, in_tower((block,7),(block,8)), false, true)
final_goal(3, in_tower((block,7),(block,9)), false, true)
final_goal(3, in_tower((block,8),(block,1)), false, true)
final_goal(3, in_tower((block,8),(block,10)), false, true)
final_goal(3, in_tower((block,8),(block,11)), false, true)
final_goal(3, in_tower((block,8),(block,12)), false, true)
final_goal(3, in_tower((block,8),(block,13)), false, true)
final_goal(3, in_tower((block,8),(block,14)), false, true)
final_goal(3, in_tower((block,8),(block,15)), false, true)
final_goal(3, in_tower((block,8),(block,16)), false, true)
final_goal(3, in_tower((block,8),(block,17)), false, true)
final_goal(3, in_tower((block,8),(block,18)), false, true)
final_goal(3, in_tower((block,8),(block,2)), false, true)
final_goal(3, in_tower((block,8),(block,3)), false, true)
final_goal(3, in_tower((block,8),(block,4)), false, true)
final_goal(3, in_tower((block,8),(block,5)), false, true)
final_goal(3, in_tower((block,8),(block,6)), false, true)
final_goal(3, in_tower((block,8),(block,7)), false, true)
final_goal(3, in_tower((block,8),(block,8)), false, true)
final_goal(3, in_tower((block,8),(block,9)), false, true)
final_goal(3, in_tower((block,9),(block,1)), false, true)
final_goal(3, in_tower((block,9),(block,10)), false, true)
final_goal(3, in_tower((block,9),(block,11)), false, true)
final_goal(3, in_tower((block,9),(block,12)), false, true)
final_goal(3, in_tower((block,9),(block,13)), false, true)
final_goal(3, in_tower((block,9),(block,14)), false, true)
final_goal(3, in_tower((block,9),(block,15)), false, true)
final_goal(3, in_tower((block,9),(block,16)), false, true)
final_goal(3, in_tower((block,9),(block,17)), false, true)
final_goal(3, in_tower((block,9),(block,18)), false, true)
final_goal(3, in_tower((block,9),(block,2)), false, true)
final_goal(3, in_tower((block,9),(block,3)), false, true)
final_goal(3, in_tower((block,9),(block,4)), false, true)
final_goal(3, in_tower((block,9),(block,5)), false, true)
final_goal(3, in_tower((block,9),(block,6)), false, true)
final_goal(3, in_tower((block,9),(block,7)), true, true)
final_goal(3, in_tower((block,9),(block,8)), true, true)
final_goal(3, in_tower((block,9),(block,9)), true, true)
final_goal(3, on((block,1)), (block,2), true)
final_goal(3, on((block,10)), (block,11), true)
final_goal(3, on((block,11)), (block,12), true)
final_goal(3, on((block,12)), puzzle_room_2_table, true)
final_goal(3, on((block,13)), (block,14), true)
final_goal(3, on((block,14)), (block,15), true)
final_goal(3, on((block,15)), puzzle_room_2_table, true)
final_goal(3, on((block,16)), (block,17), true)
final_goal(3, on((block,17)), (block,18), true)
final_goal(3, on((block,18)), puzzle_room_2_table, true)
final_goal(3, on((block,2)), (block,3), true)
final_goal(3, on((block,3)), puzzle_room_1_table, true)
final_goal(3, on((block,4)), (block,5), true)
final_goal(3, on((block,5)), (block,6), true)
final_goal(3, on((block,6)), puzzle_room_1_table, true)
final_goal(3, on((block,7)), (block,8), true)
final_goal(3, on((block,8)), (block,9), true)
final_goal(3, on((block,9)), puzzle_room_1_table, true)
final_goal(3, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(3, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(3, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(3, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(3, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(3, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(3, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,9),puzzle_room_2_table), false, true)

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 3         
      ================================================      

final_goal(3, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(3, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(3, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(3, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(3, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(3, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(3, in_tower((block,1),(block,1)), true, false)
final_goal(3, in_tower((block,1),(block,10)), true, false)
final_goal(3, in_tower((block,1),(block,11)), true, false)
final_goal(3, in_tower((block,1),(block,12)), true, false)
final_goal(3, in_tower((block,1),(block,13)), true, false)
final_goal(3, in_tower((block,1),(block,14)), true, false)
final_goal(3, in_tower((block,1),(block,15)), true, false)
final_goal(3, in_tower((block,1),(block,16)), true, false)
final_goal(3, in_tower((block,1),(block,17)), true, false)
final_goal(3, in_tower((block,1),(block,18)), true, false)
final_goal(3, in_tower((block,1),(block,2)), true, false)
final_goal(3, in_tower((block,1),(block,3)), true, false)
final_goal(3, in_tower((block,1),(block,4)), true, false)
final_goal(3, in_tower((block,1),(block,5)), true, false)
final_goal(3, in_tower((block,1),(block,6)), true, false)
final_goal(3, in_tower((block,1),(block,7)), true, false)
final_goal(3, in_tower((block,1),(block,8)), true, false)
final_goal(3, in_tower((block,1),(block,9)), true, false)
final_goal(3, in_tower((block,10),(block,1)), true, false)
final_goal(3, in_tower((block,10),(block,10)), true, false)
final_goal(3, in_tower((block,10),(block,11)), true, false)
final_goal(3, in_tower((block,10),(block,12)), true, false)
final_goal(3, in_tower((block,10),(block,13)), true, false)
final_goal(3, in_tower((block,10),(block,14)), true, false)
final_goal(3, in_tower((block,10),(block,15)), true, false)
final_goal(3, in_tower((block,10),(block,16)), true, false)
final_goal(3, in_tower((block,10),(block,17)), true, false)
final_goal(3, in_tower((block,10),(block,18)), true, false)
final_goal(3, in_tower((block,10),(block,2)), true, false)
final_goal(3, in_tower((block,10),(block,3)), true, false)
final_goal(3, in_tower((block,10),(block,4)), true, false)
final_goal(3, in_tower((block,10),(block,5)), true, false)
final_goal(3, in_tower((block,10),(block,6)), true, false)
final_goal(3, in_tower((block,10),(block,7)), true, false)
final_goal(3, in_tower((block,10),(block,8)), true, false)
final_goal(3, in_tower((block,10),(block,9)), true, false)
final_goal(3, in_tower((block,11),(block,1)), true, false)
final_goal(3, in_tower((block,11),(block,10)), true, false)
final_goal(3, in_tower((block,11),(block,11)), true, false)
final_goal(3, in_tower((block,11),(block,12)), true, false)
final_goal(3, in_tower((block,11),(block,13)), true, false)
final_goal(3, in_tower((block,11),(block,14)), true, false)
final_goal(3, in_tower((block,11),(block,15)), true, false)
final_goal(3, in_tower((block,11),(block,16)), true, false)
final_goal(3, in_tower((block,11),(block,17)), true, false)
final_goal(3, in_tower((block,11),(block,18)), true, false)
final_goal(3, in_tower((block,11),(block,2)), true, false)
final_goal(3, in_tower((block,11),(block,3)), true, false)
final_goal(3, in_tower((block,11),(block,4)), true, false)
final_goal(3, in_tower((block,11),(block,5)), true, false)
final_goal(3, in_tower((block,11),(block,6)), true, false)
final_goal(3, in_tower((block,11),(block,7)), true, false)
final_goal(3, in_tower((block,11),(block,8)), true, false)
final_goal(3, in_tower((block,11),(block,9)), true, false)
final_goal(3, in_tower((block,12),(block,1)), true, false)
final_goal(3, in_tower((block,12),(block,10)), false, false)
final_goal(3, in_tower((block,12),(block,11)), false, false)
final_goal(3, in_tower((block,12),(block,12)), false, false)
final_goal(3, in_tower((block,12),(block,13)), true, false)
final_goal(3, in_tower((block,12),(block,14)), true, false)
final_goal(3, in_tower((block,12),(block,15)), true, false)
final_goal(3, in_tower((block,12),(block,16)), true, false)
final_goal(3, in_tower((block,12),(block,17)), true, false)
final_goal(3, in_tower((block,12),(block,18)), true, false)
final_goal(3, in_tower((block,12),(block,2)), true, false)
final_goal(3, in_tower((block,12),(block,3)), true, false)
final_goal(3, in_tower((block,12),(block,4)), true, false)
final_goal(3, in_tower((block,12),(block,5)), true, false)
final_goal(3, in_tower((block,12),(block,6)), true, false)
final_goal(3, in_tower((block,12),(block,7)), true, false)
final_goal(3, in_tower((block,12),(block,8)), true, false)
final_goal(3, in_tower((block,12),(block,9)), true, false)
final_goal(3, in_tower((block,13),(block,1)), true, false)
final_goal(3, in_tower((block,13),(block,10)), true, false)
final_goal(3, in_tower((block,13),(block,11)), true, false)
final_goal(3, in_tower((block,13),(block,12)), true, false)
final_goal(3, in_tower((block,13),(block,13)), true, false)
final_goal(3, in_tower((block,13),(block,14)), true, false)
final_goal(3, in_tower((block,13),(block,15)), true, false)
final_goal(3, in_tower((block,13),(block,16)), true, false)
final_goal(3, in_tower((block,13),(block,17)), true, false)
final_goal(3, in_tower((block,13),(block,18)), true, false)
final_goal(3, in_tower((block,13),(block,2)), true, false)
final_goal(3, in_tower((block,13),(block,3)), true, false)
final_goal(3, in_tower((block,13),(block,4)), true, false)
final_goal(3, in_tower((block,13),(block,5)), true, false)
final_goal(3, in_tower((block,13),(block,6)), true, false)
final_goal(3, in_tower((block,13),(block,7)), true, false)
final_goal(3, in_tower((block,13),(block,8)), true, false)
final_goal(3, in_tower((block,13),(block,9)), true, false)
final_goal(3, in_tower((block,14),(block,1)), true, false)
final_goal(3, in_tower((block,14),(block,10)), true, false)
final_goal(3, in_tower((block,14),(block,11)), true, false)
final_goal(3, in_tower((block,14),(block,12)), true, false)
final_goal(3, in_tower((block,14),(block,13)), true, false)
final_goal(3, in_tower((block,14),(block,14)), true, false)
final_goal(3, in_tower((block,14),(block,15)), true, false)
final_goal(3, in_tower((block,14),(block,16)), true, false)
final_goal(3, in_tower((block,14),(block,17)), true, false)
final_goal(3, in_tower((block,14),(block,18)), true, false)
final_goal(3, in_tower((block,14),(block,2)), true, false)
final_goal(3, in_tower((block,14),(block,3)), true, false)
final_goal(3, in_tower((block,14),(block,4)), true, false)
final_goal(3, in_tower((block,14),(block,5)), true, false)
final_goal(3, in_tower((block,14),(block,6)), true, false)
final_goal(3, in_tower((block,14),(block,7)), true, false)
final_goal(3, in_tower((block,14),(block,8)), true, false)
final_goal(3, in_tower((block,14),(block,9)), true, false)
final_goal(3, in_tower((block,15),(block,1)), true, false)
final_goal(3, in_tower((block,15),(block,10)), true, false)
final_goal(3, in_tower((block,15),(block,11)), true, false)
final_goal(3, in_tower((block,15),(block,12)), true, false)
final_goal(3, in_tower((block,15),(block,13)), false, false)
final_goal(3, in_tower((block,15),(block,14)), false, false)
final_goal(3, in_tower((block,15),(block,15)), false, false)
final_goal(3, in_tower((block,15),(block,16)), true, false)
final_goal(3, in_tower((block,15),(block,17)), true, false)
final_goal(3, in_tower((block,15),(block,18)), true, false)
final_goal(3, in_tower((block,15),(block,2)), true, false)
final_goal(3, in_tower((block,15),(block,3)), true, false)
final_goal(3, in_tower((block,15),(block,4)), true, false)
final_goal(3, in_tower((block,15),(block,5)), true, false)
final_goal(3, in_tower((block,15),(block,6)), true, false)
final_goal(3, in_tower((block,15),(block,7)), true, false)
final_goal(3, in_tower((block,15),(block,8)), true, false)
final_goal(3, in_tower((block,15),(block,9)), true, false)
final_goal(3, in_tower((block,16),(block,1)), true, false)
final_goal(3, in_tower((block,16),(block,10)), true, false)
final_goal(3, in_tower((block,16),(block,11)), true, false)
final_goal(3, in_tower((block,16),(block,12)), true, false)
final_goal(3, in_tower((block,16),(block,13)), true, false)
final_goal(3, in_tower((block,16),(block,14)), true, false)
final_goal(3, in_tower((block,16),(block,15)), true, false)
final_goal(3, in_tower((block,16),(block,16)), true, false)
final_goal(3, in_tower((block,16),(block,17)), true, false)
final_goal(3, in_tower((block,16),(block,18)), true, false)
final_goal(3, in_tower((block,16),(block,2)), true, false)
final_goal(3, in_tower((block,16),(block,3)), true, false)
final_goal(3, in_tower((block,16),(block,4)), true, false)
final_goal(3, in_tower((block,16),(block,5)), true, false)
final_goal(3, in_tower((block,16),(block,6)), true, false)
final_goal(3, in_tower((block,16),(block,7)), true, false)
final_goal(3, in_tower((block,16),(block,8)), true, false)
final_goal(3, in_tower((block,16),(block,9)), true, false)
final_goal(3, in_tower((block,17),(block,1)), true, false)
final_goal(3, in_tower((block,17),(block,10)), true, false)
final_goal(3, in_tower((block,17),(block,11)), true, false)
final_goal(3, in_tower((block,17),(block,12)), true, false)
final_goal(3, in_tower((block,17),(block,13)), true, false)
final_goal(3, in_tower((block,17),(block,14)), true, false)
final_goal(3, in_tower((block,17),(block,15)), true, false)
final_goal(3, in_tower((block,17),(block,16)), true, false)
final_goal(3, in_tower((block,17),(block,17)), true, false)
final_goal(3, in_tower((block,17),(block,18)), true, false)
final_goal(3, in_tower((block,17),(block,2)), true, false)
final_goal(3, in_tower((block,17),(block,3)), true, false)
final_goal(3, in_tower((block,17),(block,4)), true, false)
final_goal(3, in_tower((block,17),(block,5)), true, false)
final_goal(3, in_tower((block,17),(block,6)), true, false)
final_goal(3, in_tower((block,17),(block,7)), true, false)
final_goal(3, in_tower((block,17),(block,8)), true, false)
final_goal(3, in_tower((block,17),(block,9)), true, false)
final_goal(3, in_tower((block,18),(block,1)), true, false)
final_goal(3, in_tower((block,18),(block,10)), true, false)
final_goal(3, in_tower((block,18),(block,11)), true, false)
final_goal(3, in_tower((block,18),(block,12)), true, false)
final_goal(3, in_tower((block,18),(block,13)), true, false)
final_goal(3, in_tower((block,18),(block,14)), true, false)
final_goal(3, in_tower((block,18),(block,15)), true, false)
final_goal(3, in_tower((block,18),(block,16)), false, false)
final_goal(3, in_tower((block,18),(block,17)), false, false)
final_goal(3, in_tower((block,18),(block,18)), false, false)
final_goal(3, in_tower((block,18),(block,2)), true, false)
final_goal(3, in_tower((block,18),(block,3)), true, false)
final_goal(3, in_tower((block,18),(block,4)), true, false)
final_goal(3, in_tower((block,18),(block,5)), true, false)
final_goal(3, in_tower((block,18),(block,6)), true, false)
final_goal(3, in_tower((block,18),(block,7)), true, false)
final_goal(3, in_tower((block,18),(block,8)), true, false)
final_goal(3, in_tower((block,18),(block,9)), true, false)
final_goal(3, in_tower((block,2),(block,1)), true, false)
final_goal(3, in_tower((block,2),(block,10)), true, false)
final_goal(3, in_tower((block,2),(block,11)), true, false)
final_goal(3, in_tower((block,2),(block,12)), true, false)
final_goal(3, in_tower((block,2),(block,13)), true, false)
final_goal(3, in_tower((block,2),(block,14)), true, false)
final_goal(3, in_tower((block,2),(block,15)), true, false)
final_goal(3, in_tower((block,2),(block,16)), true, false)
final_goal(3, in_tower((block,2),(block,17)), true, false)
final_goal(3, in_tower((block,2),(block,18)), true, false)
final_goal(3, in_tower((block,2),(block,2)), true, false)
final_goal(3, in_tower((block,2),(block,3)), true, false)
final_goal(3, in_tower((block,2),(block,4)), true, false)
final_goal(3, in_tower((block,2),(block,5)), true, false)
final_goal(3, in_tower((block,2),(block,6)), true, false)
final_goal(3, in_tower((block,2),(block,7)), true, false)
final_goal(3, in_tower((block,2),(block,8)), true, false)
final_goal(3, in_tower((block,2),(block,9)), true, false)
final_goal(3, in_tower((block,3),(block,1)), false, false)
final_goal(3, in_tower((block,3),(block,10)), true, false)
final_goal(3, in_tower((block,3),(block,11)), true, false)
final_goal(3, in_tower((block,3),(block,12)), true, false)
final_goal(3, in_tower((block,3),(block,13)), true, false)
final_goal(3, in_tower((block,3),(block,14)), true, false)
final_goal(3, in_tower((block,3),(block,15)), true, false)
final_goal(3, in_tower((block,3),(block,16)), true, false)
final_goal(3, in_tower((block,3),(block,17)), true, false)
final_goal(3, in_tower((block,3),(block,18)), true, false)
final_goal(3, in_tower((block,3),(block,2)), false, false)
final_goal(3, in_tower((block,3),(block,3)), false, false)
final_goal(3, in_tower((block,3),(block,4)), true, false)
final_goal(3, in_tower((block,3),(block,5)), true, false)
final_goal(3, in_tower((block,3),(block,6)), true, false)
final_goal(3, in_tower((block,3),(block,7)), true, false)
final_goal(3, in_tower((block,3),(block,8)), true, false)
final_goal(3, in_tower((block,3),(block,9)), true, false)
final_goal(3, in_tower((block,4),(block,1)), true, false)
final_goal(3, in_tower((block,4),(block,10)), true, false)
final_goal(3, in_tower((block,4),(block,11)), true, false)
final_goal(3, in_tower((block,4),(block,12)), true, false)
final_goal(3, in_tower((block,4),(block,13)), true, false)
final_goal(3, in_tower((block,4),(block,14)), true, false)
final_goal(3, in_tower((block,4),(block,15)), true, false)
final_goal(3, in_tower((block,4),(block,16)), true, false)
final_goal(3, in_tower((block,4),(block,17)), true, false)
final_goal(3, in_tower((block,4),(block,18)), true, false)
final_goal(3, in_tower((block,4),(block,2)), true, false)
final_goal(3, in_tower((block,4),(block,3)), true, false)
final_goal(3, in_tower((block,4),(block,4)), true, false)
final_goal(3, in_tower((block,4),(block,5)), true, false)
final_goal(3, in_tower((block,4),(block,6)), true, false)
final_goal(3, in_tower((block,4),(block,7)), true, false)
final_goal(3, in_tower((block,4),(block,8)), true, false)
final_goal(3, in_tower((block,4),(block,9)), true, false)
final_goal(3, in_tower((block,5),(block,1)), true, false)
final_goal(3, in_tower((block,5),(block,10)), true, false)
final_goal(3, in_tower((block,5),(block,11)), true, false)
final_goal(3, in_tower((block,5),(block,12)), true, false)
final_goal(3, in_tower((block,5),(block,13)), true, false)
final_goal(3, in_tower((block,5),(block,14)), true, false)
final_goal(3, in_tower((block,5),(block,15)), true, false)
final_goal(3, in_tower((block,5),(block,16)), true, false)
final_goal(3, in_tower((block,5),(block,17)), true, false)
final_goal(3, in_tower((block,5),(block,18)), true, false)
final_goal(3, in_tower((block,5),(block,2)), true, false)
final_goal(3, in_tower((block,5),(block,3)), true, false)
final_goal(3, in_tower((block,5),(block,4)), true, false)
final_goal(3, in_tower((block,5),(block,5)), true, false)
final_goal(3, in_tower((block,5),(block,6)), true, false)
final_goal(3, in_tower((block,5),(block,7)), true, false)
final_goal(3, in_tower((block,5),(block,8)), true, false)
final_goal(3, in_tower((block,5),(block,9)), true, false)
final_goal(3, in_tower((block,6),(block,1)), true, false)
final_goal(3, in_tower((block,6),(block,10)), true, false)
final_goal(3, in_tower((block,6),(block,11)), true, false)
final_goal(3, in_tower((block,6),(block,12)), true, false)
final_goal(3, in_tower((block,6),(block,13)), true, false)
final_goal(3, in_tower((block,6),(block,14)), true, false)
final_goal(3, in_tower((block,6),(block,15)), true, false)
final_goal(3, in_tower((block,6),(block,16)), true, false)
final_goal(3, in_tower((block,6),(block,17)), true, false)
final_goal(3, in_tower((block,6),(block,18)), true, false)
final_goal(3, in_tower((block,6),(block,2)), true, false)
final_goal(3, in_tower((block,6),(block,3)), true, false)
final_goal(3, in_tower((block,6),(block,4)), false, false)
final_goal(3, in_tower((block,6),(block,5)), false, false)
final_goal(3, in_tower((block,6),(block,6)), false, false)
final_goal(3, in_tower((block,6),(block,7)), true, false)
final_goal(3, in_tower((block,6),(block,8)), true, false)
final_goal(3, in_tower((block,6),(block,9)), true, false)
final_goal(3, in_tower((block,7),(block,1)), true, false)
final_goal(3, in_tower((block,7),(block,10)), true, false)
final_goal(3, in_tower((block,7),(block,11)), true, false)
final_goal(3, in_tower((block,7),(block,12)), true, false)
final_goal(3, in_tower((block,7),(block,13)), true, false)
final_goal(3, in_tower((block,7),(block,14)), true, false)
final_goal(3, in_tower((block,7),(block,15)), true, false)
final_goal(3, in_tower((block,7),(block,16)), true, false)
final_goal(3, in_tower((block,7),(block,17)), true, false)
final_goal(3, in_tower((block,7),(block,18)), true, false)
final_goal(3, in_tower((block,7),(block,2)), true, false)
final_goal(3, in_tower((block,7),(block,3)), true, false)
final_goal(3, in_tower((block,7),(block,4)), true, false)
final_goal(3, in_tower((block,7),(block,5)), true, false)
final_goal(3, in_tower((block,7),(block,6)), true, false)
final_goal(3, in_tower((block,7),(block,7)), true, false)
final_goal(3, in_tower((block,7),(block,8)), true, false)
final_goal(3, in_tower((block,7),(block,9)), true, false)
final_goal(3, in_tower((block,8),(block,1)), true, false)
final_goal(3, in_tower((block,8),(block,10)), true, false)
final_goal(3, in_tower((block,8),(block,11)), true, false)
final_goal(3, in_tower((block,8),(block,12)), true, false)
final_goal(3, in_tower((block,8),(block,13)), true, false)
final_goal(3, in_tower((block,8),(block,14)), true, false)
final_goal(3, in_tower((block,8),(block,15)), true, false)
final_goal(3, in_tower((block,8),(block,16)), true, false)
final_goal(3, in_tower((block,8),(block,17)), true, false)
final_goal(3, in_tower((block,8),(block,18)), true, false)
final_goal(3, in_tower((block,8),(block,2)), true, false)
final_goal(3, in_tower((block,8),(block,3)), true, false)
final_goal(3, in_tower((block,8),(block,4)), true, false)
final_goal(3, in_tower((block,8),(block,5)), true, false)
final_goal(3, in_tower((block,8),(block,6)), true, false)
final_goal(3, in_tower((block,8),(block,7)), true, false)
final_goal(3, in_tower((block,8),(block,8)), true, false)
final_goal(3, in_tower((block,8),(block,9)), true, false)
final_goal(3, in_tower((block,9),(block,1)), true, false)
final_goal(3, in_tower((block,9),(block,10)), true, false)
final_goal(3, in_tower((block,9),(block,11)), true, false)
final_goal(3, in_tower((block,9),(block,12)), true, false)
final_goal(3, in_tower((block,9),(block,13)), true, false)
final_goal(3, in_tower((block,9),(block,14)), true, false)
final_goal(3, in_tower((block,9),(block,15)), true, false)
final_goal(3, in_tower((block,9),(block,16)), true, false)
final_goal(3, in_tower((block,9),(block,17)), true, false)
final_goal(3, in_tower((block,9),(block,18)), true, false)
final_goal(3, in_tower((block,9),(block,2)), true, false)
final_goal(3, in_tower((block,9),(block,3)), true, false)
final_goal(3, in_tower((block,9),(block,4)), true, false)
final_goal(3, in_tower((block,9),(block,5)), true, false)
final_goal(3, in_tower((block,9),(block,6)), true, false)
final_goal(3, in_tower((block,9),(block,7)), false, false)
final_goal(3, in_tower((block,9),(block,8)), false, false)
final_goal(3, in_tower((block,9),(block,9)), false, false)
final_goal(3, on((block,1)), (block,10), false)
final_goal(3, on((block,1)), (block,11), false)
final_goal(3, on((block,1)), (block,12), false)
final_goal(3, on((block,1)), (block,13), false)
final_goal(3, on((block,1)), (block,14), false)
final_goal(3, on((block,1)), (block,15), false)
final_goal(3, on((block,1)), (block,16), false)
final_goal(3, on((block,1)), (block,17), false)
final_goal(3, on((block,1)), (block,18), false)
final_goal(3, on((block,1)), (block,3), false)
final_goal(3, on((block,1)), (block,4), false)
final_goal(3, on((block,1)), (block,5), false)
final_goal(3, on((block,1)), (block,6), false)
final_goal(3, on((block,1)), (block,7), false)
final_goal(3, on((block,1)), (block,8), false)
final_goal(3, on((block,1)), (block,9), false)
final_goal(3, on((block,1)), nothing, false)
final_goal(3, on((block,1)), puzzle_room_1_table, false)
final_goal(3, on((block,1)), puzzle_room_2_table, false)
final_goal(3, on((block,10)), (block,1), false)
final_goal(3, on((block,10)), (block,12), false)
final_goal(3, on((block,10)), (block,13), false)
final_goal(3, on((block,10)), (block,14), false)
final_goal(3, on((block,10)), (block,15), false)
final_goal(3, on((block,10)), (block,16), false)
final_goal(3, on((block,10)), (block,17), false)
final_goal(3, on((block,10)), (block,18), false)
final_goal(3, on((block,10)), (block,2), false)
final_goal(3, on((block,10)), (block,3), false)
final_goal(3, on((block,10)), (block,4), false)
final_goal(3, on((block,10)), (block,5), false)
final_goal(3, on((block,10)), (block,6), false)
final_goal(3, on((block,10)), (block,7), false)
final_goal(3, on((block,10)), (block,8), false)
final_goal(3, on((block,10)), (block,9), false)
final_goal(3, on((block,10)), nothing, false)
final_goal(3, on((block,10)), puzzle_room_1_table, false)
final_goal(3, on((block,10)), puzzle_room_2_table, false)
final_goal(3, on((block,11)), (block,1), false)
final_goal(3, on((block,11)), (block,10), false)
final_goal(3, on((block,11)), (block,13), false)
final_goal(3, on((block,11)), (block,14), false)
final_goal(3, on((block,11)), (block,15), false)
final_goal(3, on((block,11)), (block,16), false)
final_goal(3, on((block,11)), (block,17), false)
final_goal(3, on((block,11)), (block,18), false)
final_goal(3, on((block,11)), (block,2), false)
final_goal(3, on((block,11)), (block,3), false)
final_goal(3, on((block,11)), (block,4), false)
final_goal(3, on((block,11)), (block,5), false)
final_goal(3, on((block,11)), (block,6), false)
final_goal(3, on((block,11)), (block,7), false)
final_goal(3, on((block,11)), (block,8), false)
final_goal(3, on((block,11)), (block,9), false)
final_goal(3, on((block,11)), nothing, false)
final_goal(3, on((block,11)), puzzle_room_1_table, false)
final_goal(3, on((block,11)), puzzle_room_2_table, false)
final_goal(3, on((block,12)), (block,1), false)
final_goal(3, on((block,12)), (block,10), false)
final_goal(3, on((block,12)), (block,11), false)
final_goal(3, on((block,12)), (block,13), false)
final_goal(3, on((block,12)), (block,14), false)
final_goal(3, on((block,12)), (block,15), false)
final_goal(3, on((block,12)), (block,16), false)
final_goal(3, on((block,12)), (block,17), false)
final_goal(3, on((block,12)), (block,18), false)
final_goal(3, on((block,12)), (block,2), false)
final_goal(3, on((block,12)), (block,3), false)
final_goal(3, on((block,12)), (block,4), false)
final_goal(3, on((block,12)), (block,5), false)
final_goal(3, on((block,12)), (block,6), false)
final_goal(3, on((block,12)), (block,7), false)
final_goal(3, on((block,12)), (block,8), false)
final_goal(3, on((block,12)), (block,9), false)
final_goal(3, on((block,12)), nothing, false)
final_goal(3, on((block,12)), puzzle_room_1_table, false)
final_goal(3, on((block,13)), (block,1), false)
final_goal(3, on((block,13)), (block,10), false)
final_goal(3, on((block,13)), (block,11), false)
final_goal(3, on((block,13)), (block,12), false)
final_goal(3, on((block,13)), (block,15), false)
final_goal(3, on((block,13)), (block,16), false)
final_goal(3, on((block,13)), (block,17), false)
final_goal(3, on((block,13)), (block,18), false)
final_goal(3, on((block,13)), (block,2), false)
final_goal(3, on((block,13)), (block,3), false)
final_goal(3, on((block,13)), (block,4), false)
final_goal(3, on((block,13)), (block,5), false)
final_goal(3, on((block,13)), (block,6), false)
final_goal(3, on((block,13)), (block,7), false)
final_goal(3, on((block,13)), (block,8), false)
final_goal(3, on((block,13)), (block,9), false)
final_goal(3, on((block,13)), nothing, false)
final_goal(3, on((block,13)), puzzle_room_1_table, false)
final_goal(3, on((block,13)), puzzle_room_2_table, false)
final_goal(3, on((block,14)), (block,1), false)
final_goal(3, on((block,14)), (block,10), false)
final_goal(3, on((block,14)), (block,11), false)
final_goal(3, on((block,14)), (block,12), false)
final_goal(3, on((block,14)), (block,13), false)
final_goal(3, on((block,14)), (block,16), false)
final_goal(3, on((block,14)), (block,17), false)
final_goal(3, on((block,14)), (block,18), false)
final_goal(3, on((block,14)), (block,2), false)
final_goal(3, on((block,14)), (block,3), false)
final_goal(3, on((block,14)), (block,4), false)
final_goal(3, on((block,14)), (block,5), false)
final_goal(3, on((block,14)), (block,6), false)
final_goal(3, on((block,14)), (block,7), false)
final_goal(3, on((block,14)), (block,8), false)
final_goal(3, on((block,14)), (block,9), false)
final_goal(3, on((block,14)), nothing, false)
final_goal(3, on((block,14)), puzzle_room_1_table, false)
final_goal(3, on((block,14)), puzzle_room_2_table, false)
final_goal(3, on((block,15)), (block,1), false)
final_goal(3, on((block,15)), (block,10), false)
final_goal(3, on((block,15)), (block,11), false)
final_goal(3, on((block,15)), (block,12), false)
final_goal(3, on((block,15)), (block,13), false)
final_goal(3, on((block,15)), (block,14), false)
final_goal(3, on((block,15)), (block,16), false)
final_goal(3, on((block,15)), (block,17), false)
final_goal(3, on((block,15)), (block,18), false)
final_goal(3, on((block,15)), (block,2), false)
final_goal(3, on((block,15)), (block,3), false)
final_goal(3, on((block,15)), (block,4), false)
final_goal(3, on((block,15)), (block,5), false)
final_goal(3, on((block,15)), (block,6), false)
final_goal(3, on((block,15)), (block,7), false)
final_goal(3, on((block,15)), (block,8), false)
final_goal(3, on((block,15)), (block,9), false)
final_goal(3, on((block,15)), nothing, false)
final_goal(3, on((block,15)), puzzle_room_1_table, false)
final_goal(3, on((block,16)), (block,1), false)
final_goal(3, on((block,16)), (block,10), false)
final_goal(3, on((block,16)), (block,11), false)
final_goal(3, on((block,16)), (block,12), false)
final_goal(3, on((block,16)), (block,13), false)
final_goal(3, on((block,16)), (block,14), false)
final_goal(3, on((block,16)), (block,15), false)
final_goal(3, on((block,16)), (block,18), false)
final_goal(3, on((block,16)), (block,2), false)
final_goal(3, on((block,16)), (block,3), false)
final_goal(3, on((block,16)), (block,4), false)
final_goal(3, on((block,16)), (block,5), false)
final_goal(3, on((block,16)), (block,6), false)
final_goal(3, on((block,16)), (block,7), false)
final_goal(3, on((block,16)), (block,8), false)
final_goal(3, on((block,16)), (block,9), false)
final_goal(3, on((block,16)), nothing, false)
final_goal(3, on((block,16)), puzzle_room_1_table, false)
final_goal(3, on((block,16)), puzzle_room_2_table, false)
final_goal(3, on((block,17)), (block,1), false)
final_goal(3, on((block,17)), (block,10), false)
final_goal(3, on((block,17)), (block,11), false)
final_goal(3, on((block,17)), (block,12), false)
final_goal(3, on((block,17)), (block,13), false)
final_goal(3, on((block,17)), (block,14), false)
final_goal(3, on((block,17)), (block,15), false)
final_goal(3, on((block,17)), (block,16), false)
final_goal(3, on((block,17)), (block,2), false)
final_goal(3, on((block,17)), (block,3), false)
final_goal(3, on((block,17)), (block,4), false)
final_goal(3, on((block,17)), (block,5), false)
final_goal(3, on((block,17)), (block,6), false)
final_goal(3, on((block,17)), (block,7), false)
final_goal(3, on((block,17)), (block,8), false)
final_goal(3, on((block,17)), (block,9), false)
final_goal(3, on((block,17)), nothing, false)
final_goal(3, on((block,17)), puzzle_room_1_table, false)
final_goal(3, on((block,17)), puzzle_room_2_table, false)
final_goal(3, on((block,18)), (block,1), false)
final_goal(3, on((block,18)), (block,10), false)
final_goal(3, on((block,18)), (block,11), false)
final_goal(3, on((block,18)), (block,12), false)
final_goal(3, on((block,18)), (block,13), false)
final_goal(3, on((block,18)), (block,14), false)
final_goal(3, on((block,18)), (block,15), false)
final_goal(3, on((block,18)), (block,16), false)
final_goal(3, on((block,18)), (block,17), false)
final_goal(3, on((block,18)), (block,2), false)
final_goal(3, on((block,18)), (block,3), false)
final_goal(3, on((block,18)), (block,4), false)
final_goal(3, on((block,18)), (block,5), false)
final_goal(3, on((block,18)), (block,6), false)
final_goal(3, on((block,18)), (block,7), false)
final_goal(3, on((block,18)), (block,8), false)
final_goal(3, on((block,18)), (block,9), false)
final_goal(3, on((block,18)), nothing, false)
final_goal(3, on((block,18)), puzzle_room_1_table, false)
final_goal(3, on((block,2)), (block,1), false)
final_goal(3, on((block,2)), (block,10), false)
final_goal(3, on((block,2)), (block,11), false)
final_goal(3, on((block,2)), (block,12), false)
final_goal(3, on((block,2)), (block,13), false)
final_goal(3, on((block,2)), (block,14), false)
final_goal(3, on((block,2)), (block,15), false)
final_goal(3, on((block,2)), (block,16), false)
final_goal(3, on((block,2)), (block,17), false)
final_goal(3, on((block,2)), (block,18), false)
final_goal(3, on((block,2)), (block,4), false)
final_goal(3, on((block,2)), (block,5), false)
final_goal(3, on((block,2)), (block,6), false)
final_goal(3, on((block,2)), (block,7), false)
final_goal(3, on((block,2)), (block,8), false)
final_goal(3, on((block,2)), (block,9), false)
final_goal(3, on((block,2)), nothing, false)
final_goal(3, on((block,2)), puzzle_room_1_table, false)
final_goal(3, on((block,2)), puzzle_room_2_table, false)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,10), false)
final_goal(3, on((block,3)), (block,11), false)
final_goal(3, on((block,3)), (block,12), false)
final_goal(3, on((block,3)), (block,13), false)
final_goal(3, on((block,3)), (block,14), false)
final_goal(3, on((block,3)), (block,15), false)
final_goal(3, on((block,3)), (block,16), false)
final_goal(3, on((block,3)), (block,17), false)
final_goal(3, on((block,3)), (block,18), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), (block,7), false)
final_goal(3, on((block,3)), (block,8), false)
final_goal(3, on((block,3)), (block,9), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,3)), puzzle_room_2_table, false)
final_goal(3, on((block,4)), (block,1), false)
final_goal(3, on((block,4)), (block,10), false)
final_goal(3, on((block,4)), (block,11), false)
final_goal(3, on((block,4)), (block,12), false)
final_goal(3, on((block,4)), (block,13), false)
final_goal(3, on((block,4)), (block,14), false)
final_goal(3, on((block,4)), (block,15), false)
final_goal(3, on((block,4)), (block,16), false)
final_goal(3, on((block,4)), (block,17), false)
final_goal(3, on((block,4)), (block,18), false)
final_goal(3, on((block,4)), (block,2), false)
final_goal(3, on((block,4)), (block,3), false)
final_goal(3, on((block,4)), (block,6), false)
final_goal(3, on((block,4)), (block,7), false)
final_goal(3, on((block,4)), (block,8), false)
final_goal(3, on((block,4)), (block,9), false)
final_goal(3, on((block,4)), nothing, false)
final_goal(3, on((block,4)), puzzle_room_1_table, false)
final_goal(3, on((block,4)), puzzle_room_2_table, false)
final_goal(3, on((block,5)), (block,1), false)
final_goal(3, on((block,5)), (block,10), false)
final_goal(3, on((block,5)), (block,11), false)
final_goal(3, on((block,5)), (block,12), false)
final_goal(3, on((block,5)), (block,13), false)
final_goal(3, on((block,5)), (block,14), false)
final_goal(3, on((block,5)), (block,15), false)
final_goal(3, on((block,5)), (block,16), false)
final_goal(3, on((block,5)), (block,17), false)
final_goal(3, on((block,5)), (block,18), false)
final_goal(3, on((block,5)), (block,2), false)
final_goal(3, on((block,5)), (block,3), false)
final_goal(3, on((block,5)), (block,4), false)
final_goal(3, on((block,5)), (block,7), false)
final_goal(3, on((block,5)), (block,8), false)
final_goal(3, on((block,5)), (block,9), false)
final_goal(3, on((block,5)), nothing, false)
final_goal(3, on((block,5)), puzzle_room_1_table, false)
final_goal(3, on((block,5)), puzzle_room_2_table, false)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,10), false)
final_goal(3, on((block,6)), (block,11), false)
final_goal(3, on((block,6)), (block,12), false)
final_goal(3, on((block,6)), (block,13), false)
final_goal(3, on((block,6)), (block,14), false)
final_goal(3, on((block,6)), (block,15), false)
final_goal(3, on((block,6)), (block,16), false)
final_goal(3, on((block,6)), (block,17), false)
final_goal(3, on((block,6)), (block,18), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), (block,7), false)
final_goal(3, on((block,6)), (block,8), false)
final_goal(3, on((block,6)), (block,9), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, on((block,6)), puzzle_room_2_table, false)
final_goal(3, on((block,7)), (block,1), false)
final_goal(3, on((block,7)), (block,10), false)
final_goal(3, on((block,7)), (block,11), false)
final_goal(3, on((block,7)), (block,12), false)
final_goal(3, on((block,7)), (block,13), false)
final_goal(3, on((block,7)), (block,14), false)
final_goal(3, on((block,7)), (block,15), false)
final_goal(3, on((block,7)), (block,16), false)
final_goal(3, on((block,7)), (block,17), false)
final_goal(3, on((block,7)), (block,18), false)
final_goal(3, on((block,7)), (block,2), false)
final_goal(3, on((block,7)), (block,3), false)
final_goal(3, on((block,7)), (block,4), false)
final_goal(3, on((block,7)), (block,5), false)
final_goal(3, on((block,7)), (block,6), false)
final_goal(3, on((block,7)), (block,9), false)
final_goal(3, on((block,7)), nothing, false)
final_goal(3, on((block,7)), puzzle_room_1_table, false)
final_goal(3, on((block,7)), puzzle_room_2_table, false)
final_goal(3, on((block,8)), (block,1), false)
final_goal(3, on((block,8)), (block,10), false)
final_goal(3, on((block,8)), (block,11), false)
final_goal(3, on((block,8)), (block,12), false)
final_goal(3, on((block,8)), (block,13), false)
final_goal(3, on((block,8)), (block,14), false)
final_goal(3, on((block,8)), (block,15), false)
final_goal(3, on((block,8)), (block,16), false)
final_goal(3, on((block,8)), (block,17), false)
final_goal(3, on((block,8)), (block,18), false)
final_goal(3, on((block,8)), (block,2), false)
final_goal(3, on((block,8)), (block,3), false)
final_goal(3, on((block,8)), (block,4), false)
final_goal(3, on((block,8)), (block,5), false)
final_goal(3, on((block,8)), (block,6), false)
final_goal(3, on((block,8)), (block,7), false)
final_goal(3, on((block,8)), nothing, false)
final_goal(3, on((block,8)), puzzle_room_1_table, false)
final_goal(3, on((block,8)), puzzle_room_2_table, false)
final_goal(3, on((block,9)), (block,1), false)
final_goal(3, on((block,9)), (block,10), false)
final_goal(3, on((block,9)), (block,11), false)
final_goal(3, on((block,9)), (block,12), false)
final_goal(3, on((block,9)), (block,13), false)
final_goal(3, on((block,9)), (block,14), false)
final_goal(3, on((block,9)), (block,15), false)
final_goal(3, on((block,9)), (block,16), false)
final_goal(3, on((block,9)), (block,17), false)
final_goal(3, on((block,9)), (block,18), false)
final_goal(3, on((block,9)), (block,2), false)
final_goal(3, on((block,9)), (block,3), false)
final_goal(3, on((block,9)), (block,4), false)
final_goal(3, on((block,9)), (block,5), false)
final_goal(3, on((block,9)), (block,6), false)
final_goal(3, on((block,9)), (block,7), false)
final_goal(3, on((block,9)), (block,8), false)
final_goal(3, on((block,9)), nothing, false)
final_goal(3, on((block,9)), puzzle_room_2_table, false)
final_goal(3, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(3, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(3, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(3, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(3, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(3, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(3, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,9),puzzle_room_2_table), true, false)

[04-03-2022_16-19-40] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 2         
      ================================================      

final_goal(2, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(2, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(2, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(2, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(2, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(2, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,10)), false, true)
final_goal(2, in_tower((block,1),(block,11)), false, true)
final_goal(2, in_tower((block,1),(block,12)), false, true)
final_goal(2, in_tower((block,1),(block,13)), false, true)
final_goal(2, in_tower((block,1),(block,14)), false, true)
final_goal(2, in_tower((block,1),(block,15)), false, true)
final_goal(2, in_tower((block,1),(block,16)), false, true)
final_goal(2, in_tower((block,1),(block,17)), false, true)
final_goal(2, in_tower((block,1),(block,18)), false, true)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,7)), false, true)
final_goal(2, in_tower((block,1),(block,8)), false, true)
final_goal(2, in_tower((block,1),(block,9)), false, true)
final_goal(2, in_tower((block,10),(block,1)), false, true)
final_goal(2, in_tower((block,10),(block,10)), false, true)
final_goal(2, in_tower((block,10),(block,11)), false, true)
final_goal(2, in_tower((block,10),(block,12)), false, true)
final_goal(2, in_tower((block,10),(block,13)), false, true)
final_goal(2, in_tower((block,10),(block,14)), false, true)
final_goal(2, in_tower((block,10),(block,15)), false, true)
final_goal(2, in_tower((block,10),(block,16)), false, true)
final_goal(2, in_tower((block,10),(block,17)), false, true)
final_goal(2, in_tower((block,10),(block,18)), false, true)
final_goal(2, in_tower((block,10),(block,2)), false, true)
final_goal(2, in_tower((block,10),(block,3)), false, true)
final_goal(2, in_tower((block,10),(block,4)), false, true)
final_goal(2, in_tower((block,10),(block,5)), false, true)
final_goal(2, in_tower((block,10),(block,6)), false, true)
final_goal(2, in_tower((block,10),(block,7)), false, true)
final_goal(2, in_tower((block,10),(block,8)), false, true)
final_goal(2, in_tower((block,10),(block,9)), false, true)
final_goal(2, in_tower((block,11),(block,1)), false, true)
final_goal(2, in_tower((block,11),(block,10)), false, true)
final_goal(2, in_tower((block,11),(block,11)), false, true)
final_goal(2, in_tower((block,11),(block,12)), false, true)
final_goal(2, in_tower((block,11),(block,13)), false, true)
final_goal(2, in_tower((block,11),(block,14)), false, true)
final_goal(2, in_tower((block,11),(block,15)), false, true)
final_goal(2, in_tower((block,11),(block,16)), false, true)
final_goal(2, in_tower((block,11),(block,17)), false, true)
final_goal(2, in_tower((block,11),(block,18)), false, true)
final_goal(2, in_tower((block,11),(block,2)), false, true)
final_goal(2, in_tower((block,11),(block,3)), false, true)
final_goal(2, in_tower((block,11),(block,4)), false, true)
final_goal(2, in_tower((block,11),(block,5)), false, true)
final_goal(2, in_tower((block,11),(block,6)), false, true)
final_goal(2, in_tower((block,11),(block,7)), false, true)
final_goal(2, in_tower((block,11),(block,8)), false, true)
final_goal(2, in_tower((block,11),(block,9)), false, true)
final_goal(2, in_tower((block,12),(block,1)), false, true)
final_goal(2, in_tower((block,12),(block,10)), true, true)
final_goal(2, in_tower((block,12),(block,11)), true, true)
final_goal(2, in_tower((block,12),(block,12)), true, true)
final_goal(2, in_tower((block,12),(block,13)), false, true)
final_goal(2, in_tower((block,12),(block,14)), false, true)
final_goal(2, in_tower((block,12),(block,15)), false, true)
final_goal(2, in_tower((block,12),(block,16)), false, true)
final_goal(2, in_tower((block,12),(block,17)), false, true)
final_goal(2, in_tower((block,12),(block,18)), false, true)
final_goal(2, in_tower((block,12),(block,2)), false, true)
final_goal(2, in_tower((block,12),(block,3)), false, true)
final_goal(2, in_tower((block,12),(block,4)), false, true)
final_goal(2, in_tower((block,12),(block,5)), false, true)
final_goal(2, in_tower((block,12),(block,6)), false, true)
final_goal(2, in_tower((block,12),(block,7)), false, true)
final_goal(2, in_tower((block,12),(block,8)), false, true)
final_goal(2, in_tower((block,12),(block,9)), false, true)
final_goal(2, in_tower((block,13),(block,1)), false, true)
final_goal(2, in_tower((block,13),(block,10)), false, true)
final_goal(2, in_tower((block,13),(block,11)), false, true)
final_goal(2, in_tower((block,13),(block,12)), false, true)
final_goal(2, in_tower((block,13),(block,13)), false, true)
final_goal(2, in_tower((block,13),(block,14)), false, true)
final_goal(2, in_tower((block,13),(block,15)), false, true)
final_goal(2, in_tower((block,13),(block,16)), false, true)
final_goal(2, in_tower((block,13),(block,17)), false, true)
final_goal(2, in_tower((block,13),(block,18)), false, true)
final_goal(2, in_tower((block,13),(block,2)), false, true)
final_goal(2, in_tower((block,13),(block,3)), false, true)
final_goal(2, in_tower((block,13),(block,4)), false, true)
final_goal(2, in_tower((block,13),(block,5)), false, true)
final_goal(2, in_tower((block,13),(block,6)), false, true)
final_goal(2, in_tower((block,13),(block,7)), false, true)
final_goal(2, in_tower((block,13),(block,8)), false, true)
final_goal(2, in_tower((block,13),(block,9)), false, true)
final_goal(2, in_tower((block,14),(block,1)), false, true)
final_goal(2, in_tower((block,14),(block,10)), false, true)
final_goal(2, in_tower((block,14),(block,11)), false, true)
final_goal(2, in_tower((block,14),(block,12)), false, true)
final_goal(2, in_tower((block,14),(block,13)), false, true)
final_goal(2, in_tower((block,14),(block,14)), false, true)
final_goal(2, in_tower((block,14),(block,15)), false, true)
final_goal(2, in_tower((block,14),(block,16)), false, true)
final_goal(2, in_tower((block,14),(block,17)), false, true)
final_goal(2, in_tower((block,14),(block,18)), false, true)
final_goal(2, in_tower((block,14),(block,2)), false, true)
final_goal(2, in_tower((block,14),(block,3)), false, true)
final_goal(2, in_tower((block,14),(block,4)), false, true)
final_goal(2, in_tower((block,14),(block,5)), false, true)
final_goal(2, in_tower((block,14),(block,6)), false, true)
final_goal(2, in_tower((block,14),(block,7)), false, true)
final_goal(2, in_tower((block,14),(block,8)), false, true)
final_goal(2, in_tower((block,14),(block,9)), false, true)
final_goal(2, in_tower((block,15),(block,1)), false, true)
final_goal(2, in_tower((block,15),(block,10)), false, true)
final_goal(2, in_tower((block,15),(block,11)), false, true)
final_goal(2, in_tower((block,15),(block,12)), false, true)
final_goal(2, in_tower((block,15),(block,13)), true, true)
final_goal(2, in_tower((block,15),(block,14)), true, true)
final_goal(2, in_tower((block,15),(block,15)), true, true)
final_goal(2, in_tower((block,15),(block,16)), false, true)
final_goal(2, in_tower((block,15),(block,17)), false, true)
final_goal(2, in_tower((block,15),(block,18)), false, true)
final_goal(2, in_tower((block,15),(block,2)), false, true)
final_goal(2, in_tower((block,15),(block,3)), false, true)
final_goal(2, in_tower((block,15),(block,4)), false, true)
final_goal(2, in_tower((block,15),(block,5)), false, true)
final_goal(2, in_tower((block,15),(block,6)), false, true)
final_goal(2, in_tower((block,15),(block,7)), false, true)
final_goal(2, in_tower((block,15),(block,8)), false, true)
final_goal(2, in_tower((block,15),(block,9)), false, true)
final_goal(2, in_tower((block,16),(block,1)), false, true)
final_goal(2, in_tower((block,16),(block,10)), false, true)
final_goal(2, in_tower((block,16),(block,11)), false, true)
final_goal(2, in_tower((block,16),(block,12)), false, true)
final_goal(2, in_tower((block,16),(block,13)), false, true)
final_goal(2, in_tower((block,16),(block,14)), false, true)
final_goal(2, in_tower((block,16),(block,15)), false, true)
final_goal(2, in_tower((block,16),(block,16)), false, true)
final_goal(2, in_tower((block,16),(block,17)), false, true)
final_goal(2, in_tower((block,16),(block,18)), false, true)
final_goal(2, in_tower((block,16),(block,2)), false, true)
final_goal(2, in_tower((block,16),(block,3)), false, true)
final_goal(2, in_tower((block,16),(block,4)), false, true)
final_goal(2, in_tower((block,16),(block,5)), false, true)
final_goal(2, in_tower((block,16),(block,6)), false, true)
final_goal(2, in_tower((block,16),(block,7)), false, true)
final_goal(2, in_tower((block,16),(block,8)), false, true)
final_goal(2, in_tower((block,16),(block,9)), false, true)
final_goal(2, in_tower((block,17),(block,1)), false, true)
final_goal(2, in_tower((block,17),(block,10)), false, true)
final_goal(2, in_tower((block,17),(block,11)), false, true)
final_goal(2, in_tower((block,17),(block,12)), false, true)
final_goal(2, in_tower((block,17),(block,13)), false, true)
final_goal(2, in_tower((block,17),(block,14)), false, true)
final_goal(2, in_tower((block,17),(block,15)), false, true)
final_goal(2, in_tower((block,17),(block,16)), false, true)
final_goal(2, in_tower((block,17),(block,17)), false, true)
final_goal(2, in_tower((block,17),(block,18)), false, true)
final_goal(2, in_tower((block,17),(block,2)), false, true)
final_goal(2, in_tower((block,17),(block,3)), false, true)
final_goal(2, in_tower((block,17),(block,4)), false, true)
final_goal(2, in_tower((block,17),(block,5)), false, true)
final_goal(2, in_tower((block,17),(block,6)), false, true)
final_goal(2, in_tower((block,17),(block,7)), false, true)
final_goal(2, in_tower((block,17),(block,8)), false, true)
final_goal(2, in_tower((block,17),(block,9)), false, true)
final_goal(2, in_tower((block,18),(block,1)), false, true)
final_goal(2, in_tower((block,18),(block,10)), false, true)
final_goal(2, in_tower((block,18),(block,11)), false, true)
final_goal(2, in_tower((block,18),(block,12)), false, true)
final_goal(2, in_tower((block,18),(block,13)), false, true)
final_goal(2, in_tower((block,18),(block,14)), false, true)
final_goal(2, in_tower((block,18),(block,15)), false, true)
final_goal(2, in_tower((block,18),(block,16)), true, true)
final_goal(2, in_tower((block,18),(block,17)), true, true)
final_goal(2, in_tower((block,18),(block,18)), true, true)
final_goal(2, in_tower((block,18),(block,2)), false, true)
final_goal(2, in_tower((block,18),(block,3)), false, true)
final_goal(2, in_tower((block,18),(block,4)), false, true)
final_goal(2, in_tower((block,18),(block,5)), false, true)
final_goal(2, in_tower((block,18),(block,6)), false, true)
final_goal(2, in_tower((block,18),(block,7)), false, true)
final_goal(2, in_tower((block,18),(block,8)), false, true)
final_goal(2, in_tower((block,18),(block,9)), false, true)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,10)), false, true)
final_goal(2, in_tower((block,2),(block,11)), false, true)
final_goal(2, in_tower((block,2),(block,12)), false, true)
final_goal(2, in_tower((block,2),(block,13)), false, true)
final_goal(2, in_tower((block,2),(block,14)), false, true)
final_goal(2, in_tower((block,2),(block,15)), false, true)
final_goal(2, in_tower((block,2),(block,16)), false, true)
final_goal(2, in_tower((block,2),(block,17)), false, true)
final_goal(2, in_tower((block,2),(block,18)), false, true)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,7)), false, true)
final_goal(2, in_tower((block,2),(block,8)), false, true)
final_goal(2, in_tower((block,2),(block,9)), false, true)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,10)), false, true)
final_goal(2, in_tower((block,3),(block,11)), false, true)
final_goal(2, in_tower((block,3),(block,12)), false, true)
final_goal(2, in_tower((block,3),(block,13)), false, true)
final_goal(2, in_tower((block,3),(block,14)), false, true)
final_goal(2, in_tower((block,3),(block,15)), false, true)
final_goal(2, in_tower((block,3),(block,16)), false, true)
final_goal(2, in_tower((block,3),(block,17)), false, true)
final_goal(2, in_tower((block,3),(block,18)), false, true)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,7)), false, true)
final_goal(2, in_tower((block,3),(block,8)), false, true)
final_goal(2, in_tower((block,3),(block,9)), false, true)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,10)), false, true)
final_goal(2, in_tower((block,4),(block,11)), false, true)
final_goal(2, in_tower((block,4),(block,12)), false, true)
final_goal(2, in_tower((block,4),(block,13)), false, true)
final_goal(2, in_tower((block,4),(block,14)), false, true)
final_goal(2, in_tower((block,4),(block,15)), false, true)
final_goal(2, in_tower((block,4),(block,16)), false, true)
final_goal(2, in_tower((block,4),(block,17)), false, true)
final_goal(2, in_tower((block,4),(block,18)), false, true)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,7)), false, true)
final_goal(2, in_tower((block,4),(block,8)), false, true)
final_goal(2, in_tower((block,4),(block,9)), false, true)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,10)), false, true)
final_goal(2, in_tower((block,5),(block,11)), false, true)
final_goal(2, in_tower((block,5),(block,12)), false, true)
final_goal(2, in_tower((block,5),(block,13)), false, true)
final_goal(2, in_tower((block,5),(block,14)), false, true)
final_goal(2, in_tower((block,5),(block,15)), false, true)
final_goal(2, in_tower((block,5),(block,16)), false, true)
final_goal(2, in_tower((block,5),(block,17)), false, true)
final_goal(2, in_tower((block,5),(block,18)), false, true)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,7)), false, true)
final_goal(2, in_tower((block,5),(block,8)), false, true)
final_goal(2, in_tower((block,5),(block,9)), false, true)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,10)), false, true)
final_goal(2, in_tower((block,6),(block,11)), false, true)
final_goal(2, in_tower((block,6),(block,12)), false, true)
final_goal(2, in_tower((block,6),(block,13)), false, true)
final_goal(2, in_tower((block,6),(block,14)), false, true)
final_goal(2, in_tower((block,6),(block,15)), false, true)
final_goal(2, in_tower((block,6),(block,16)), false, true)
final_goal(2, in_tower((block,6),(block,17)), false, true)
final_goal(2, in_tower((block,6),(block,18)), false, true)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, in_tower((block,6),(block,7)), false, true)
final_goal(2, in_tower((block,6),(block,8)), false, true)
final_goal(2, in_tower((block,6),(block,9)), false, true)
final_goal(2, in_tower((block,7),(block,1)), false, true)
final_goal(2, in_tower((block,7),(block,10)), false, true)
final_goal(2, in_tower((block,7),(block,11)), false, true)
final_goal(2, in_tower((block,7),(block,12)), false, true)
final_goal(2, in_tower((block,7),(block,13)), false, true)
final_goal(2, in_tower((block,7),(block,14)), false, true)
final_goal(2, in_tower((block,7),(block,15)), false, true)
final_goal(2, in_tower((block,7),(block,16)), false, true)
final_goal(2, in_tower((block,7),(block,17)), false, true)
final_goal(2, in_tower((block,7),(block,18)), false, true)
final_goal(2, in_tower((block,7),(block,2)), false, true)
final_goal(2, in_tower((block,7),(block,3)), false, true)
final_goal(2, in_tower((block,7),(block,4)), false, true)
final_goal(2, in_tower((block,7),(block,5)), false, true)
final_goal(2, in_tower((block,7),(block,6)), false, true)
final_goal(2, in_tower((block,7),(block,7)), false, true)
final_goal(2, in_tower((block,7),(block,8)), false, true)
final_goal(2, in_tower((block,7),(block,9)), false, true)
final_goal(2, in_tower((block,8),(block,1)), false, true)
final_goal(2, in_tower((block,8),(block,10)), false, true)
final_goal(2, in_tower((block,8),(block,11)), false, true)
final_goal(2, in_tower((block,8),(block,12)), false, true)
final_goal(2, in_tower((block,8),(block,13)), false, true)
final_goal(2, in_tower((block,8),(block,14)), false, true)
final_goal(2, in_tower((block,8),(block,15)), false, true)
final_goal(2, in_tower((block,8),(block,16)), false, true)
final_goal(2, in_tower((block,8),(block,17)), false, true)
final_goal(2, in_tower((block,8),(block,18)), false, true)
final_goal(2, in_tower((block,8),(block,2)), false, true)
final_goal(2, in_tower((block,8),(block,3)), false, true)
final_goal(2, in_tower((block,8),(block,4)), false, true)
final_goal(2, in_tower((block,8),(block,5)), false, true)
final_goal(2, in_tower((block,8),(block,6)), false, true)
final_goal(2, in_tower((block,8),(block,7)), false, true)
final_goal(2, in_tower((block,8),(block,8)), false, true)
final_goal(2, in_tower((block,8),(block,9)), false, true)
final_goal(2, in_tower((block,9),(block,1)), false, true)
final_goal(2, in_tower((block,9),(block,10)), false, true)
final_goal(2, in_tower((block,9),(block,11)), false, true)
final_goal(2, in_tower((block,9),(block,12)), false, true)
final_goal(2, in_tower((block,9),(block,13)), false, true)
final_goal(2, in_tower((block,9),(block,14)), false, true)
final_goal(2, in_tower((block,9),(block,15)), false, true)
final_goal(2, in_tower((block,9),(block,16)), false, true)
final_goal(2, in_tower((block,9),(block,17)), false, true)
final_goal(2, in_tower((block,9),(block,18)), false, true)
final_goal(2, in_tower((block,9),(block,2)), false, true)
final_goal(2, in_tower((block,9),(block,3)), false, true)
final_goal(2, in_tower((block,9),(block,4)), false, true)
final_goal(2, in_tower((block,9),(block,5)), false, true)
final_goal(2, in_tower((block,9),(block,6)), false, true)
final_goal(2, in_tower((block,9),(block,7)), true, true)
final_goal(2, in_tower((block,9),(block,8)), true, true)
final_goal(2, in_tower((block,9),(block,9)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,10)), (block,11), true)
final_goal(2, on((block,11)), (block,12), true)
final_goal(2, on((block,12)), puzzle_room_2_table_left, true)
final_goal(2, on((block,13)), (block,14), true)
final_goal(2, on((block,14)), (block,15), true)
final_goal(2, on((block,15)), puzzle_room_2_table_right, true)
final_goal(2, on((block,16)), (block,17), true)
final_goal(2, on((block,17)), (block,18), true)
final_goal(2, on((block,18)), puzzle_room_2_table_middle, true)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,3)), puzzle_room_1_table_left, true)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,6)), puzzle_room_1_table_right, true)
final_goal(2, on((block,7)), (block,8), true)
final_goal(2, on((block,8)), (block,9), true)
final_goal(2, on((block,9)), puzzle_room_1_table_middle, true)
final_goal(2, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(2, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(2, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(2, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(2, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(2, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(2, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,9),puzzle_room_2_table), false, true)

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 2         
      ================================================      

final_goal(2, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(2, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(2, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(2, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(2, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(2, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,10)), true, false)
final_goal(2, in_tower((block,1),(block,11)), true, false)
final_goal(2, in_tower((block,1),(block,12)), true, false)
final_goal(2, in_tower((block,1),(block,13)), true, false)
final_goal(2, in_tower((block,1),(block,14)), true, false)
final_goal(2, in_tower((block,1),(block,15)), true, false)
final_goal(2, in_tower((block,1),(block,16)), true, false)
final_goal(2, in_tower((block,1),(block,17)), true, false)
final_goal(2, in_tower((block,1),(block,18)), true, false)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,1),(block,7)), true, false)
final_goal(2, in_tower((block,1),(block,8)), true, false)
final_goal(2, in_tower((block,1),(block,9)), true, false)
final_goal(2, in_tower((block,10),(block,1)), true, false)
final_goal(2, in_tower((block,10),(block,10)), true, false)
final_goal(2, in_tower((block,10),(block,11)), true, false)
final_goal(2, in_tower((block,10),(block,12)), true, false)
final_goal(2, in_tower((block,10),(block,13)), true, false)
final_goal(2, in_tower((block,10),(block,14)), true, false)
final_goal(2, in_tower((block,10),(block,15)), true, false)
final_goal(2, in_tower((block,10),(block,16)), true, false)
final_goal(2, in_tower((block,10),(block,17)), true, false)
final_goal(2, in_tower((block,10),(block,18)), true, false)
final_goal(2, in_tower((block,10),(block,2)), true, false)
final_goal(2, in_tower((block,10),(block,3)), true, false)
final_goal(2, in_tower((block,10),(block,4)), true, false)
final_goal(2, in_tower((block,10),(block,5)), true, false)
final_goal(2, in_tower((block,10),(block,6)), true, false)
final_goal(2, in_tower((block,10),(block,7)), true, false)
final_goal(2, in_tower((block,10),(block,8)), true, false)
final_goal(2, in_tower((block,10),(block,9)), true, false)
final_goal(2, in_tower((block,11),(block,1)), true, false)
final_goal(2, in_tower((block,11),(block,10)), true, false)
final_goal(2, in_tower((block,11),(block,11)), true, false)
final_goal(2, in_tower((block,11),(block,12)), true, false)
final_goal(2, in_tower((block,11),(block,13)), true, false)
final_goal(2, in_tower((block,11),(block,14)), true, false)
final_goal(2, in_tower((block,11),(block,15)), true, false)
final_goal(2, in_tower((block,11),(block,16)), true, false)
final_goal(2, in_tower((block,11),(block,17)), true, false)
final_goal(2, in_tower((block,11),(block,18)), true, false)
final_goal(2, in_tower((block,11),(block,2)), true, false)
final_goal(2, in_tower((block,11),(block,3)), true, false)
final_goal(2, in_tower((block,11),(block,4)), true, false)
final_goal(2, in_tower((block,11),(block,5)), true, false)
final_goal(2, in_tower((block,11),(block,6)), true, false)
final_goal(2, in_tower((block,11),(block,7)), true, false)
final_goal(2, in_tower((block,11),(block,8)), true, false)
final_goal(2, in_tower((block,11),(block,9)), true, false)
final_goal(2, in_tower((block,12),(block,1)), true, false)
final_goal(2, in_tower((block,12),(block,10)), false, false)
final_goal(2, in_tower((block,12),(block,11)), false, false)
final_goal(2, in_tower((block,12),(block,12)), false, false)
final_goal(2, in_tower((block,12),(block,13)), true, false)
final_goal(2, in_tower((block,12),(block,14)), true, false)
final_goal(2, in_tower((block,12),(block,15)), true, false)
final_goal(2, in_tower((block,12),(block,16)), true, false)
final_goal(2, in_tower((block,12),(block,17)), true, false)
final_goal(2, in_tower((block,12),(block,18)), true, false)
final_goal(2, in_tower((block,12),(block,2)), true, false)
final_goal(2, in_tower((block,12),(block,3)), true, false)
final_goal(2, in_tower((block,12),(block,4)), true, false)
final_goal(2, in_tower((block,12),(block,5)), true, false)
final_goal(2, in_tower((block,12),(block,6)), true, false)
final_goal(2, in_tower((block,12),(block,7)), true, false)
final_goal(2, in_tower((block,12),(block,8)), true, false)
final_goal(2, in_tower((block,12),(block,9)), true, false)
final_goal(2, in_tower((block,13),(block,1)), true, false)
final_goal(2, in_tower((block,13),(block,10)), true, false)
final_goal(2, in_tower((block,13),(block,11)), true, false)
final_goal(2, in_tower((block,13),(block,12)), true, false)
final_goal(2, in_tower((block,13),(block,13)), true, false)
final_goal(2, in_tower((block,13),(block,14)), true, false)
final_goal(2, in_tower((block,13),(block,15)), true, false)
final_goal(2, in_tower((block,13),(block,16)), true, false)
final_goal(2, in_tower((block,13),(block,17)), true, false)
final_goal(2, in_tower((block,13),(block,18)), true, false)
final_goal(2, in_tower((block,13),(block,2)), true, false)
final_goal(2, in_tower((block,13),(block,3)), true, false)
final_goal(2, in_tower((block,13),(block,4)), true, false)
final_goal(2, in_tower((block,13),(block,5)), true, false)
final_goal(2, in_tower((block,13),(block,6)), true, false)
final_goal(2, in_tower((block,13),(block,7)), true, false)
final_goal(2, in_tower((block,13),(block,8)), true, false)
final_goal(2, in_tower((block,13),(block,9)), true, false)
final_goal(2, in_tower((block,14),(block,1)), true, false)
final_goal(2, in_tower((block,14),(block,10)), true, false)
final_goal(2, in_tower((block,14),(block,11)), true, false)
final_goal(2, in_tower((block,14),(block,12)), true, false)
final_goal(2, in_tower((block,14),(block,13)), true, false)
final_goal(2, in_tower((block,14),(block,14)), true, false)
final_goal(2, in_tower((block,14),(block,15)), true, false)
final_goal(2, in_tower((block,14),(block,16)), true, false)
final_goal(2, in_tower((block,14),(block,17)), true, false)
final_goal(2, in_tower((block,14),(block,18)), true, false)
final_goal(2, in_tower((block,14),(block,2)), true, false)
final_goal(2, in_tower((block,14),(block,3)), true, false)
final_goal(2, in_tower((block,14),(block,4)), true, false)
final_goal(2, in_tower((block,14),(block,5)), true, false)
final_goal(2, in_tower((block,14),(block,6)), true, false)
final_goal(2, in_tower((block,14),(block,7)), true, false)
final_goal(2, in_tower((block,14),(block,8)), true, false)
final_goal(2, in_tower((block,14),(block,9)), true, false)
final_goal(2, in_tower((block,15),(block,1)), true, false)
final_goal(2, in_tower((block,15),(block,10)), true, false)
final_goal(2, in_tower((block,15),(block,11)), true, false)
final_goal(2, in_tower((block,15),(block,12)), true, false)
final_goal(2, in_tower((block,15),(block,13)), false, false)
final_goal(2, in_tower((block,15),(block,14)), false, false)
final_goal(2, in_tower((block,15),(block,15)), false, false)
final_goal(2, in_tower((block,15),(block,16)), true, false)
final_goal(2, in_tower((block,15),(block,17)), true, false)
final_goal(2, in_tower((block,15),(block,18)), true, false)
final_goal(2, in_tower((block,15),(block,2)), true, false)
final_goal(2, in_tower((block,15),(block,3)), true, false)
final_goal(2, in_tower((block,15),(block,4)), true, false)
final_goal(2, in_tower((block,15),(block,5)), true, false)
final_goal(2, in_tower((block,15),(block,6)), true, false)
final_goal(2, in_tower((block,15),(block,7)), true, false)
final_goal(2, in_tower((block,15),(block,8)), true, false)
final_goal(2, in_tower((block,15),(block,9)), true, false)
final_goal(2, in_tower((block,16),(block,1)), true, false)
final_goal(2, in_tower((block,16),(block,10)), true, false)
final_goal(2, in_tower((block,16),(block,11)), true, false)
final_goal(2, in_tower((block,16),(block,12)), true, false)
final_goal(2, in_tower((block,16),(block,13)), true, false)
final_goal(2, in_tower((block,16),(block,14)), true, false)
final_goal(2, in_tower((block,16),(block,15)), true, false)
final_goal(2, in_tower((block,16),(block,16)), true, false)
final_goal(2, in_tower((block,16),(block,17)), true, false)
final_goal(2, in_tower((block,16),(block,18)), true, false)
final_goal(2, in_tower((block,16),(block,2)), true, false)
final_goal(2, in_tower((block,16),(block,3)), true, false)
final_goal(2, in_tower((block,16),(block,4)), true, false)
final_goal(2, in_tower((block,16),(block,5)), true, false)
final_goal(2, in_tower((block,16),(block,6)), true, false)
final_goal(2, in_tower((block,16),(block,7)), true, false)
final_goal(2, in_tower((block,16),(block,8)), true, false)
final_goal(2, in_tower((block,16),(block,9)), true, false)
final_goal(2, in_tower((block,17),(block,1)), true, false)
final_goal(2, in_tower((block,17),(block,10)), true, false)
final_goal(2, in_tower((block,17),(block,11)), true, false)
final_goal(2, in_tower((block,17),(block,12)), true, false)
final_goal(2, in_tower((block,17),(block,13)), true, false)
final_goal(2, in_tower((block,17),(block,14)), true, false)
final_goal(2, in_tower((block,17),(block,15)), true, false)
final_goal(2, in_tower((block,17),(block,16)), true, false)
final_goal(2, in_tower((block,17),(block,17)), true, false)
final_goal(2, in_tower((block,17),(block,18)), true, false)
final_goal(2, in_tower((block,17),(block,2)), true, false)
final_goal(2, in_tower((block,17),(block,3)), true, false)
final_goal(2, in_tower((block,17),(block,4)), true, false)
final_goal(2, in_tower((block,17),(block,5)), true, false)
final_goal(2, in_tower((block,17),(block,6)), true, false)
final_goal(2, in_tower((block,17),(block,7)), true, false)
final_goal(2, in_tower((block,17),(block,8)), true, false)
final_goal(2, in_tower((block,17),(block,9)), true, false)
final_goal(2, in_tower((block,18),(block,1)), true, false)
final_goal(2, in_tower((block,18),(block,10)), true, false)
final_goal(2, in_tower((block,18),(block,11)), true, false)
final_goal(2, in_tower((block,18),(block,12)), true, false)
final_goal(2, in_tower((block,18),(block,13)), true, false)
final_goal(2, in_tower((block,18),(block,14)), true, false)
final_goal(2, in_tower((block,18),(block,15)), true, false)
final_goal(2, in_tower((block,18),(block,16)), false, false)
final_goal(2, in_tower((block,18),(block,17)), false, false)
final_goal(2, in_tower((block,18),(block,18)), false, false)
final_goal(2, in_tower((block,18),(block,2)), true, false)
final_goal(2, in_tower((block,18),(block,3)), true, false)
final_goal(2, in_tower((block,18),(block,4)), true, false)
final_goal(2, in_tower((block,18),(block,5)), true, false)
final_goal(2, in_tower((block,18),(block,6)), true, false)
final_goal(2, in_tower((block,18),(block,7)), true, false)
final_goal(2, in_tower((block,18),(block,8)), true, false)
final_goal(2, in_tower((block,18),(block,9)), true, false)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,10)), true, false)
final_goal(2, in_tower((block,2),(block,11)), true, false)
final_goal(2, in_tower((block,2),(block,12)), true, false)
final_goal(2, in_tower((block,2),(block,13)), true, false)
final_goal(2, in_tower((block,2),(block,14)), true, false)
final_goal(2, in_tower((block,2),(block,15)), true, false)
final_goal(2, in_tower((block,2),(block,16)), true, false)
final_goal(2, in_tower((block,2),(block,17)), true, false)
final_goal(2, in_tower((block,2),(block,18)), true, false)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,7)), true, false)
final_goal(2, in_tower((block,2),(block,8)), true, false)
final_goal(2, in_tower((block,2),(block,9)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,10)), true, false)
final_goal(2, in_tower((block,3),(block,11)), true, false)
final_goal(2, in_tower((block,3),(block,12)), true, false)
final_goal(2, in_tower((block,3),(block,13)), true, false)
final_goal(2, in_tower((block,3),(block,14)), true, false)
final_goal(2, in_tower((block,3),(block,15)), true, false)
final_goal(2, in_tower((block,3),(block,16)), true, false)
final_goal(2, in_tower((block,3),(block,17)), true, false)
final_goal(2, in_tower((block,3),(block,18)), true, false)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,7)), true, false)
final_goal(2, in_tower((block,3),(block,8)), true, false)
final_goal(2, in_tower((block,3),(block,9)), true, false)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,10)), true, false)
final_goal(2, in_tower((block,4),(block,11)), true, false)
final_goal(2, in_tower((block,4),(block,12)), true, false)
final_goal(2, in_tower((block,4),(block,13)), true, false)
final_goal(2, in_tower((block,4),(block,14)), true, false)
final_goal(2, in_tower((block,4),(block,15)), true, false)
final_goal(2, in_tower((block,4),(block,16)), true, false)
final_goal(2, in_tower((block,4),(block,17)), true, false)
final_goal(2, in_tower((block,4),(block,18)), true, false)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,7)), true, false)
final_goal(2, in_tower((block,4),(block,8)), true, false)
final_goal(2, in_tower((block,4),(block,9)), true, false)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,10)), true, false)
final_goal(2, in_tower((block,5),(block,11)), true, false)
final_goal(2, in_tower((block,5),(block,12)), true, false)
final_goal(2, in_tower((block,5),(block,13)), true, false)
final_goal(2, in_tower((block,5),(block,14)), true, false)
final_goal(2, in_tower((block,5),(block,15)), true, false)
final_goal(2, in_tower((block,5),(block,16)), true, false)
final_goal(2, in_tower((block,5),(block,17)), true, false)
final_goal(2, in_tower((block,5),(block,18)), true, false)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,7)), true, false)
final_goal(2, in_tower((block,5),(block,8)), true, false)
final_goal(2, in_tower((block,5),(block,9)), true, false)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,10)), true, false)
final_goal(2, in_tower((block,6),(block,11)), true, false)
final_goal(2, in_tower((block,6),(block,12)), true, false)
final_goal(2, in_tower((block,6),(block,13)), true, false)
final_goal(2, in_tower((block,6),(block,14)), true, false)
final_goal(2, in_tower((block,6),(block,15)), true, false)
final_goal(2, in_tower((block,6),(block,16)), true, false)
final_goal(2, in_tower((block,6),(block,17)), true, false)
final_goal(2, in_tower((block,6),(block,18)), true, false)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,7)), true, false)
final_goal(2, in_tower((block,6),(block,8)), true, false)
final_goal(2, in_tower((block,6),(block,9)), true, false)
final_goal(2, in_tower((block,7),(block,1)), true, false)
final_goal(2, in_tower((block,7),(block,10)), true, false)
final_goal(2, in_tower((block,7),(block,11)), true, false)
final_goal(2, in_tower((block,7),(block,12)), true, false)
final_goal(2, in_tower((block,7),(block,13)), true, false)
final_goal(2, in_tower((block,7),(block,14)), true, false)
final_goal(2, in_tower((block,7),(block,15)), true, false)
final_goal(2, in_tower((block,7),(block,16)), true, false)
final_goal(2, in_tower((block,7),(block,17)), true, false)
final_goal(2, in_tower((block,7),(block,18)), true, false)
final_goal(2, in_tower((block,7),(block,2)), true, false)
final_goal(2, in_tower((block,7),(block,3)), true, false)
final_goal(2, in_tower((block,7),(block,4)), true, false)
final_goal(2, in_tower((block,7),(block,5)), true, false)
final_goal(2, in_tower((block,7),(block,6)), true, false)
final_goal(2, in_tower((block,7),(block,7)), true, false)
final_goal(2, in_tower((block,7),(block,8)), true, false)
final_goal(2, in_tower((block,7),(block,9)), true, false)
final_goal(2, in_tower((block,8),(block,1)), true, false)
final_goal(2, in_tower((block,8),(block,10)), true, false)
final_goal(2, in_tower((block,8),(block,11)), true, false)
final_goal(2, in_tower((block,8),(block,12)), true, false)
final_goal(2, in_tower((block,8),(block,13)), true, false)
final_goal(2, in_tower((block,8),(block,14)), true, false)
final_goal(2, in_tower((block,8),(block,15)), true, false)
final_goal(2, in_tower((block,8),(block,16)), true, false)
final_goal(2, in_tower((block,8),(block,17)), true, false)
final_goal(2, in_tower((block,8),(block,18)), true, false)
final_goal(2, in_tower((block,8),(block,2)), true, false)
final_goal(2, in_tower((block,8),(block,3)), true, false)
final_goal(2, in_tower((block,8),(block,4)), true, false)
final_goal(2, in_tower((block,8),(block,5)), true, false)
final_goal(2, in_tower((block,8),(block,6)), true, false)
final_goal(2, in_tower((block,8),(block,7)), true, false)
final_goal(2, in_tower((block,8),(block,8)), true, false)
final_goal(2, in_tower((block,8),(block,9)), true, false)
final_goal(2, in_tower((block,9),(block,1)), true, false)
final_goal(2, in_tower((block,9),(block,10)), true, false)
final_goal(2, in_tower((block,9),(block,11)), true, false)
final_goal(2, in_tower((block,9),(block,12)), true, false)
final_goal(2, in_tower((block,9),(block,13)), true, false)
final_goal(2, in_tower((block,9),(block,14)), true, false)
final_goal(2, in_tower((block,9),(block,15)), true, false)
final_goal(2, in_tower((block,9),(block,16)), true, false)
final_goal(2, in_tower((block,9),(block,17)), true, false)
final_goal(2, in_tower((block,9),(block,18)), true, false)
final_goal(2, in_tower((block,9),(block,2)), true, false)
final_goal(2, in_tower((block,9),(block,3)), true, false)
final_goal(2, in_tower((block,9),(block,4)), true, false)
final_goal(2, in_tower((block,9),(block,5)), true, false)
final_goal(2, in_tower((block,9),(block,6)), true, false)
final_goal(2, in_tower((block,9),(block,7)), false, false)
final_goal(2, in_tower((block,9),(block,8)), false, false)
final_goal(2, in_tower((block,9),(block,9)), false, false)
final_goal(2, on((block,1)), (block,10), false)
final_goal(2, on((block,1)), (block,11), false)
final_goal(2, on((block,1)), (block,12), false)
final_goal(2, on((block,1)), (block,13), false)
final_goal(2, on((block,1)), (block,14), false)
final_goal(2, on((block,1)), (block,15), false)
final_goal(2, on((block,1)), (block,16), false)
final_goal(2, on((block,1)), (block,17), false)
final_goal(2, on((block,1)), (block,18), false)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), (block,7), false)
final_goal(2, on((block,1)), (block,8), false)
final_goal(2, on((block,1)), (block,9), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_1_table_left, false)
final_goal(2, on((block,1)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,1)), puzzle_room_1_table_right, false)
final_goal(2, on((block,1)), puzzle_room_2_table_left, false)
final_goal(2, on((block,1)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,1)), puzzle_room_2_table_right, false)
final_goal(2, on((block,10)), (block,1), false)
final_goal(2, on((block,10)), (block,12), false)
final_goal(2, on((block,10)), (block,13), false)
final_goal(2, on((block,10)), (block,14), false)
final_goal(2, on((block,10)), (block,15), false)
final_goal(2, on((block,10)), (block,16), false)
final_goal(2, on((block,10)), (block,17), false)
final_goal(2, on((block,10)), (block,18), false)
final_goal(2, on((block,10)), (block,2), false)
final_goal(2, on((block,10)), (block,3), false)
final_goal(2, on((block,10)), (block,4), false)
final_goal(2, on((block,10)), (block,5), false)
final_goal(2, on((block,10)), (block,6), false)
final_goal(2, on((block,10)), (block,7), false)
final_goal(2, on((block,10)), (block,8), false)
final_goal(2, on((block,10)), (block,9), false)
final_goal(2, on((block,10)), nothing, false)
final_goal(2, on((block,10)), puzzle_room_1_table_left, false)
final_goal(2, on((block,10)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,10)), puzzle_room_1_table_right, false)
final_goal(2, on((block,10)), puzzle_room_2_table_left, false)
final_goal(2, on((block,10)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,10)), puzzle_room_2_table_right, false)
final_goal(2, on((block,11)), (block,1), false)
final_goal(2, on((block,11)), (block,10), false)
final_goal(2, on((block,11)), (block,13), false)
final_goal(2, on((block,11)), (block,14), false)
final_goal(2, on((block,11)), (block,15), false)
final_goal(2, on((block,11)), (block,16), false)
final_goal(2, on((block,11)), (block,17), false)
final_goal(2, on((block,11)), (block,18), false)
final_goal(2, on((block,11)), (block,2), false)
final_goal(2, on((block,11)), (block,3), false)
final_goal(2, on((block,11)), (block,4), false)
final_goal(2, on((block,11)), (block,5), false)
final_goal(2, on((block,11)), (block,6), false)
final_goal(2, on((block,11)), (block,7), false)
final_goal(2, on((block,11)), (block,8), false)
final_goal(2, on((block,11)), (block,9), false)
final_goal(2, on((block,11)), nothing, false)
final_goal(2, on((block,11)), puzzle_room_1_table_left, false)
final_goal(2, on((block,11)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,11)), puzzle_room_1_table_right, false)
final_goal(2, on((block,11)), puzzle_room_2_table_left, false)
final_goal(2, on((block,11)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,11)), puzzle_room_2_table_right, false)
final_goal(2, on((block,12)), (block,1), false)
final_goal(2, on((block,12)), (block,10), false)
final_goal(2, on((block,12)), (block,11), false)
final_goal(2, on((block,12)), (block,13), false)
final_goal(2, on((block,12)), (block,14), false)
final_goal(2, on((block,12)), (block,15), false)
final_goal(2, on((block,12)), (block,16), false)
final_goal(2, on((block,12)), (block,17), false)
final_goal(2, on((block,12)), (block,18), false)
final_goal(2, on((block,12)), (block,2), false)
final_goal(2, on((block,12)), (block,3), false)
final_goal(2, on((block,12)), (block,4), false)
final_goal(2, on((block,12)), (block,5), false)
final_goal(2, on((block,12)), (block,6), false)
final_goal(2, on((block,12)), (block,7), false)
final_goal(2, on((block,12)), (block,8), false)
final_goal(2, on((block,12)), (block,9), false)
final_goal(2, on((block,12)), nothing, false)
final_goal(2, on((block,12)), puzzle_room_1_table_left, false)
final_goal(2, on((block,12)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,12)), puzzle_room_1_table_right, false)
final_goal(2, on((block,12)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,12)), puzzle_room_2_table_right, false)
final_goal(2, on((block,13)), (block,1), false)
final_goal(2, on((block,13)), (block,10), false)
final_goal(2, on((block,13)), (block,11), false)
final_goal(2, on((block,13)), (block,12), false)
final_goal(2, on((block,13)), (block,15), false)
final_goal(2, on((block,13)), (block,16), false)
final_goal(2, on((block,13)), (block,17), false)
final_goal(2, on((block,13)), (block,18), false)
final_goal(2, on((block,13)), (block,2), false)
final_goal(2, on((block,13)), (block,3), false)
final_goal(2, on((block,13)), (block,4), false)
final_goal(2, on((block,13)), (block,5), false)
final_goal(2, on((block,13)), (block,6), false)
final_goal(2, on((block,13)), (block,7), false)
final_goal(2, on((block,13)), (block,8), false)
final_goal(2, on((block,13)), (block,9), false)
final_goal(2, on((block,13)), nothing, false)
final_goal(2, on((block,13)), puzzle_room_1_table_left, false)
final_goal(2, on((block,13)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,13)), puzzle_room_1_table_right, false)
final_goal(2, on((block,13)), puzzle_room_2_table_left, false)
final_goal(2, on((block,13)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,13)), puzzle_room_2_table_right, false)
final_goal(2, on((block,14)), (block,1), false)
final_goal(2, on((block,14)), (block,10), false)
final_goal(2, on((block,14)), (block,11), false)
final_goal(2, on((block,14)), (block,12), false)
final_goal(2, on((block,14)), (block,13), false)
final_goal(2, on((block,14)), (block,16), false)
final_goal(2, on((block,14)), (block,17), false)
final_goal(2, on((block,14)), (block,18), false)
final_goal(2, on((block,14)), (block,2), false)
final_goal(2, on((block,14)), (block,3), false)
final_goal(2, on((block,14)), (block,4), false)
final_goal(2, on((block,14)), (block,5), false)
final_goal(2, on((block,14)), (block,6), false)
final_goal(2, on((block,14)), (block,7), false)
final_goal(2, on((block,14)), (block,8), false)
final_goal(2, on((block,14)), (block,9), false)
final_goal(2, on((block,14)), nothing, false)
final_goal(2, on((block,14)), puzzle_room_1_table_left, false)
final_goal(2, on((block,14)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,14)), puzzle_room_1_table_right, false)
final_goal(2, on((block,14)), puzzle_room_2_table_left, false)
final_goal(2, on((block,14)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,14)), puzzle_room_2_table_right, false)
final_goal(2, on((block,15)), (block,1), false)
final_goal(2, on((block,15)), (block,10), false)
final_goal(2, on((block,15)), (block,11), false)
final_goal(2, on((block,15)), (block,12), false)
final_goal(2, on((block,15)), (block,13), false)
final_goal(2, on((block,15)), (block,14), false)
final_goal(2, on((block,15)), (block,16), false)
final_goal(2, on((block,15)), (block,17), false)
final_goal(2, on((block,15)), (block,18), false)
final_goal(2, on((block,15)), (block,2), false)
final_goal(2, on((block,15)), (block,3), false)
final_goal(2, on((block,15)), (block,4), false)
final_goal(2, on((block,15)), (block,5), false)
final_goal(2, on((block,15)), (block,6), false)
final_goal(2, on((block,15)), (block,7), false)
final_goal(2, on((block,15)), (block,8), false)
final_goal(2, on((block,15)), (block,9), false)
final_goal(2, on((block,15)), nothing, false)
final_goal(2, on((block,15)), puzzle_room_1_table_left, false)
final_goal(2, on((block,15)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,15)), puzzle_room_1_table_right, false)
final_goal(2, on((block,15)), puzzle_room_2_table_left, false)
final_goal(2, on((block,15)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,16)), (block,1), false)
final_goal(2, on((block,16)), (block,10), false)
final_goal(2, on((block,16)), (block,11), false)
final_goal(2, on((block,16)), (block,12), false)
final_goal(2, on((block,16)), (block,13), false)
final_goal(2, on((block,16)), (block,14), false)
final_goal(2, on((block,16)), (block,15), false)
final_goal(2, on((block,16)), (block,18), false)
final_goal(2, on((block,16)), (block,2), false)
final_goal(2, on((block,16)), (block,3), false)
final_goal(2, on((block,16)), (block,4), false)
final_goal(2, on((block,16)), (block,5), false)
final_goal(2, on((block,16)), (block,6), false)
final_goal(2, on((block,16)), (block,7), false)
final_goal(2, on((block,16)), (block,8), false)
final_goal(2, on((block,16)), (block,9), false)
final_goal(2, on((block,16)), nothing, false)
final_goal(2, on((block,16)), puzzle_room_1_table_left, false)
final_goal(2, on((block,16)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,16)), puzzle_room_1_table_right, false)
final_goal(2, on((block,16)), puzzle_room_2_table_left, false)
final_goal(2, on((block,16)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,16)), puzzle_room_2_table_right, false)
final_goal(2, on((block,17)), (block,1), false)
final_goal(2, on((block,17)), (block,10), false)
final_goal(2, on((block,17)), (block,11), false)
final_goal(2, on((block,17)), (block,12), false)
final_goal(2, on((block,17)), (block,13), false)
final_goal(2, on((block,17)), (block,14), false)
final_goal(2, on((block,17)), (block,15), false)
final_goal(2, on((block,17)), (block,16), false)
final_goal(2, on((block,17)), (block,2), false)
final_goal(2, on((block,17)), (block,3), false)
final_goal(2, on((block,17)), (block,4), false)
final_goal(2, on((block,17)), (block,5), false)
final_goal(2, on((block,17)), (block,6), false)
final_goal(2, on((block,17)), (block,7), false)
final_goal(2, on((block,17)), (block,8), false)
final_goal(2, on((block,17)), (block,9), false)
final_goal(2, on((block,17)), nothing, false)
final_goal(2, on((block,17)), puzzle_room_1_table_left, false)
final_goal(2, on((block,17)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,17)), puzzle_room_1_table_right, false)
final_goal(2, on((block,17)), puzzle_room_2_table_left, false)
final_goal(2, on((block,17)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,17)), puzzle_room_2_table_right, false)
final_goal(2, on((block,18)), (block,1), false)
final_goal(2, on((block,18)), (block,10), false)
final_goal(2, on((block,18)), (block,11), false)
final_goal(2, on((block,18)), (block,12), false)
final_goal(2, on((block,18)), (block,13), false)
final_goal(2, on((block,18)), (block,14), false)
final_goal(2, on((block,18)), (block,15), false)
final_goal(2, on((block,18)), (block,16), false)
final_goal(2, on((block,18)), (block,17), false)
final_goal(2, on((block,18)), (block,2), false)
final_goal(2, on((block,18)), (block,3), false)
final_goal(2, on((block,18)), (block,4), false)
final_goal(2, on((block,18)), (block,5), false)
final_goal(2, on((block,18)), (block,6), false)
final_goal(2, on((block,18)), (block,7), false)
final_goal(2, on((block,18)), (block,8), false)
final_goal(2, on((block,18)), (block,9), false)
final_goal(2, on((block,18)), nothing, false)
final_goal(2, on((block,18)), puzzle_room_1_table_left, false)
final_goal(2, on((block,18)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,18)), puzzle_room_1_table_right, false)
final_goal(2, on((block,18)), puzzle_room_2_table_left, false)
final_goal(2, on((block,18)), puzzle_room_2_table_right, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,10), false)
final_goal(2, on((block,2)), (block,11), false)
final_goal(2, on((block,2)), (block,12), false)
final_goal(2, on((block,2)), (block,13), false)
final_goal(2, on((block,2)), (block,14), false)
final_goal(2, on((block,2)), (block,15), false)
final_goal(2, on((block,2)), (block,16), false)
final_goal(2, on((block,2)), (block,17), false)
final_goal(2, on((block,2)), (block,18), false)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), (block,7), false)
final_goal(2, on((block,2)), (block,8), false)
final_goal(2, on((block,2)), (block,9), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_1_table_left, false)
final_goal(2, on((block,2)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,2)), puzzle_room_1_table_right, false)
final_goal(2, on((block,2)), puzzle_room_2_table_left, false)
final_goal(2, on((block,2)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,2)), puzzle_room_2_table_right, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,10), false)
final_goal(2, on((block,3)), (block,11), false)
final_goal(2, on((block,3)), (block,12), false)
final_goal(2, on((block,3)), (block,13), false)
final_goal(2, on((block,3)), (block,14), false)
final_goal(2, on((block,3)), (block,15), false)
final_goal(2, on((block,3)), (block,16), false)
final_goal(2, on((block,3)), (block,17), false)
final_goal(2, on((block,3)), (block,18), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), (block,7), false)
final_goal(2, on((block,3)), (block,8), false)
final_goal(2, on((block,3)), (block,9), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,3)), puzzle_room_1_table_right, false)
final_goal(2, on((block,3)), puzzle_room_2_table_left, false)
final_goal(2, on((block,3)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,3)), puzzle_room_2_table_right, false)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,10), false)
final_goal(2, on((block,4)), (block,11), false)
final_goal(2, on((block,4)), (block,12), false)
final_goal(2, on((block,4)), (block,13), false)
final_goal(2, on((block,4)), (block,14), false)
final_goal(2, on((block,4)), (block,15), false)
final_goal(2, on((block,4)), (block,16), false)
final_goal(2, on((block,4)), (block,17), false)
final_goal(2, on((block,4)), (block,18), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), (block,7), false)
final_goal(2, on((block,4)), (block,8), false)
final_goal(2, on((block,4)), (block,9), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_1_table_left, false)
final_goal(2, on((block,4)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,4)), puzzle_room_1_table_right, false)
final_goal(2, on((block,4)), puzzle_room_2_table_left, false)
final_goal(2, on((block,4)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,4)), puzzle_room_2_table_right, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,10), false)
final_goal(2, on((block,5)), (block,11), false)
final_goal(2, on((block,5)), (block,12), false)
final_goal(2, on((block,5)), (block,13), false)
final_goal(2, on((block,5)), (block,14), false)
final_goal(2, on((block,5)), (block,15), false)
final_goal(2, on((block,5)), (block,16), false)
final_goal(2, on((block,5)), (block,17), false)
final_goal(2, on((block,5)), (block,18), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,7), false)
final_goal(2, on((block,5)), (block,8), false)
final_goal(2, on((block,5)), (block,9), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_1_table_left, false)
final_goal(2, on((block,5)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,5)), puzzle_room_1_table_right, false)
final_goal(2, on((block,5)), puzzle_room_2_table_left, false)
final_goal(2, on((block,5)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,5)), puzzle_room_2_table_right, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,10), false)
final_goal(2, on((block,6)), (block,11), false)
final_goal(2, on((block,6)), (block,12), false)
final_goal(2, on((block,6)), (block,13), false)
final_goal(2, on((block,6)), (block,14), false)
final_goal(2, on((block,6)), (block,15), false)
final_goal(2, on((block,6)), (block,16), false)
final_goal(2, on((block,6)), (block,17), false)
final_goal(2, on((block,6)), (block,18), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), (block,7), false)
final_goal(2, on((block,6)), (block,8), false)
final_goal(2, on((block,6)), (block,9), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_1_table_left, false)
final_goal(2, on((block,6)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,6)), puzzle_room_2_table_left, false)
final_goal(2, on((block,6)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,6)), puzzle_room_2_table_right, false)
final_goal(2, on((block,7)), (block,1), false)
final_goal(2, on((block,7)), (block,10), false)
final_goal(2, on((block,7)), (block,11), false)
final_goal(2, on((block,7)), (block,12), false)
final_goal(2, on((block,7)), (block,13), false)
final_goal(2, on((block,7)), (block,14), false)
final_goal(2, on((block,7)), (block,15), false)
final_goal(2, on((block,7)), (block,16), false)
final_goal(2, on((block,7)), (block,17), false)
final_goal(2, on((block,7)), (block,18), false)
final_goal(2, on((block,7)), (block,2), false)
final_goal(2, on((block,7)), (block,3), false)
final_goal(2, on((block,7)), (block,4), false)
final_goal(2, on((block,7)), (block,5), false)
final_goal(2, on((block,7)), (block,6), false)
final_goal(2, on((block,7)), (block,9), false)
final_goal(2, on((block,7)), nothing, false)
final_goal(2, on((block,7)), puzzle_room_1_table_left, false)
final_goal(2, on((block,7)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,7)), puzzle_room_1_table_right, false)
final_goal(2, on((block,7)), puzzle_room_2_table_left, false)
final_goal(2, on((block,7)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,7)), puzzle_room_2_table_right, false)
final_goal(2, on((block,8)), (block,1), false)
final_goal(2, on((block,8)), (block,10), false)
final_goal(2, on((block,8)), (block,11), false)
final_goal(2, on((block,8)), (block,12), false)
final_goal(2, on((block,8)), (block,13), false)
final_goal(2, on((block,8)), (block,14), false)
final_goal(2, on((block,8)), (block,15), false)
final_goal(2, on((block,8)), (block,16), false)
final_goal(2, on((block,8)), (block,17), false)
final_goal(2, on((block,8)), (block,18), false)
final_goal(2, on((block,8)), (block,2), false)
final_goal(2, on((block,8)), (block,3), false)
final_goal(2, on((block,8)), (block,4), false)
final_goal(2, on((block,8)), (block,5), false)
final_goal(2, on((block,8)), (block,6), false)
final_goal(2, on((block,8)), (block,7), false)
final_goal(2, on((block,8)), nothing, false)
final_goal(2, on((block,8)), puzzle_room_1_table_left, false)
final_goal(2, on((block,8)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,8)), puzzle_room_1_table_right, false)
final_goal(2, on((block,8)), puzzle_room_2_table_left, false)
final_goal(2, on((block,8)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,8)), puzzle_room_2_table_right, false)
final_goal(2, on((block,9)), (block,1), false)
final_goal(2, on((block,9)), (block,10), false)
final_goal(2, on((block,9)), (block,11), false)
final_goal(2, on((block,9)), (block,12), false)
final_goal(2, on((block,9)), (block,13), false)
final_goal(2, on((block,9)), (block,14), false)
final_goal(2, on((block,9)), (block,15), false)
final_goal(2, on((block,9)), (block,16), false)
final_goal(2, on((block,9)), (block,17), false)
final_goal(2, on((block,9)), (block,18), false)
final_goal(2, on((block,9)), (block,2), false)
final_goal(2, on((block,9)), (block,3), false)
final_goal(2, on((block,9)), (block,4), false)
final_goal(2, on((block,9)), (block,5), false)
final_goal(2, on((block,9)), (block,6), false)
final_goal(2, on((block,9)), (block,7), false)
final_goal(2, on((block,9)), (block,8), false)
final_goal(2, on((block,9)), nothing, false)
final_goal(2, on((block,9)), puzzle_room_1_table_left, false)
final_goal(2, on((block,9)), puzzle_room_1_table_right, false)
final_goal(2, on((block,9)), puzzle_room_2_table_left, false)
final_goal(2, on((block,9)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,9)), puzzle_room_2_table_right, false)
final_goal(2, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(2, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(2, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(2, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(2, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(2, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(2, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,9),puzzle_room_2_table), true, false)

[04-03-2022_16-19-40] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 1         
      ================================================      

final_goal(1, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(1, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(1, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(1, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,10)), false, true)
final_goal(1, in_tower((block,1),(block,11)), false, true)
final_goal(1, in_tower((block,1),(block,12)), false, true)
final_goal(1, in_tower((block,1),(block,13)), false, true)
final_goal(1, in_tower((block,1),(block,14)), false, true)
final_goal(1, in_tower((block,1),(block,15)), false, true)
final_goal(1, in_tower((block,1),(block,16)), false, true)
final_goal(1, in_tower((block,1),(block,17)), false, true)
final_goal(1, in_tower((block,1),(block,18)), false, true)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,7)), false, true)
final_goal(1, in_tower((block,1),(block,8)), false, true)
final_goal(1, in_tower((block,1),(block,9)), false, true)
final_goal(1, in_tower((block,10),(block,1)), false, true)
final_goal(1, in_tower((block,10),(block,10)), false, true)
final_goal(1, in_tower((block,10),(block,11)), false, true)
final_goal(1, in_tower((block,10),(block,12)), false, true)
final_goal(1, in_tower((block,10),(block,13)), false, true)
final_goal(1, in_tower((block,10),(block,14)), false, true)
final_goal(1, in_tower((block,10),(block,15)), false, true)
final_goal(1, in_tower((block,10),(block,16)), false, true)
final_goal(1, in_tower((block,10),(block,17)), false, true)
final_goal(1, in_tower((block,10),(block,18)), false, true)
final_goal(1, in_tower((block,10),(block,2)), false, true)
final_goal(1, in_tower((block,10),(block,3)), false, true)
final_goal(1, in_tower((block,10),(block,4)), false, true)
final_goal(1, in_tower((block,10),(block,5)), false, true)
final_goal(1, in_tower((block,10),(block,6)), false, true)
final_goal(1, in_tower((block,10),(block,7)), false, true)
final_goal(1, in_tower((block,10),(block,8)), false, true)
final_goal(1, in_tower((block,10),(block,9)), false, true)
final_goal(1, in_tower((block,11),(block,1)), false, true)
final_goal(1, in_tower((block,11),(block,10)), false, true)
final_goal(1, in_tower((block,11),(block,11)), false, true)
final_goal(1, in_tower((block,11),(block,12)), false, true)
final_goal(1, in_tower((block,11),(block,13)), false, true)
final_goal(1, in_tower((block,11),(block,14)), false, true)
final_goal(1, in_tower((block,11),(block,15)), false, true)
final_goal(1, in_tower((block,11),(block,16)), false, true)
final_goal(1, in_tower((block,11),(block,17)), false, true)
final_goal(1, in_tower((block,11),(block,18)), false, true)
final_goal(1, in_tower((block,11),(block,2)), false, true)
final_goal(1, in_tower((block,11),(block,3)), false, true)
final_goal(1, in_tower((block,11),(block,4)), false, true)
final_goal(1, in_tower((block,11),(block,5)), false, true)
final_goal(1, in_tower((block,11),(block,6)), false, true)
final_goal(1, in_tower((block,11),(block,7)), false, true)
final_goal(1, in_tower((block,11),(block,8)), false, true)
final_goal(1, in_tower((block,11),(block,9)), false, true)
final_goal(1, in_tower((block,12),(block,1)), false, true)
final_goal(1, in_tower((block,12),(block,10)), true, true)
final_goal(1, in_tower((block,12),(block,11)), true, true)
final_goal(1, in_tower((block,12),(block,12)), true, true)
final_goal(1, in_tower((block,12),(block,13)), false, true)
final_goal(1, in_tower((block,12),(block,14)), false, true)
final_goal(1, in_tower((block,12),(block,15)), false, true)
final_goal(1, in_tower((block,12),(block,16)), false, true)
final_goal(1, in_tower((block,12),(block,17)), false, true)
final_goal(1, in_tower((block,12),(block,18)), false, true)
final_goal(1, in_tower((block,12),(block,2)), false, true)
final_goal(1, in_tower((block,12),(block,3)), false, true)
final_goal(1, in_tower((block,12),(block,4)), false, true)
final_goal(1, in_tower((block,12),(block,5)), false, true)
final_goal(1, in_tower((block,12),(block,6)), false, true)
final_goal(1, in_tower((block,12),(block,7)), false, true)
final_goal(1, in_tower((block,12),(block,8)), false, true)
final_goal(1, in_tower((block,12),(block,9)), false, true)
final_goal(1, in_tower((block,13),(block,1)), false, true)
final_goal(1, in_tower((block,13),(block,10)), false, true)
final_goal(1, in_tower((block,13),(block,11)), false, true)
final_goal(1, in_tower((block,13),(block,12)), false, true)
final_goal(1, in_tower((block,13),(block,13)), false, true)
final_goal(1, in_tower((block,13),(block,14)), false, true)
final_goal(1, in_tower((block,13),(block,15)), false, true)
final_goal(1, in_tower((block,13),(block,16)), false, true)
final_goal(1, in_tower((block,13),(block,17)), false, true)
final_goal(1, in_tower((block,13),(block,18)), false, true)
final_goal(1, in_tower((block,13),(block,2)), false, true)
final_goal(1, in_tower((block,13),(block,3)), false, true)
final_goal(1, in_tower((block,13),(block,4)), false, true)
final_goal(1, in_tower((block,13),(block,5)), false, true)
final_goal(1, in_tower((block,13),(block,6)), false, true)
final_goal(1, in_tower((block,13),(block,7)), false, true)
final_goal(1, in_tower((block,13),(block,8)), false, true)
final_goal(1, in_tower((block,13),(block,9)), false, true)
final_goal(1, in_tower((block,14),(block,1)), false, true)
final_goal(1, in_tower((block,14),(block,10)), false, true)
final_goal(1, in_tower((block,14),(block,11)), false, true)
final_goal(1, in_tower((block,14),(block,12)), false, true)
final_goal(1, in_tower((block,14),(block,13)), false, true)
final_goal(1, in_tower((block,14),(block,14)), false, true)
final_goal(1, in_tower((block,14),(block,15)), false, true)
final_goal(1, in_tower((block,14),(block,16)), false, true)
final_goal(1, in_tower((block,14),(block,17)), false, true)
final_goal(1, in_tower((block,14),(block,18)), false, true)
final_goal(1, in_tower((block,14),(block,2)), false, true)
final_goal(1, in_tower((block,14),(block,3)), false, true)
final_goal(1, in_tower((block,14),(block,4)), false, true)
final_goal(1, in_tower((block,14),(block,5)), false, true)
final_goal(1, in_tower((block,14),(block,6)), false, true)
final_goal(1, in_tower((block,14),(block,7)), false, true)
final_goal(1, in_tower((block,14),(block,8)), false, true)
final_goal(1, in_tower((block,14),(block,9)), false, true)
final_goal(1, in_tower((block,15),(block,1)), false, true)
final_goal(1, in_tower((block,15),(block,10)), false, true)
final_goal(1, in_tower((block,15),(block,11)), false, true)
final_goal(1, in_tower((block,15),(block,12)), false, true)
final_goal(1, in_tower((block,15),(block,13)), true, true)
final_goal(1, in_tower((block,15),(block,14)), true, true)
final_goal(1, in_tower((block,15),(block,15)), true, true)
final_goal(1, in_tower((block,15),(block,16)), false, true)
final_goal(1, in_tower((block,15),(block,17)), false, true)
final_goal(1, in_tower((block,15),(block,18)), false, true)
final_goal(1, in_tower((block,15),(block,2)), false, true)
final_goal(1, in_tower((block,15),(block,3)), false, true)
final_goal(1, in_tower((block,15),(block,4)), false, true)
final_goal(1, in_tower((block,15),(block,5)), false, true)
final_goal(1, in_tower((block,15),(block,6)), false, true)
final_goal(1, in_tower((block,15),(block,7)), false, true)
final_goal(1, in_tower((block,15),(block,8)), false, true)
final_goal(1, in_tower((block,15),(block,9)), false, true)
final_goal(1, in_tower((block,16),(block,1)), false, true)
final_goal(1, in_tower((block,16),(block,10)), false, true)
final_goal(1, in_tower((block,16),(block,11)), false, true)
final_goal(1, in_tower((block,16),(block,12)), false, true)
final_goal(1, in_tower((block,16),(block,13)), false, true)
final_goal(1, in_tower((block,16),(block,14)), false, true)
final_goal(1, in_tower((block,16),(block,15)), false, true)
final_goal(1, in_tower((block,16),(block,16)), false, true)
final_goal(1, in_tower((block,16),(block,17)), false, true)
final_goal(1, in_tower((block,16),(block,18)), false, true)
final_goal(1, in_tower((block,16),(block,2)), false, true)
final_goal(1, in_tower((block,16),(block,3)), false, true)
final_goal(1, in_tower((block,16),(block,4)), false, true)
final_goal(1, in_tower((block,16),(block,5)), false, true)
final_goal(1, in_tower((block,16),(block,6)), false, true)
final_goal(1, in_tower((block,16),(block,7)), false, true)
final_goal(1, in_tower((block,16),(block,8)), false, true)
final_goal(1, in_tower((block,16),(block,9)), false, true)
final_goal(1, in_tower((block,17),(block,1)), false, true)
final_goal(1, in_tower((block,17),(block,10)), false, true)
final_goal(1, in_tower((block,17),(block,11)), false, true)
final_goal(1, in_tower((block,17),(block,12)), false, true)
final_goal(1, in_tower((block,17),(block,13)), false, true)
final_goal(1, in_tower((block,17),(block,14)), false, true)
final_goal(1, in_tower((block,17),(block,15)), false, true)
final_goal(1, in_tower((block,17),(block,16)), false, true)
final_goal(1, in_tower((block,17),(block,17)), false, true)
final_goal(1, in_tower((block,17),(block,18)), false, true)
final_goal(1, in_tower((block,17),(block,2)), false, true)
final_goal(1, in_tower((block,17),(block,3)), false, true)
final_goal(1, in_tower((block,17),(block,4)), false, true)
final_goal(1, in_tower((block,17),(block,5)), false, true)
final_goal(1, in_tower((block,17),(block,6)), false, true)
final_goal(1, in_tower((block,17),(block,7)), false, true)
final_goal(1, in_tower((block,17),(block,8)), false, true)
final_goal(1, in_tower((block,17),(block,9)), false, true)
final_goal(1, in_tower((block,18),(block,1)), false, true)
final_goal(1, in_tower((block,18),(block,10)), false, true)
final_goal(1, in_tower((block,18),(block,11)), false, true)
final_goal(1, in_tower((block,18),(block,12)), false, true)
final_goal(1, in_tower((block,18),(block,13)), false, true)
final_goal(1, in_tower((block,18),(block,14)), false, true)
final_goal(1, in_tower((block,18),(block,15)), false, true)
final_goal(1, in_tower((block,18),(block,16)), true, true)
final_goal(1, in_tower((block,18),(block,17)), true, true)
final_goal(1, in_tower((block,18),(block,18)), true, true)
final_goal(1, in_tower((block,18),(block,2)), false, true)
final_goal(1, in_tower((block,18),(block,3)), false, true)
final_goal(1, in_tower((block,18),(block,4)), false, true)
final_goal(1, in_tower((block,18),(block,5)), false, true)
final_goal(1, in_tower((block,18),(block,6)), false, true)
final_goal(1, in_tower((block,18),(block,7)), false, true)
final_goal(1, in_tower((block,18),(block,8)), false, true)
final_goal(1, in_tower((block,18),(block,9)), false, true)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,10)), false, true)
final_goal(1, in_tower((block,2),(block,11)), false, true)
final_goal(1, in_tower((block,2),(block,12)), false, true)
final_goal(1, in_tower((block,2),(block,13)), false, true)
final_goal(1, in_tower((block,2),(block,14)), false, true)
final_goal(1, in_tower((block,2),(block,15)), false, true)
final_goal(1, in_tower((block,2),(block,16)), false, true)
final_goal(1, in_tower((block,2),(block,17)), false, true)
final_goal(1, in_tower((block,2),(block,18)), false, true)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,7)), false, true)
final_goal(1, in_tower((block,2),(block,8)), false, true)
final_goal(1, in_tower((block,2),(block,9)), false, true)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,10)), false, true)
final_goal(1, in_tower((block,3),(block,11)), false, true)
final_goal(1, in_tower((block,3),(block,12)), false, true)
final_goal(1, in_tower((block,3),(block,13)), false, true)
final_goal(1, in_tower((block,3),(block,14)), false, true)
final_goal(1, in_tower((block,3),(block,15)), false, true)
final_goal(1, in_tower((block,3),(block,16)), false, true)
final_goal(1, in_tower((block,3),(block,17)), false, true)
final_goal(1, in_tower((block,3),(block,18)), false, true)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,7)), false, true)
final_goal(1, in_tower((block,3),(block,8)), false, true)
final_goal(1, in_tower((block,3),(block,9)), false, true)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,10)), false, true)
final_goal(1, in_tower((block,4),(block,11)), false, true)
final_goal(1, in_tower((block,4),(block,12)), false, true)
final_goal(1, in_tower((block,4),(block,13)), false, true)
final_goal(1, in_tower((block,4),(block,14)), false, true)
final_goal(1, in_tower((block,4),(block,15)), false, true)
final_goal(1, in_tower((block,4),(block,16)), false, true)
final_goal(1, in_tower((block,4),(block,17)), false, true)
final_goal(1, in_tower((block,4),(block,18)), false, true)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,7)), false, true)
final_goal(1, in_tower((block,4),(block,8)), false, true)
final_goal(1, in_tower((block,4),(block,9)), false, true)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,10)), false, true)
final_goal(1, in_tower((block,5),(block,11)), false, true)
final_goal(1, in_tower((block,5),(block,12)), false, true)
final_goal(1, in_tower((block,5),(block,13)), false, true)
final_goal(1, in_tower((block,5),(block,14)), false, true)
final_goal(1, in_tower((block,5),(block,15)), false, true)
final_goal(1, in_tower((block,5),(block,16)), false, true)
final_goal(1, in_tower((block,5),(block,17)), false, true)
final_goal(1, in_tower((block,5),(block,18)), false, true)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,7)), false, true)
final_goal(1, in_tower((block,5),(block,8)), false, true)
final_goal(1, in_tower((block,5),(block,9)), false, true)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,10)), false, true)
final_goal(1, in_tower((block,6),(block,11)), false, true)
final_goal(1, in_tower((block,6),(block,12)), false, true)
final_goal(1, in_tower((block,6),(block,13)), false, true)
final_goal(1, in_tower((block,6),(block,14)), false, true)
final_goal(1, in_tower((block,6),(block,15)), false, true)
final_goal(1, in_tower((block,6),(block,16)), false, true)
final_goal(1, in_tower((block,6),(block,17)), false, true)
final_goal(1, in_tower((block,6),(block,18)), false, true)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, in_tower((block,6),(block,7)), false, true)
final_goal(1, in_tower((block,6),(block,8)), false, true)
final_goal(1, in_tower((block,6),(block,9)), false, true)
final_goal(1, in_tower((block,7),(block,1)), false, true)
final_goal(1, in_tower((block,7),(block,10)), false, true)
final_goal(1, in_tower((block,7),(block,11)), false, true)
final_goal(1, in_tower((block,7),(block,12)), false, true)
final_goal(1, in_tower((block,7),(block,13)), false, true)
final_goal(1, in_tower((block,7),(block,14)), false, true)
final_goal(1, in_tower((block,7),(block,15)), false, true)
final_goal(1, in_tower((block,7),(block,16)), false, true)
final_goal(1, in_tower((block,7),(block,17)), false, true)
final_goal(1, in_tower((block,7),(block,18)), false, true)
final_goal(1, in_tower((block,7),(block,2)), false, true)
final_goal(1, in_tower((block,7),(block,3)), false, true)
final_goal(1, in_tower((block,7),(block,4)), false, true)
final_goal(1, in_tower((block,7),(block,5)), false, true)
final_goal(1, in_tower((block,7),(block,6)), false, true)
final_goal(1, in_tower((block,7),(block,7)), false, true)
final_goal(1, in_tower((block,7),(block,8)), false, true)
final_goal(1, in_tower((block,7),(block,9)), false, true)
final_goal(1, in_tower((block,8),(block,1)), false, true)
final_goal(1, in_tower((block,8),(block,10)), false, true)
final_goal(1, in_tower((block,8),(block,11)), false, true)
final_goal(1, in_tower((block,8),(block,12)), false, true)
final_goal(1, in_tower((block,8),(block,13)), false, true)
final_goal(1, in_tower((block,8),(block,14)), false, true)
final_goal(1, in_tower((block,8),(block,15)), false, true)
final_goal(1, in_tower((block,8),(block,16)), false, true)
final_goal(1, in_tower((block,8),(block,17)), false, true)
final_goal(1, in_tower((block,8),(block,18)), false, true)
final_goal(1, in_tower((block,8),(block,2)), false, true)
final_goal(1, in_tower((block,8),(block,3)), false, true)
final_goal(1, in_tower((block,8),(block,4)), false, true)
final_goal(1, in_tower((block,8),(block,5)), false, true)
final_goal(1, in_tower((block,8),(block,6)), false, true)
final_goal(1, in_tower((block,8),(block,7)), false, true)
final_goal(1, in_tower((block,8),(block,8)), false, true)
final_goal(1, in_tower((block,8),(block,9)), false, true)
final_goal(1, in_tower((block,9),(block,1)), false, true)
final_goal(1, in_tower((block,9),(block,10)), false, true)
final_goal(1, in_tower((block,9),(block,11)), false, true)
final_goal(1, in_tower((block,9),(block,12)), false, true)
final_goal(1, in_tower((block,9),(block,13)), false, true)
final_goal(1, in_tower((block,9),(block,14)), false, true)
final_goal(1, in_tower((block,9),(block,15)), false, true)
final_goal(1, in_tower((block,9),(block,16)), false, true)
final_goal(1, in_tower((block,9),(block,17)), false, true)
final_goal(1, in_tower((block,9),(block,18)), false, true)
final_goal(1, in_tower((block,9),(block,2)), false, true)
final_goal(1, in_tower((block,9),(block,3)), false, true)
final_goal(1, in_tower((block,9),(block,4)), false, true)
final_goal(1, in_tower((block,9),(block,5)), false, true)
final_goal(1, in_tower((block,9),(block,6)), false, true)
final_goal(1, in_tower((block,9),(block,7)), true, true)
final_goal(1, in_tower((block,9),(block,8)), true, true)
final_goal(1, in_tower((block,9),(block,9)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,10)), (block,11), true)
final_goal(1, on((block,11)), (block,12), true)
final_goal(1, on((block,12)), puzzle_room_2_table_left, true)
final_goal(1, on((block,13)), (block,14), true)
final_goal(1, on((block,14)), (block,15), true)
final_goal(1, on((block,15)), puzzle_room_2_table_right, true)
final_goal(1, on((block,16)), (block,17), true)
final_goal(1, on((block,17)), (block,18), true)
final_goal(1, on((block,18)), puzzle_room_2_table_middle, true)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,3)), puzzle_room_1_table_left, true)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,6)), puzzle_room_1_table_right, true)
final_goal(1, on((block,7)), (block,8), true)
final_goal(1, on((block,8)), (block,9), true)
final_goal(1, on((block,9)), puzzle_room_1_table_middle, true)
final_goal(1, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(1, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(1, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(1, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(1, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(1, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(1, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,9),puzzle_room_2_table), false, true)

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 1         
      ================================================      

final_goal(1, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(1, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(1, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(1, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,10)), true, false)
final_goal(1, in_tower((block,1),(block,11)), true, false)
final_goal(1, in_tower((block,1),(block,12)), true, false)
final_goal(1, in_tower((block,1),(block,13)), true, false)
final_goal(1, in_tower((block,1),(block,14)), true, false)
final_goal(1, in_tower((block,1),(block,15)), true, false)
final_goal(1, in_tower((block,1),(block,16)), true, false)
final_goal(1, in_tower((block,1),(block,17)), true, false)
final_goal(1, in_tower((block,1),(block,18)), true, false)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,1),(block,7)), true, false)
final_goal(1, in_tower((block,1),(block,8)), true, false)
final_goal(1, in_tower((block,1),(block,9)), true, false)
final_goal(1, in_tower((block,10),(block,1)), true, false)
final_goal(1, in_tower((block,10),(block,10)), true, false)
final_goal(1, in_tower((block,10),(block,11)), true, false)
final_goal(1, in_tower((block,10),(block,12)), true, false)
final_goal(1, in_tower((block,10),(block,13)), true, false)
final_goal(1, in_tower((block,10),(block,14)), true, false)
final_goal(1, in_tower((block,10),(block,15)), true, false)
final_goal(1, in_tower((block,10),(block,16)), true, false)
final_goal(1, in_tower((block,10),(block,17)), true, false)
final_goal(1, in_tower((block,10),(block,18)), true, false)
final_goal(1, in_tower((block,10),(block,2)), true, false)
final_goal(1, in_tower((block,10),(block,3)), true, false)
final_goal(1, in_tower((block,10),(block,4)), true, false)
final_goal(1, in_tower((block,10),(block,5)), true, false)
final_goal(1, in_tower((block,10),(block,6)), true, false)
final_goal(1, in_tower((block,10),(block,7)), true, false)
final_goal(1, in_tower((block,10),(block,8)), true, false)
final_goal(1, in_tower((block,10),(block,9)), true, false)
final_goal(1, in_tower((block,11),(block,1)), true, false)
final_goal(1, in_tower((block,11),(block,10)), true, false)
final_goal(1, in_tower((block,11),(block,11)), true, false)
final_goal(1, in_tower((block,11),(block,12)), true, false)
final_goal(1, in_tower((block,11),(block,13)), true, false)
final_goal(1, in_tower((block,11),(block,14)), true, false)
final_goal(1, in_tower((block,11),(block,15)), true, false)
final_goal(1, in_tower((block,11),(block,16)), true, false)
final_goal(1, in_tower((block,11),(block,17)), true, false)
final_goal(1, in_tower((block,11),(block,18)), true, false)
final_goal(1, in_tower((block,11),(block,2)), true, false)
final_goal(1, in_tower((block,11),(block,3)), true, false)
final_goal(1, in_tower((block,11),(block,4)), true, false)
final_goal(1, in_tower((block,11),(block,5)), true, false)
final_goal(1, in_tower((block,11),(block,6)), true, false)
final_goal(1, in_tower((block,11),(block,7)), true, false)
final_goal(1, in_tower((block,11),(block,8)), true, false)
final_goal(1, in_tower((block,11),(block,9)), true, false)
final_goal(1, in_tower((block,12),(block,1)), true, false)
final_goal(1, in_tower((block,12),(block,10)), false, false)
final_goal(1, in_tower((block,12),(block,11)), false, false)
final_goal(1, in_tower((block,12),(block,12)), false, false)
final_goal(1, in_tower((block,12),(block,13)), true, false)
final_goal(1, in_tower((block,12),(block,14)), true, false)
final_goal(1, in_tower((block,12),(block,15)), true, false)
final_goal(1, in_tower((block,12),(block,16)), true, false)
final_goal(1, in_tower((block,12),(block,17)), true, false)
final_goal(1, in_tower((block,12),(block,18)), true, false)
final_goal(1, in_tower((block,12),(block,2)), true, false)
final_goal(1, in_tower((block,12),(block,3)), true, false)
final_goal(1, in_tower((block,12),(block,4)), true, false)
final_goal(1, in_tower((block,12),(block,5)), true, false)
final_goal(1, in_tower((block,12),(block,6)), true, false)
final_goal(1, in_tower((block,12),(block,7)), true, false)
final_goal(1, in_tower((block,12),(block,8)), true, false)
final_goal(1, in_tower((block,12),(block,9)), true, false)
final_goal(1, in_tower((block,13),(block,1)), true, false)
final_goal(1, in_tower((block,13),(block,10)), true, false)
final_goal(1, in_tower((block,13),(block,11)), true, false)
final_goal(1, in_tower((block,13),(block,12)), true, false)
final_goal(1, in_tower((block,13),(block,13)), true, false)
final_goal(1, in_tower((block,13),(block,14)), true, false)
final_goal(1, in_tower((block,13),(block,15)), true, false)
final_goal(1, in_tower((block,13),(block,16)), true, false)
final_goal(1, in_tower((block,13),(block,17)), true, false)
final_goal(1, in_tower((block,13),(block,18)), true, false)
final_goal(1, in_tower((block,13),(block,2)), true, false)
final_goal(1, in_tower((block,13),(block,3)), true, false)
final_goal(1, in_tower((block,13),(block,4)), true, false)
final_goal(1, in_tower((block,13),(block,5)), true, false)
final_goal(1, in_tower((block,13),(block,6)), true, false)
final_goal(1, in_tower((block,13),(block,7)), true, false)
final_goal(1, in_tower((block,13),(block,8)), true, false)
final_goal(1, in_tower((block,13),(block,9)), true, false)
final_goal(1, in_tower((block,14),(block,1)), true, false)
final_goal(1, in_tower((block,14),(block,10)), true, false)
final_goal(1, in_tower((block,14),(block,11)), true, false)
final_goal(1, in_tower((block,14),(block,12)), true, false)
final_goal(1, in_tower((block,14),(block,13)), true, false)
final_goal(1, in_tower((block,14),(block,14)), true, false)
final_goal(1, in_tower((block,14),(block,15)), true, false)
final_goal(1, in_tower((block,14),(block,16)), true, false)
final_goal(1, in_tower((block,14),(block,17)), true, false)
final_goal(1, in_tower((block,14),(block,18)), true, false)
final_goal(1, in_tower((block,14),(block,2)), true, false)
final_goal(1, in_tower((block,14),(block,3)), true, false)
final_goal(1, in_tower((block,14),(block,4)), true, false)
final_goal(1, in_tower((block,14),(block,5)), true, false)
final_goal(1, in_tower((block,14),(block,6)), true, false)
final_goal(1, in_tower((block,14),(block,7)), true, false)
final_goal(1, in_tower((block,14),(block,8)), true, false)
final_goal(1, in_tower((block,14),(block,9)), true, false)
final_goal(1, in_tower((block,15),(block,1)), true, false)
final_goal(1, in_tower((block,15),(block,10)), true, false)
final_goal(1, in_tower((block,15),(block,11)), true, false)
final_goal(1, in_tower((block,15),(block,12)), true, false)
final_goal(1, in_tower((block,15),(block,13)), false, false)
final_goal(1, in_tower((block,15),(block,14)), false, false)
final_goal(1, in_tower((block,15),(block,15)), false, false)
final_goal(1, in_tower((block,15),(block,16)), true, false)
final_goal(1, in_tower((block,15),(block,17)), true, false)
final_goal(1, in_tower((block,15),(block,18)), true, false)
final_goal(1, in_tower((block,15),(block,2)), true, false)
final_goal(1, in_tower((block,15),(block,3)), true, false)
final_goal(1, in_tower((block,15),(block,4)), true, false)
final_goal(1, in_tower((block,15),(block,5)), true, false)
final_goal(1, in_tower((block,15),(block,6)), true, false)
final_goal(1, in_tower((block,15),(block,7)), true, false)
final_goal(1, in_tower((block,15),(block,8)), true, false)
final_goal(1, in_tower((block,15),(block,9)), true, false)
final_goal(1, in_tower((block,16),(block,1)), true, false)
final_goal(1, in_tower((block,16),(block,10)), true, false)
final_goal(1, in_tower((block,16),(block,11)), true, false)
final_goal(1, in_tower((block,16),(block,12)), true, false)
final_goal(1, in_tower((block,16),(block,13)), true, false)
final_goal(1, in_tower((block,16),(block,14)), true, false)
final_goal(1, in_tower((block,16),(block,15)), true, false)
final_goal(1, in_tower((block,16),(block,16)), true, false)
final_goal(1, in_tower((block,16),(block,17)), true, false)
final_goal(1, in_tower((block,16),(block,18)), true, false)
final_goal(1, in_tower((block,16),(block,2)), true, false)
final_goal(1, in_tower((block,16),(block,3)), true, false)
final_goal(1, in_tower((block,16),(block,4)), true, false)
final_goal(1, in_tower((block,16),(block,5)), true, false)
final_goal(1, in_tower((block,16),(block,6)), true, false)
final_goal(1, in_tower((block,16),(block,7)), true, false)
final_goal(1, in_tower((block,16),(block,8)), true, false)
final_goal(1, in_tower((block,16),(block,9)), true, false)
final_goal(1, in_tower((block,17),(block,1)), true, false)
final_goal(1, in_tower((block,17),(block,10)), true, false)
final_goal(1, in_tower((block,17),(block,11)), true, false)
final_goal(1, in_tower((block,17),(block,12)), true, false)
final_goal(1, in_tower((block,17),(block,13)), true, false)
final_goal(1, in_tower((block,17),(block,14)), true, false)
final_goal(1, in_tower((block,17),(block,15)), true, false)
final_goal(1, in_tower((block,17),(block,16)), true, false)
final_goal(1, in_tower((block,17),(block,17)), true, false)
final_goal(1, in_tower((block,17),(block,18)), true, false)
final_goal(1, in_tower((block,17),(block,2)), true, false)
final_goal(1, in_tower((block,17),(block,3)), true, false)
final_goal(1, in_tower((block,17),(block,4)), true, false)
final_goal(1, in_tower((block,17),(block,5)), true, false)
final_goal(1, in_tower((block,17),(block,6)), true, false)
final_goal(1, in_tower((block,17),(block,7)), true, false)
final_goal(1, in_tower((block,17),(block,8)), true, false)
final_goal(1, in_tower((block,17),(block,9)), true, false)
final_goal(1, in_tower((block,18),(block,1)), true, false)
final_goal(1, in_tower((block,18),(block,10)), true, false)
final_goal(1, in_tower((block,18),(block,11)), true, false)
final_goal(1, in_tower((block,18),(block,12)), true, false)
final_goal(1, in_tower((block,18),(block,13)), true, false)
final_goal(1, in_tower((block,18),(block,14)), true, false)
final_goal(1, in_tower((block,18),(block,15)), true, false)
final_goal(1, in_tower((block,18),(block,16)), false, false)
final_goal(1, in_tower((block,18),(block,17)), false, false)
final_goal(1, in_tower((block,18),(block,18)), false, false)
final_goal(1, in_tower((block,18),(block,2)), true, false)
final_goal(1, in_tower((block,18),(block,3)), true, false)
final_goal(1, in_tower((block,18),(block,4)), true, false)
final_goal(1, in_tower((block,18),(block,5)), true, false)
final_goal(1, in_tower((block,18),(block,6)), true, false)
final_goal(1, in_tower((block,18),(block,7)), true, false)
final_goal(1, in_tower((block,18),(block,8)), true, false)
final_goal(1, in_tower((block,18),(block,9)), true, false)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,10)), true, false)
final_goal(1, in_tower((block,2),(block,11)), true, false)
final_goal(1, in_tower((block,2),(block,12)), true, false)
final_goal(1, in_tower((block,2),(block,13)), true, false)
final_goal(1, in_tower((block,2),(block,14)), true, false)
final_goal(1, in_tower((block,2),(block,15)), true, false)
final_goal(1, in_tower((block,2),(block,16)), true, false)
final_goal(1, in_tower((block,2),(block,17)), true, false)
final_goal(1, in_tower((block,2),(block,18)), true, false)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,7)), true, false)
final_goal(1, in_tower((block,2),(block,8)), true, false)
final_goal(1, in_tower((block,2),(block,9)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,10)), true, false)
final_goal(1, in_tower((block,3),(block,11)), true, false)
final_goal(1, in_tower((block,3),(block,12)), true, false)
final_goal(1, in_tower((block,3),(block,13)), true, false)
final_goal(1, in_tower((block,3),(block,14)), true, false)
final_goal(1, in_tower((block,3),(block,15)), true, false)
final_goal(1, in_tower((block,3),(block,16)), true, false)
final_goal(1, in_tower((block,3),(block,17)), true, false)
final_goal(1, in_tower((block,3),(block,18)), true, false)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,7)), true, false)
final_goal(1, in_tower((block,3),(block,8)), true, false)
final_goal(1, in_tower((block,3),(block,9)), true, false)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,10)), true, false)
final_goal(1, in_tower((block,4),(block,11)), true, false)
final_goal(1, in_tower((block,4),(block,12)), true, false)
final_goal(1, in_tower((block,4),(block,13)), true, false)
final_goal(1, in_tower((block,4),(block,14)), true, false)
final_goal(1, in_tower((block,4),(block,15)), true, false)
final_goal(1, in_tower((block,4),(block,16)), true, false)
final_goal(1, in_tower((block,4),(block,17)), true, false)
final_goal(1, in_tower((block,4),(block,18)), true, false)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,7)), true, false)
final_goal(1, in_tower((block,4),(block,8)), true, false)
final_goal(1, in_tower((block,4),(block,9)), true, false)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,10)), true, false)
final_goal(1, in_tower((block,5),(block,11)), true, false)
final_goal(1, in_tower((block,5),(block,12)), true, false)
final_goal(1, in_tower((block,5),(block,13)), true, false)
final_goal(1, in_tower((block,5),(block,14)), true, false)
final_goal(1, in_tower((block,5),(block,15)), true, false)
final_goal(1, in_tower((block,5),(block,16)), true, false)
final_goal(1, in_tower((block,5),(block,17)), true, false)
final_goal(1, in_tower((block,5),(block,18)), true, false)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,7)), true, false)
final_goal(1, in_tower((block,5),(block,8)), true, false)
final_goal(1, in_tower((block,5),(block,9)), true, false)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,10)), true, false)
final_goal(1, in_tower((block,6),(block,11)), true, false)
final_goal(1, in_tower((block,6),(block,12)), true, false)
final_goal(1, in_tower((block,6),(block,13)), true, false)
final_goal(1, in_tower((block,6),(block,14)), true, false)
final_goal(1, in_tower((block,6),(block,15)), true, false)
final_goal(1, in_tower((block,6),(block,16)), true, false)
final_goal(1, in_tower((block,6),(block,17)), true, false)
final_goal(1, in_tower((block,6),(block,18)), true, false)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,7)), true, false)
final_goal(1, in_tower((block,6),(block,8)), true, false)
final_goal(1, in_tower((block,6),(block,9)), true, false)
final_goal(1, in_tower((block,7),(block,1)), true, false)
final_goal(1, in_tower((block,7),(block,10)), true, false)
final_goal(1, in_tower((block,7),(block,11)), true, false)
final_goal(1, in_tower((block,7),(block,12)), true, false)
final_goal(1, in_tower((block,7),(block,13)), true, false)
final_goal(1, in_tower((block,7),(block,14)), true, false)
final_goal(1, in_tower((block,7),(block,15)), true, false)
final_goal(1, in_tower((block,7),(block,16)), true, false)
final_goal(1, in_tower((block,7),(block,17)), true, false)
final_goal(1, in_tower((block,7),(block,18)), true, false)
final_goal(1, in_tower((block,7),(block,2)), true, false)
final_goal(1, in_tower((block,7),(block,3)), true, false)
final_goal(1, in_tower((block,7),(block,4)), true, false)
final_goal(1, in_tower((block,7),(block,5)), true, false)
final_goal(1, in_tower((block,7),(block,6)), true, false)
final_goal(1, in_tower((block,7),(block,7)), true, false)
final_goal(1, in_tower((block,7),(block,8)), true, false)
final_goal(1, in_tower((block,7),(block,9)), true, false)
final_goal(1, in_tower((block,8),(block,1)), true, false)
final_goal(1, in_tower((block,8),(block,10)), true, false)
final_goal(1, in_tower((block,8),(block,11)), true, false)
final_goal(1, in_tower((block,8),(block,12)), true, false)
final_goal(1, in_tower((block,8),(block,13)), true, false)
final_goal(1, in_tower((block,8),(block,14)), true, false)
final_goal(1, in_tower((block,8),(block,15)), true, false)
final_goal(1, in_tower((block,8),(block,16)), true, false)
final_goal(1, in_tower((block,8),(block,17)), true, false)
final_goal(1, in_tower((block,8),(block,18)), true, false)
final_goal(1, in_tower((block,8),(block,2)), true, false)
final_goal(1, in_tower((block,8),(block,3)), true, false)
final_goal(1, in_tower((block,8),(block,4)), true, false)
final_goal(1, in_tower((block,8),(block,5)), true, false)
final_goal(1, in_tower((block,8),(block,6)), true, false)
final_goal(1, in_tower((block,8),(block,7)), true, false)
final_goal(1, in_tower((block,8),(block,8)), true, false)
final_goal(1, in_tower((block,8),(block,9)), true, false)
final_goal(1, in_tower((block,9),(block,1)), true, false)
final_goal(1, in_tower((block,9),(block,10)), true, false)
final_goal(1, in_tower((block,9),(block,11)), true, false)
final_goal(1, in_tower((block,9),(block,12)), true, false)
final_goal(1, in_tower((block,9),(block,13)), true, false)
final_goal(1, in_tower((block,9),(block,14)), true, false)
final_goal(1, in_tower((block,9),(block,15)), true, false)
final_goal(1, in_tower((block,9),(block,16)), true, false)
final_goal(1, in_tower((block,9),(block,17)), true, false)
final_goal(1, in_tower((block,9),(block,18)), true, false)
final_goal(1, in_tower((block,9),(block,2)), true, false)
final_goal(1, in_tower((block,9),(block,3)), true, false)
final_goal(1, in_tower((block,9),(block,4)), true, false)
final_goal(1, in_tower((block,9),(block,5)), true, false)
final_goal(1, in_tower((block,9),(block,6)), true, false)
final_goal(1, in_tower((block,9),(block,7)), false, false)
final_goal(1, in_tower((block,9),(block,8)), false, false)
final_goal(1, in_tower((block,9),(block,9)), false, false)
final_goal(1, on((block,1)), (block,10), false)
final_goal(1, on((block,1)), (block,11), false)
final_goal(1, on((block,1)), (block,12), false)
final_goal(1, on((block,1)), (block,13), false)
final_goal(1, on((block,1)), (block,14), false)
final_goal(1, on((block,1)), (block,15), false)
final_goal(1, on((block,1)), (block,16), false)
final_goal(1, on((block,1)), (block,17), false)
final_goal(1, on((block,1)), (block,18), false)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), (block,7), false)
final_goal(1, on((block,1)), (block,8), false)
final_goal(1, on((block,1)), (block,9), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_1_table_left, false)
final_goal(1, on((block,1)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,1)), puzzle_room_1_table_right, false)
final_goal(1, on((block,1)), puzzle_room_2_table_left, false)
final_goal(1, on((block,1)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,1)), puzzle_room_2_table_right, false)
final_goal(1, on((block,10)), (block,1), false)
final_goal(1, on((block,10)), (block,12), false)
final_goal(1, on((block,10)), (block,13), false)
final_goal(1, on((block,10)), (block,14), false)
final_goal(1, on((block,10)), (block,15), false)
final_goal(1, on((block,10)), (block,16), false)
final_goal(1, on((block,10)), (block,17), false)
final_goal(1, on((block,10)), (block,18), false)
final_goal(1, on((block,10)), (block,2), false)
final_goal(1, on((block,10)), (block,3), false)
final_goal(1, on((block,10)), (block,4), false)
final_goal(1, on((block,10)), (block,5), false)
final_goal(1, on((block,10)), (block,6), false)
final_goal(1, on((block,10)), (block,7), false)
final_goal(1, on((block,10)), (block,8), false)
final_goal(1, on((block,10)), (block,9), false)
final_goal(1, on((block,10)), nothing, false)
final_goal(1, on((block,10)), puzzle_room_1_table_left, false)
final_goal(1, on((block,10)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,10)), puzzle_room_1_table_right, false)
final_goal(1, on((block,10)), puzzle_room_2_table_left, false)
final_goal(1, on((block,10)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,10)), puzzle_room_2_table_right, false)
final_goal(1, on((block,11)), (block,1), false)
final_goal(1, on((block,11)), (block,10), false)
final_goal(1, on((block,11)), (block,13), false)
final_goal(1, on((block,11)), (block,14), false)
final_goal(1, on((block,11)), (block,15), false)
final_goal(1, on((block,11)), (block,16), false)
final_goal(1, on((block,11)), (block,17), false)
final_goal(1, on((block,11)), (block,18), false)
final_goal(1, on((block,11)), (block,2), false)
final_goal(1, on((block,11)), (block,3), false)
final_goal(1, on((block,11)), (block,4), false)
final_goal(1, on((block,11)), (block,5), false)
final_goal(1, on((block,11)), (block,6), false)
final_goal(1, on((block,11)), (block,7), false)
final_goal(1, on((block,11)), (block,8), false)
final_goal(1, on((block,11)), (block,9), false)
final_goal(1, on((block,11)), nothing, false)
final_goal(1, on((block,11)), puzzle_room_1_table_left, false)
final_goal(1, on((block,11)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,11)), puzzle_room_1_table_right, false)
final_goal(1, on((block,11)), puzzle_room_2_table_left, false)
final_goal(1, on((block,11)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,11)), puzzle_room_2_table_right, false)
final_goal(1, on((block,12)), (block,1), false)
final_goal(1, on((block,12)), (block,10), false)
final_goal(1, on((block,12)), (block,11), false)
final_goal(1, on((block,12)), (block,13), false)
final_goal(1, on((block,12)), (block,14), false)
final_goal(1, on((block,12)), (block,15), false)
final_goal(1, on((block,12)), (block,16), false)
final_goal(1, on((block,12)), (block,17), false)
final_goal(1, on((block,12)), (block,18), false)
final_goal(1, on((block,12)), (block,2), false)
final_goal(1, on((block,12)), (block,3), false)
final_goal(1, on((block,12)), (block,4), false)
final_goal(1, on((block,12)), (block,5), false)
final_goal(1, on((block,12)), (block,6), false)
final_goal(1, on((block,12)), (block,7), false)
final_goal(1, on((block,12)), (block,8), false)
final_goal(1, on((block,12)), (block,9), false)
final_goal(1, on((block,12)), nothing, false)
final_goal(1, on((block,12)), puzzle_room_1_table_left, false)
final_goal(1, on((block,12)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,12)), puzzle_room_1_table_right, false)
final_goal(1, on((block,12)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,12)), puzzle_room_2_table_right, false)
final_goal(1, on((block,13)), (block,1), false)
final_goal(1, on((block,13)), (block,10), false)
final_goal(1, on((block,13)), (block,11), false)
final_goal(1, on((block,13)), (block,12), false)
final_goal(1, on((block,13)), (block,15), false)
final_goal(1, on((block,13)), (block,16), false)
final_goal(1, on((block,13)), (block,17), false)
final_goal(1, on((block,13)), (block,18), false)
final_goal(1, on((block,13)), (block,2), false)
final_goal(1, on((block,13)), (block,3), false)
final_goal(1, on((block,13)), (block,4), false)
final_goal(1, on((block,13)), (block,5), false)
final_goal(1, on((block,13)), (block,6), false)
final_goal(1, on((block,13)), (block,7), false)
final_goal(1, on((block,13)), (block,8), false)
final_goal(1, on((block,13)), (block,9), false)
final_goal(1, on((block,13)), nothing, false)
final_goal(1, on((block,13)), puzzle_room_1_table_left, false)
final_goal(1, on((block,13)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,13)), puzzle_room_1_table_right, false)
final_goal(1, on((block,13)), puzzle_room_2_table_left, false)
final_goal(1, on((block,13)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,13)), puzzle_room_2_table_right, false)
final_goal(1, on((block,14)), (block,1), false)
final_goal(1, on((block,14)), (block,10), false)
final_goal(1, on((block,14)), (block,11), false)
final_goal(1, on((block,14)), (block,12), false)
final_goal(1, on((block,14)), (block,13), false)
final_goal(1, on((block,14)), (block,16), false)
final_goal(1, on((block,14)), (block,17), false)
final_goal(1, on((block,14)), (block,18), false)
final_goal(1, on((block,14)), (block,2), false)
final_goal(1, on((block,14)), (block,3), false)
final_goal(1, on((block,14)), (block,4), false)
final_goal(1, on((block,14)), (block,5), false)
final_goal(1, on((block,14)), (block,6), false)
final_goal(1, on((block,14)), (block,7), false)
final_goal(1, on((block,14)), (block,8), false)
final_goal(1, on((block,14)), (block,9), false)
final_goal(1, on((block,14)), nothing, false)
final_goal(1, on((block,14)), puzzle_room_1_table_left, false)
final_goal(1, on((block,14)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,14)), puzzle_room_1_table_right, false)
final_goal(1, on((block,14)), puzzle_room_2_table_left, false)
final_goal(1, on((block,14)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,14)), puzzle_room_2_table_right, false)
final_goal(1, on((block,15)), (block,1), false)
final_goal(1, on((block,15)), (block,10), false)
final_goal(1, on((block,15)), (block,11), false)
final_goal(1, on((block,15)), (block,12), false)
final_goal(1, on((block,15)), (block,13), false)
final_goal(1, on((block,15)), (block,14), false)
final_goal(1, on((block,15)), (block,16), false)
final_goal(1, on((block,15)), (block,17), false)
final_goal(1, on((block,15)), (block,18), false)
final_goal(1, on((block,15)), (block,2), false)
final_goal(1, on((block,15)), (block,3), false)
final_goal(1, on((block,15)), (block,4), false)
final_goal(1, on((block,15)), (block,5), false)
final_goal(1, on((block,15)), (block,6), false)
final_goal(1, on((block,15)), (block,7), false)
final_goal(1, on((block,15)), (block,8), false)
final_goal(1, on((block,15)), (block,9), false)
final_goal(1, on((block,15)), nothing, false)
final_goal(1, on((block,15)), puzzle_room_1_table_left, false)
final_goal(1, on((block,15)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,15)), puzzle_room_1_table_right, false)
final_goal(1, on((block,15)), puzzle_room_2_table_left, false)
final_goal(1, on((block,15)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,16)), (block,1), false)
final_goal(1, on((block,16)), (block,10), false)
final_goal(1, on((block,16)), (block,11), false)
final_goal(1, on((block,16)), (block,12), false)
final_goal(1, on((block,16)), (block,13), false)
final_goal(1, on((block,16)), (block,14), false)
final_goal(1, on((block,16)), (block,15), false)
final_goal(1, on((block,16)), (block,18), false)
final_goal(1, on((block,16)), (block,2), false)
final_goal(1, on((block,16)), (block,3), false)
final_goal(1, on((block,16)), (block,4), false)
final_goal(1, on((block,16)), (block,5), false)
final_goal(1, on((block,16)), (block,6), false)
final_goal(1, on((block,16)), (block,7), false)
final_goal(1, on((block,16)), (block,8), false)
final_goal(1, on((block,16)), (block,9), false)
final_goal(1, on((block,16)), nothing, false)
final_goal(1, on((block,16)), puzzle_room_1_table_left, false)
final_goal(1, on((block,16)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,16)), puzzle_room_1_table_right, false)
final_goal(1, on((block,16)), puzzle_room_2_table_left, false)
final_goal(1, on((block,16)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,16)), puzzle_room_2_table_right, false)
final_goal(1, on((block,17)), (block,1), false)
final_goal(1, on((block,17)), (block,10), false)
final_goal(1, on((block,17)), (block,11), false)
final_goal(1, on((block,17)), (block,12), false)
final_goal(1, on((block,17)), (block,13), false)
final_goal(1, on((block,17)), (block,14), false)
final_goal(1, on((block,17)), (block,15), false)
final_goal(1, on((block,17)), (block,16), false)
final_goal(1, on((block,17)), (block,2), false)
final_goal(1, on((block,17)), (block,3), false)
final_goal(1, on((block,17)), (block,4), false)
final_goal(1, on((block,17)), (block,5), false)
final_goal(1, on((block,17)), (block,6), false)
final_goal(1, on((block,17)), (block,7), false)
final_goal(1, on((block,17)), (block,8), false)
final_goal(1, on((block,17)), (block,9), false)
final_goal(1, on((block,17)), nothing, false)
final_goal(1, on((block,17)), puzzle_room_1_table_left, false)
final_goal(1, on((block,17)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,17)), puzzle_room_1_table_right, false)
final_goal(1, on((block,17)), puzzle_room_2_table_left, false)
final_goal(1, on((block,17)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,17)), puzzle_room_2_table_right, false)
final_goal(1, on((block,18)), (block,1), false)
final_goal(1, on((block,18)), (block,10), false)
final_goal(1, on((block,18)), (block,11), false)
final_goal(1, on((block,18)), (block,12), false)
final_goal(1, on((block,18)), (block,13), false)
final_goal(1, on((block,18)), (block,14), false)
final_goal(1, on((block,18)), (block,15), false)
final_goal(1, on((block,18)), (block,16), false)
final_goal(1, on((block,18)), (block,17), false)
final_goal(1, on((block,18)), (block,2), false)
final_goal(1, on((block,18)), (block,3), false)
final_goal(1, on((block,18)), (block,4), false)
final_goal(1, on((block,18)), (block,5), false)
final_goal(1, on((block,18)), (block,6), false)
final_goal(1, on((block,18)), (block,7), false)
final_goal(1, on((block,18)), (block,8), false)
final_goal(1, on((block,18)), (block,9), false)
final_goal(1, on((block,18)), nothing, false)
final_goal(1, on((block,18)), puzzle_room_1_table_left, false)
final_goal(1, on((block,18)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,18)), puzzle_room_1_table_right, false)
final_goal(1, on((block,18)), puzzle_room_2_table_left, false)
final_goal(1, on((block,18)), puzzle_room_2_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,10), false)
final_goal(1, on((block,2)), (block,11), false)
final_goal(1, on((block,2)), (block,12), false)
final_goal(1, on((block,2)), (block,13), false)
final_goal(1, on((block,2)), (block,14), false)
final_goal(1, on((block,2)), (block,15), false)
final_goal(1, on((block,2)), (block,16), false)
final_goal(1, on((block,2)), (block,17), false)
final_goal(1, on((block,2)), (block,18), false)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), (block,7), false)
final_goal(1, on((block,2)), (block,8), false)
final_goal(1, on((block,2)), (block,9), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_1_table_left, false)
final_goal(1, on((block,2)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,2)), puzzle_room_1_table_right, false)
final_goal(1, on((block,2)), puzzle_room_2_table_left, false)
final_goal(1, on((block,2)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,2)), puzzle_room_2_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,10), false)
final_goal(1, on((block,3)), (block,11), false)
final_goal(1, on((block,3)), (block,12), false)
final_goal(1, on((block,3)), (block,13), false)
final_goal(1, on((block,3)), (block,14), false)
final_goal(1, on((block,3)), (block,15), false)
final_goal(1, on((block,3)), (block,16), false)
final_goal(1, on((block,3)), (block,17), false)
final_goal(1, on((block,3)), (block,18), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), (block,7), false)
final_goal(1, on((block,3)), (block,8), false)
final_goal(1, on((block,3)), (block,9), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,3)), puzzle_room_1_table_right, false)
final_goal(1, on((block,3)), puzzle_room_2_table_left, false)
final_goal(1, on((block,3)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,3)), puzzle_room_2_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,10), false)
final_goal(1, on((block,4)), (block,11), false)
final_goal(1, on((block,4)), (block,12), false)
final_goal(1, on((block,4)), (block,13), false)
final_goal(1, on((block,4)), (block,14), false)
final_goal(1, on((block,4)), (block,15), false)
final_goal(1, on((block,4)), (block,16), false)
final_goal(1, on((block,4)), (block,17), false)
final_goal(1, on((block,4)), (block,18), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), (block,7), false)
final_goal(1, on((block,4)), (block,8), false)
final_goal(1, on((block,4)), (block,9), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_1_table_left, false)
final_goal(1, on((block,4)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,4)), puzzle_room_1_table_right, false)
final_goal(1, on((block,4)), puzzle_room_2_table_left, false)
final_goal(1, on((block,4)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,4)), puzzle_room_2_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,10), false)
final_goal(1, on((block,5)), (block,11), false)
final_goal(1, on((block,5)), (block,12), false)
final_goal(1, on((block,5)), (block,13), false)
final_goal(1, on((block,5)), (block,14), false)
final_goal(1, on((block,5)), (block,15), false)
final_goal(1, on((block,5)), (block,16), false)
final_goal(1, on((block,5)), (block,17), false)
final_goal(1, on((block,5)), (block,18), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,7), false)
final_goal(1, on((block,5)), (block,8), false)
final_goal(1, on((block,5)), (block,9), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_1_table_left, false)
final_goal(1, on((block,5)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,5)), puzzle_room_1_table_right, false)
final_goal(1, on((block,5)), puzzle_room_2_table_left, false)
final_goal(1, on((block,5)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,5)), puzzle_room_2_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,10), false)
final_goal(1, on((block,6)), (block,11), false)
final_goal(1, on((block,6)), (block,12), false)
final_goal(1, on((block,6)), (block,13), false)
final_goal(1, on((block,6)), (block,14), false)
final_goal(1, on((block,6)), (block,15), false)
final_goal(1, on((block,6)), (block,16), false)
final_goal(1, on((block,6)), (block,17), false)
final_goal(1, on((block,6)), (block,18), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), (block,7), false)
final_goal(1, on((block,6)), (block,8), false)
final_goal(1, on((block,6)), (block,9), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_1_table_left, false)
final_goal(1, on((block,6)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,6)), puzzle_room_2_table_left, false)
final_goal(1, on((block,6)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,6)), puzzle_room_2_table_right, false)
final_goal(1, on((block,7)), (block,1), false)
final_goal(1, on((block,7)), (block,10), false)
final_goal(1, on((block,7)), (block,11), false)
final_goal(1, on((block,7)), (block,12), false)
final_goal(1, on((block,7)), (block,13), false)
final_goal(1, on((block,7)), (block,14), false)
final_goal(1, on((block,7)), (block,15), false)
final_goal(1, on((block,7)), (block,16), false)
final_goal(1, on((block,7)), (block,17), false)
final_goal(1, on((block,7)), (block,18), false)
final_goal(1, on((block,7)), (block,2), false)
final_goal(1, on((block,7)), (block,3), false)
final_goal(1, on((block,7)), (block,4), false)
final_goal(1, on((block,7)), (block,5), false)
final_goal(1, on((block,7)), (block,6), false)
final_goal(1, on((block,7)), (block,9), false)
final_goal(1, on((block,7)), nothing, false)
final_goal(1, on((block,7)), puzzle_room_1_table_left, false)
final_goal(1, on((block,7)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,7)), puzzle_room_1_table_right, false)
final_goal(1, on((block,7)), puzzle_room_2_table_left, false)
final_goal(1, on((block,7)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,7)), puzzle_room_2_table_right, false)
final_goal(1, on((block,8)), (block,1), false)
final_goal(1, on((block,8)), (block,10), false)
final_goal(1, on((block,8)), (block,11), false)
final_goal(1, on((block,8)), (block,12), false)
final_goal(1, on((block,8)), (block,13), false)
final_goal(1, on((block,8)), (block,14), false)
final_goal(1, on((block,8)), (block,15), false)
final_goal(1, on((block,8)), (block,16), false)
final_goal(1, on((block,8)), (block,17), false)
final_goal(1, on((block,8)), (block,18), false)
final_goal(1, on((block,8)), (block,2), false)
final_goal(1, on((block,8)), (block,3), false)
final_goal(1, on((block,8)), (block,4), false)
final_goal(1, on((block,8)), (block,5), false)
final_goal(1, on((block,8)), (block,6), false)
final_goal(1, on((block,8)), (block,7), false)
final_goal(1, on((block,8)), nothing, false)
final_goal(1, on((block,8)), puzzle_room_1_table_left, false)
final_goal(1, on((block,8)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,8)), puzzle_room_1_table_right, false)
final_goal(1, on((block,8)), puzzle_room_2_table_left, false)
final_goal(1, on((block,8)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,8)), puzzle_room_2_table_right, false)
final_goal(1, on((block,9)), (block,1), false)
final_goal(1, on((block,9)), (block,10), false)
final_goal(1, on((block,9)), (block,11), false)
final_goal(1, on((block,9)), (block,12), false)
final_goal(1, on((block,9)), (block,13), false)
final_goal(1, on((block,9)), (block,14), false)
final_goal(1, on((block,9)), (block,15), false)
final_goal(1, on((block,9)), (block,16), false)
final_goal(1, on((block,9)), (block,17), false)
final_goal(1, on((block,9)), (block,18), false)
final_goal(1, on((block,9)), (block,2), false)
final_goal(1, on((block,9)), (block,3), false)
final_goal(1, on((block,9)), (block,4), false)
final_goal(1, on((block,9)), (block,5), false)
final_goal(1, on((block,9)), (block,6), false)
final_goal(1, on((block,9)), (block,7), false)
final_goal(1, on((block,9)), (block,8), false)
final_goal(1, on((block,9)), nothing, false)
final_goal(1, on((block,9)), puzzle_room_1_table_left, false)
final_goal(1, on((block,9)), puzzle_room_1_table_right, false)
final_goal(1, on((block,9)), puzzle_room_2_table_left, false)
final_goal(1, on((block,9)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,9)), puzzle_room_2_table_right, false)
final_goal(1, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(1, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(1, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(1, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(1, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(1, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(1, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,9),puzzle_room_2_table), true, false)

[04-03-2022_16-19-40] INFO :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> The given problem specification has a unique interpretation (exactly one stable model exists).

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', 5)
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Hasty object at 0x0000013B45EAEE80>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', False)
	('use_search_length_bound', False)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', True)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[04-03-2022_16-19-40] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-5] : ONLINE MODE

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 5 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 4 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 3 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 2 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 1 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 5, Highest = 5.

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 1 by method ground-first is [1-5].

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 5

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Hasty object at 0x0000013B45EAEE80>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', True)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 5)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[04-03-2022_16-19-40] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 5] classical : Concurrency enabled : Minimum search length bound disabled with value 0

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 5
concurrency = True
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[04-03-2022_16-19-40] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = True
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[04-03-2022_16-19-40] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[04-03-2022_16-19-40] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,1))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,10))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,11))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,12))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,13))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,14))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,15))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,16))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,17))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,18))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,2))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,3))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,4))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,5))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,6))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,7))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,8))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,9))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in(puzzle_room_1_table)', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in(puzzle_room_2_table)', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in(talos)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,12))', 'V': '(block,10)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,13))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,14))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,15))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,17))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,18))', 'V': '(block,16)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 459 rules into program part ash_initial_state:

holds(5, complete_tower(blue,puzzle_room_1_table), false, 0).
holds(5, complete_tower(blue,puzzle_room_2_table), false, 0).
holds(5, complete_tower(red,puzzle_room_1_table), false, 0).
holds(5, complete_tower(red,puzzle_room_2_table), false, 0).
holds(5, complete_tower(yellow,puzzle_room_1_table), false, 0).
holds(5, complete_tower(yellow,puzzle_room_2_table), false, 0).
holds(5, in((block,1)), puzzle_room_1, 0).
holds(5, in((block,10)), puzzle_room_2, 0).
holds(5, in((block,11)), puzzle_room_2, 0).
holds(5, in((block,12)), puzzle_room_2, 0).
holds(5, in((block,13)), store_room_2, 0).
holds(5, in((block,14)), store_room_2, 0).
holds(5, in((block,15)), store_room_2, 0).
holds(5, in((block,16)), puzzle_room_2, 0).
holds(5, in((block,17)), store_room_2, 0).
holds(5, in((block,18)), puzzle_room_2, 0).
holds(5, in((block,2)), puzzle_room_1, 0).
holds(5, in((block,3)), puzzle_room_1, 0).
holds(5, in((block,4)), store_room_1, 0).
holds(5, in((block,5)), store_room_1, 0).
holds(5, in((block,6)), store_room_1, 0).
holds(5, in((block,7)), puzzle_room_1, 0).
holds(5, in((block,8)), store_room_1, 0).
holds(5, in((block,9)), puzzle_room_1, 0).
holds(5, in(puzzle_room_1_table), puzzle_room_1, 0).
holds(5, in(puzzle_room_2_table), puzzle_room_2, 0).
holds(5, in(talos), starting_room_1, 0).
holds(5, in_tower((block,1),(block,1)), true, 0).
holds(5, in_tower((block,1),(block,10)), false, 0).
holds(5, in_tower((block,1),(block,11)), false, 0).
holds(5, in_tower((block,1),(block,12)), false, 0).
holds(5, in_tower((block,1),(block,13)), false, 0).
holds(5, in_tower((block,1),(block,14)), false, 0).
holds(5, in_tower((block,1),(block,15)), false, 0).
holds(5, in_tower((block,1),(block,16)), false, 0).
holds(5, in_tower((block,1),(block,17)), false, 0).
holds(5, in_tower((block,1),(block,18)), false, 0).
holds(5, in_tower((block,1),(block,2)), false, 0).
holds(5, in_tower((block,1),(block,3)), true, 0).
holds(5, in_tower((block,1),(block,4)), false, 0).
holds(5, in_tower((block,1),(block,5)), false, 0).
holds(5, in_tower((block,1),(block,6)), false, 0).
holds(5, in_tower((block,1),(block,7)), false, 0).
holds(5, in_tower((block,1),(block,8)), false, 0).
holds(5, in_tower((block,1),(block,9)), false, 0).
holds(5, in_tower((block,10),(block,1)), false, 0).
holds(5, in_tower((block,10),(block,10)), true, 0).
holds(5, in_tower((block,10),(block,11)), false, 0).
holds(5, in_tower((block,10),(block,12)), true, 0).
holds(5, in_tower((block,10),(block,13)), false, 0).
holds(5, in_tower((block,10),(block,14)), false, 0).
holds(5, in_tower((block,10),(block,15)), false, 0).
holds(5, in_tower((block,10),(block,16)), false, 0).
holds(5, in_tower((block,10),(block,17)), false, 0).
holds(5, in_tower((block,10),(block,18)), false, 0).
holds(5, in_tower((block,10),(block,2)), false, 0).
holds(5, in_tower((block,10),(block,3)), false, 0).
holds(5, in_tower((block,10),(block,4)), false, 0).
holds(5, in_tower((block,10),(block,5)), false, 0).
holds(5, in_tower((block,10),(block,6)), false, 0).
holds(5, in_tower((block,10),(block,7)), false, 0).
holds(5, in_tower((block,10),(block,8)), false, 0).
holds(5, in_tower((block,10),(block,9)), false, 0).
holds(5, in_tower((block,11),(block,1)), false, 0).
holds(5, in_tower((block,11),(block,10)), false, 0).
holds(5, in_tower((block,11),(block,11)), true, 0).
holds(5, in_tower((block,11),(block,12)), false, 0).
holds(5, in_tower((block,11),(block,13)), false, 0).
holds(5, in_tower((block,11),(block,14)), false, 0).
holds(5, in_tower((block,11),(block,15)), false, 0).
holds(5, in_tower((block,11),(block,16)), false, 0).
holds(5, in_tower((block,11),(block,17)), false, 0).
holds(5, in_tower((block,11),(block,18)), false, 0).
holds(5, in_tower((block,11),(block,2)), false, 0).
holds(5, in_tower((block,11),(block,3)), false, 0).
holds(5, in_tower((block,11),(block,4)), false, 0).
holds(5, in_tower((block,11),(block,5)), false, 0).
holds(5, in_tower((block,11),(block,6)), false, 0).
holds(5, in_tower((block,11),(block,7)), false, 0).
holds(5, in_tower((block,11),(block,8)), false, 0).
holds(5, in_tower((block,11),(block,9)), false, 0).
holds(5, in_tower((block,12),(block,1)), false, 0).
holds(5, in_tower((block,12),(block,10)), false, 0).
holds(5, in_tower((block,12),(block,11)), false, 0).
holds(5, in_tower((block,12),(block,12)), false, 0).
holds(5, in_tower((block,12),(block,13)), false, 0).
holds(5, in_tower((block,12),(block,14)), false, 0).
holds(5, in_tower((block,12),(block,15)), false, 0).
holds(5, in_tower((block,12),(block,16)), false, 0).
holds(5, in_tower((block,12),(block,17)), false, 0).
holds(5, in_tower((block,12),(block,18)), false, 0).
holds(5, in_tower((block,12),(block,2)), false, 0).
holds(5, in_tower((block,12),(block,3)), false, 0).
holds(5, in_tower((block,12),(block,4)), false, 0).
holds(5, in_tower((block,12),(block,5)), false, 0).
holds(5, in_tower((block,12),(block,6)), false, 0).
holds(5, in_tower((block,12),(block,7)), false, 0).
holds(5, in_tower((block,12),(block,8)), false, 0).
holds(5, in_tower((block,12),(block,9)), false, 0).
holds(5, in_tower((block,13),(block,1)), false, 0).
holds(5, in_tower((block,13),(block,10)), false, 0).
holds(5, in_tower((block,13),(block,11)), false, 0).
holds(5, in_tower((block,13),(block,12)), false, 0).
holds(5, in_tower((block,13),(block,13)), false, 0).
holds(5, in_tower((block,13),(block,14)), false, 0).
holds(5, in_tower((block,13),(block,15)), false, 0).
holds(5, in_tower((block,13),(block,16)), false, 0).
holds(5, in_tower((block,13),(block,17)), false, 0).
holds(5, in_tower((block,13),(block,18)), false, 0).
holds(5, in_tower((block,13),(block,2)), false, 0).
holds(5, in_tower((block,13),(block,3)), false, 0).
holds(5, in_tower((block,13),(block,4)), false, 0).
holds(5, in_tower((block,13),(block,5)), false, 0).
holds(5, in_tower((block,13),(block,6)), false, 0).
holds(5, in_tower((block,13),(block,7)), false, 0).
holds(5, in_tower((block,13),(block,8)), false, 0).
holds(5, in_tower((block,13),(block,9)), false, 0).
holds(5, in_tower((block,14),(block,1)), false, 0).
holds(5, in_tower((block,14),(block,10)), false, 0).
holds(5, in_tower((block,14),(block,11)), false, 0).
holds(5, in_tower((block,14),(block,12)), false, 0).
holds(5, in_tower((block,14),(block,13)), false, 0).
holds(5, in_tower((block,14),(block,14)), false, 0).
holds(5, in_tower((block,14),(block,15)), false, 0).
holds(5, in_tower((block,14),(block,16)), false, 0).
holds(5, in_tower((block,14),(block,17)), false, 0).
holds(5, in_tower((block,14),(block,18)), false, 0).
holds(5, in_tower((block,14),(block,2)), false, 0).
holds(5, in_tower((block,14),(block,3)), false, 0).
holds(5, in_tower((block,14),(block,4)), false, 0).
holds(5, in_tower((block,14),(block,5)), false, 0).
holds(5, in_tower((block,14),(block,6)), false, 0).
holds(5, in_tower((block,14),(block,7)), false, 0).
holds(5, in_tower((block,14),(block,8)), false, 0).
holds(5, in_tower((block,14),(block,9)), false, 0).
holds(5, in_tower((block,15),(block,1)), false, 0).
holds(5, in_tower((block,15),(block,10)), false, 0).
holds(5, in_tower((block,15),(block,11)), false, 0).
holds(5, in_tower((block,15),(block,12)), false, 0).
holds(5, in_tower((block,15),(block,13)), false, 0).
holds(5, in_tower((block,15),(block,14)), false, 0).
holds(5, in_tower((block,15),(block,15)), false, 0).
holds(5, in_tower((block,15),(block,16)), false, 0).
holds(5, in_tower((block,15),(block,17)), false, 0).
holds(5, in_tower((block,15),(block,18)), false, 0).
holds(5, in_tower((block,15),(block,2)), false, 0).
holds(5, in_tower((block,15),(block,3)), false, 0).
holds(5, in_tower((block,15),(block,4)), false, 0).
holds(5, in_tower((block,15),(block,5)), false, 0).
holds(5, in_tower((block,15),(block,6)), false, 0).
holds(5, in_tower((block,15),(block,7)), false, 0).
holds(5, in_tower((block,15),(block,8)), false, 0).
holds(5, in_tower((block,15),(block,9)), false, 0).
holds(5, in_tower((block,16),(block,1)), false, 0).
holds(5, in_tower((block,16),(block,10)), false, 0).
holds(5, in_tower((block,16),(block,11)), false, 0).
holds(5, in_tower((block,16),(block,12)), false, 0).
holds(5, in_tower((block,16),(block,13)), false, 0).
holds(5, in_tower((block,16),(block,14)), false, 0).
holds(5, in_tower((block,16),(block,15)), false, 0).
holds(5, in_tower((block,16),(block,16)), true, 0).
holds(5, in_tower((block,16),(block,17)), false, 0).
holds(5, in_tower((block,16),(block,18)), true, 0).
holds(5, in_tower((block,16),(block,2)), false, 0).
holds(5, in_tower((block,16),(block,3)), false, 0).
holds(5, in_tower((block,16),(block,4)), false, 0).
holds(5, in_tower((block,16),(block,5)), false, 0).
holds(5, in_tower((block,16),(block,6)), false, 0).
holds(5, in_tower((block,16),(block,7)), false, 0).
holds(5, in_tower((block,16),(block,8)), false, 0).
holds(5, in_tower((block,16),(block,9)), false, 0).
holds(5, in_tower((block,17),(block,1)), false, 0).
holds(5, in_tower((block,17),(block,10)), false, 0).
holds(5, in_tower((block,17),(block,11)), false, 0).
holds(5, in_tower((block,17),(block,12)), false, 0).
holds(5, in_tower((block,17),(block,13)), false, 0).
holds(5, in_tower((block,17),(block,14)), false, 0).
holds(5, in_tower((block,17),(block,15)), false, 0).
holds(5, in_tower((block,17),(block,16)), false, 0).
holds(5, in_tower((block,17),(block,17)), false, 0).
holds(5, in_tower((block,17),(block,18)), false, 0).
holds(5, in_tower((block,17),(block,2)), false, 0).
holds(5, in_tower((block,17),(block,3)), false, 0).
holds(5, in_tower((block,17),(block,4)), false, 0).
holds(5, in_tower((block,17),(block,5)), false, 0).
holds(5, in_tower((block,17),(block,6)), false, 0).
holds(5, in_tower((block,17),(block,7)), false, 0).
holds(5, in_tower((block,17),(block,8)), false, 0).
holds(5, in_tower((block,17),(block,9)), false, 0).
holds(5, in_tower((block,18),(block,1)), false, 0).
holds(5, in_tower((block,18),(block,10)), false, 0).
holds(5, in_tower((block,18),(block,11)), false, 0).
holds(5, in_tower((block,18),(block,12)), false, 0).
holds(5, in_tower((block,18),(block,13)), false, 0).
holds(5, in_tower((block,18),(block,14)), false, 0).
holds(5, in_tower((block,18),(block,15)), false, 0).
holds(5, in_tower((block,18),(block,16)), false, 0).
holds(5, in_tower((block,18),(block,17)), false, 0).
holds(5, in_tower((block,18),(block,18)), false, 0).
holds(5, in_tower((block,18),(block,2)), false, 0).
holds(5, in_tower((block,18),(block,3)), false, 0).
holds(5, in_tower((block,18),(block,4)), false, 0).
holds(5, in_tower((block,18),(block,5)), false, 0).
holds(5, in_tower((block,18),(block,6)), false, 0).
holds(5, in_tower((block,18),(block,7)), false, 0).
holds(5, in_tower((block,18),(block,8)), false, 0).
holds(5, in_tower((block,18),(block,9)), false, 0).
holds(5, in_tower((block,2),(block,1)), false, 0).
holds(5, in_tower((block,2),(block,10)), false, 0).
holds(5, in_tower((block,2),(block,11)), false, 0).
holds(5, in_tower((block,2),(block,12)), false, 0).
holds(5, in_tower((block,2),(block,13)), false, 0).
holds(5, in_tower((block,2),(block,14)), false, 0).
holds(5, in_tower((block,2),(block,15)), false, 0).
holds(5, in_tower((block,2),(block,16)), false, 0).
holds(5, in_tower((block,2),(block,17)), false, 0).
holds(5, in_tower((block,2),(block,18)), false, 0).
holds(5, in_tower((block,2),(block,2)), true, 0).
holds(5, in_tower((block,2),(block,3)), false, 0).
holds(5, in_tower((block,2),(block,4)), false, 0).
holds(5, in_tower((block,2),(block,5)), false, 0).
holds(5, in_tower((block,2),(block,6)), false, 0).
holds(5, in_tower((block,2),(block,7)), false, 0).
holds(5, in_tower((block,2),(block,8)), false, 0).
holds(5, in_tower((block,2),(block,9)), false, 0).
holds(5, in_tower((block,3),(block,1)), false, 0).
holds(5, in_tower((block,3),(block,10)), false, 0).
holds(5, in_tower((block,3),(block,11)), false, 0).
holds(5, in_tower((block,3),(block,12)), false, 0).
holds(5, in_tower((block,3),(block,13)), false, 0).
holds(5, in_tower((block,3),(block,14)), false, 0).
holds(5, in_tower((block,3),(block,15)), false, 0).
holds(5, in_tower((block,3),(block,16)), false, 0).
holds(5, in_tower((block,3),(block,17)), false, 0).
holds(5, in_tower((block,3),(block,18)), false, 0).
holds(5, in_tower((block,3),(block,2)), false, 0).
holds(5, in_tower((block,3),(block,3)), false, 0).
holds(5, in_tower((block,3),(block,4)), false, 0).
holds(5, in_tower((block,3),(block,5)), false, 0).
holds(5, in_tower((block,3),(block,6)), false, 0).
holds(5, in_tower((block,3),(block,7)), false, 0).
holds(5, in_tower((block,3),(block,8)), false, 0).
holds(5, in_tower((block,3),(block,9)), false, 0).
holds(5, in_tower((block,4),(block,1)), false, 0).
holds(5, in_tower((block,4),(block,10)), false, 0).
holds(5, in_tower((block,4),(block,11)), false, 0).
holds(5, in_tower((block,4),(block,12)), false, 0).
holds(5, in_tower((block,4),(block,13)), false, 0).
holds(5, in_tower((block,4),(block,14)), false, 0).
holds(5, in_tower((block,4),(block,15)), false, 0).
holds(5, in_tower((block,4),(block,16)), false, 0).
holds(5, in_tower((block,4),(block,17)), false, 0).
holds(5, in_tower((block,4),(block,18)), false, 0).
holds(5, in_tower((block,4),(block,2)), false, 0).
holds(5, in_tower((block,4),(block,3)), false, 0).
holds(5, in_tower((block,4),(block,4)), false, 0).
holds(5, in_tower((block,4),(block,5)), false, 0).
holds(5, in_tower((block,4),(block,6)), false, 0).
holds(5, in_tower((block,4),(block,7)), false, 0).
holds(5, in_tower((block,4),(block,8)), false, 0).
holds(5, in_tower((block,4),(block,9)), false, 0).
holds(5, in_tower((block,5),(block,1)), false, 0).
holds(5, in_tower((block,5),(block,10)), false, 0).
holds(5, in_tower((block,5),(block,11)), false, 0).
holds(5, in_tower((block,5),(block,12)), false, 0).
holds(5, in_tower((block,5),(block,13)), false, 0).
holds(5, in_tower((block,5),(block,14)), false, 0).
holds(5, in_tower((block,5),(block,15)), false, 0).
holds(5, in_tower((block,5),(block,16)), false, 0).
holds(5, in_tower((block,5),(block,17)), false, 0).
holds(5, in_tower((block,5),(block,18)), false, 0).
holds(5, in_tower((block,5),(block,2)), false, 0).
holds(5, in_tower((block,5),(block,3)), false, 0).
holds(5, in_tower((block,5),(block,4)), false, 0).
holds(5, in_tower((block,5),(block,5)), false, 0).
holds(5, in_tower((block,5),(block,6)), false, 0).
holds(5, in_tower((block,5),(block,7)), false, 0).
holds(5, in_tower((block,5),(block,8)), false, 0).
holds(5, in_tower((block,5),(block,9)), false, 0).
holds(5, in_tower((block,6),(block,1)), false, 0).
holds(5, in_tower((block,6),(block,10)), false, 0).
holds(5, in_tower((block,6),(block,11)), false, 0).
holds(5, in_tower((block,6),(block,12)), false, 0).
holds(5, in_tower((block,6),(block,13)), false, 0).
holds(5, in_tower((block,6),(block,14)), false, 0).
holds(5, in_tower((block,6),(block,15)), false, 0).
holds(5, in_tower((block,6),(block,16)), false, 0).
holds(5, in_tower((block,6),(block,17)), false, 0).
holds(5, in_tower((block,6),(block,18)), false, 0).
holds(5, in_tower((block,6),(block,2)), false, 0).
holds(5, in_tower((block,6),(block,3)), false, 0).
holds(5, in_tower((block,6),(block,4)), false, 0).
holds(5, in_tower((block,6),(block,5)), false, 0).
holds(5, in_tower((block,6),(block,6)), false, 0).
holds(5, in_tower((block,6),(block,7)), false, 0).
holds(5, in_tower((block,6),(block,8)), false, 0).
holds(5, in_tower((block,6),(block,9)), false, 0).
holds(5, in_tower((block,7),(block,1)), false, 0).
holds(5, in_tower((block,7),(block,10)), false, 0).
holds(5, in_tower((block,7),(block,11)), false, 0).
holds(5, in_tower((block,7),(block,12)), false, 0).
holds(5, in_tower((block,7),(block,13)), false, 0).
holds(5, in_tower((block,7),(block,14)), false, 0).
holds(5, in_tower((block,7),(block,15)), false, 0).
holds(5, in_tower((block,7),(block,16)), false, 0).
holds(5, in_tower((block,7),(block,17)), false, 0).
holds(5, in_tower((block,7),(block,18)), false, 0).
holds(5, in_tower((block,7),(block,2)), false, 0).
holds(5, in_tower((block,7),(block,3)), false, 0).
holds(5, in_tower((block,7),(block,4)), false, 0).
holds(5, in_tower((block,7),(block,5)), false, 0).
holds(5, in_tower((block,7),(block,6)), false, 0).
holds(5, in_tower((block,7),(block,7)), true, 0).
holds(5, in_tower((block,7),(block,8)), false, 0).
holds(5, in_tower((block,7),(block,9)), true, 0).
holds(5, in_tower((block,8),(block,1)), false, 0).
holds(5, in_tower((block,8),(block,10)), false, 0).
holds(5, in_tower((block,8),(block,11)), false, 0).
holds(5, in_tower((block,8),(block,12)), false, 0).
holds(5, in_tower((block,8),(block,13)), false, 0).
holds(5, in_tower((block,8),(block,14)), false, 0).
holds(5, in_tower((block,8),(block,15)), false, 0).
holds(5, in_tower((block,8),(block,16)), false, 0).
holds(5, in_tower((block,8),(block,17)), false, 0).
holds(5, in_tower((block,8),(block,18)), false, 0).
holds(5, in_tower((block,8),(block,2)), false, 0).
holds(5, in_tower((block,8),(block,3)), false, 0).
holds(5, in_tower((block,8),(block,4)), false, 0).
holds(5, in_tower((block,8),(block,5)), false, 0).
holds(5, in_tower((block,8),(block,6)), false, 0).
holds(5, in_tower((block,8),(block,7)), false, 0).
holds(5, in_tower((block,8),(block,8)), false, 0).
holds(5, in_tower((block,8),(block,9)), false, 0).
holds(5, in_tower((block,9),(block,1)), false, 0).
holds(5, in_tower((block,9),(block,10)), false, 0).
holds(5, in_tower((block,9),(block,11)), false, 0).
holds(5, in_tower((block,9),(block,12)), false, 0).
holds(5, in_tower((block,9),(block,13)), false, 0).
holds(5, in_tower((block,9),(block,14)), false, 0).
holds(5, in_tower((block,9),(block,15)), false, 0).
holds(5, in_tower((block,9),(block,16)), false, 0).
holds(5, in_tower((block,9),(block,17)), false, 0).
holds(5, in_tower((block,9),(block,18)), false, 0).
holds(5, in_tower((block,9),(block,2)), false, 0).
holds(5, in_tower((block,9),(block,3)), false, 0).
holds(5, in_tower((block,9),(block,4)), false, 0).
holds(5, in_tower((block,9),(block,5)), false, 0).
holds(5, in_tower((block,9),(block,6)), false, 0).
holds(5, in_tower((block,9),(block,7)), false, 0).
holds(5, in_tower((block,9),(block,8)), false, 0).
holds(5, in_tower((block,9),(block,9)), false, 0).
holds(5, on((block,1)), puzzle_room_1_table, 0).
holds(5, on((block,10)), puzzle_room_2_table, 0).
holds(5, on((block,11)), puzzle_room_2_table, 0).
holds(5, on((block,12)), (block,10), 0).
holds(5, on((block,13)), nothing, 0).
holds(5, on((block,14)), nothing, 0).
holds(5, on((block,15)), nothing, 0).
holds(5, on((block,16)), puzzle_room_2_table, 0).
holds(5, on((block,17)), nothing, 0).
holds(5, on((block,18)), (block,16), 0).
holds(5, on((block,2)), puzzle_room_1_table, 0).
holds(5, on((block,3)), (block,1), 0).
holds(5, on((block,4)), nothing, 0).
holds(5, on((block,5)), nothing, 0).
holds(5, on((block,6)), nothing, 0).
holds(5, on((block,7)), puzzle_room_1_table, 0).
holds(5, on((block,8)), nothing, 0).
holds(5, on((block,9)), (block,7), 0).
holds(5, tower_base((block,1),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,1),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,10),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,10),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,11),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,11),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,12),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,12),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,13),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,13),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,14),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,14),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,15),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,15),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,16),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,16),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,17),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,17),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,18),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,18),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,2),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,2),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,3),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,3),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,4),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,4),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,5),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,5),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,6),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,6),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,7),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,7),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,8),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,8),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,9),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,9),puzzle_room_2_table), false, 0).
holds(5, transporting(talos,(block,1)), false, 0).
holds(5, transporting(talos,(block,10)), false, 0).
holds(5, transporting(talos,(block,11)), false, 0).
holds(5, transporting(talos,(block,12)), false, 0).
holds(5, transporting(talos,(block,13)), false, 0).
holds(5, transporting(talos,(block,14)), false, 0).
holds(5, transporting(talos,(block,15)), false, 0).
holds(5, transporting(talos,(block,16)), false, 0).
holds(5, transporting(talos,(block,17)), false, 0).
holds(5, transporting(talos,(block,18)), false, 0).
holds(5, transporting(talos,(block,2)), false, 0).
holds(5, transporting(talos,(block,3)), false, 0).
holds(5, transporting(talos,(block,4)), false, 0).
holds(5, transporting(talos,(block,5)), false, 0).
holds(5, transporting(talos,(block,6)), false, 0).
holds(5, transporting(talos,(block,7)), false, 0).
holds(5, transporting(talos,(block,8)), false, 0).
holds(5, transporting(talos,(block,9)), false, 0).
holds(5, unordered_tower((block,1),puzzle_room_1_table), true, 0).
holds(5, unordered_tower((block,1),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,10),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,10),puzzle_room_2_table), true, 0).
holds(5, unordered_tower((block,11),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,11),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,12),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,12),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,13),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,13),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,14),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,14),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,15),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,15),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,16),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,16),puzzle_room_2_table), true, 0).
holds(5, unordered_tower((block,17),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,17),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,18),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,18),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,2),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,2),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,3),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,3),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,4),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,4),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,5),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,5),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,6),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,6),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,7),puzzle_room_1_table), true, 0).
holds(5, unordered_tower((block,7),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,8),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,8),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,9),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,9),puzzle_room_2_table), false, 0).

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,11)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,12)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,14)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,15)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,17)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,18)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1164 rules into program part ash_goal_state:

final_goal(5, complete_tower(blue,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(blue,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(blue,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(blue,puzzle_room_2_table), true, true).
final_goal(5, complete_tower(red,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(red,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(red,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(red,puzzle_room_2_table), true, true).
final_goal(5, complete_tower(yellow,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(yellow,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(yellow,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(yellow,puzzle_room_2_table), true, true).
final_goal(5, in_tower((block,1),(block,1)), false, true).
final_goal(5, in_tower((block,1),(block,1)), true, false).
final_goal(5, in_tower((block,1),(block,10)), false, true).
final_goal(5, in_tower((block,1),(block,10)), true, false).
final_goal(5, in_tower((block,1),(block,11)), false, true).
final_goal(5, in_tower((block,1),(block,11)), true, false).
final_goal(5, in_tower((block,1),(block,12)), false, true).
final_goal(5, in_tower((block,1),(block,12)), true, false).
final_goal(5, in_tower((block,1),(block,13)), false, true).
final_goal(5, in_tower((block,1),(block,13)), true, false).
final_goal(5, in_tower((block,1),(block,14)), false, true).
final_goal(5, in_tower((block,1),(block,14)), true, false).
final_goal(5, in_tower((block,1),(block,15)), false, true).
final_goal(5, in_tower((block,1),(block,15)), true, false).
final_goal(5, in_tower((block,1),(block,16)), false, true).
final_goal(5, in_tower((block,1),(block,16)), true, false).
final_goal(5, in_tower((block,1),(block,17)), false, true).
final_goal(5, in_tower((block,1),(block,17)), true, false).
final_goal(5, in_tower((block,1),(block,18)), false, true).
final_goal(5, in_tower((block,1),(block,18)), true, false).
final_goal(5, in_tower((block,1),(block,2)), false, true).
final_goal(5, in_tower((block,1),(block,2)), true, false).
final_goal(5, in_tower((block,1),(block,3)), false, true).
final_goal(5, in_tower((block,1),(block,3)), true, false).
final_goal(5, in_tower((block,1),(block,4)), false, true).
final_goal(5, in_tower((block,1),(block,4)), true, false).
final_goal(5, in_tower((block,1),(block,5)), false, true).
final_goal(5, in_tower((block,1),(block,5)), true, false).
final_goal(5, in_tower((block,1),(block,6)), false, true).
final_goal(5, in_tower((block,1),(block,6)), true, false).
final_goal(5, in_tower((block,1),(block,7)), false, true).
final_goal(5, in_tower((block,1),(block,7)), true, false).
final_goal(5, in_tower((block,1),(block,8)), false, true).
final_goal(5, in_tower((block,1),(block,8)), true, false).
final_goal(5, in_tower((block,1),(block,9)), false, true).
final_goal(5, in_tower((block,1),(block,9)), true, false).
final_goal(5, in_tower((block,10),(block,1)), false, true).
final_goal(5, in_tower((block,10),(block,1)), true, false).
final_goal(5, in_tower((block,10),(block,10)), false, true).
final_goal(5, in_tower((block,10),(block,10)), true, false).
final_goal(5, in_tower((block,10),(block,11)), false, true).
final_goal(5, in_tower((block,10),(block,11)), true, false).
final_goal(5, in_tower((block,10),(block,12)), false, true).
final_goal(5, in_tower((block,10),(block,12)), true, false).
final_goal(5, in_tower((block,10),(block,13)), false, true).
final_goal(5, in_tower((block,10),(block,13)), true, false).
final_goal(5, in_tower((block,10),(block,14)), false, true).
final_goal(5, in_tower((block,10),(block,14)), true, false).
final_goal(5, in_tower((block,10),(block,15)), false, true).
final_goal(5, in_tower((block,10),(block,15)), true, false).
final_goal(5, in_tower((block,10),(block,16)), false, true).
final_goal(5, in_tower((block,10),(block,16)), true, false).
final_goal(5, in_tower((block,10),(block,17)), false, true).
final_goal(5, in_tower((block,10),(block,17)), true, false).
final_goal(5, in_tower((block,10),(block,18)), false, true).
final_goal(5, in_tower((block,10),(block,18)), true, false).
final_goal(5, in_tower((block,10),(block,2)), false, true).
final_goal(5, in_tower((block,10),(block,2)), true, false).
final_goal(5, in_tower((block,10),(block,3)), false, true).
final_goal(5, in_tower((block,10),(block,3)), true, false).
final_goal(5, in_tower((block,10),(block,4)), false, true).
final_goal(5, in_tower((block,10),(block,4)), true, false).
final_goal(5, in_tower((block,10),(block,5)), false, true).
final_goal(5, in_tower((block,10),(block,5)), true, false).
final_goal(5, in_tower((block,10),(block,6)), false, true).
final_goal(5, in_tower((block,10),(block,6)), true, false).
final_goal(5, in_tower((block,10),(block,7)), false, true).
final_goal(5, in_tower((block,10),(block,7)), true, false).
final_goal(5, in_tower((block,10),(block,8)), false, true).
final_goal(5, in_tower((block,10),(block,8)), true, false).
final_goal(5, in_tower((block,10),(block,9)), false, true).
final_goal(5, in_tower((block,10),(block,9)), true, false).
final_goal(5, in_tower((block,11),(block,1)), false, true).
final_goal(5, in_tower((block,11),(block,1)), true, false).
final_goal(5, in_tower((block,11),(block,10)), false, true).
final_goal(5, in_tower((block,11),(block,10)), true, false).
final_goal(5, in_tower((block,11),(block,11)), false, true).
final_goal(5, in_tower((block,11),(block,11)), true, false).
final_goal(5, in_tower((block,11),(block,12)), false, true).
final_goal(5, in_tower((block,11),(block,12)), true, false).
final_goal(5, in_tower((block,11),(block,13)), false, true).
final_goal(5, in_tower((block,11),(block,13)), true, false).
final_goal(5, in_tower((block,11),(block,14)), false, true).
final_goal(5, in_tower((block,11),(block,14)), true, false).
final_goal(5, in_tower((block,11),(block,15)), false, true).
final_goal(5, in_tower((block,11),(block,15)), true, false).
final_goal(5, in_tower((block,11),(block,16)), false, true).
final_goal(5, in_tower((block,11),(block,16)), true, false).
final_goal(5, in_tower((block,11),(block,17)), false, true).
final_goal(5, in_tower((block,11),(block,17)), true, false).
final_goal(5, in_tower((block,11),(block,18)), false, true).
final_goal(5, in_tower((block,11),(block,18)), true, false).
final_goal(5, in_tower((block,11),(block,2)), false, true).
final_goal(5, in_tower((block,11),(block,2)), true, false).
final_goal(5, in_tower((block,11),(block,3)), false, true).
final_goal(5, in_tower((block,11),(block,3)), true, false).
final_goal(5, in_tower((block,11),(block,4)), false, true).
final_goal(5, in_tower((block,11),(block,4)), true, false).
final_goal(5, in_tower((block,11),(block,5)), false, true).
final_goal(5, in_tower((block,11),(block,5)), true, false).
final_goal(5, in_tower((block,11),(block,6)), false, true).
final_goal(5, in_tower((block,11),(block,6)), true, false).
final_goal(5, in_tower((block,11),(block,7)), false, true).
final_goal(5, in_tower((block,11),(block,7)), true, false).
final_goal(5, in_tower((block,11),(block,8)), false, true).
final_goal(5, in_tower((block,11),(block,8)), true, false).
final_goal(5, in_tower((block,11),(block,9)), false, true).
final_goal(5, in_tower((block,11),(block,9)), true, false).
final_goal(5, in_tower((block,12),(block,1)), false, true).
final_goal(5, in_tower((block,12),(block,1)), true, false).
final_goal(5, in_tower((block,12),(block,10)), false, false).
final_goal(5, in_tower((block,12),(block,10)), true, true).
final_goal(5, in_tower((block,12),(block,11)), false, false).
final_goal(5, in_tower((block,12),(block,11)), true, true).
final_goal(5, in_tower((block,12),(block,12)), false, false).
final_goal(5, in_tower((block,12),(block,12)), true, true).
final_goal(5, in_tower((block,12),(block,13)), false, true).
final_goal(5, in_tower((block,12),(block,13)), true, false).
final_goal(5, in_tower((block,12),(block,14)), false, true).
final_goal(5, in_tower((block,12),(block,14)), true, false).
final_goal(5, in_tower((block,12),(block,15)), false, true).
final_goal(5, in_tower((block,12),(block,15)), true, false).
final_goal(5, in_tower((block,12),(block,16)), false, true).
final_goal(5, in_tower((block,12),(block,16)), true, false).
final_goal(5, in_tower((block,12),(block,17)), false, true).
final_goal(5, in_tower((block,12),(block,17)), true, false).
final_goal(5, in_tower((block,12),(block,18)), false, true).
final_goal(5, in_tower((block,12),(block,18)), true, false).
final_goal(5, in_tower((block,12),(block,2)), false, true).
final_goal(5, in_tower((block,12),(block,2)), true, false).
final_goal(5, in_tower((block,12),(block,3)), false, true).
final_goal(5, in_tower((block,12),(block,3)), true, false).
final_goal(5, in_tower((block,12),(block,4)), false, true).
final_goal(5, in_tower((block,12),(block,4)), true, false).
final_goal(5, in_tower((block,12),(block,5)), false, true).
final_goal(5, in_tower((block,12),(block,5)), true, false).
final_goal(5, in_tower((block,12),(block,6)), false, true).
final_goal(5, in_tower((block,12),(block,6)), true, false).
final_goal(5, in_tower((block,12),(block,7)), false, true).
final_goal(5, in_tower((block,12),(block,7)), true, false).
final_goal(5, in_tower((block,12),(block,8)), false, true).
final_goal(5, in_tower((block,12),(block,8)), true, false).
final_goal(5, in_tower((block,12),(block,9)), false, true).
final_goal(5, in_tower((block,12),(block,9)), true, false).
final_goal(5, in_tower((block,13),(block,1)), false, true).
final_goal(5, in_tower((block,13),(block,1)), true, false).
final_goal(5, in_tower((block,13),(block,10)), false, true).
final_goal(5, in_tower((block,13),(block,10)), true, false).
final_goal(5, in_tower((block,13),(block,11)), false, true).
final_goal(5, in_tower((block,13),(block,11)), true, false).
final_goal(5, in_tower((block,13),(block,12)), false, true).
final_goal(5, in_tower((block,13),(block,12)), true, false).
final_goal(5, in_tower((block,13),(block,13)), false, true).
final_goal(5, in_tower((block,13),(block,13)), true, false).
final_goal(5, in_tower((block,13),(block,14)), false, true).
final_goal(5, in_tower((block,13),(block,14)), true, false).
final_goal(5, in_tower((block,13),(block,15)), false, true).
final_goal(5, in_tower((block,13),(block,15)), true, false).
final_goal(5, in_tower((block,13),(block,16)), false, true).
final_goal(5, in_tower((block,13),(block,16)), true, false).
final_goal(5, in_tower((block,13),(block,17)), false, true).
final_goal(5, in_tower((block,13),(block,17)), true, false).
final_goal(5, in_tower((block,13),(block,18)), false, true).
final_goal(5, in_tower((block,13),(block,18)), true, false).
final_goal(5, in_tower((block,13),(block,2)), false, true).
final_goal(5, in_tower((block,13),(block,2)), true, false).
final_goal(5, in_tower((block,13),(block,3)), false, true).
final_goal(5, in_tower((block,13),(block,3)), true, false).
final_goal(5, in_tower((block,13),(block,4)), false, true).
final_goal(5, in_tower((block,13),(block,4)), true, false).
final_goal(5, in_tower((block,13),(block,5)), false, true).
final_goal(5, in_tower((block,13),(block,5)), true, false).
final_goal(5, in_tower((block,13),(block,6)), false, true).
final_goal(5, in_tower((block,13),(block,6)), true, false).
final_goal(5, in_tower((block,13),(block,7)), false, true).
final_goal(5, in_tower((block,13),(block,7)), true, false).
final_goal(5, in_tower((block,13),(block,8)), false, true).
final_goal(5, in_tower((block,13),(block,8)), true, false).
final_goal(5, in_tower((block,13),(block,9)), false, true).
final_goal(5, in_tower((block,13),(block,9)), true, false).
final_goal(5, in_tower((block,14),(block,1)), false, true).
final_goal(5, in_tower((block,14),(block,1)), true, false).
final_goal(5, in_tower((block,14),(block,10)), false, true).
final_goal(5, in_tower((block,14),(block,10)), true, false).
final_goal(5, in_tower((block,14),(block,11)), false, true).
final_goal(5, in_tower((block,14),(block,11)), true, false).
final_goal(5, in_tower((block,14),(block,12)), false, true).
final_goal(5, in_tower((block,14),(block,12)), true, false).
final_goal(5, in_tower((block,14),(block,13)), false, true).
final_goal(5, in_tower((block,14),(block,13)), true, false).
final_goal(5, in_tower((block,14),(block,14)), false, true).
final_goal(5, in_tower((block,14),(block,14)), true, false).
final_goal(5, in_tower((block,14),(block,15)), false, true).
final_goal(5, in_tower((block,14),(block,15)), true, false).
final_goal(5, in_tower((block,14),(block,16)), false, true).
final_goal(5, in_tower((block,14),(block,16)), true, false).
final_goal(5, in_tower((block,14),(block,17)), false, true).
final_goal(5, in_tower((block,14),(block,17)), true, false).
final_goal(5, in_tower((block,14),(block,18)), false, true).
final_goal(5, in_tower((block,14),(block,18)), true, false).
final_goal(5, in_tower((block,14),(block,2)), false, true).
final_goal(5, in_tower((block,14),(block,2)), true, false).
final_goal(5, in_tower((block,14),(block,3)), false, true).
final_goal(5, in_tower((block,14),(block,3)), true, false).
final_goal(5, in_tower((block,14),(block,4)), false, true).
final_goal(5, in_tower((block,14),(block,4)), true, false).
final_goal(5, in_tower((block,14),(block,5)), false, true).
final_goal(5, in_tower((block,14),(block,5)), true, false).
final_goal(5, in_tower((block,14),(block,6)), false, true).
final_goal(5, in_tower((block,14),(block,6)), true, false).
final_goal(5, in_tower((block,14),(block,7)), false, true).
final_goal(5, in_tower((block,14),(block,7)), true, false).
final_goal(5, in_tower((block,14),(block,8)), false, true).
final_goal(5, in_tower((block,14),(block,8)), true, false).
final_goal(5, in_tower((block,14),(block,9)), false, true).
final_goal(5, in_tower((block,14),(block,9)), true, false).
final_goal(5, in_tower((block,15),(block,1)), false, true).
final_goal(5, in_tower((block,15),(block,1)), true, false).
final_goal(5, in_tower((block,15),(block,10)), false, true).
final_goal(5, in_tower((block,15),(block,10)), true, false).
final_goal(5, in_tower((block,15),(block,11)), false, true).
final_goal(5, in_tower((block,15),(block,11)), true, false).
final_goal(5, in_tower((block,15),(block,12)), false, true).
final_goal(5, in_tower((block,15),(block,12)), true, false).
final_goal(5, in_tower((block,15),(block,13)), false, false).
final_goal(5, in_tower((block,15),(block,13)), true, true).
final_goal(5, in_tower((block,15),(block,14)), false, false).
final_goal(5, in_tower((block,15),(block,14)), true, true).
final_goal(5, in_tower((block,15),(block,15)), false, false).
final_goal(5, in_tower((block,15),(block,15)), true, true).
final_goal(5, in_tower((block,15),(block,16)), false, true).
final_goal(5, in_tower((block,15),(block,16)), true, false).
final_goal(5, in_tower((block,15),(block,17)), false, true).
final_goal(5, in_tower((block,15),(block,17)), true, false).
final_goal(5, in_tower((block,15),(block,18)), false, true).
final_goal(5, in_tower((block,15),(block,18)), true, false).
final_goal(5, in_tower((block,15),(block,2)), false, true).
final_goal(5, in_tower((block,15),(block,2)), true, false).
final_goal(5, in_tower((block,15),(block,3)), false, true).
final_goal(5, in_tower((block,15),(block,3)), true, false).
final_goal(5, in_tower((block,15),(block,4)), false, true).
final_goal(5, in_tower((block,15),(block,4)), true, false).
final_goal(5, in_tower((block,15),(block,5)), false, true).
final_goal(5, in_tower((block,15),(block,5)), true, false).
final_goal(5, in_tower((block,15),(block,6)), false, true).
final_goal(5, in_tower((block,15),(block,6)), true, false).
final_goal(5, in_tower((block,15),(block,7)), false, true).
final_goal(5, in_tower((block,15),(block,7)), true, false).
final_goal(5, in_tower((block,15),(block,8)), false, true).
final_goal(5, in_tower((block,15),(block,8)), true, false).
final_goal(5, in_tower((block,15),(block,9)), false, true).
final_goal(5, in_tower((block,15),(block,9)), true, false).
final_goal(5, in_tower((block,16),(block,1)), false, true).
final_goal(5, in_tower((block,16),(block,1)), true, false).
final_goal(5, in_tower((block,16),(block,10)), false, true).
final_goal(5, in_tower((block,16),(block,10)), true, false).
final_goal(5, in_tower((block,16),(block,11)), false, true).
final_goal(5, in_tower((block,16),(block,11)), true, false).
final_goal(5, in_tower((block,16),(block,12)), false, true).
final_goal(5, in_tower((block,16),(block,12)), true, false).
final_goal(5, in_tower((block,16),(block,13)), false, true).
final_goal(5, in_tower((block,16),(block,13)), true, false).
final_goal(5, in_tower((block,16),(block,14)), false, true).
final_goal(5, in_tower((block,16),(block,14)), true, false).
final_goal(5, in_tower((block,16),(block,15)), false, true).
final_goal(5, in_tower((block,16),(block,15)), true, false).
final_goal(5, in_tower((block,16),(block,16)), false, true).
final_goal(5, in_tower((block,16),(block,16)), true, false).
final_goal(5, in_tower((block,16),(block,17)), false, true).
final_goal(5, in_tower((block,16),(block,17)), true, false).
final_goal(5, in_tower((block,16),(block,18)), false, true).
final_goal(5, in_tower((block,16),(block,18)), true, false).
final_goal(5, in_tower((block,16),(block,2)), false, true).
final_goal(5, in_tower((block,16),(block,2)), true, false).
final_goal(5, in_tower((block,16),(block,3)), false, true).
final_goal(5, in_tower((block,16),(block,3)), true, false).
final_goal(5, in_tower((block,16),(block,4)), false, true).
final_goal(5, in_tower((block,16),(block,4)), true, false).
final_goal(5, in_tower((block,16),(block,5)), false, true).
final_goal(5, in_tower((block,16),(block,5)), true, false).
final_goal(5, in_tower((block,16),(block,6)), false, true).
final_goal(5, in_tower((block,16),(block,6)), true, false).
final_goal(5, in_tower((block,16),(block,7)), false, true).
final_goal(5, in_tower((block,16),(block,7)), true, false).
final_goal(5, in_tower((block,16),(block,8)), false, true).
final_goal(5, in_tower((block,16),(block,8)), true, false).
final_goal(5, in_tower((block,16),(block,9)), false, true).
final_goal(5, in_tower((block,16),(block,9)), true, false).
final_goal(5, in_tower((block,17),(block,1)), false, true).
final_goal(5, in_tower((block,17),(block,1)), true, false).
final_goal(5, in_tower((block,17),(block,10)), false, true).
final_goal(5, in_tower((block,17),(block,10)), true, false).
final_goal(5, in_tower((block,17),(block,11)), false, true).
final_goal(5, in_tower((block,17),(block,11)), true, false).
final_goal(5, in_tower((block,17),(block,12)), false, true).
final_goal(5, in_tower((block,17),(block,12)), true, false).
final_goal(5, in_tower((block,17),(block,13)), false, true).
final_goal(5, in_tower((block,17),(block,13)), true, false).
final_goal(5, in_tower((block,17),(block,14)), false, true).
final_goal(5, in_tower((block,17),(block,14)), true, false).
final_goal(5, in_tower((block,17),(block,15)), false, true).
final_goal(5, in_tower((block,17),(block,15)), true, false).
final_goal(5, in_tower((block,17),(block,16)), false, true).
final_goal(5, in_tower((block,17),(block,16)), true, false).
final_goal(5, in_tower((block,17),(block,17)), false, true).
final_goal(5, in_tower((block,17),(block,17)), true, false).
final_goal(5, in_tower((block,17),(block,18)), false, true).
final_goal(5, in_tower((block,17),(block,18)), true, false).
final_goal(5, in_tower((block,17),(block,2)), false, true).
final_goal(5, in_tower((block,17),(block,2)), true, false).
final_goal(5, in_tower((block,17),(block,3)), false, true).
final_goal(5, in_tower((block,17),(block,3)), true, false).
final_goal(5, in_tower((block,17),(block,4)), false, true).
final_goal(5, in_tower((block,17),(block,4)), true, false).
final_goal(5, in_tower((block,17),(block,5)), false, true).
final_goal(5, in_tower((block,17),(block,5)), true, false).
final_goal(5, in_tower((block,17),(block,6)), false, true).
final_goal(5, in_tower((block,17),(block,6)), true, false).
final_goal(5, in_tower((block,17),(block,7)), false, true).
final_goal(5, in_tower((block,17),(block,7)), true, false).
final_goal(5, in_tower((block,17),(block,8)), false, true).
final_goal(5, in_tower((block,17),(block,8)), true, false).
final_goal(5, in_tower((block,17),(block,9)), false, true).
final_goal(5, in_tower((block,17),(block,9)), true, false).
final_goal(5, in_tower((block,18),(block,1)), false, true).
final_goal(5, in_tower((block,18),(block,1)), true, false).
final_goal(5, in_tower((block,18),(block,10)), false, true).
final_goal(5, in_tower((block,18),(block,10)), true, false).
final_goal(5, in_tower((block,18),(block,11)), false, true).
final_goal(5, in_tower((block,18),(block,11)), true, false).
final_goal(5, in_tower((block,18),(block,12)), false, true).
final_goal(5, in_tower((block,18),(block,12)), true, false).
final_goal(5, in_tower((block,18),(block,13)), false, true).
final_goal(5, in_tower((block,18),(block,13)), true, false).
final_goal(5, in_tower((block,18),(block,14)), false, true).
final_goal(5, in_tower((block,18),(block,14)), true, false).
final_goal(5, in_tower((block,18),(block,15)), false, true).
final_goal(5, in_tower((block,18),(block,15)), true, false).
final_goal(5, in_tower((block,18),(block,16)), false, false).
final_goal(5, in_tower((block,18),(block,16)), true, true).
final_goal(5, in_tower((block,18),(block,17)), false, false).
final_goal(5, in_tower((block,18),(block,17)), true, true).
final_goal(5, in_tower((block,18),(block,18)), false, false).
final_goal(5, in_tower((block,18),(block,18)), true, true).
final_goal(5, in_tower((block,18),(block,2)), false, true).
final_goal(5, in_tower((block,18),(block,2)), true, false).
final_goal(5, in_tower((block,18),(block,3)), false, true).
final_goal(5, in_tower((block,18),(block,3)), true, false).
final_goal(5, in_tower((block,18),(block,4)), false, true).
final_goal(5, in_tower((block,18),(block,4)), true, false).
final_goal(5, in_tower((block,18),(block,5)), false, true).
final_goal(5, in_tower((block,18),(block,5)), true, false).
final_goal(5, in_tower((block,18),(block,6)), false, true).
final_goal(5, in_tower((block,18),(block,6)), true, false).
final_goal(5, in_tower((block,18),(block,7)), false, true).
final_goal(5, in_tower((block,18),(block,7)), true, false).
final_goal(5, in_tower((block,18),(block,8)), false, true).
final_goal(5, in_tower((block,18),(block,8)), true, false).
final_goal(5, in_tower((block,18),(block,9)), false, true).
final_goal(5, in_tower((block,18),(block,9)), true, false).
final_goal(5, in_tower((block,2),(block,1)), false, true).
final_goal(5, in_tower((block,2),(block,1)), true, false).
final_goal(5, in_tower((block,2),(block,10)), false, true).
final_goal(5, in_tower((block,2),(block,10)), true, false).
final_goal(5, in_tower((block,2),(block,11)), false, true).
final_goal(5, in_tower((block,2),(block,11)), true, false).
final_goal(5, in_tower((block,2),(block,12)), false, true).
final_goal(5, in_tower((block,2),(block,12)), true, false).
final_goal(5, in_tower((block,2),(block,13)), false, true).
final_goal(5, in_tower((block,2),(block,13)), true, false).
final_goal(5, in_tower((block,2),(block,14)), false, true).
final_goal(5, in_tower((block,2),(block,14)), true, false).
final_goal(5, in_tower((block,2),(block,15)), false, true).
final_goal(5, in_tower((block,2),(block,15)), true, false).
final_goal(5, in_tower((block,2),(block,16)), false, true).
final_goal(5, in_tower((block,2),(block,16)), true, false).
final_goal(5, in_tower((block,2),(block,17)), false, true).
final_goal(5, in_tower((block,2),(block,17)), true, false).
final_goal(5, in_tower((block,2),(block,18)), false, true).
final_goal(5, in_tower((block,2),(block,18)), true, false).
final_goal(5, in_tower((block,2),(block,2)), false, true).
final_goal(5, in_tower((block,2),(block,2)), true, false).
final_goal(5, in_tower((block,2),(block,3)), false, true).
final_goal(5, in_tower((block,2),(block,3)), true, false).
final_goal(5, in_tower((block,2),(block,4)), false, true).
final_goal(5, in_tower((block,2),(block,4)), true, false).
final_goal(5, in_tower((block,2),(block,5)), false, true).
final_goal(5, in_tower((block,2),(block,5)), true, false).
final_goal(5, in_tower((block,2),(block,6)), false, true).
final_goal(5, in_tower((block,2),(block,6)), true, false).
final_goal(5, in_tower((block,2),(block,7)), false, true).
final_goal(5, in_tower((block,2),(block,7)), true, false).
final_goal(5, in_tower((block,2),(block,8)), false, true).
final_goal(5, in_tower((block,2),(block,8)), true, false).
final_goal(5, in_tower((block,2),(block,9)), false, true).
final_goal(5, in_tower((block,2),(block,9)), true, false).
final_goal(5, in_tower((block,3),(block,1)), false, false).
final_goal(5, in_tower((block,3),(block,1)), true, true).
final_goal(5, in_tower((block,3),(block,10)), false, true).
final_goal(5, in_tower((block,3),(block,10)), true, false).
final_goal(5, in_tower((block,3),(block,11)), false, true).
final_goal(5, in_tower((block,3),(block,11)), true, false).
final_goal(5, in_tower((block,3),(block,12)), false, true).
final_goal(5, in_tower((block,3),(block,12)), true, false).
final_goal(5, in_tower((block,3),(block,13)), false, true).
final_goal(5, in_tower((block,3),(block,13)), true, false).
final_goal(5, in_tower((block,3),(block,14)), false, true).
final_goal(5, in_tower((block,3),(block,14)), true, false).
final_goal(5, in_tower((block,3),(block,15)), false, true).
final_goal(5, in_tower((block,3),(block,15)), true, false).
final_goal(5, in_tower((block,3),(block,16)), false, true).
final_goal(5, in_tower((block,3),(block,16)), true, false).
final_goal(5, in_tower((block,3),(block,17)), false, true).
final_goal(5, in_tower((block,3),(block,17)), true, false).
final_goal(5, in_tower((block,3),(block,18)), false, true).
final_goal(5, in_tower((block,3),(block,18)), true, false).
final_goal(5, in_tower((block,3),(block,2)), false, false).
final_goal(5, in_tower((block,3),(block,2)), true, true).
final_goal(5, in_tower((block,3),(block,3)), false, false).
final_goal(5, in_tower((block,3),(block,3)), true, true).
final_goal(5, in_tower((block,3),(block,4)), false, true).
final_goal(5, in_tower((block,3),(block,4)), true, false).
final_goal(5, in_tower((block,3),(block,5)), false, true).
final_goal(5, in_tower((block,3),(block,5)), true, false).
final_goal(5, in_tower((block,3),(block,6)), false, true).
final_goal(5, in_tower((block,3),(block,6)), true, false).
final_goal(5, in_tower((block,3),(block,7)), false, true).
final_goal(5, in_tower((block,3),(block,7)), true, false).
final_goal(5, in_tower((block,3),(block,8)), false, true).
final_goal(5, in_tower((block,3),(block,8)), true, false).
final_goal(5, in_tower((block,3),(block,9)), false, true).
final_goal(5, in_tower((block,3),(block,9)), true, false).
final_goal(5, in_tower((block,4),(block,1)), false, true).
final_goal(5, in_tower((block,4),(block,1)), true, false).
final_goal(5, in_tower((block,4),(block,10)), false, true).
final_goal(5, in_tower((block,4),(block,10)), true, false).
final_goal(5, in_tower((block,4),(block,11)), false, true).
final_goal(5, in_tower((block,4),(block,11)), true, false).
final_goal(5, in_tower((block,4),(block,12)), false, true).
final_goal(5, in_tower((block,4),(block,12)), true, false).
final_goal(5, in_tower((block,4),(block,13)), false, true).
final_goal(5, in_tower((block,4),(block,13)), true, false).
final_goal(5, in_tower((block,4),(block,14)), false, true).
final_goal(5, in_tower((block,4),(block,14)), true, false).
final_goal(5, in_tower((block,4),(block,15)), false, true).
final_goal(5, in_tower((block,4),(block,15)), true, false).
final_goal(5, in_tower((block,4),(block,16)), false, true).
final_goal(5, in_tower((block,4),(block,16)), true, false).
final_goal(5, in_tower((block,4),(block,17)), false, true).
final_goal(5, in_tower((block,4),(block,17)), true, false).
final_goal(5, in_tower((block,4),(block,18)), false, true).
final_goal(5, in_tower((block,4),(block,18)), true, false).
final_goal(5, in_tower((block,4),(block,2)), false, true).
final_goal(5, in_tower((block,4),(block,2)), true, false).
final_goal(5, in_tower((block,4),(block,3)), false, true).
final_goal(5, in_tower((block,4),(block,3)), true, false).
final_goal(5, in_tower((block,4),(block,4)), false, true).
final_goal(5, in_tower((block,4),(block,4)), true, false).
final_goal(5, in_tower((block,4),(block,5)), false, true).
final_goal(5, in_tower((block,4),(block,5)), true, false).
final_goal(5, in_tower((block,4),(block,6)), false, true).
final_goal(5, in_tower((block,4),(block,6)), true, false).
final_goal(5, in_tower((block,4),(block,7)), false, true).
final_goal(5, in_tower((block,4),(block,7)), true, false).
final_goal(5, in_tower((block,4),(block,8)), false, true).
final_goal(5, in_tower((block,4),(block,8)), true, false).
final_goal(5, in_tower((block,4),(block,9)), false, true).
final_goal(5, in_tower((block,4),(block,9)), true, false).
final_goal(5, in_tower((block,5),(block,1)), false, true).
final_goal(5, in_tower((block,5),(block,1)), true, false).
final_goal(5, in_tower((block,5),(block,10)), false, true).
final_goal(5, in_tower((block,5),(block,10)), true, false).
final_goal(5, in_tower((block,5),(block,11)), false, true).
final_goal(5, in_tower((block,5),(block,11)), true, false).
final_goal(5, in_tower((block,5),(block,12)), false, true).
final_goal(5, in_tower((block,5),(block,12)), true, false).
final_goal(5, in_tower((block,5),(block,13)), false, true).
final_goal(5, in_tower((block,5),(block,13)), true, false).
final_goal(5, in_tower((block,5),(block,14)), false, true).
final_goal(5, in_tower((block,5),(block,14)), true, false).
final_goal(5, in_tower((block,5),(block,15)), false, true).
final_goal(5, in_tower((block,5),(block,15)), true, false).
final_goal(5, in_tower((block,5),(block,16)), false, true).
final_goal(5, in_tower((block,5),(block,16)), true, false).
final_goal(5, in_tower((block,5),(block,17)), false, true).
final_goal(5, in_tower((block,5),(block,17)), true, false).
final_goal(5, in_tower((block,5),(block,18)), false, true).
final_goal(5, in_tower((block,5),(block,18)), true, false).
final_goal(5, in_tower((block,5),(block,2)), false, true).
final_goal(5, in_tower((block,5),(block,2)), true, false).
final_goal(5, in_tower((block,5),(block,3)), false, true).
final_goal(5, in_tower((block,5),(block,3)), true, false).
final_goal(5, in_tower((block,5),(block,4)), false, true).
final_goal(5, in_tower((block,5),(block,4)), true, false).
final_goal(5, in_tower((block,5),(block,5)), false, true).
final_goal(5, in_tower((block,5),(block,5)), true, false).
final_goal(5, in_tower((block,5),(block,6)), false, true).
final_goal(5, in_tower((block,5),(block,6)), true, false).
final_goal(5, in_tower((block,5),(block,7)), false, true).
final_goal(5, in_tower((block,5),(block,7)), true, false).
final_goal(5, in_tower((block,5),(block,8)), false, true).
final_goal(5, in_tower((block,5),(block,8)), true, false).
final_goal(5, in_tower((block,5),(block,9)), false, true).
final_goal(5, in_tower((block,5),(block,9)), true, false).
final_goal(5, in_tower((block,6),(block,1)), false, true).
final_goal(5, in_tower((block,6),(block,1)), true, false).
final_goal(5, in_tower((block,6),(block,10)), false, true).
final_goal(5, in_tower((block,6),(block,10)), true, false).
final_goal(5, in_tower((block,6),(block,11)), false, true).
final_goal(5, in_tower((block,6),(block,11)), true, false).
final_goal(5, in_tower((block,6),(block,12)), false, true).
final_goal(5, in_tower((block,6),(block,12)), true, false).
final_goal(5, in_tower((block,6),(block,13)), false, true).
final_goal(5, in_tower((block,6),(block,13)), true, false).
final_goal(5, in_tower((block,6),(block,14)), false, true).
final_goal(5, in_tower((block,6),(block,14)), true, false).
final_goal(5, in_tower((block,6),(block,15)), false, true).
final_goal(5, in_tower((block,6),(block,15)), true, false).
final_goal(5, in_tower((block,6),(block,16)), false, true).
final_goal(5, in_tower((block,6),(block,16)), true, false).
final_goal(5, in_tower((block,6),(block,17)), false, true).
final_goal(5, in_tower((block,6),(block,17)), true, false).
final_goal(5, in_tower((block,6),(block,18)), false, true).
final_goal(5, in_tower((block,6),(block,18)), true, false).
final_goal(5, in_tower((block,6),(block,2)), false, true).
final_goal(5, in_tower((block,6),(block,2)), true, false).
final_goal(5, in_tower((block,6),(block,3)), false, true).
final_goal(5, in_tower((block,6),(block,3)), true, false).
final_goal(5, in_tower((block,6),(block,4)), false, false).
final_goal(5, in_tower((block,6),(block,4)), true, true).
final_goal(5, in_tower((block,6),(block,5)), false, false).
final_goal(5, in_tower((block,6),(block,5)), true, true).
final_goal(5, in_tower((block,6),(block,6)), false, false).
final_goal(5, in_tower((block,6),(block,6)), true, true).
final_goal(5, in_tower((block,6),(block,7)), false, true).
final_goal(5, in_tower((block,6),(block,7)), true, false).
final_goal(5, in_tower((block,6),(block,8)), false, true).
final_goal(5, in_tower((block,6),(block,8)), true, false).
final_goal(5, in_tower((block,6),(block,9)), false, true).
final_goal(5, in_tower((block,6),(block,9)), true, false).
final_goal(5, in_tower((block,7),(block,1)), false, true).
final_goal(5, in_tower((block,7),(block,1)), true, false).
final_goal(5, in_tower((block,7),(block,10)), false, true).
final_goal(5, in_tower((block,7),(block,10)), true, false).
final_goal(5, in_tower((block,7),(block,11)), false, true).
final_goal(5, in_tower((block,7),(block,11)), true, false).
final_goal(5, in_tower((block,7),(block,12)), false, true).
final_goal(5, in_tower((block,7),(block,12)), true, false).
final_goal(5, in_tower((block,7),(block,13)), false, true).
final_goal(5, in_tower((block,7),(block,13)), true, false).
final_goal(5, in_tower((block,7),(block,14)), false, true).
final_goal(5, in_tower((block,7),(block,14)), true, false).
final_goal(5, in_tower((block,7),(block,15)), false, true).
final_goal(5, in_tower((block,7),(block,15)), true, false).
final_goal(5, in_tower((block,7),(block,16)), false, true).
final_goal(5, in_tower((block,7),(block,16)), true, false).
final_goal(5, in_tower((block,7),(block,17)), false, true).
final_goal(5, in_tower((block,7),(block,17)), true, false).
final_goal(5, in_tower((block,7),(block,18)), false, true).
final_goal(5, in_tower((block,7),(block,18)), true, false).
final_goal(5, in_tower((block,7),(block,2)), false, true).
final_goal(5, in_tower((block,7),(block,2)), true, false).
final_goal(5, in_tower((block,7),(block,3)), false, true).
final_goal(5, in_tower((block,7),(block,3)), true, false).
final_goal(5, in_tower((block,7),(block,4)), false, true).
final_goal(5, in_tower((block,7),(block,4)), true, false).
final_goal(5, in_tower((block,7),(block,5)), false, true).
final_goal(5, in_tower((block,7),(block,5)), true, false).
final_goal(5, in_tower((block,7),(block,6)), false, true).
final_goal(5, in_tower((block,7),(block,6)), true, false).
final_goal(5, in_tower((block,7),(block,7)), false, true).
final_goal(5, in_tower((block,7),(block,7)), true, false).
final_goal(5, in_tower((block,7),(block,8)), false, true).
final_goal(5, in_tower((block,7),(block,8)), true, false).
final_goal(5, in_tower((block,7),(block,9)), false, true).
final_goal(5, in_tower((block,7),(block,9)), true, false).
final_goal(5, in_tower((block,8),(block,1)), false, true).
final_goal(5, in_tower((block,8),(block,1)), true, false).
final_goal(5, in_tower((block,8),(block,10)), false, true).
final_goal(5, in_tower((block,8),(block,10)), true, false).
final_goal(5, in_tower((block,8),(block,11)), false, true).
final_goal(5, in_tower((block,8),(block,11)), true, false).
final_goal(5, in_tower((block,8),(block,12)), false, true).
final_goal(5, in_tower((block,8),(block,12)), true, false).
final_goal(5, in_tower((block,8),(block,13)), false, true).
final_goal(5, in_tower((block,8),(block,13)), true, false).
final_goal(5, in_tower((block,8),(block,14)), false, true).
final_goal(5, in_tower((block,8),(block,14)), true, false).
final_goal(5, in_tower((block,8),(block,15)), false, true).
final_goal(5, in_tower((block,8),(block,15)), true, false).
final_goal(5, in_tower((block,8),(block,16)), false, true).
final_goal(5, in_tower((block,8),(block,16)), true, false).
final_goal(5, in_tower((block,8),(block,17)), false, true).
final_goal(5, in_tower((block,8),(block,17)), true, false).
final_goal(5, in_tower((block,8),(block,18)), false, true).
final_goal(5, in_tower((block,8),(block,18)), true, false).
final_goal(5, in_tower((block,8),(block,2)), false, true).
final_goal(5, in_tower((block,8),(block,2)), true, false).
final_goal(5, in_tower((block,8),(block,3)), false, true).
final_goal(5, in_tower((block,8),(block,3)), true, false).
final_goal(5, in_tower((block,8),(block,4)), false, true).
final_goal(5, in_tower((block,8),(block,4)), true, false).
final_goal(5, in_tower((block,8),(block,5)), false, true).
final_goal(5, in_tower((block,8),(block,5)), true, false).
final_goal(5, in_tower((block,8),(block,6)), false, true).
final_goal(5, in_tower((block,8),(block,6)), true, false).
final_goal(5, in_tower((block,8),(block,7)), false, true).
final_goal(5, in_tower((block,8),(block,7)), true, false).
final_goal(5, in_tower((block,8),(block,8)), false, true).
final_goal(5, in_tower((block,8),(block,8)), true, false).
final_goal(5, in_tower((block,8),(block,9)), false, true).
final_goal(5, in_tower((block,8),(block,9)), true, false).
final_goal(5, in_tower((block,9),(block,1)), false, true).
final_goal(5, in_tower((block,9),(block,1)), true, false).
final_goal(5, in_tower((block,9),(block,10)), false, true).
final_goal(5, in_tower((block,9),(block,10)), true, false).
final_goal(5, in_tower((block,9),(block,11)), false, true).
final_goal(5, in_tower((block,9),(block,11)), true, false).
final_goal(5, in_tower((block,9),(block,12)), false, true).
final_goal(5, in_tower((block,9),(block,12)), true, false).
final_goal(5, in_tower((block,9),(block,13)), false, true).
final_goal(5, in_tower((block,9),(block,13)), true, false).
final_goal(5, in_tower((block,9),(block,14)), false, true).
final_goal(5, in_tower((block,9),(block,14)), true, false).
final_goal(5, in_tower((block,9),(block,15)), false, true).
final_goal(5, in_tower((block,9),(block,15)), true, false).
final_goal(5, in_tower((block,9),(block,16)), false, true).
final_goal(5, in_tower((block,9),(block,16)), true, false).
final_goal(5, in_tower((block,9),(block,17)), false, true).
final_goal(5, in_tower((block,9),(block,17)), true, false).
final_goal(5, in_tower((block,9),(block,18)), false, true).
final_goal(5, in_tower((block,9),(block,18)), true, false).
final_goal(5, in_tower((block,9),(block,2)), false, true).
final_goal(5, in_tower((block,9),(block,2)), true, false).
final_goal(5, in_tower((block,9),(block,3)), false, true).
final_goal(5, in_tower((block,9),(block,3)), true, false).
final_goal(5, in_tower((block,9),(block,4)), false, true).
final_goal(5, in_tower((block,9),(block,4)), true, false).
final_goal(5, in_tower((block,9),(block,5)), false, true).
final_goal(5, in_tower((block,9),(block,5)), true, false).
final_goal(5, in_tower((block,9),(block,6)), false, true).
final_goal(5, in_tower((block,9),(block,6)), true, false).
final_goal(5, in_tower((block,9),(block,7)), false, false).
final_goal(5, in_tower((block,9),(block,7)), true, true).
final_goal(5, in_tower((block,9),(block,8)), false, false).
final_goal(5, in_tower((block,9),(block,8)), true, true).
final_goal(5, in_tower((block,9),(block,9)), false, false).
final_goal(5, in_tower((block,9),(block,9)), true, true).
final_goal(5, on((block,1)), (block,10), false).
final_goal(5, on((block,1)), (block,11), false).
final_goal(5, on((block,1)), (block,12), false).
final_goal(5, on((block,1)), (block,13), false).
final_goal(5, on((block,1)), (block,14), false).
final_goal(5, on((block,1)), (block,15), false).
final_goal(5, on((block,1)), (block,16), false).
final_goal(5, on((block,1)), (block,17), false).
final_goal(5, on((block,1)), (block,18), false).
final_goal(5, on((block,1)), (block,2), true).
final_goal(5, on((block,1)), (block,3), false).
final_goal(5, on((block,1)), (block,4), false).
final_goal(5, on((block,1)), (block,5), false).
final_goal(5, on((block,1)), (block,6), false).
final_goal(5, on((block,1)), (block,7), false).
final_goal(5, on((block,1)), (block,8), false).
final_goal(5, on((block,1)), (block,9), false).
final_goal(5, on((block,1)), nothing, false).
final_goal(5, on((block,1)), puzzle_room_1_table, false).
final_goal(5, on((block,1)), puzzle_room_2_table, false).
final_goal(5, on((block,10)), (block,1), false).
final_goal(5, on((block,10)), (block,11), true).
final_goal(5, on((block,10)), (block,12), false).
final_goal(5, on((block,10)), (block,13), false).
final_goal(5, on((block,10)), (block,14), false).
final_goal(5, on((block,10)), (block,15), false).
final_goal(5, on((block,10)), (block,16), false).
final_goal(5, on((block,10)), (block,17), false).
final_goal(5, on((block,10)), (block,18), false).
final_goal(5, on((block,10)), (block,2), false).
final_goal(5, on((block,10)), (block,3), false).
final_goal(5, on((block,10)), (block,4), false).
final_goal(5, on((block,10)), (block,5), false).
final_goal(5, on((block,10)), (block,6), false).
final_goal(5, on((block,10)), (block,7), false).
final_goal(5, on((block,10)), (block,8), false).
final_goal(5, on((block,10)), (block,9), false).
final_goal(5, on((block,10)), nothing, false).
final_goal(5, on((block,10)), puzzle_room_1_table, false).
final_goal(5, on((block,10)), puzzle_room_2_table, false).
final_goal(5, on((block,11)), (block,1), false).
final_goal(5, on((block,11)), (block,10), false).
final_goal(5, on((block,11)), (block,12), true).
final_goal(5, on((block,11)), (block,13), false).
final_goal(5, on((block,11)), (block,14), false).
final_goal(5, on((block,11)), (block,15), false).
final_goal(5, on((block,11)), (block,16), false).
final_goal(5, on((block,11)), (block,17), false).
final_goal(5, on((block,11)), (block,18), false).
final_goal(5, on((block,11)), (block,2), false).
final_goal(5, on((block,11)), (block,3), false).
final_goal(5, on((block,11)), (block,4), false).
final_goal(5, on((block,11)), (block,5), false).
final_goal(5, on((block,11)), (block,6), false).
final_goal(5, on((block,11)), (block,7), false).
final_goal(5, on((block,11)), (block,8), false).
final_goal(5, on((block,11)), (block,9), false).
final_goal(5, on((block,11)), nothing, false).
final_goal(5, on((block,11)), puzzle_room_1_table, false).
final_goal(5, on((block,11)), puzzle_room_2_table, false).
final_goal(5, on((block,12)), (block,1), false).
final_goal(5, on((block,12)), (block,10), false).
final_goal(5, on((block,12)), (block,11), false).
final_goal(5, on((block,12)), (block,13), false).
final_goal(5, on((block,12)), (block,14), false).
final_goal(5, on((block,12)), (block,15), false).
final_goal(5, on((block,12)), (block,16), false).
final_goal(5, on((block,12)), (block,17), false).
final_goal(5, on((block,12)), (block,18), false).
final_goal(5, on((block,12)), (block,2), false).
final_goal(5, on((block,12)), (block,3), false).
final_goal(5, on((block,12)), (block,4), false).
final_goal(5, on((block,12)), (block,5), false).
final_goal(5, on((block,12)), (block,6), false).
final_goal(5, on((block,12)), (block,7), false).
final_goal(5, on((block,12)), (block,8), false).
final_goal(5, on((block,12)), (block,9), false).
final_goal(5, on((block,12)), nothing, false).
final_goal(5, on((block,12)), puzzle_room_1_table, false).
final_goal(5, on((block,12)), puzzle_room_2_table, true).
final_goal(5, on((block,13)), (block,1), false).
final_goal(5, on((block,13)), (block,10), false).
final_goal(5, on((block,13)), (block,11), false).
final_goal(5, on((block,13)), (block,12), false).
final_goal(5, on((block,13)), (block,14), true).
final_goal(5, on((block,13)), (block,15), false).
final_goal(5, on((block,13)), (block,16), false).
final_goal(5, on((block,13)), (block,17), false).
final_goal(5, on((block,13)), (block,18), false).
final_goal(5, on((block,13)), (block,2), false).
final_goal(5, on((block,13)), (block,3), false).
final_goal(5, on((block,13)), (block,4), false).
final_goal(5, on((block,13)), (block,5), false).
final_goal(5, on((block,13)), (block,6), false).
final_goal(5, on((block,13)), (block,7), false).
final_goal(5, on((block,13)), (block,8), false).
final_goal(5, on((block,13)), (block,9), false).
final_goal(5, on((block,13)), nothing, false).
final_goal(5, on((block,13)), puzzle_room_1_table, false).
final_goal(5, on((block,13)), puzzle_room_2_table, false).
final_goal(5, on((block,14)), (block,1), false).
final_goal(5, on((block,14)), (block,10), false).
final_goal(5, on((block,14)), (block,11), false).
final_goal(5, on((block,14)), (block,12), false).
final_goal(5, on((block,14)), (block,13), false).
final_goal(5, on((block,14)), (block,15), true).
final_goal(5, on((block,14)), (block,16), false).
final_goal(5, on((block,14)), (block,17), false).
final_goal(5, on((block,14)), (block,18), false).
final_goal(5, on((block,14)), (block,2), false).
final_goal(5, on((block,14)), (block,3), false).
final_goal(5, on((block,14)), (block,4), false).
final_goal(5, on((block,14)), (block,5), false).
final_goal(5, on((block,14)), (block,6), false).
final_goal(5, on((block,14)), (block,7), false).
final_goal(5, on((block,14)), (block,8), false).
final_goal(5, on((block,14)), (block,9), false).
final_goal(5, on((block,14)), nothing, false).
final_goal(5, on((block,14)), puzzle_room_1_table, false).
final_goal(5, on((block,14)), puzzle_room_2_table, false).
final_goal(5, on((block,15)), (block,1), false).
final_goal(5, on((block,15)), (block,10), false).
final_goal(5, on((block,15)), (block,11), false).
final_goal(5, on((block,15)), (block,12), false).
final_goal(5, on((block,15)), (block,13), false).
final_goal(5, on((block,15)), (block,14), false).
final_goal(5, on((block,15)), (block,16), false).
final_goal(5, on((block,15)), (block,17), false).
final_goal(5, on((block,15)), (block,18), false).
final_goal(5, on((block,15)), (block,2), false).
final_goal(5, on((block,15)), (block,3), false).
final_goal(5, on((block,15)), (block,4), false).
final_goal(5, on((block,15)), (block,5), false).
final_goal(5, on((block,15)), (block,6), false).
final_goal(5, on((block,15)), (block,7), false).
final_goal(5, on((block,15)), (block,8), false).
final_goal(5, on((block,15)), (block,9), false).
final_goal(5, on((block,15)), nothing, false).
final_goal(5, on((block,15)), puzzle_room_1_table, false).
final_goal(5, on((block,15)), puzzle_room_2_table, true).
final_goal(5, on((block,16)), (block,1), false).
final_goal(5, on((block,16)), (block,10), false).
final_goal(5, on((block,16)), (block,11), false).
final_goal(5, on((block,16)), (block,12), false).
final_goal(5, on((block,16)), (block,13), false).
final_goal(5, on((block,16)), (block,14), false).
final_goal(5, on((block,16)), (block,15), false).
final_goal(5, on((block,16)), (block,17), true).
final_goal(5, on((block,16)), (block,18), false).
final_goal(5, on((block,16)), (block,2), false).
final_goal(5, on((block,16)), (block,3), false).
final_goal(5, on((block,16)), (block,4), false).
final_goal(5, on((block,16)), (block,5), false).
final_goal(5, on((block,16)), (block,6), false).
final_goal(5, on((block,16)), (block,7), false).
final_goal(5, on((block,16)), (block,8), false).
final_goal(5, on((block,16)), (block,9), false).
final_goal(5, on((block,16)), nothing, false).
final_goal(5, on((block,16)), puzzle_room_1_table, false).
final_goal(5, on((block,16)), puzzle_room_2_table, false).
final_goal(5, on((block,17)), (block,1), false).
final_goal(5, on((block,17)), (block,10), false).
final_goal(5, on((block,17)), (block,11), false).
final_goal(5, on((block,17)), (block,12), false).
final_goal(5, on((block,17)), (block,13), false).
final_goal(5, on((block,17)), (block,14), false).
final_goal(5, on((block,17)), (block,15), false).
final_goal(5, on((block,17)), (block,16), false).
final_goal(5, on((block,17)), (block,18), true).
final_goal(5, on((block,17)), (block,2), false).
final_goal(5, on((block,17)), (block,3), false).
final_goal(5, on((block,17)), (block,4), false).
final_goal(5, on((block,17)), (block,5), false).
final_goal(5, on((block,17)), (block,6), false).
final_goal(5, on((block,17)), (block,7), false).
final_goal(5, on((block,17)), (block,8), false).
final_goal(5, on((block,17)), (block,9), false).
final_goal(5, on((block,17)), nothing, false).
final_goal(5, on((block,17)), puzzle_room_1_table, false).
final_goal(5, on((block,17)), puzzle_room_2_table, false).
final_goal(5, on((block,18)), (block,1), false).
final_goal(5, on((block,18)), (block,10), false).
final_goal(5, on((block,18)), (block,11), false).
final_goal(5, on((block,18)), (block,12), false).
final_goal(5, on((block,18)), (block,13), false).
final_goal(5, on((block,18)), (block,14), false).
final_goal(5, on((block,18)), (block,15), false).
final_goal(5, on((block,18)), (block,16), false).
final_goal(5, on((block,18)), (block,17), false).
final_goal(5, on((block,18)), (block,2), false).
final_goal(5, on((block,18)), (block,3), false).
final_goal(5, on((block,18)), (block,4), false).
final_goal(5, on((block,18)), (block,5), false).
final_goal(5, on((block,18)), (block,6), false).
final_goal(5, on((block,18)), (block,7), false).
final_goal(5, on((block,18)), (block,8), false).
final_goal(5, on((block,18)), (block,9), false).
final_goal(5, on((block,18)), nothing, false).
final_goal(5, on((block,18)), puzzle_room_1_table, false).
final_goal(5, on((block,18)), puzzle_room_2_table, true).
final_goal(5, on((block,2)), (block,1), false).
final_goal(5, on((block,2)), (block,10), false).
final_goal(5, on((block,2)), (block,11), false).
final_goal(5, on((block,2)), (block,12), false).
final_goal(5, on((block,2)), (block,13), false).
final_goal(5, on((block,2)), (block,14), false).
final_goal(5, on((block,2)), (block,15), false).
final_goal(5, on((block,2)), (block,16), false).
final_goal(5, on((block,2)), (block,17), false).
final_goal(5, on((block,2)), (block,18), false).
final_goal(5, on((block,2)), (block,3), true).
final_goal(5, on((block,2)), (block,4), false).
final_goal(5, on((block,2)), (block,5), false).
final_goal(5, on((block,2)), (block,6), false).
final_goal(5, on((block,2)), (block,7), false).
final_goal(5, on((block,2)), (block,8), false).
final_goal(5, on((block,2)), (block,9), false).
final_goal(5, on((block,2)), nothing, false).
final_goal(5, on((block,2)), puzzle_room_1_table, false).
final_goal(5, on((block,2)), puzzle_room_2_table, false).
final_goal(5, on((block,3)), (block,1), false).
final_goal(5, on((block,3)), (block,10), false).
final_goal(5, on((block,3)), (block,11), false).
final_goal(5, on((block,3)), (block,12), false).
final_goal(5, on((block,3)), (block,13), false).
final_goal(5, on((block,3)), (block,14), false).
final_goal(5, on((block,3)), (block,15), false).
final_goal(5, on((block,3)), (block,16), false).
final_goal(5, on((block,3)), (block,17), false).
final_goal(5, on((block,3)), (block,18), false).
final_goal(5, on((block,3)), (block,2), false).
final_goal(5, on((block,3)), (block,4), false).
final_goal(5, on((block,3)), (block,5), false).
final_goal(5, on((block,3)), (block,6), false).
final_goal(5, on((block,3)), (block,7), false).
final_goal(5, on((block,3)), (block,8), false).
final_goal(5, on((block,3)), (block,9), false).
final_goal(5, on((block,3)), nothing, false).
final_goal(5, on((block,3)), puzzle_room_1_table, true).
final_goal(5, on((block,3)), puzzle_room_2_table, false).
final_goal(5, on((block,4)), (block,1), false).
final_goal(5, on((block,4)), (block,10), false).
final_goal(5, on((block,4)), (block,11), false).
final_goal(5, on((block,4)), (block,12), false).
final_goal(5, on((block,4)), (block,13), false).
final_goal(5, on((block,4)), (block,14), false).
final_goal(5, on((block,4)), (block,15), false).
final_goal(5, on((block,4)), (block,16), false).
final_goal(5, on((block,4)), (block,17), false).
final_goal(5, on((block,4)), (block,18), false).
final_goal(5, on((block,4)), (block,2), false).
final_goal(5, on((block,4)), (block,3), false).
final_goal(5, on((block,4)), (block,5), true).
final_goal(5, on((block,4)), (block,6), false).
final_goal(5, on((block,4)), (block,7), false).
final_goal(5, on((block,4)), (block,8), false).
final_goal(5, on((block,4)), (block,9), false).
final_goal(5, on((block,4)), nothing, false).
final_goal(5, on((block,4)), puzzle_room_1_table, false).
final_goal(5, on((block,4)), puzzle_room_2_table, false).
final_goal(5, on((block,5)), (block,1), false).
final_goal(5, on((block,5)), (block,10), false).
final_goal(5, on((block,5)), (block,11), false).
final_goal(5, on((block,5)), (block,12), false).
final_goal(5, on((block,5)), (block,13), false).
final_goal(5, on((block,5)), (block,14), false).
final_goal(5, on((block,5)), (block,15), false).
final_goal(5, on((block,5)), (block,16), false).
final_goal(5, on((block,5)), (block,17), false).
final_goal(5, on((block,5)), (block,18), false).
final_goal(5, on((block,5)), (block,2), false).
final_goal(5, on((block,5)), (block,3), false).
final_goal(5, on((block,5)), (block,4), false).
final_goal(5, on((block,5)), (block,6), true).
final_goal(5, on((block,5)), (block,7), false).
final_goal(5, on((block,5)), (block,8), false).
final_goal(5, on((block,5)), (block,9), false).
final_goal(5, on((block,5)), nothing, false).
final_goal(5, on((block,5)), puzzle_room_1_table, false).
final_goal(5, on((block,5)), puzzle_room_2_table, false).
final_goal(5, on((block,6)), (block,1), false).
final_goal(5, on((block,6)), (block,10), false).
final_goal(5, on((block,6)), (block,11), false).
final_goal(5, on((block,6)), (block,12), false).
final_goal(5, on((block,6)), (block,13), false).
final_goal(5, on((block,6)), (block,14), false).
final_goal(5, on((block,6)), (block,15), false).
final_goal(5, on((block,6)), (block,16), false).
final_goal(5, on((block,6)), (block,17), false).
final_goal(5, on((block,6)), (block,18), false).
final_goal(5, on((block,6)), (block,2), false).
final_goal(5, on((block,6)), (block,3), false).
final_goal(5, on((block,6)), (block,4), false).
final_goal(5, on((block,6)), (block,5), false).
final_goal(5, on((block,6)), (block,7), false).
final_goal(5, on((block,6)), (block,8), false).
final_goal(5, on((block,6)), (block,9), false).
final_goal(5, on((block,6)), nothing, false).
final_goal(5, on((block,6)), puzzle_room_1_table, true).
final_goal(5, on((block,6)), puzzle_room_2_table, false).
final_goal(5, on((block,7)), (block,1), false).
final_goal(5, on((block,7)), (block,10), false).
final_goal(5, on((block,7)), (block,11), false).
final_goal(5, on((block,7)), (block,12), false).
final_goal(5, on((block,7)), (block,13), false).
final_goal(5, on((block,7)), (block,14), false).
final_goal(5, on((block,7)), (block,15), false).
final_goal(5, on((block,7)), (block,16), false).
final_goal(5, on((block,7)), (block,17), false).
final_goal(5, on((block,7)), (block,18), false).
final_goal(5, on((block,7)), (block,2), false).
final_goal(5, on((block,7)), (block,3), false).
final_goal(5, on((block,7)), (block,4), false).
final_goal(5, on((block,7)), (block,5), false).
final_goal(5, on((block,7)), (block,6), false).
final_goal(5, on((block,7)), (block,8), true).
final_goal(5, on((block,7)), (block,9), false).
final_goal(5, on((block,7)), nothing, false).
final_goal(5, on((block,7)), puzzle_room_1_table, false).
final_goal(5, on((block,7)), puzzle_room_2_table, false).
final_goal(5, on((block,8)), (block,1), false).
final_goal(5, on((block,8)), (block,10), false).
final_goal(5, on((block,8)), (block,11), false).
final_goal(5, on((block,8)), (block,12), false).
final_goal(5, on((block,8)), (block,13), false).
final_goal(5, on((block,8)), (block,14), false).
final_goal(5, on((block,8)), (block,15), false).
final_goal(5, on((block,8)), (block,16), false).
final_goal(5, on((block,8)), (block,17), false).
final_goal(5, on((block,8)), (block,18), false).
final_goal(5, on((block,8)), (block,2), false).
final_goal(5, on((block,8)), (block,3), false).
final_goal(5, on((block,8)), (block,4), false).
final_goal(5, on((block,8)), (block,5), false).
final_goal(5, on((block,8)), (block,6), false).
final_goal(5, on((block,8)), (block,7), false).
final_goal(5, on((block,8)), (block,9), true).
final_goal(5, on((block,8)), nothing, false).
final_goal(5, on((block,8)), puzzle_room_1_table, false).
final_goal(5, on((block,8)), puzzle_room_2_table, false).
final_goal(5, on((block,9)), (block,1), false).
final_goal(5, on((block,9)), (block,10), false).
final_goal(5, on((block,9)), (block,11), false).
final_goal(5, on((block,9)), (block,12), false).
final_goal(5, on((block,9)), (block,13), false).
final_goal(5, on((block,9)), (block,14), false).
final_goal(5, on((block,9)), (block,15), false).
final_goal(5, on((block,9)), (block,16), false).
final_goal(5, on((block,9)), (block,17), false).
final_goal(5, on((block,9)), (block,18), false).
final_goal(5, on((block,9)), (block,2), false).
final_goal(5, on((block,9)), (block,3), false).
final_goal(5, on((block,9)), (block,4), false).
final_goal(5, on((block,9)), (block,5), false).
final_goal(5, on((block,9)), (block,6), false).
final_goal(5, on((block,9)), (block,7), false).
final_goal(5, on((block,9)), (block,8), false).
final_goal(5, on((block,9)), nothing, false).
final_goal(5, on((block,9)), puzzle_room_1_table, true).
final_goal(5, on((block,9)), puzzle_room_2_table, false).
final_goal(5, tower_base((block,1),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,1),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,1),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,1),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,10),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,10),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,10),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,10),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,11),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,11),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,11),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,11),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,12),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,12),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,12),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,12),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,13),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,13),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,13),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,13),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,14),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,14),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,14),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,14),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,15),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,15),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,15),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,15),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,16),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,16),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,16),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,16),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,17),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,17),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,17),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,17),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,18),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,18),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,18),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,18),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,2),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,2),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,2),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,2),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,3),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,3),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,3),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,3),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,4),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,4),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,4),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,4),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,5),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,5),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,5),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,5),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,6),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,6),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,6),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,6),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,7),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,7),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,7),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,7),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,8),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,8),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,8),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,8),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,9),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,9),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,9),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,9),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), true, false).

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[04-03-2022_16-19-40] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000013B4207EE50>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=1, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800.0, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(5, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'true', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 2070 rules

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.01083389999999973s

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(5, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[04-03-2022_16-19-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(5), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[04-03-2022_16-19-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.469608s.

[04-03-2022_16-19-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-19-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.106804s with result Satisfiable.

[04-03-2022_16-19-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[04-03-2022_16-19-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000013B45EE39A0>

[04-03-2022_16-19-41] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 5)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Hasty object at 0x0000013B45EAEE80>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000013B45EE39A0>)

[04-03-2022_16-19-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, true). %* None *%
#program optimisation_module(#inc, 0, true, true, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[04-03-2022_16-19-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-19-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[04-03-2022_16-19-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.397003s.

[04-03-2022_16-19-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-19-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038915s with result Unsatisfiable.

[04-03-2022_16-19-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.435918000000001, Incremental time limit = None
Running cumulative time = 2.435918000000001, Cumulative time limit = 1800.0
Used memory = (RSS = 209.703125Mb, VMS = 201.597656Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-19-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-19-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[04-03-2022_16-19-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.107245s.

[04-03-2022_16-19-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-19-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020428s with result Unsatisfiable.

[04-03-2022_16-19-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.1276729999999997, Incremental time limit = None
Running cumulative time = 3.5635910000000006, Cumulative time limit = 1800.0
Used memory = (RSS = 215.894531Mb, VMS = 208.523438Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-19-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-19-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[04-03-2022_16-19-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.629319s.

[04-03-2022_16-19-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-19-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048076s with result Unsatisfiable.

[04-03-2022_16-19-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.6773952000000012, Incremental time limit = None
Running cumulative time = 5.240986200000002, Cumulative time limit = 1800.0
Used memory = (RSS = 239.777344Mb, VMS = 230.804688Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-19-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-19-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[04-03-2022_16-19-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.900709s.

[04-03-2022_16-19-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-19-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061057s with result Unsatisfiable.

[04-03-2022_16-19-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.9617662999999972, Incremental time limit = None
Running cumulative time = 7.202752499999999, Cumulative time limit = 1800.0
Used memory = (RSS = 274.058594Mb, VMS = 271.035156Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-19-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-19-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[04-03-2022_16-19-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.920345s.

[04-03-2022_16-19-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-19-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.060429s with result Unsatisfiable.

[04-03-2022_16-19-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.9807740000000003, Incremental time limit = None
Running cumulative time = 9.1835265, Cumulative time limit = 1800.0
Used memory = (RSS = 302.515625Mb, VMS = 297.359375Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-19-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-19-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[04-03-2022_16-19-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.927986s.

[04-03-2022_16-19-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-19-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.074957s with result Unsatisfiable.

[04-03-2022_16-19-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.0029429999999984, Incremental time limit = None
Running cumulative time = 11.186469499999998, Cumulative time limit = 1800.0
Used memory = (RSS = 333.570312Mb, VMS = 336.402344Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-19-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-19-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[04-03-2022_16-19-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.876613s.

[04-03-2022_16-19-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-19-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.201741s with result Unsatisfiable.

[04-03-2022_16-19-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.0783538999999998, Incremental time limit = None
Running cumulative time = 13.264823399999997, Cumulative time limit = 1800.0
Used memory = (RSS = 364.171875Mb, VMS = 362.265625Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-19-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-19-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[04-03-2022_16-19-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.849912s.

[04-03-2022_16-19-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-19-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.122459s with result Unsatisfiable.

[04-03-2022_16-19-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.9723714, Incremental time limit = None
Running cumulative time = 15.237194799999997, Cumulative time limit = 1800.0
Used memory = (RSS = 393.027344Mb, VMS = 404.144531Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-19-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-19-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[04-03-2022_16-19-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.927751s.

[04-03-2022_16-19-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-19-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.123108s with result Unsatisfiable.

[04-03-2022_16-19-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.050859100000004, Incremental time limit = None
Running cumulative time = 17.2880539, Cumulative time limit = 1800.0
Used memory = (RSS = 427.417969Mb, VMS = 433.898438Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-19-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-19-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[04-03-2022_16-20-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.990227s.

[04-03-2022_16-20-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.187847s with result Unsatisfiable.

[04-03-2022_16-20-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.1780742999999987, Incremental time limit = None
Running cumulative time = 19.4661282, Cumulative time limit = 1800.0
Used memory = (RSS = 452.046875Mb, VMS = 455.226562Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-20-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[04-03-2022_16-20-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.966784s.

[04-03-2022_16-20-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.184874s with result Unsatisfiable.

[04-03-2022_16-20-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.1516576, Incremental time limit = None
Running cumulative time = 21.6177858, Cumulative time limit = 1800.0
Used memory = (RSS = 485.730469Mb, VMS = 511.585938Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      1 : Maximum =    300

[04-03-2022_16-20-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[04-03-2022_16-20-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.021354s.

[04-03-2022_16-20-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.713247s with result Satisfiable.

[04-03-2022_16-20-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.7346012, Incremental time limit = None
Running cumulative time = 26.352387, Cumulative time limit = 1800.0
Used memory = (RSS = 606.675781Mb, VMS = 624.156250Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 22.515247s, Solving = 3.837140s, Total = 26.352387s, Memory = (RSS = 606.675781Mb, VMS = 624.156250Mb), Step range = [0-12]), Calls = 12
Final Model :: Total atoms = 88536, Cost = (-567, 30, 0), Optimality proven = False, Number = 7, Thread ID = 1, Model type = ModelType.StableModel

[04-03-2022_16-20-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 2.397003s, Solving = 0.038915s, Total = 2.435918s, Memory = (RSS = 209.703125Mb, VMS = 201.597656Mb), Step range = [0-1]
2 : Statistics :: Grounding = 1.107245s, Solving = 0.020428s, Total = 1.127673s, Memory = (RSS = 215.894531Mb, VMS = 208.523438Mb), Step range = [2-2]
3 : Statistics :: Grounding = 1.629319s, Solving = 0.048076s, Total = 1.677395s, Memory = (RSS = 239.777344Mb, VMS = 230.804688Mb), Step range = [3-3]
4 : Statistics :: Grounding = 1.900709s, Solving = 0.061057s, Total = 1.961766s, Memory = (RSS = 274.058594Mb, VMS = 271.035156Mb), Step range = [4-4]
5 : Statistics :: Grounding = 1.920345s, Solving = 0.060429s, Total = 1.980774s, Memory = (RSS = 302.515625Mb, VMS = 297.359375Mb), Step range = [5-5]
6 : Statistics :: Grounding = 1.927986s, Solving = 0.074957s, Total = 2.002943s, Memory = (RSS = 333.570312Mb, VMS = 336.402344Mb), Step range = [6-6]
7 : Statistics :: Grounding = 1.876613s, Solving = 0.201741s, Total = 2.078354s, Memory = (RSS = 364.171875Mb, VMS = 362.265625Mb), Step range = [7-7]
8 : Statistics :: Grounding = 1.849912s, Solving = 0.122459s, Total = 1.972371s, Memory = (RSS = 393.027344Mb, VMS = 404.144531Mb), Step range = [8-8]
9 : Statistics :: Grounding = 1.927751s, Solving = 0.123108s, Total = 2.050859s, Memory = (RSS = 427.417969Mb, VMS = 433.898438Mb), Step range = [9-9]
10 : Statistics :: Grounding = 1.990227s, Solving = 0.187847s, Total = 2.178074s, Memory = (RSS = 452.046875Mb, VMS = 455.226562Mb), Step range = [10-10]
11 : Statistics :: Grounding = 1.966784s, Solving = 0.184874s, Total = 2.151658s, Memory = (RSS = 485.730469Mb, VMS = 511.585938Mb), Step range = [11-11]
12 : Statistics :: Grounding = 2.021354s, Solving = 2.713247s, Total = 4.734601s, Memory = (RSS = 606.675781Mb, VMS = 624.156250Mb), Step range = [12-12]

[04-03-2022_16-20-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 26.352387s due to: Stop condition reached.

[04-03-2022_16-20-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[04-03-2022_16-20-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[04-03-2022_16-20-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-20-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-20-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[04-03-2022_16-20-11] INFO :: ASH Planner Main #1 >> Final-goal intermediate ordering:
Achievement steps = [6, 12]
Correct = True

[04-03-2022_16-20-11] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[04-03-2022_16-20-11] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 22.515247s, Solving = 3.837140s, Total = 26.352387s, Memory = (RSS = 606.675781Mb, VMS = 624.156250Mb), Step range = [0-12]), Calls = 12
Model :: Total atoms = 88536, Cost = (-567, 30, 0), Optimality proven = False, Number = 7, Thread ID = 1, Model type = ModelType.StableModel

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 5                 
          ========================================          
                 Steps = 12 :: Actions = 30                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room_1)
Step 2:
    Planned actions:
        talos : collect((block,4))
        talos : collect((block,5))
        talos : collect((block,6))
        talos : collect((block,8))
Step 3:
    Planned actions:
        talos : move(puzzle_room_1)
Step 4:
    Planned actions:
        talos : place_upon((block,3),puzzle_room_1_table)
        talos : place_upon((block,6),puzzle_room_1_table)
        talos : place_upon((block,9),puzzle_room_1_table)
Step 5:
    Planned actions:
        talos : place_upon((block,2),(block,3))
        talos : place_upon((block,5),(block,6))
        talos : place_upon((block,8),(block,9))
Step 6:
    Planned actions:
        talos : place_upon((block,1),(block,2))
        talos : place_upon((block,4),(block,5))
        talos : place_upon((block,7),(block,8))
Step 7:
    Planned actions:
        talos : move(store_room_2)
Step 8:
    Planned actions:
        talos : collect((block,13))
        talos : collect((block,14))
        talos : collect((block,15))
        talos : collect((block,17))
Step 9:
    Planned actions:
        talos : move(puzzle_room_2)
Step 10:
    Planned actions:
        talos : place_upon((block,12),puzzle_room_2_table)
        talos : place_upon((block,15),puzzle_room_2_table)
        talos : place_upon((block,18),puzzle_room_2_table)
Step 11:
    Planned actions:
        talos : place_upon((block,11),(block,12))
        talos : place_upon((block,14),(block,15))
        talos : place_upon((block,17),(block,18))
Step 12:
    Planned actions:
        talos : place_upon((block,10),(block,11))
        talos : place_upon((block,13),(block,14))
        talos : place_upon((block,16),(block,17))

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=5, start_step=0, total_plan_length=12, step_range=range(0, 13)

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Total actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 5 (classic), LE =  12, AC =  30, CF = 0.4, GT =  22.98s, ST =   3.94s, OT = 0.00s, TT =  26.93s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)

[04-03-2022_16-20-11] DEBUG :: core.Strategies >> Proactively dividing plan: Lvl = 5 (classic), LE =  12, AC =  30, CF = 0.4, GT =  22.98s, ST =   3.94s, OT = 0.00s, TT =  26.93s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0).

[04-03-2022_16-20-11] DEBUG :: core.Strategies >> Making heterogenous divisions: division_points=[], plan_length=12, start_step=0, blend=Blend(left=0, right=0)

[04-03-2022_16-20-11] DEBUG :: core.Strategies >> Division points generated:
[]

[04-03-2022_16-20-11] DEBUG :: core.Strategies >> plan_length=12, true_size_bound=6, partial_problems=2

[04-03-2022_16-20-11] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=12, start_step=0, blend=Blend(left=0, right=0)

[04-03-2022_16-20-11] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=6, large_group_size=7

[04-03-2022_16-20-11] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=6, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 12, Sub-goal Stage Range = [1-12]
Division points [total=1] : [(Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[04-03-2022_16-20-11] INFO :: ASH Planner Main #1 >> Monolevel problem 1 at level 5 solved.

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 5 to proactively divide planning problem 1 at level 4:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 12, Sub-goal Stage Range = [1-12]
Division points [total=1] : [(Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-6]

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=5, start_step=0, total_plan_length=12, step_range=range(0, 13)

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Total actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 4, sgoals range = [1-6], problem number = 1, increment number = 1

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 6)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Hasty object at 0x0000013B45EAEE80>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', True)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1773.071201)
	('length_limit', 300)
	('level', 4)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))

[04-03-2022_16-20-11] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 4] partial conformance refinement (sequential) with sgoals range [1-6] : Concurrency enabled : Minimum search length bound disabled with value 5

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 4
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 6
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 5

[04-03-2022_16-20-11] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[04-03-2022_16-20-11] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[04-03-2022_16-20-11] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,10))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,11))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,12))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,13))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,14))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,15))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,16))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,17))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,18))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,7))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,8))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,9))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in(puzzle_room_1_table)', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in(puzzle_room_2_table)', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 4, 'F': 'in(talos)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,12))', 'V': '(block,10)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,13))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,14))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,15))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,17))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,18))', 'V': '(block,16)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,1))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,10))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,11))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,12))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,13))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,14))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,15))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,16))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,17))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,18))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,2))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,3))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,4))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,5))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,6))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,7))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,8))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,9))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in(puzzle_room_1_table)', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in(puzzle_room_2_table)', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in(talos)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,12))', 'V': '(block,10)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,13))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,14))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,15))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,17))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,18))', 'V': '(block,16)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 904 rules into program part ash_initial_state:

holds(4, complete_tower(blue,puzzle_room_1_table), false, 0).
holds(4, complete_tower(blue,puzzle_room_2_table), false, 0).
holds(4, complete_tower(red,puzzle_room_1_table), false, 0).
holds(4, complete_tower(red,puzzle_room_2_table), false, 0).
holds(4, complete_tower(yellow,puzzle_room_1_table), false, 0).
holds(4, complete_tower(yellow,puzzle_room_2_table), false, 0).
holds(4, grasping(manipulator_arm_1), nothing, 0).
holds(4, grasping(manipulator_arm_2), nothing, 0).
holds(4, in((block,1)), puzzle_room_1, 0).
holds(4, in((block,10)), puzzle_room_2, 0).
holds(4, in((block,11)), puzzle_room_2, 0).
holds(4, in((block,12)), puzzle_room_2, 0).
holds(4, in((block,13)), store_room_2, 0).
holds(4, in((block,14)), store_room_2, 0).
holds(4, in((block,15)), store_room_2, 0).
holds(4, in((block,16)), puzzle_room_2, 0).
holds(4, in((block,17)), store_room_2, 0).
holds(4, in((block,18)), puzzle_room_2, 0).
holds(4, in((block,2)), puzzle_room_1, 0).
holds(4, in((block,3)), puzzle_room_1, 0).
holds(4, in((block,4)), store_room_1, 0).
holds(4, in((block,5)), store_room_1, 0).
holds(4, in((block,6)), store_room_1, 0).
holds(4, in((block,7)), puzzle_room_1, 0).
holds(4, in((block,8)), store_room_1, 0).
holds(4, in((block,9)), puzzle_room_1, 0).
holds(4, in(manipulator_arm_1), starting_room_1, 0).
holds(4, in(manipulator_arm_2), starting_room_1, 0).
holds(4, in(puzzle_room_1_table), puzzle_room_1, 0).
holds(4, in(puzzle_room_2_table), puzzle_room_2, 0).
holds(4, in(talos), starting_room_1, 0).
holds(4, in_tower((block,1),(block,1)), true, 0).
holds(4, in_tower((block,1),(block,10)), false, 0).
holds(4, in_tower((block,1),(block,11)), false, 0).
holds(4, in_tower((block,1),(block,12)), false, 0).
holds(4, in_tower((block,1),(block,13)), false, 0).
holds(4, in_tower((block,1),(block,14)), false, 0).
holds(4, in_tower((block,1),(block,15)), false, 0).
holds(4, in_tower((block,1),(block,16)), false, 0).
holds(4, in_tower((block,1),(block,17)), false, 0).
holds(4, in_tower((block,1),(block,18)), false, 0).
holds(4, in_tower((block,1),(block,2)), false, 0).
holds(4, in_tower((block,1),(block,3)), true, 0).
holds(4, in_tower((block,1),(block,4)), false, 0).
holds(4, in_tower((block,1),(block,5)), false, 0).
holds(4, in_tower((block,1),(block,6)), false, 0).
holds(4, in_tower((block,1),(block,7)), false, 0).
holds(4, in_tower((block,1),(block,8)), false, 0).
holds(4, in_tower((block,1),(block,9)), false, 0).
holds(4, in_tower((block,10),(block,1)), false, 0).
holds(4, in_tower((block,10),(block,10)), true, 0).
holds(4, in_tower((block,10),(block,11)), false, 0).
holds(4, in_tower((block,10),(block,12)), true, 0).
holds(4, in_tower((block,10),(block,13)), false, 0).
holds(4, in_tower((block,10),(block,14)), false, 0).
holds(4, in_tower((block,10),(block,15)), false, 0).
holds(4, in_tower((block,10),(block,16)), false, 0).
holds(4, in_tower((block,10),(block,17)), false, 0).
holds(4, in_tower((block,10),(block,18)), false, 0).
holds(4, in_tower((block,10),(block,2)), false, 0).
holds(4, in_tower((block,10),(block,3)), false, 0).
holds(4, in_tower((block,10),(block,4)), false, 0).
holds(4, in_tower((block,10),(block,5)), false, 0).
holds(4, in_tower((block,10),(block,6)), false, 0).
holds(4, in_tower((block,10),(block,7)), false, 0).
holds(4, in_tower((block,10),(block,8)), false, 0).
holds(4, in_tower((block,10),(block,9)), false, 0).
holds(4, in_tower((block,11),(block,1)), false, 0).
holds(4, in_tower((block,11),(block,10)), false, 0).
holds(4, in_tower((block,11),(block,11)), true, 0).
holds(4, in_tower((block,11),(block,12)), false, 0).
holds(4, in_tower((block,11),(block,13)), false, 0).
holds(4, in_tower((block,11),(block,14)), false, 0).
holds(4, in_tower((block,11),(block,15)), false, 0).
holds(4, in_tower((block,11),(block,16)), false, 0).
holds(4, in_tower((block,11),(block,17)), false, 0).
holds(4, in_tower((block,11),(block,18)), false, 0).
holds(4, in_tower((block,11),(block,2)), false, 0).
holds(4, in_tower((block,11),(block,3)), false, 0).
holds(4, in_tower((block,11),(block,4)), false, 0).
holds(4, in_tower((block,11),(block,5)), false, 0).
holds(4, in_tower((block,11),(block,6)), false, 0).
holds(4, in_tower((block,11),(block,7)), false, 0).
holds(4, in_tower((block,11),(block,8)), false, 0).
holds(4, in_tower((block,11),(block,9)), false, 0).
holds(4, in_tower((block,12),(block,1)), false, 0).
holds(4, in_tower((block,12),(block,10)), false, 0).
holds(4, in_tower((block,12),(block,11)), false, 0).
holds(4, in_tower((block,12),(block,12)), false, 0).
holds(4, in_tower((block,12),(block,13)), false, 0).
holds(4, in_tower((block,12),(block,14)), false, 0).
holds(4, in_tower((block,12),(block,15)), false, 0).
holds(4, in_tower((block,12),(block,16)), false, 0).
holds(4, in_tower((block,12),(block,17)), false, 0).
holds(4, in_tower((block,12),(block,18)), false, 0).
holds(4, in_tower((block,12),(block,2)), false, 0).
holds(4, in_tower((block,12),(block,3)), false, 0).
holds(4, in_tower((block,12),(block,4)), false, 0).
holds(4, in_tower((block,12),(block,5)), false, 0).
holds(4, in_tower((block,12),(block,6)), false, 0).
holds(4, in_tower((block,12),(block,7)), false, 0).
holds(4, in_tower((block,12),(block,8)), false, 0).
holds(4, in_tower((block,12),(block,9)), false, 0).
holds(4, in_tower((block,13),(block,1)), false, 0).
holds(4, in_tower((block,13),(block,10)), false, 0).
holds(4, in_tower((block,13),(block,11)), false, 0).
holds(4, in_tower((block,13),(block,12)), false, 0).
holds(4, in_tower((block,13),(block,13)), false, 0).
holds(4, in_tower((block,13),(block,14)), false, 0).
holds(4, in_tower((block,13),(block,15)), false, 0).
holds(4, in_tower((block,13),(block,16)), false, 0).
holds(4, in_tower((block,13),(block,17)), false, 0).
holds(4, in_tower((block,13),(block,18)), false, 0).
holds(4, in_tower((block,13),(block,2)), false, 0).
holds(4, in_tower((block,13),(block,3)), false, 0).
holds(4, in_tower((block,13),(block,4)), false, 0).
holds(4, in_tower((block,13),(block,5)), false, 0).
holds(4, in_tower((block,13),(block,6)), false, 0).
holds(4, in_tower((block,13),(block,7)), false, 0).
holds(4, in_tower((block,13),(block,8)), false, 0).
holds(4, in_tower((block,13),(block,9)), false, 0).
holds(4, in_tower((block,14),(block,1)), false, 0).
holds(4, in_tower((block,14),(block,10)), false, 0).
holds(4, in_tower((block,14),(block,11)), false, 0).
holds(4, in_tower((block,14),(block,12)), false, 0).
holds(4, in_tower((block,14),(block,13)), false, 0).
holds(4, in_tower((block,14),(block,14)), false, 0).
holds(4, in_tower((block,14),(block,15)), false, 0).
holds(4, in_tower((block,14),(block,16)), false, 0).
holds(4, in_tower((block,14),(block,17)), false, 0).
holds(4, in_tower((block,14),(block,18)), false, 0).
holds(4, in_tower((block,14),(block,2)), false, 0).
holds(4, in_tower((block,14),(block,3)), false, 0).
holds(4, in_tower((block,14),(block,4)), false, 0).
holds(4, in_tower((block,14),(block,5)), false, 0).
holds(4, in_tower((block,14),(block,6)), false, 0).
holds(4, in_tower((block,14),(block,7)), false, 0).
holds(4, in_tower((block,14),(block,8)), false, 0).
holds(4, in_tower((block,14),(block,9)), false, 0).
holds(4, in_tower((block,15),(block,1)), false, 0).
holds(4, in_tower((block,15),(block,10)), false, 0).
holds(4, in_tower((block,15),(block,11)), false, 0).
holds(4, in_tower((block,15),(block,12)), false, 0).
holds(4, in_tower((block,15),(block,13)), false, 0).
holds(4, in_tower((block,15),(block,14)), false, 0).
holds(4, in_tower((block,15),(block,15)), false, 0).
holds(4, in_tower((block,15),(block,16)), false, 0).
holds(4, in_tower((block,15),(block,17)), false, 0).
holds(4, in_tower((block,15),(block,18)), false, 0).
holds(4, in_tower((block,15),(block,2)), false, 0).
holds(4, in_tower((block,15),(block,3)), false, 0).
holds(4, in_tower((block,15),(block,4)), false, 0).
holds(4, in_tower((block,15),(block,5)), false, 0).
holds(4, in_tower((block,15),(block,6)), false, 0).
holds(4, in_tower((block,15),(block,7)), false, 0).
holds(4, in_tower((block,15),(block,8)), false, 0).
holds(4, in_tower((block,15),(block,9)), false, 0).
holds(4, in_tower((block,16),(block,1)), false, 0).
holds(4, in_tower((block,16),(block,10)), false, 0).
holds(4, in_tower((block,16),(block,11)), false, 0).
holds(4, in_tower((block,16),(block,12)), false, 0).
holds(4, in_tower((block,16),(block,13)), false, 0).
holds(4, in_tower((block,16),(block,14)), false, 0).
holds(4, in_tower((block,16),(block,15)), false, 0).
holds(4, in_tower((block,16),(block,16)), true, 0).
holds(4, in_tower((block,16),(block,17)), false, 0).
holds(4, in_tower((block,16),(block,18)), true, 0).
holds(4, in_tower((block,16),(block,2)), false, 0).
holds(4, in_tower((block,16),(block,3)), false, 0).
holds(4, in_tower((block,16),(block,4)), false, 0).
holds(4, in_tower((block,16),(block,5)), false, 0).
holds(4, in_tower((block,16),(block,6)), false, 0).
holds(4, in_tower((block,16),(block,7)), false, 0).
holds(4, in_tower((block,16),(block,8)), false, 0).
holds(4, in_tower((block,16),(block,9)), false, 0).
holds(4, in_tower((block,17),(block,1)), false, 0).
holds(4, in_tower((block,17),(block,10)), false, 0).
holds(4, in_tower((block,17),(block,11)), false, 0).
holds(4, in_tower((block,17),(block,12)), false, 0).
holds(4, in_tower((block,17),(block,13)), false, 0).
holds(4, in_tower((block,17),(block,14)), false, 0).
holds(4, in_tower((block,17),(block,15)), false, 0).
holds(4, in_tower((block,17),(block,16)), false, 0).
holds(4, in_tower((block,17),(block,17)), false, 0).
holds(4, in_tower((block,17),(block,18)), false, 0).
holds(4, in_tower((block,17),(block,2)), false, 0).
holds(4, in_tower((block,17),(block,3)), false, 0).
holds(4, in_tower((block,17),(block,4)), false, 0).
holds(4, in_tower((block,17),(block,5)), false, 0).
holds(4, in_tower((block,17),(block,6)), false, 0).
holds(4, in_tower((block,17),(block,7)), false, 0).
holds(4, in_tower((block,17),(block,8)), false, 0).
holds(4, in_tower((block,17),(block,9)), false, 0).
holds(4, in_tower((block,18),(block,1)), false, 0).
holds(4, in_tower((block,18),(block,10)), false, 0).
holds(4, in_tower((block,18),(block,11)), false, 0).
holds(4, in_tower((block,18),(block,12)), false, 0).
holds(4, in_tower((block,18),(block,13)), false, 0).
holds(4, in_tower((block,18),(block,14)), false, 0).
holds(4, in_tower((block,18),(block,15)), false, 0).
holds(4, in_tower((block,18),(block,16)), false, 0).
holds(4, in_tower((block,18),(block,17)), false, 0).
holds(4, in_tower((block,18),(block,18)), false, 0).
holds(4, in_tower((block,18),(block,2)), false, 0).
holds(4, in_tower((block,18),(block,3)), false, 0).
holds(4, in_tower((block,18),(block,4)), false, 0).
holds(4, in_tower((block,18),(block,5)), false, 0).
holds(4, in_tower((block,18),(block,6)), false, 0).
holds(4, in_tower((block,18),(block,7)), false, 0).
holds(4, in_tower((block,18),(block,8)), false, 0).
holds(4, in_tower((block,18),(block,9)), false, 0).
holds(4, in_tower((block,2),(block,1)), false, 0).
holds(4, in_tower((block,2),(block,10)), false, 0).
holds(4, in_tower((block,2),(block,11)), false, 0).
holds(4, in_tower((block,2),(block,12)), false, 0).
holds(4, in_tower((block,2),(block,13)), false, 0).
holds(4, in_tower((block,2),(block,14)), false, 0).
holds(4, in_tower((block,2),(block,15)), false, 0).
holds(4, in_tower((block,2),(block,16)), false, 0).
holds(4, in_tower((block,2),(block,17)), false, 0).
holds(4, in_tower((block,2),(block,18)), false, 0).
holds(4, in_tower((block,2),(block,2)), true, 0).
holds(4, in_tower((block,2),(block,3)), false, 0).
holds(4, in_tower((block,2),(block,4)), false, 0).
holds(4, in_tower((block,2),(block,5)), false, 0).
holds(4, in_tower((block,2),(block,6)), false, 0).
holds(4, in_tower((block,2),(block,7)), false, 0).
holds(4, in_tower((block,2),(block,8)), false, 0).
holds(4, in_tower((block,2),(block,9)), false, 0).
holds(4, in_tower((block,3),(block,1)), false, 0).
holds(4, in_tower((block,3),(block,10)), false, 0).
holds(4, in_tower((block,3),(block,11)), false, 0).
holds(4, in_tower((block,3),(block,12)), false, 0).
holds(4, in_tower((block,3),(block,13)), false, 0).
holds(4, in_tower((block,3),(block,14)), false, 0).
holds(4, in_tower((block,3),(block,15)), false, 0).
holds(4, in_tower((block,3),(block,16)), false, 0).
holds(4, in_tower((block,3),(block,17)), false, 0).
holds(4, in_tower((block,3),(block,18)), false, 0).
holds(4, in_tower((block,3),(block,2)), false, 0).
holds(4, in_tower((block,3),(block,3)), false, 0).
holds(4, in_tower((block,3),(block,4)), false, 0).
holds(4, in_tower((block,3),(block,5)), false, 0).
holds(4, in_tower((block,3),(block,6)), false, 0).
holds(4, in_tower((block,3),(block,7)), false, 0).
holds(4, in_tower((block,3),(block,8)), false, 0).
holds(4, in_tower((block,3),(block,9)), false, 0).
holds(4, in_tower((block,4),(block,1)), false, 0).
holds(4, in_tower((block,4),(block,10)), false, 0).
holds(4, in_tower((block,4),(block,11)), false, 0).
holds(4, in_tower((block,4),(block,12)), false, 0).
holds(4, in_tower((block,4),(block,13)), false, 0).
holds(4, in_tower((block,4),(block,14)), false, 0).
holds(4, in_tower((block,4),(block,15)), false, 0).
holds(4, in_tower((block,4),(block,16)), false, 0).
holds(4, in_tower((block,4),(block,17)), false, 0).
holds(4, in_tower((block,4),(block,18)), false, 0).
holds(4, in_tower((block,4),(block,2)), false, 0).
holds(4, in_tower((block,4),(block,3)), false, 0).
holds(4, in_tower((block,4),(block,4)), false, 0).
holds(4, in_tower((block,4),(block,5)), false, 0).
holds(4, in_tower((block,4),(block,6)), false, 0).
holds(4, in_tower((block,4),(block,7)), false, 0).
holds(4, in_tower((block,4),(block,8)), false, 0).
holds(4, in_tower((block,4),(block,9)), false, 0).
holds(4, in_tower((block,5),(block,1)), false, 0).
holds(4, in_tower((block,5),(block,10)), false, 0).
holds(4, in_tower((block,5),(block,11)), false, 0).
holds(4, in_tower((block,5),(block,12)), false, 0).
holds(4, in_tower((block,5),(block,13)), false, 0).
holds(4, in_tower((block,5),(block,14)), false, 0).
holds(4, in_tower((block,5),(block,15)), false, 0).
holds(4, in_tower((block,5),(block,16)), false, 0).
holds(4, in_tower((block,5),(block,17)), false, 0).
holds(4, in_tower((block,5),(block,18)), false, 0).
holds(4, in_tower((block,5),(block,2)), false, 0).
holds(4, in_tower((block,5),(block,3)), false, 0).
holds(4, in_tower((block,5),(block,4)), false, 0).
holds(4, in_tower((block,5),(block,5)), false, 0).
holds(4, in_tower((block,5),(block,6)), false, 0).
holds(4, in_tower((block,5),(block,7)), false, 0).
holds(4, in_tower((block,5),(block,8)), false, 0).
holds(4, in_tower((block,5),(block,9)), false, 0).
holds(4, in_tower((block,6),(block,1)), false, 0).
holds(4, in_tower((block,6),(block,10)), false, 0).
holds(4, in_tower((block,6),(block,11)), false, 0).
holds(4, in_tower((block,6),(block,12)), false, 0).
holds(4, in_tower((block,6),(block,13)), false, 0).
holds(4, in_tower((block,6),(block,14)), false, 0).
holds(4, in_tower((block,6),(block,15)), false, 0).
holds(4, in_tower((block,6),(block,16)), false, 0).
holds(4, in_tower((block,6),(block,17)), false, 0).
holds(4, in_tower((block,6),(block,18)), false, 0).
holds(4, in_tower((block,6),(block,2)), false, 0).
holds(4, in_tower((block,6),(block,3)), false, 0).
holds(4, in_tower((block,6),(block,4)), false, 0).
holds(4, in_tower((block,6),(block,5)), false, 0).
holds(4, in_tower((block,6),(block,6)), false, 0).
holds(4, in_tower((block,6),(block,7)), false, 0).
holds(4, in_tower((block,6),(block,8)), false, 0).
holds(4, in_tower((block,6),(block,9)), false, 0).
holds(4, in_tower((block,7),(block,1)), false, 0).
holds(4, in_tower((block,7),(block,10)), false, 0).
holds(4, in_tower((block,7),(block,11)), false, 0).
holds(4, in_tower((block,7),(block,12)), false, 0).
holds(4, in_tower((block,7),(block,13)), false, 0).
holds(4, in_tower((block,7),(block,14)), false, 0).
holds(4, in_tower((block,7),(block,15)), false, 0).
holds(4, in_tower((block,7),(block,16)), false, 0).
holds(4, in_tower((block,7),(block,17)), false, 0).
holds(4, in_tower((block,7),(block,18)), false, 0).
holds(4, in_tower((block,7),(block,2)), false, 0).
holds(4, in_tower((block,7),(block,3)), false, 0).
holds(4, in_tower((block,7),(block,4)), false, 0).
holds(4, in_tower((block,7),(block,5)), false, 0).
holds(4, in_tower((block,7),(block,6)), false, 0).
holds(4, in_tower((block,7),(block,7)), true, 0).
holds(4, in_tower((block,7),(block,8)), false, 0).
holds(4, in_tower((block,7),(block,9)), true, 0).
holds(4, in_tower((block,8),(block,1)), false, 0).
holds(4, in_tower((block,8),(block,10)), false, 0).
holds(4, in_tower((block,8),(block,11)), false, 0).
holds(4, in_tower((block,8),(block,12)), false, 0).
holds(4, in_tower((block,8),(block,13)), false, 0).
holds(4, in_tower((block,8),(block,14)), false, 0).
holds(4, in_tower((block,8),(block,15)), false, 0).
holds(4, in_tower((block,8),(block,16)), false, 0).
holds(4, in_tower((block,8),(block,17)), false, 0).
holds(4, in_tower((block,8),(block,18)), false, 0).
holds(4, in_tower((block,8),(block,2)), false, 0).
holds(4, in_tower((block,8),(block,3)), false, 0).
holds(4, in_tower((block,8),(block,4)), false, 0).
holds(4, in_tower((block,8),(block,5)), false, 0).
holds(4, in_tower((block,8),(block,6)), false, 0).
holds(4, in_tower((block,8),(block,7)), false, 0).
holds(4, in_tower((block,8),(block,8)), false, 0).
holds(4, in_tower((block,8),(block,9)), false, 0).
holds(4, in_tower((block,9),(block,1)), false, 0).
holds(4, in_tower((block,9),(block,10)), false, 0).
holds(4, in_tower((block,9),(block,11)), false, 0).
holds(4, in_tower((block,9),(block,12)), false, 0).
holds(4, in_tower((block,9),(block,13)), false, 0).
holds(4, in_tower((block,9),(block,14)), false, 0).
holds(4, in_tower((block,9),(block,15)), false, 0).
holds(4, in_tower((block,9),(block,16)), false, 0).
holds(4, in_tower((block,9),(block,17)), false, 0).
holds(4, in_tower((block,9),(block,18)), false, 0).
holds(4, in_tower((block,9),(block,2)), false, 0).
holds(4, in_tower((block,9),(block,3)), false, 0).
holds(4, in_tower((block,9),(block,4)), false, 0).
holds(4, in_tower((block,9),(block,5)), false, 0).
holds(4, in_tower((block,9),(block,6)), false, 0).
holds(4, in_tower((block,9),(block,7)), false, 0).
holds(4, in_tower((block,9),(block,8)), false, 0).
holds(4, in_tower((block,9),(block,9)), false, 0).
holds(4, on((block,1)), puzzle_room_1_table, 0).
holds(4, on((block,10)), puzzle_room_2_table, 0).
holds(4, on((block,11)), puzzle_room_2_table, 0).
holds(4, on((block,12)), (block,10), 0).
holds(4, on((block,13)), nothing, 0).
holds(4, on((block,14)), nothing, 0).
holds(4, on((block,15)), nothing, 0).
holds(4, on((block,16)), puzzle_room_2_table, 0).
holds(4, on((block,17)), nothing, 0).
holds(4, on((block,18)), (block,16), 0).
holds(4, on((block,2)), puzzle_room_1_table, 0).
holds(4, on((block,3)), (block,1), 0).
holds(4, on((block,4)), nothing, 0).
holds(4, on((block,5)), nothing, 0).
holds(4, on((block,6)), nothing, 0).
holds(4, on((block,7)), puzzle_room_1_table, 0).
holds(4, on((block,8)), nothing, 0).
holds(4, on((block,9)), (block,7), 0).
holds(4, tower_base((block,1),puzzle_room_1_table), true, 0).
holds(4, tower_base((block,1),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,10),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,10),puzzle_room_2_table), true, 0).
holds(4, tower_base((block,11),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,11),puzzle_room_2_table), true, 0).
holds(4, tower_base((block,12),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,12),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,13),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,13),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,14),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,14),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,15),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,15),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,16),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,16),puzzle_room_2_table), true, 0).
holds(4, tower_base((block,17),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,17),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,18),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,18),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,2),puzzle_room_1_table), true, 0).
holds(4, tower_base((block,2),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,3),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,3),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,4),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,4),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,5),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,5),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,6),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,6),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,7),puzzle_room_1_table), true, 0).
holds(4, tower_base((block,7),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,8),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,8),puzzle_room_2_table), false, 0).
holds(4, tower_base((block,9),puzzle_room_1_table), false, 0).
holds(4, tower_base((block,9),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,1),puzzle_room_1_table), true, 0).
holds(4, unordered_tower((block,1),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,10),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,10),puzzle_room_2_table), true, 0).
holds(4, unordered_tower((block,11),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,11),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,12),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,12),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,13),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,13),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,14),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,14),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,15),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,15),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,16),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,16),puzzle_room_2_table), true, 0).
holds(4, unordered_tower((block,17),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,17),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,18),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,18),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,2),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,2),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,3),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,3),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,4),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,4),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,5),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,5),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,6),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,6),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,7),puzzle_room_1_table), true, 0).
holds(4, unordered_tower((block,7),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,8),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,8),puzzle_room_2_table), false, 0).
holds(4, unordered_tower((block,9),puzzle_room_1_table), false, 0).
holds(4, unordered_tower((block,9),puzzle_room_2_table), false, 0).
holds(5, complete_tower(blue,puzzle_room_1_table), false, 0).
holds(5, complete_tower(blue,puzzle_room_2_table), false, 0).
holds(5, complete_tower(red,puzzle_room_1_table), false, 0).
holds(5, complete_tower(red,puzzle_room_2_table), false, 0).
holds(5, complete_tower(yellow,puzzle_room_1_table), false, 0).
holds(5, complete_tower(yellow,puzzle_room_2_table), false, 0).
holds(5, in((block,1)), puzzle_room_1, 0).
holds(5, in((block,10)), puzzle_room_2, 0).
holds(5, in((block,11)), puzzle_room_2, 0).
holds(5, in((block,12)), puzzle_room_2, 0).
holds(5, in((block,13)), store_room_2, 0).
holds(5, in((block,14)), store_room_2, 0).
holds(5, in((block,15)), store_room_2, 0).
holds(5, in((block,16)), puzzle_room_2, 0).
holds(5, in((block,17)), store_room_2, 0).
holds(5, in((block,18)), puzzle_room_2, 0).
holds(5, in((block,2)), puzzle_room_1, 0).
holds(5, in((block,3)), puzzle_room_1, 0).
holds(5, in((block,4)), store_room_1, 0).
holds(5, in((block,5)), store_room_1, 0).
holds(5, in((block,6)), store_room_1, 0).
holds(5, in((block,7)), puzzle_room_1, 0).
holds(5, in((block,8)), store_room_1, 0).
holds(5, in((block,9)), puzzle_room_1, 0).
holds(5, in(puzzle_room_1_table), puzzle_room_1, 0).
holds(5, in(puzzle_room_2_table), puzzle_room_2, 0).
holds(5, in(talos), starting_room_1, 0).
holds(5, in_tower((block,1),(block,1)), true, 0).
holds(5, in_tower((block,1),(block,10)), false, 0).
holds(5, in_tower((block,1),(block,11)), false, 0).
holds(5, in_tower((block,1),(block,12)), false, 0).
holds(5, in_tower((block,1),(block,13)), false, 0).
holds(5, in_tower((block,1),(block,14)), false, 0).
holds(5, in_tower((block,1),(block,15)), false, 0).
holds(5, in_tower((block,1),(block,16)), false, 0).
holds(5, in_tower((block,1),(block,17)), false, 0).
holds(5, in_tower((block,1),(block,18)), false, 0).
holds(5, in_tower((block,1),(block,2)), false, 0).
holds(5, in_tower((block,1),(block,3)), true, 0).
holds(5, in_tower((block,1),(block,4)), false, 0).
holds(5, in_tower((block,1),(block,5)), false, 0).
holds(5, in_tower((block,1),(block,6)), false, 0).
holds(5, in_tower((block,1),(block,7)), false, 0).
holds(5, in_tower((block,1),(block,8)), false, 0).
holds(5, in_tower((block,1),(block,9)), false, 0).
holds(5, in_tower((block,10),(block,1)), false, 0).
holds(5, in_tower((block,10),(block,10)), true, 0).
holds(5, in_tower((block,10),(block,11)), false, 0).
holds(5, in_tower((block,10),(block,12)), true, 0).
holds(5, in_tower((block,10),(block,13)), false, 0).
holds(5, in_tower((block,10),(block,14)), false, 0).
holds(5, in_tower((block,10),(block,15)), false, 0).
holds(5, in_tower((block,10),(block,16)), false, 0).
holds(5, in_tower((block,10),(block,17)), false, 0).
holds(5, in_tower((block,10),(block,18)), false, 0).
holds(5, in_tower((block,10),(block,2)), false, 0).
holds(5, in_tower((block,10),(block,3)), false, 0).
holds(5, in_tower((block,10),(block,4)), false, 0).
holds(5, in_tower((block,10),(block,5)), false, 0).
holds(5, in_tower((block,10),(block,6)), false, 0).
holds(5, in_tower((block,10),(block,7)), false, 0).
holds(5, in_tower((block,10),(block,8)), false, 0).
holds(5, in_tower((block,10),(block,9)), false, 0).
holds(5, in_tower((block,11),(block,1)), false, 0).
holds(5, in_tower((block,11),(block,10)), false, 0).
holds(5, in_tower((block,11),(block,11)), true, 0).
holds(5, in_tower((block,11),(block,12)), false, 0).
holds(5, in_tower((block,11),(block,13)), false, 0).
holds(5, in_tower((block,11),(block,14)), false, 0).
holds(5, in_tower((block,11),(block,15)), false, 0).
holds(5, in_tower((block,11),(block,16)), false, 0).
holds(5, in_tower((block,11),(block,17)), false, 0).
holds(5, in_tower((block,11),(block,18)), false, 0).
holds(5, in_tower((block,11),(block,2)), false, 0).
holds(5, in_tower((block,11),(block,3)), false, 0).
holds(5, in_tower((block,11),(block,4)), false, 0).
holds(5, in_tower((block,11),(block,5)), false, 0).
holds(5, in_tower((block,11),(block,6)), false, 0).
holds(5, in_tower((block,11),(block,7)), false, 0).
holds(5, in_tower((block,11),(block,8)), false, 0).
holds(5, in_tower((block,11),(block,9)), false, 0).
holds(5, in_tower((block,12),(block,1)), false, 0).
holds(5, in_tower((block,12),(block,10)), false, 0).
holds(5, in_tower((block,12),(block,11)), false, 0).
holds(5, in_tower((block,12),(block,12)), false, 0).
holds(5, in_tower((block,12),(block,13)), false, 0).
holds(5, in_tower((block,12),(block,14)), false, 0).
holds(5, in_tower((block,12),(block,15)), false, 0).
holds(5, in_tower((block,12),(block,16)), false, 0).
holds(5, in_tower((block,12),(block,17)), false, 0).
holds(5, in_tower((block,12),(block,18)), false, 0).
holds(5, in_tower((block,12),(block,2)), false, 0).
holds(5, in_tower((block,12),(block,3)), false, 0).
holds(5, in_tower((block,12),(block,4)), false, 0).
holds(5, in_tower((block,12),(block,5)), false, 0).
holds(5, in_tower((block,12),(block,6)), false, 0).
holds(5, in_tower((block,12),(block,7)), false, 0).
holds(5, in_tower((block,12),(block,8)), false, 0).
holds(5, in_tower((block,12),(block,9)), false, 0).
holds(5, in_tower((block,13),(block,1)), false, 0).
holds(5, in_tower((block,13),(block,10)), false, 0).
holds(5, in_tower((block,13),(block,11)), false, 0).
holds(5, in_tower((block,13),(block,12)), false, 0).
holds(5, in_tower((block,13),(block,13)), false, 0).
holds(5, in_tower((block,13),(block,14)), false, 0).
holds(5, in_tower((block,13),(block,15)), false, 0).
holds(5, in_tower((block,13),(block,16)), false, 0).
holds(5, in_tower((block,13),(block,17)), false, 0).
holds(5, in_tower((block,13),(block,18)), false, 0).
holds(5, in_tower((block,13),(block,2)), false, 0).
holds(5, in_tower((block,13),(block,3)), false, 0).
holds(5, in_tower((block,13),(block,4)), false, 0).
holds(5, in_tower((block,13),(block,5)), false, 0).
holds(5, in_tower((block,13),(block,6)), false, 0).
holds(5, in_tower((block,13),(block,7)), false, 0).
holds(5, in_tower((block,13),(block,8)), false, 0).
holds(5, in_tower((block,13),(block,9)), false, 0).
holds(5, in_tower((block,14),(block,1)), false, 0).
holds(5, in_tower((block,14),(block,10)), false, 0).
holds(5, in_tower((block,14),(block,11)), false, 0).
holds(5, in_tower((block,14),(block,12)), false, 0).
holds(5, in_tower((block,14),(block,13)), false, 0).
holds(5, in_tower((block,14),(block,14)), false, 0).
holds(5, in_tower((block,14),(block,15)), false, 0).
holds(5, in_tower((block,14),(block,16)), false, 0).
holds(5, in_tower((block,14),(block,17)), false, 0).
holds(5, in_tower((block,14),(block,18)), false, 0).
holds(5, in_tower((block,14),(block,2)), false, 0).
holds(5, in_tower((block,14),(block,3)), false, 0).
holds(5, in_tower((block,14),(block,4)), false, 0).
holds(5, in_tower((block,14),(block,5)), false, 0).
holds(5, in_tower((block,14),(block,6)), false, 0).
holds(5, in_tower((block,14),(block,7)), false, 0).
holds(5, in_tower((block,14),(block,8)), false, 0).
holds(5, in_tower((block,14),(block,9)), false, 0).
holds(5, in_tower((block,15),(block,1)), false, 0).
holds(5, in_tower((block,15),(block,10)), false, 0).
holds(5, in_tower((block,15),(block,11)), false, 0).
holds(5, in_tower((block,15),(block,12)), false, 0).
holds(5, in_tower((block,15),(block,13)), false, 0).
holds(5, in_tower((block,15),(block,14)), false, 0).
holds(5, in_tower((block,15),(block,15)), false, 0).
holds(5, in_tower((block,15),(block,16)), false, 0).
holds(5, in_tower((block,15),(block,17)), false, 0).
holds(5, in_tower((block,15),(block,18)), false, 0).
holds(5, in_tower((block,15),(block,2)), false, 0).
holds(5, in_tower((block,15),(block,3)), false, 0).
holds(5, in_tower((block,15),(block,4)), false, 0).
holds(5, in_tower((block,15),(block,5)), false, 0).
holds(5, in_tower((block,15),(block,6)), false, 0).
holds(5, in_tower((block,15),(block,7)), false, 0).
holds(5, in_tower((block,15),(block,8)), false, 0).
holds(5, in_tower((block,15),(block,9)), false, 0).
holds(5, in_tower((block,16),(block,1)), false, 0).
holds(5, in_tower((block,16),(block,10)), false, 0).
holds(5, in_tower((block,16),(block,11)), false, 0).
holds(5, in_tower((block,16),(block,12)), false, 0).
holds(5, in_tower((block,16),(block,13)), false, 0).
holds(5, in_tower((block,16),(block,14)), false, 0).
holds(5, in_tower((block,16),(block,15)), false, 0).
holds(5, in_tower((block,16),(block,16)), true, 0).
holds(5, in_tower((block,16),(block,17)), false, 0).
holds(5, in_tower((block,16),(block,18)), true, 0).
holds(5, in_tower((block,16),(block,2)), false, 0).
holds(5, in_tower((block,16),(block,3)), false, 0).
holds(5, in_tower((block,16),(block,4)), false, 0).
holds(5, in_tower((block,16),(block,5)), false, 0).
holds(5, in_tower((block,16),(block,6)), false, 0).
holds(5, in_tower((block,16),(block,7)), false, 0).
holds(5, in_tower((block,16),(block,8)), false, 0).
holds(5, in_tower((block,16),(block,9)), false, 0).
holds(5, in_tower((block,17),(block,1)), false, 0).
holds(5, in_tower((block,17),(block,10)), false, 0).
holds(5, in_tower((block,17),(block,11)), false, 0).
holds(5, in_tower((block,17),(block,12)), false, 0).
holds(5, in_tower((block,17),(block,13)), false, 0).
holds(5, in_tower((block,17),(block,14)), false, 0).
holds(5, in_tower((block,17),(block,15)), false, 0).
holds(5, in_tower((block,17),(block,16)), false, 0).
holds(5, in_tower((block,17),(block,17)), false, 0).
holds(5, in_tower((block,17),(block,18)), false, 0).
holds(5, in_tower((block,17),(block,2)), false, 0).
holds(5, in_tower((block,17),(block,3)), false, 0).
holds(5, in_tower((block,17),(block,4)), false, 0).
holds(5, in_tower((block,17),(block,5)), false, 0).
holds(5, in_tower((block,17),(block,6)), false, 0).
holds(5, in_tower((block,17),(block,7)), false, 0).
holds(5, in_tower((block,17),(block,8)), false, 0).
holds(5, in_tower((block,17),(block,9)), false, 0).
holds(5, in_tower((block,18),(block,1)), false, 0).
holds(5, in_tower((block,18),(block,10)), false, 0).
holds(5, in_tower((block,18),(block,11)), false, 0).
holds(5, in_tower((block,18),(block,12)), false, 0).
holds(5, in_tower((block,18),(block,13)), false, 0).
holds(5, in_tower((block,18),(block,14)), false, 0).
holds(5, in_tower((block,18),(block,15)), false, 0).
holds(5, in_tower((block,18),(block,16)), false, 0).
holds(5, in_tower((block,18),(block,17)), false, 0).
holds(5, in_tower((block,18),(block,18)), false, 0).
holds(5, in_tower((block,18),(block,2)), false, 0).
holds(5, in_tower((block,18),(block,3)), false, 0).
holds(5, in_tower((block,18),(block,4)), false, 0).
holds(5, in_tower((block,18),(block,5)), false, 0).
holds(5, in_tower((block,18),(block,6)), false, 0).
holds(5, in_tower((block,18),(block,7)), false, 0).
holds(5, in_tower((block,18),(block,8)), false, 0).
holds(5, in_tower((block,18),(block,9)), false, 0).
holds(5, in_tower((block,2),(block,1)), false, 0).
holds(5, in_tower((block,2),(block,10)), false, 0).
holds(5, in_tower((block,2),(block,11)), false, 0).
holds(5, in_tower((block,2),(block,12)), false, 0).
holds(5, in_tower((block,2),(block,13)), false, 0).
holds(5, in_tower((block,2),(block,14)), false, 0).
holds(5, in_tower((block,2),(block,15)), false, 0).
holds(5, in_tower((block,2),(block,16)), false, 0).
holds(5, in_tower((block,2),(block,17)), false, 0).
holds(5, in_tower((block,2),(block,18)), false, 0).
holds(5, in_tower((block,2),(block,2)), true, 0).
holds(5, in_tower((block,2),(block,3)), false, 0).
holds(5, in_tower((block,2),(block,4)), false, 0).
holds(5, in_tower((block,2),(block,5)), false, 0).
holds(5, in_tower((block,2),(block,6)), false, 0).
holds(5, in_tower((block,2),(block,7)), false, 0).
holds(5, in_tower((block,2),(block,8)), false, 0).
holds(5, in_tower((block,2),(block,9)), false, 0).
holds(5, in_tower((block,3),(block,1)), false, 0).
holds(5, in_tower((block,3),(block,10)), false, 0).
holds(5, in_tower((block,3),(block,11)), false, 0).
holds(5, in_tower((block,3),(block,12)), false, 0).
holds(5, in_tower((block,3),(block,13)), false, 0).
holds(5, in_tower((block,3),(block,14)), false, 0).
holds(5, in_tower((block,3),(block,15)), false, 0).
holds(5, in_tower((block,3),(block,16)), false, 0).
holds(5, in_tower((block,3),(block,17)), false, 0).
holds(5, in_tower((block,3),(block,18)), false, 0).
holds(5, in_tower((block,3),(block,2)), false, 0).
holds(5, in_tower((block,3),(block,3)), false, 0).
holds(5, in_tower((block,3),(block,4)), false, 0).
holds(5, in_tower((block,3),(block,5)), false, 0).
holds(5, in_tower((block,3),(block,6)), false, 0).
holds(5, in_tower((block,3),(block,7)), false, 0).
holds(5, in_tower((block,3),(block,8)), false, 0).
holds(5, in_tower((block,3),(block,9)), false, 0).
holds(5, in_tower((block,4),(block,1)), false, 0).
holds(5, in_tower((block,4),(block,10)), false, 0).
holds(5, in_tower((block,4),(block,11)), false, 0).
holds(5, in_tower((block,4),(block,12)), false, 0).
holds(5, in_tower((block,4),(block,13)), false, 0).
holds(5, in_tower((block,4),(block,14)), false, 0).
holds(5, in_tower((block,4),(block,15)), false, 0).
holds(5, in_tower((block,4),(block,16)), false, 0).
holds(5, in_tower((block,4),(block,17)), false, 0).
holds(5, in_tower((block,4),(block,18)), false, 0).
holds(5, in_tower((block,4),(block,2)), false, 0).
holds(5, in_tower((block,4),(block,3)), false, 0).
holds(5, in_tower((block,4),(block,4)), false, 0).
holds(5, in_tower((block,4),(block,5)), false, 0).
holds(5, in_tower((block,4),(block,6)), false, 0).
holds(5, in_tower((block,4),(block,7)), false, 0).
holds(5, in_tower((block,4),(block,8)), false, 0).
holds(5, in_tower((block,4),(block,9)), false, 0).
holds(5, in_tower((block,5),(block,1)), false, 0).
holds(5, in_tower((block,5),(block,10)), false, 0).
holds(5, in_tower((block,5),(block,11)), false, 0).
holds(5, in_tower((block,5),(block,12)), false, 0).
holds(5, in_tower((block,5),(block,13)), false, 0).
holds(5, in_tower((block,5),(block,14)), false, 0).
holds(5, in_tower((block,5),(block,15)), false, 0).
holds(5, in_tower((block,5),(block,16)), false, 0).
holds(5, in_tower((block,5),(block,17)), false, 0).
holds(5, in_tower((block,5),(block,18)), false, 0).
holds(5, in_tower((block,5),(block,2)), false, 0).
holds(5, in_tower((block,5),(block,3)), false, 0).
holds(5, in_tower((block,5),(block,4)), false, 0).
holds(5, in_tower((block,5),(block,5)), false, 0).
holds(5, in_tower((block,5),(block,6)), false, 0).
holds(5, in_tower((block,5),(block,7)), false, 0).
holds(5, in_tower((block,5),(block,8)), false, 0).
holds(5, in_tower((block,5),(block,9)), false, 0).
holds(5, in_tower((block,6),(block,1)), false, 0).
holds(5, in_tower((block,6),(block,10)), false, 0).
holds(5, in_tower((block,6),(block,11)), false, 0).
holds(5, in_tower((block,6),(block,12)), false, 0).
holds(5, in_tower((block,6),(block,13)), false, 0).
holds(5, in_tower((block,6),(block,14)), false, 0).
holds(5, in_tower((block,6),(block,15)), false, 0).
holds(5, in_tower((block,6),(block,16)), false, 0).
holds(5, in_tower((block,6),(block,17)), false, 0).
holds(5, in_tower((block,6),(block,18)), false, 0).
holds(5, in_tower((block,6),(block,2)), false, 0).
holds(5, in_tower((block,6),(block,3)), false, 0).
holds(5, in_tower((block,6),(block,4)), false, 0).
holds(5, in_tower((block,6),(block,5)), false, 0).
holds(5, in_tower((block,6),(block,6)), false, 0).
holds(5, in_tower((block,6),(block,7)), false, 0).
holds(5, in_tower((block,6),(block,8)), false, 0).
holds(5, in_tower((block,6),(block,9)), false, 0).
holds(5, in_tower((block,7),(block,1)), false, 0).
holds(5, in_tower((block,7),(block,10)), false, 0).
holds(5, in_tower((block,7),(block,11)), false, 0).
holds(5, in_tower((block,7),(block,12)), false, 0).
holds(5, in_tower((block,7),(block,13)), false, 0).
holds(5, in_tower((block,7),(block,14)), false, 0).
holds(5, in_tower((block,7),(block,15)), false, 0).
holds(5, in_tower((block,7),(block,16)), false, 0).
holds(5, in_tower((block,7),(block,17)), false, 0).
holds(5, in_tower((block,7),(block,18)), false, 0).
holds(5, in_tower((block,7),(block,2)), false, 0).
holds(5, in_tower((block,7),(block,3)), false, 0).
holds(5, in_tower((block,7),(block,4)), false, 0).
holds(5, in_tower((block,7),(block,5)), false, 0).
holds(5, in_tower((block,7),(block,6)), false, 0).
holds(5, in_tower((block,7),(block,7)), true, 0).
holds(5, in_tower((block,7),(block,8)), false, 0).
holds(5, in_tower((block,7),(block,9)), true, 0).
holds(5, in_tower((block,8),(block,1)), false, 0).
holds(5, in_tower((block,8),(block,10)), false, 0).
holds(5, in_tower((block,8),(block,11)), false, 0).
holds(5, in_tower((block,8),(block,12)), false, 0).
holds(5, in_tower((block,8),(block,13)), false, 0).
holds(5, in_tower((block,8),(block,14)), false, 0).
holds(5, in_tower((block,8),(block,15)), false, 0).
holds(5, in_tower((block,8),(block,16)), false, 0).
holds(5, in_tower((block,8),(block,17)), false, 0).
holds(5, in_tower((block,8),(block,18)), false, 0).
holds(5, in_tower((block,8),(block,2)), false, 0).
holds(5, in_tower((block,8),(block,3)), false, 0).
holds(5, in_tower((block,8),(block,4)), false, 0).
holds(5, in_tower((block,8),(block,5)), false, 0).
holds(5, in_tower((block,8),(block,6)), false, 0).
holds(5, in_tower((block,8),(block,7)), false, 0).
holds(5, in_tower((block,8),(block,8)), false, 0).
holds(5, in_tower((block,8),(block,9)), false, 0).
holds(5, in_tower((block,9),(block,1)), false, 0).
holds(5, in_tower((block,9),(block,10)), false, 0).
holds(5, in_tower((block,9),(block,11)), false, 0).
holds(5, in_tower((block,9),(block,12)), false, 0).
holds(5, in_tower((block,9),(block,13)), false, 0).
holds(5, in_tower((block,9),(block,14)), false, 0).
holds(5, in_tower((block,9),(block,15)), false, 0).
holds(5, in_tower((block,9),(block,16)), false, 0).
holds(5, in_tower((block,9),(block,17)), false, 0).
holds(5, in_tower((block,9),(block,18)), false, 0).
holds(5, in_tower((block,9),(block,2)), false, 0).
holds(5, in_tower((block,9),(block,3)), false, 0).
holds(5, in_tower((block,9),(block,4)), false, 0).
holds(5, in_tower((block,9),(block,5)), false, 0).
holds(5, in_tower((block,9),(block,6)), false, 0).
holds(5, in_tower((block,9),(block,7)), false, 0).
holds(5, in_tower((block,9),(block,8)), false, 0).
holds(5, in_tower((block,9),(block,9)), false, 0).
holds(5, on((block,1)), puzzle_room_1_table, 0).
holds(5, on((block,10)), puzzle_room_2_table, 0).
holds(5, on((block,11)), puzzle_room_2_table, 0).
holds(5, on((block,12)), (block,10), 0).
holds(5, on((block,13)), nothing, 0).
holds(5, on((block,14)), nothing, 0).
holds(5, on((block,15)), nothing, 0).
holds(5, on((block,16)), puzzle_room_2_table, 0).
holds(5, on((block,17)), nothing, 0).
holds(5, on((block,18)), (block,16), 0).
holds(5, on((block,2)), puzzle_room_1_table, 0).
holds(5, on((block,3)), (block,1), 0).
holds(5, on((block,4)), nothing, 0).
holds(5, on((block,5)), nothing, 0).
holds(5, on((block,6)), nothing, 0).
holds(5, on((block,7)), puzzle_room_1_table, 0).
holds(5, on((block,8)), nothing, 0).
holds(5, on((block,9)), (block,7), 0).
holds(5, tower_base((block,1),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,1),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,10),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,10),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,11),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,11),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,12),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,12),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,13),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,13),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,14),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,14),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,15),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,15),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,16),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,16),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,17),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,17),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,18),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,18),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,2),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,2),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,3),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,3),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,4),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,4),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,5),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,5),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,6),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,6),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,7),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,7),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,8),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,8),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,9),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,9),puzzle_room_2_table), false, 0).
holds(5, transporting(talos,(block,1)), false, 0).
holds(5, transporting(talos,(block,10)), false, 0).
holds(5, transporting(talos,(block,11)), false, 0).
holds(5, transporting(talos,(block,12)), false, 0).
holds(5, transporting(talos,(block,13)), false, 0).
holds(5, transporting(talos,(block,14)), false, 0).
holds(5, transporting(talos,(block,15)), false, 0).
holds(5, transporting(talos,(block,16)), false, 0).
holds(5, transporting(talos,(block,17)), false, 0).
holds(5, transporting(talos,(block,18)), false, 0).
holds(5, transporting(talos,(block,2)), false, 0).
holds(5, transporting(talos,(block,3)), false, 0).
holds(5, transporting(talos,(block,4)), false, 0).
holds(5, transporting(talos,(block,5)), false, 0).
holds(5, transporting(talos,(block,6)), false, 0).
holds(5, transporting(talos,(block,7)), false, 0).
holds(5, transporting(talos,(block,8)), false, 0).
holds(5, transporting(talos,(block,9)), false, 0).
holds(5, unordered_tower((block,1),puzzle_room_1_table), true, 0).
holds(5, unordered_tower((block,1),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,10),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,10),puzzle_room_2_table), true, 0).
holds(5, unordered_tower((block,11),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,11),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,12),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,12),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,13),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,13),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,14),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,14),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,15),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,15),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,16),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,16),puzzle_room_2_table), true, 0).
holds(5, unordered_tower((block,17),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,17),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,18),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,18),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,2),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,2),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,3),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,3),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,4),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,4),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,5),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,5),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,6),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,6),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,7),puzzle_room_1_table), true, 0).
holds(5, unordered_tower((block,7),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,8),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,8),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,9),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,9),puzzle_room_2_table), false, 0).

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,10))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,11))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,12))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,13),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,14),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,13))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,14))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,15))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,15),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,16),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,17),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,16))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,17))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,18))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,18),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,11)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,12)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,14)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,13))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,15)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,14))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,15))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,17)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,18)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,17))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,18))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,11)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,12)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,14)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,15)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,17)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,18)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2328 rules into program part ash_goal_state:

final_goal(4, complete_tower(blue,puzzle_room_1_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_1_table), true, true).
final_goal(4, complete_tower(blue,puzzle_room_2_table), false, false).
final_goal(4, complete_tower(blue,puzzle_room_2_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_1_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_1_table), true, true).
final_goal(4, complete_tower(red,puzzle_room_2_table), false, false).
final_goal(4, complete_tower(red,puzzle_room_2_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_1_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_1_table), true, true).
final_goal(4, complete_tower(yellow,puzzle_room_2_table), false, false).
final_goal(4, complete_tower(yellow,puzzle_room_2_table), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,10)), false, true).
final_goal(4, in_tower((block,1),(block,10)), true, false).
final_goal(4, in_tower((block,1),(block,11)), false, true).
final_goal(4, in_tower((block,1),(block,11)), true, false).
final_goal(4, in_tower((block,1),(block,12)), false, true).
final_goal(4, in_tower((block,1),(block,12)), true, false).
final_goal(4, in_tower((block,1),(block,13)), false, true).
final_goal(4, in_tower((block,1),(block,13)), true, false).
final_goal(4, in_tower((block,1),(block,14)), false, true).
final_goal(4, in_tower((block,1),(block,14)), true, false).
final_goal(4, in_tower((block,1),(block,15)), false, true).
final_goal(4, in_tower((block,1),(block,15)), true, false).
final_goal(4, in_tower((block,1),(block,16)), false, true).
final_goal(4, in_tower((block,1),(block,16)), true, false).
final_goal(4, in_tower((block,1),(block,17)), false, true).
final_goal(4, in_tower((block,1),(block,17)), true, false).
final_goal(4, in_tower((block,1),(block,18)), false, true).
final_goal(4, in_tower((block,1),(block,18)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,1),(block,7)), false, true).
final_goal(4, in_tower((block,1),(block,7)), true, false).
final_goal(4, in_tower((block,1),(block,8)), false, true).
final_goal(4, in_tower((block,1),(block,8)), true, false).
final_goal(4, in_tower((block,1),(block,9)), false, true).
final_goal(4, in_tower((block,1),(block,9)), true, false).
final_goal(4, in_tower((block,10),(block,1)), false, true).
final_goal(4, in_tower((block,10),(block,1)), true, false).
final_goal(4, in_tower((block,10),(block,10)), false, true).
final_goal(4, in_tower((block,10),(block,10)), true, false).
final_goal(4, in_tower((block,10),(block,11)), false, true).
final_goal(4, in_tower((block,10),(block,11)), true, false).
final_goal(4, in_tower((block,10),(block,12)), false, true).
final_goal(4, in_tower((block,10),(block,12)), true, false).
final_goal(4, in_tower((block,10),(block,13)), false, true).
final_goal(4, in_tower((block,10),(block,13)), true, false).
final_goal(4, in_tower((block,10),(block,14)), false, true).
final_goal(4, in_tower((block,10),(block,14)), true, false).
final_goal(4, in_tower((block,10),(block,15)), false, true).
final_goal(4, in_tower((block,10),(block,15)), true, false).
final_goal(4, in_tower((block,10),(block,16)), false, true).
final_goal(4, in_tower((block,10),(block,16)), true, false).
final_goal(4, in_tower((block,10),(block,17)), false, true).
final_goal(4, in_tower((block,10),(block,17)), true, false).
final_goal(4, in_tower((block,10),(block,18)), false, true).
final_goal(4, in_tower((block,10),(block,18)), true, false).
final_goal(4, in_tower((block,10),(block,2)), false, true).
final_goal(4, in_tower((block,10),(block,2)), true, false).
final_goal(4, in_tower((block,10),(block,3)), false, true).
final_goal(4, in_tower((block,10),(block,3)), true, false).
final_goal(4, in_tower((block,10),(block,4)), false, true).
final_goal(4, in_tower((block,10),(block,4)), true, false).
final_goal(4, in_tower((block,10),(block,5)), false, true).
final_goal(4, in_tower((block,10),(block,5)), true, false).
final_goal(4, in_tower((block,10),(block,6)), false, true).
final_goal(4, in_tower((block,10),(block,6)), true, false).
final_goal(4, in_tower((block,10),(block,7)), false, true).
final_goal(4, in_tower((block,10),(block,7)), true, false).
final_goal(4, in_tower((block,10),(block,8)), false, true).
final_goal(4, in_tower((block,10),(block,8)), true, false).
final_goal(4, in_tower((block,10),(block,9)), false, true).
final_goal(4, in_tower((block,10),(block,9)), true, false).
final_goal(4, in_tower((block,11),(block,1)), false, true).
final_goal(4, in_tower((block,11),(block,1)), true, false).
final_goal(4, in_tower((block,11),(block,10)), false, true).
final_goal(4, in_tower((block,11),(block,10)), true, false).
final_goal(4, in_tower((block,11),(block,11)), false, true).
final_goal(4, in_tower((block,11),(block,11)), true, false).
final_goal(4, in_tower((block,11),(block,12)), false, true).
final_goal(4, in_tower((block,11),(block,12)), true, false).
final_goal(4, in_tower((block,11),(block,13)), false, true).
final_goal(4, in_tower((block,11),(block,13)), true, false).
final_goal(4, in_tower((block,11),(block,14)), false, true).
final_goal(4, in_tower((block,11),(block,14)), true, false).
final_goal(4, in_tower((block,11),(block,15)), false, true).
final_goal(4, in_tower((block,11),(block,15)), true, false).
final_goal(4, in_tower((block,11),(block,16)), false, true).
final_goal(4, in_tower((block,11),(block,16)), true, false).
final_goal(4, in_tower((block,11),(block,17)), false, true).
final_goal(4, in_tower((block,11),(block,17)), true, false).
final_goal(4, in_tower((block,11),(block,18)), false, true).
final_goal(4, in_tower((block,11),(block,18)), true, false).
final_goal(4, in_tower((block,11),(block,2)), false, true).
final_goal(4, in_tower((block,11),(block,2)), true, false).
final_goal(4, in_tower((block,11),(block,3)), false, true).
final_goal(4, in_tower((block,11),(block,3)), true, false).
final_goal(4, in_tower((block,11),(block,4)), false, true).
final_goal(4, in_tower((block,11),(block,4)), true, false).
final_goal(4, in_tower((block,11),(block,5)), false, true).
final_goal(4, in_tower((block,11),(block,5)), true, false).
final_goal(4, in_tower((block,11),(block,6)), false, true).
final_goal(4, in_tower((block,11),(block,6)), true, false).
final_goal(4, in_tower((block,11),(block,7)), false, true).
final_goal(4, in_tower((block,11),(block,7)), true, false).
final_goal(4, in_tower((block,11),(block,8)), false, true).
final_goal(4, in_tower((block,11),(block,8)), true, false).
final_goal(4, in_tower((block,11),(block,9)), false, true).
final_goal(4, in_tower((block,11),(block,9)), true, false).
final_goal(4, in_tower((block,12),(block,1)), false, true).
final_goal(4, in_tower((block,12),(block,1)), true, false).
final_goal(4, in_tower((block,12),(block,10)), false, false).
final_goal(4, in_tower((block,12),(block,10)), true, true).
final_goal(4, in_tower((block,12),(block,11)), false, false).
final_goal(4, in_tower((block,12),(block,11)), true, true).
final_goal(4, in_tower((block,12),(block,12)), false, false).
final_goal(4, in_tower((block,12),(block,12)), true, true).
final_goal(4, in_tower((block,12),(block,13)), false, true).
final_goal(4, in_tower((block,12),(block,13)), true, false).
final_goal(4, in_tower((block,12),(block,14)), false, true).
final_goal(4, in_tower((block,12),(block,14)), true, false).
final_goal(4, in_tower((block,12),(block,15)), false, true).
final_goal(4, in_tower((block,12),(block,15)), true, false).
final_goal(4, in_tower((block,12),(block,16)), false, true).
final_goal(4, in_tower((block,12),(block,16)), true, false).
final_goal(4, in_tower((block,12),(block,17)), false, true).
final_goal(4, in_tower((block,12),(block,17)), true, false).
final_goal(4, in_tower((block,12),(block,18)), false, true).
final_goal(4, in_tower((block,12),(block,18)), true, false).
final_goal(4, in_tower((block,12),(block,2)), false, true).
final_goal(4, in_tower((block,12),(block,2)), true, false).
final_goal(4, in_tower((block,12),(block,3)), false, true).
final_goal(4, in_tower((block,12),(block,3)), true, false).
final_goal(4, in_tower((block,12),(block,4)), false, true).
final_goal(4, in_tower((block,12),(block,4)), true, false).
final_goal(4, in_tower((block,12),(block,5)), false, true).
final_goal(4, in_tower((block,12),(block,5)), true, false).
final_goal(4, in_tower((block,12),(block,6)), false, true).
final_goal(4, in_tower((block,12),(block,6)), true, false).
final_goal(4, in_tower((block,12),(block,7)), false, true).
final_goal(4, in_tower((block,12),(block,7)), true, false).
final_goal(4, in_tower((block,12),(block,8)), false, true).
final_goal(4, in_tower((block,12),(block,8)), true, false).
final_goal(4, in_tower((block,12),(block,9)), false, true).
final_goal(4, in_tower((block,12),(block,9)), true, false).
final_goal(4, in_tower((block,13),(block,1)), false, true).
final_goal(4, in_tower((block,13),(block,1)), true, false).
final_goal(4, in_tower((block,13),(block,10)), false, true).
final_goal(4, in_tower((block,13),(block,10)), true, false).
final_goal(4, in_tower((block,13),(block,11)), false, true).
final_goal(4, in_tower((block,13),(block,11)), true, false).
final_goal(4, in_tower((block,13),(block,12)), false, true).
final_goal(4, in_tower((block,13),(block,12)), true, false).
final_goal(4, in_tower((block,13),(block,13)), false, true).
final_goal(4, in_tower((block,13),(block,13)), true, false).
final_goal(4, in_tower((block,13),(block,14)), false, true).
final_goal(4, in_tower((block,13),(block,14)), true, false).
final_goal(4, in_tower((block,13),(block,15)), false, true).
final_goal(4, in_tower((block,13),(block,15)), true, false).
final_goal(4, in_tower((block,13),(block,16)), false, true).
final_goal(4, in_tower((block,13),(block,16)), true, false).
final_goal(4, in_tower((block,13),(block,17)), false, true).
final_goal(4, in_tower((block,13),(block,17)), true, false).
final_goal(4, in_tower((block,13),(block,18)), false, true).
final_goal(4, in_tower((block,13),(block,18)), true, false).
final_goal(4, in_tower((block,13),(block,2)), false, true).
final_goal(4, in_tower((block,13),(block,2)), true, false).
final_goal(4, in_tower((block,13),(block,3)), false, true).
final_goal(4, in_tower((block,13),(block,3)), true, false).
final_goal(4, in_tower((block,13),(block,4)), false, true).
final_goal(4, in_tower((block,13),(block,4)), true, false).
final_goal(4, in_tower((block,13),(block,5)), false, true).
final_goal(4, in_tower((block,13),(block,5)), true, false).
final_goal(4, in_tower((block,13),(block,6)), false, true).
final_goal(4, in_tower((block,13),(block,6)), true, false).
final_goal(4, in_tower((block,13),(block,7)), false, true).
final_goal(4, in_tower((block,13),(block,7)), true, false).
final_goal(4, in_tower((block,13),(block,8)), false, true).
final_goal(4, in_tower((block,13),(block,8)), true, false).
final_goal(4, in_tower((block,13),(block,9)), false, true).
final_goal(4, in_tower((block,13),(block,9)), true, false).
final_goal(4, in_tower((block,14),(block,1)), false, true).
final_goal(4, in_tower((block,14),(block,1)), true, false).
final_goal(4, in_tower((block,14),(block,10)), false, true).
final_goal(4, in_tower((block,14),(block,10)), true, false).
final_goal(4, in_tower((block,14),(block,11)), false, true).
final_goal(4, in_tower((block,14),(block,11)), true, false).
final_goal(4, in_tower((block,14),(block,12)), false, true).
final_goal(4, in_tower((block,14),(block,12)), true, false).
final_goal(4, in_tower((block,14),(block,13)), false, true).
final_goal(4, in_tower((block,14),(block,13)), true, false).
final_goal(4, in_tower((block,14),(block,14)), false, true).
final_goal(4, in_tower((block,14),(block,14)), true, false).
final_goal(4, in_tower((block,14),(block,15)), false, true).
final_goal(4, in_tower((block,14),(block,15)), true, false).
final_goal(4, in_tower((block,14),(block,16)), false, true).
final_goal(4, in_tower((block,14),(block,16)), true, false).
final_goal(4, in_tower((block,14),(block,17)), false, true).
final_goal(4, in_tower((block,14),(block,17)), true, false).
final_goal(4, in_tower((block,14),(block,18)), false, true).
final_goal(4, in_tower((block,14),(block,18)), true, false).
final_goal(4, in_tower((block,14),(block,2)), false, true).
final_goal(4, in_tower((block,14),(block,2)), true, false).
final_goal(4, in_tower((block,14),(block,3)), false, true).
final_goal(4, in_tower((block,14),(block,3)), true, false).
final_goal(4, in_tower((block,14),(block,4)), false, true).
final_goal(4, in_tower((block,14),(block,4)), true, false).
final_goal(4, in_tower((block,14),(block,5)), false, true).
final_goal(4, in_tower((block,14),(block,5)), true, false).
final_goal(4, in_tower((block,14),(block,6)), false, true).
final_goal(4, in_tower((block,14),(block,6)), true, false).
final_goal(4, in_tower((block,14),(block,7)), false, true).
final_goal(4, in_tower((block,14),(block,7)), true, false).
final_goal(4, in_tower((block,14),(block,8)), false, true).
final_goal(4, in_tower((block,14),(block,8)), true, false).
final_goal(4, in_tower((block,14),(block,9)), false, true).
final_goal(4, in_tower((block,14),(block,9)), true, false).
final_goal(4, in_tower((block,15),(block,1)), false, true).
final_goal(4, in_tower((block,15),(block,1)), true, false).
final_goal(4, in_tower((block,15),(block,10)), false, true).
final_goal(4, in_tower((block,15),(block,10)), true, false).
final_goal(4, in_tower((block,15),(block,11)), false, true).
final_goal(4, in_tower((block,15),(block,11)), true, false).
final_goal(4, in_tower((block,15),(block,12)), false, true).
final_goal(4, in_tower((block,15),(block,12)), true, false).
final_goal(4, in_tower((block,15),(block,13)), false, false).
final_goal(4, in_tower((block,15),(block,13)), true, true).
final_goal(4, in_tower((block,15),(block,14)), false, false).
final_goal(4, in_tower((block,15),(block,14)), true, true).
final_goal(4, in_tower((block,15),(block,15)), false, false).
final_goal(4, in_tower((block,15),(block,15)), true, true).
final_goal(4, in_tower((block,15),(block,16)), false, true).
final_goal(4, in_tower((block,15),(block,16)), true, false).
final_goal(4, in_tower((block,15),(block,17)), false, true).
final_goal(4, in_tower((block,15),(block,17)), true, false).
final_goal(4, in_tower((block,15),(block,18)), false, true).
final_goal(4, in_tower((block,15),(block,18)), true, false).
final_goal(4, in_tower((block,15),(block,2)), false, true).
final_goal(4, in_tower((block,15),(block,2)), true, false).
final_goal(4, in_tower((block,15),(block,3)), false, true).
final_goal(4, in_tower((block,15),(block,3)), true, false).
final_goal(4, in_tower((block,15),(block,4)), false, true).
final_goal(4, in_tower((block,15),(block,4)), true, false).
final_goal(4, in_tower((block,15),(block,5)), false, true).
final_goal(4, in_tower((block,15),(block,5)), true, false).
final_goal(4, in_tower((block,15),(block,6)), false, true).
final_goal(4, in_tower((block,15),(block,6)), true, false).
final_goal(4, in_tower((block,15),(block,7)), false, true).
final_goal(4, in_tower((block,15),(block,7)), true, false).
final_goal(4, in_tower((block,15),(block,8)), false, true).
final_goal(4, in_tower((block,15),(block,8)), true, false).
final_goal(4, in_tower((block,15),(block,9)), false, true).
final_goal(4, in_tower((block,15),(block,9)), true, false).
final_goal(4, in_tower((block,16),(block,1)), false, true).
final_goal(4, in_tower((block,16),(block,1)), true, false).
final_goal(4, in_tower((block,16),(block,10)), false, true).
final_goal(4, in_tower((block,16),(block,10)), true, false).
final_goal(4, in_tower((block,16),(block,11)), false, true).
final_goal(4, in_tower((block,16),(block,11)), true, false).
final_goal(4, in_tower((block,16),(block,12)), false, true).
final_goal(4, in_tower((block,16),(block,12)), true, false).
final_goal(4, in_tower((block,16),(block,13)), false, true).
final_goal(4, in_tower((block,16),(block,13)), true, false).
final_goal(4, in_tower((block,16),(block,14)), false, true).
final_goal(4, in_tower((block,16),(block,14)), true, false).
final_goal(4, in_tower((block,16),(block,15)), false, true).
final_goal(4, in_tower((block,16),(block,15)), true, false).
final_goal(4, in_tower((block,16),(block,16)), false, true).
final_goal(4, in_tower((block,16),(block,16)), true, false).
final_goal(4, in_tower((block,16),(block,17)), false, true).
final_goal(4, in_tower((block,16),(block,17)), true, false).
final_goal(4, in_tower((block,16),(block,18)), false, true).
final_goal(4, in_tower((block,16),(block,18)), true, false).
final_goal(4, in_tower((block,16),(block,2)), false, true).
final_goal(4, in_tower((block,16),(block,2)), true, false).
final_goal(4, in_tower((block,16),(block,3)), false, true).
final_goal(4, in_tower((block,16),(block,3)), true, false).
final_goal(4, in_tower((block,16),(block,4)), false, true).
final_goal(4, in_tower((block,16),(block,4)), true, false).
final_goal(4, in_tower((block,16),(block,5)), false, true).
final_goal(4, in_tower((block,16),(block,5)), true, false).
final_goal(4, in_tower((block,16),(block,6)), false, true).
final_goal(4, in_tower((block,16),(block,6)), true, false).
final_goal(4, in_tower((block,16),(block,7)), false, true).
final_goal(4, in_tower((block,16),(block,7)), true, false).
final_goal(4, in_tower((block,16),(block,8)), false, true).
final_goal(4, in_tower((block,16),(block,8)), true, false).
final_goal(4, in_tower((block,16),(block,9)), false, true).
final_goal(4, in_tower((block,16),(block,9)), true, false).
final_goal(4, in_tower((block,17),(block,1)), false, true).
final_goal(4, in_tower((block,17),(block,1)), true, false).
final_goal(4, in_tower((block,17),(block,10)), false, true).
final_goal(4, in_tower((block,17),(block,10)), true, false).
final_goal(4, in_tower((block,17),(block,11)), false, true).
final_goal(4, in_tower((block,17),(block,11)), true, false).
final_goal(4, in_tower((block,17),(block,12)), false, true).
final_goal(4, in_tower((block,17),(block,12)), true, false).
final_goal(4, in_tower((block,17),(block,13)), false, true).
final_goal(4, in_tower((block,17),(block,13)), true, false).
final_goal(4, in_tower((block,17),(block,14)), false, true).
final_goal(4, in_tower((block,17),(block,14)), true, false).
final_goal(4, in_tower((block,17),(block,15)), false, true).
final_goal(4, in_tower((block,17),(block,15)), true, false).
final_goal(4, in_tower((block,17),(block,16)), false, true).
final_goal(4, in_tower((block,17),(block,16)), true, false).
final_goal(4, in_tower((block,17),(block,17)), false, true).
final_goal(4, in_tower((block,17),(block,17)), true, false).
final_goal(4, in_tower((block,17),(block,18)), false, true).
final_goal(4, in_tower((block,17),(block,18)), true, false).
final_goal(4, in_tower((block,17),(block,2)), false, true).
final_goal(4, in_tower((block,17),(block,2)), true, false).
final_goal(4, in_tower((block,17),(block,3)), false, true).
final_goal(4, in_tower((block,17),(block,3)), true, false).
final_goal(4, in_tower((block,17),(block,4)), false, true).
final_goal(4, in_tower((block,17),(block,4)), true, false).
final_goal(4, in_tower((block,17),(block,5)), false, true).
final_goal(4, in_tower((block,17),(block,5)), true, false).
final_goal(4, in_tower((block,17),(block,6)), false, true).
final_goal(4, in_tower((block,17),(block,6)), true, false).
final_goal(4, in_tower((block,17),(block,7)), false, true).
final_goal(4, in_tower((block,17),(block,7)), true, false).
final_goal(4, in_tower((block,17),(block,8)), false, true).
final_goal(4, in_tower((block,17),(block,8)), true, false).
final_goal(4, in_tower((block,17),(block,9)), false, true).
final_goal(4, in_tower((block,17),(block,9)), true, false).
final_goal(4, in_tower((block,18),(block,1)), false, true).
final_goal(4, in_tower((block,18),(block,1)), true, false).
final_goal(4, in_tower((block,18),(block,10)), false, true).
final_goal(4, in_tower((block,18),(block,10)), true, false).
final_goal(4, in_tower((block,18),(block,11)), false, true).
final_goal(4, in_tower((block,18),(block,11)), true, false).
final_goal(4, in_tower((block,18),(block,12)), false, true).
final_goal(4, in_tower((block,18),(block,12)), true, false).
final_goal(4, in_tower((block,18),(block,13)), false, true).
final_goal(4, in_tower((block,18),(block,13)), true, false).
final_goal(4, in_tower((block,18),(block,14)), false, true).
final_goal(4, in_tower((block,18),(block,14)), true, false).
final_goal(4, in_tower((block,18),(block,15)), false, true).
final_goal(4, in_tower((block,18),(block,15)), true, false).
final_goal(4, in_tower((block,18),(block,16)), false, false).
final_goal(4, in_tower((block,18),(block,16)), true, true).
final_goal(4, in_tower((block,18),(block,17)), false, false).
final_goal(4, in_tower((block,18),(block,17)), true, true).
final_goal(4, in_tower((block,18),(block,18)), false, false).
final_goal(4, in_tower((block,18),(block,18)), true, true).
final_goal(4, in_tower((block,18),(block,2)), false, true).
final_goal(4, in_tower((block,18),(block,2)), true, false).
final_goal(4, in_tower((block,18),(block,3)), false, true).
final_goal(4, in_tower((block,18),(block,3)), true, false).
final_goal(4, in_tower((block,18),(block,4)), false, true).
final_goal(4, in_tower((block,18),(block,4)), true, false).
final_goal(4, in_tower((block,18),(block,5)), false, true).
final_goal(4, in_tower((block,18),(block,5)), true, false).
final_goal(4, in_tower((block,18),(block,6)), false, true).
final_goal(4, in_tower((block,18),(block,6)), true, false).
final_goal(4, in_tower((block,18),(block,7)), false, true).
final_goal(4, in_tower((block,18),(block,7)), true, false).
final_goal(4, in_tower((block,18),(block,8)), false, true).
final_goal(4, in_tower((block,18),(block,8)), true, false).
final_goal(4, in_tower((block,18),(block,9)), false, true).
final_goal(4, in_tower((block,18),(block,9)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,10)), false, true).
final_goal(4, in_tower((block,2),(block,10)), true, false).
final_goal(4, in_tower((block,2),(block,11)), false, true).
final_goal(4, in_tower((block,2),(block,11)), true, false).
final_goal(4, in_tower((block,2),(block,12)), false, true).
final_goal(4, in_tower((block,2),(block,12)), true, false).
final_goal(4, in_tower((block,2),(block,13)), false, true).
final_goal(4, in_tower((block,2),(block,13)), true, false).
final_goal(4, in_tower((block,2),(block,14)), false, true).
final_goal(4, in_tower((block,2),(block,14)), true, false).
final_goal(4, in_tower((block,2),(block,15)), false, true).
final_goal(4, in_tower((block,2),(block,15)), true, false).
final_goal(4, in_tower((block,2),(block,16)), false, true).
final_goal(4, in_tower((block,2),(block,16)), true, false).
final_goal(4, in_tower((block,2),(block,17)), false, true).
final_goal(4, in_tower((block,2),(block,17)), true, false).
final_goal(4, in_tower((block,2),(block,18)), false, true).
final_goal(4, in_tower((block,2),(block,18)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,7)), false, true).
final_goal(4, in_tower((block,2),(block,7)), true, false).
final_goal(4, in_tower((block,2),(block,8)), false, true).
final_goal(4, in_tower((block,2),(block,8)), true, false).
final_goal(4, in_tower((block,2),(block,9)), false, true).
final_goal(4, in_tower((block,2),(block,9)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,10)), false, true).
final_goal(4, in_tower((block,3),(block,10)), true, false).
final_goal(4, in_tower((block,3),(block,11)), false, true).
final_goal(4, in_tower((block,3),(block,11)), true, false).
final_goal(4, in_tower((block,3),(block,12)), false, true).
final_goal(4, in_tower((block,3),(block,12)), true, false).
final_goal(4, in_tower((block,3),(block,13)), false, true).
final_goal(4, in_tower((block,3),(block,13)), true, false).
final_goal(4, in_tower((block,3),(block,14)), false, true).
final_goal(4, in_tower((block,3),(block,14)), true, false).
final_goal(4, in_tower((block,3),(block,15)), false, true).
final_goal(4, in_tower((block,3),(block,15)), true, false).
final_goal(4, in_tower((block,3),(block,16)), false, true).
final_goal(4, in_tower((block,3),(block,16)), true, false).
final_goal(4, in_tower((block,3),(block,17)), false, true).
final_goal(4, in_tower((block,3),(block,17)), true, false).
final_goal(4, in_tower((block,3),(block,18)), false, true).
final_goal(4, in_tower((block,3),(block,18)), true, false).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,7)), false, true).
final_goal(4, in_tower((block,3),(block,7)), true, false).
final_goal(4, in_tower((block,3),(block,8)), false, true).
final_goal(4, in_tower((block,3),(block,8)), true, false).
final_goal(4, in_tower((block,3),(block,9)), false, true).
final_goal(4, in_tower((block,3),(block,9)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,10)), false, true).
final_goal(4, in_tower((block,4),(block,10)), true, false).
final_goal(4, in_tower((block,4),(block,11)), false, true).
final_goal(4, in_tower((block,4),(block,11)), true, false).
final_goal(4, in_tower((block,4),(block,12)), false, true).
final_goal(4, in_tower((block,4),(block,12)), true, false).
final_goal(4, in_tower((block,4),(block,13)), false, true).
final_goal(4, in_tower((block,4),(block,13)), true, false).
final_goal(4, in_tower((block,4),(block,14)), false, true).
final_goal(4, in_tower((block,4),(block,14)), true, false).
final_goal(4, in_tower((block,4),(block,15)), false, true).
final_goal(4, in_tower((block,4),(block,15)), true, false).
final_goal(4, in_tower((block,4),(block,16)), false, true).
final_goal(4, in_tower((block,4),(block,16)), true, false).
final_goal(4, in_tower((block,4),(block,17)), false, true).
final_goal(4, in_tower((block,4),(block,17)), true, false).
final_goal(4, in_tower((block,4),(block,18)), false, true).
final_goal(4, in_tower((block,4),(block,18)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,7)), false, true).
final_goal(4, in_tower((block,4),(block,7)), true, false).
final_goal(4, in_tower((block,4),(block,8)), false, true).
final_goal(4, in_tower((block,4),(block,8)), true, false).
final_goal(4, in_tower((block,4),(block,9)), false, true).
final_goal(4, in_tower((block,4),(block,9)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,10)), false, true).
final_goal(4, in_tower((block,5),(block,10)), true, false).
final_goal(4, in_tower((block,5),(block,11)), false, true).
final_goal(4, in_tower((block,5),(block,11)), true, false).
final_goal(4, in_tower((block,5),(block,12)), false, true).
final_goal(4, in_tower((block,5),(block,12)), true, false).
final_goal(4, in_tower((block,5),(block,13)), false, true).
final_goal(4, in_tower((block,5),(block,13)), true, false).
final_goal(4, in_tower((block,5),(block,14)), false, true).
final_goal(4, in_tower((block,5),(block,14)), true, false).
final_goal(4, in_tower((block,5),(block,15)), false, true).
final_goal(4, in_tower((block,5),(block,15)), true, false).
final_goal(4, in_tower((block,5),(block,16)), false, true).
final_goal(4, in_tower((block,5),(block,16)), true, false).
final_goal(4, in_tower((block,5),(block,17)), false, true).
final_goal(4, in_tower((block,5),(block,17)), true, false).
final_goal(4, in_tower((block,5),(block,18)), false, true).
final_goal(4, in_tower((block,5),(block,18)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,7)), false, true).
final_goal(4, in_tower((block,5),(block,7)), true, false).
final_goal(4, in_tower((block,5),(block,8)), false, true).
final_goal(4, in_tower((block,5),(block,8)), true, false).
final_goal(4, in_tower((block,5),(block,9)), false, true).
final_goal(4, in_tower((block,5),(block,9)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,10)), false, true).
final_goal(4, in_tower((block,6),(block,10)), true, false).
final_goal(4, in_tower((block,6),(block,11)), false, true).
final_goal(4, in_tower((block,6),(block,11)), true, false).
final_goal(4, in_tower((block,6),(block,12)), false, true).
final_goal(4, in_tower((block,6),(block,12)), true, false).
final_goal(4, in_tower((block,6),(block,13)), false, true).
final_goal(4, in_tower((block,6),(block,13)), true, false).
final_goal(4, in_tower((block,6),(block,14)), false, true).
final_goal(4, in_tower((block,6),(block,14)), true, false).
final_goal(4, in_tower((block,6),(block,15)), false, true).
final_goal(4, in_tower((block,6),(block,15)), true, false).
final_goal(4, in_tower((block,6),(block,16)), false, true).
final_goal(4, in_tower((block,6),(block,16)), true, false).
final_goal(4, in_tower((block,6),(block,17)), false, true).
final_goal(4, in_tower((block,6),(block,17)), true, false).
final_goal(4, in_tower((block,6),(block,18)), false, true).
final_goal(4, in_tower((block,6),(block,18)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, in_tower((block,6),(block,7)), false, true).
final_goal(4, in_tower((block,6),(block,7)), true, false).
final_goal(4, in_tower((block,6),(block,8)), false, true).
final_goal(4, in_tower((block,6),(block,8)), true, false).
final_goal(4, in_tower((block,6),(block,9)), false, true).
final_goal(4, in_tower((block,6),(block,9)), true, false).
final_goal(4, in_tower((block,7),(block,1)), false, true).
final_goal(4, in_tower((block,7),(block,1)), true, false).
final_goal(4, in_tower((block,7),(block,10)), false, true).
final_goal(4, in_tower((block,7),(block,10)), true, false).
final_goal(4, in_tower((block,7),(block,11)), false, true).
final_goal(4, in_tower((block,7),(block,11)), true, false).
final_goal(4, in_tower((block,7),(block,12)), false, true).
final_goal(4, in_tower((block,7),(block,12)), true, false).
final_goal(4, in_tower((block,7),(block,13)), false, true).
final_goal(4, in_tower((block,7),(block,13)), true, false).
final_goal(4, in_tower((block,7),(block,14)), false, true).
final_goal(4, in_tower((block,7),(block,14)), true, false).
final_goal(4, in_tower((block,7),(block,15)), false, true).
final_goal(4, in_tower((block,7),(block,15)), true, false).
final_goal(4, in_tower((block,7),(block,16)), false, true).
final_goal(4, in_tower((block,7),(block,16)), true, false).
final_goal(4, in_tower((block,7),(block,17)), false, true).
final_goal(4, in_tower((block,7),(block,17)), true, false).
final_goal(4, in_tower((block,7),(block,18)), false, true).
final_goal(4, in_tower((block,7),(block,18)), true, false).
final_goal(4, in_tower((block,7),(block,2)), false, true).
final_goal(4, in_tower((block,7),(block,2)), true, false).
final_goal(4, in_tower((block,7),(block,3)), false, true).
final_goal(4, in_tower((block,7),(block,3)), true, false).
final_goal(4, in_tower((block,7),(block,4)), false, true).
final_goal(4, in_tower((block,7),(block,4)), true, false).
final_goal(4, in_tower((block,7),(block,5)), false, true).
final_goal(4, in_tower((block,7),(block,5)), true, false).
final_goal(4, in_tower((block,7),(block,6)), false, true).
final_goal(4, in_tower((block,7),(block,6)), true, false).
final_goal(4, in_tower((block,7),(block,7)), false, true).
final_goal(4, in_tower((block,7),(block,7)), true, false).
final_goal(4, in_tower((block,7),(block,8)), false, true).
final_goal(4, in_tower((block,7),(block,8)), true, false).
final_goal(4, in_tower((block,7),(block,9)), false, true).
final_goal(4, in_tower((block,7),(block,9)), true, false).
final_goal(4, in_tower((block,8),(block,1)), false, true).
final_goal(4, in_tower((block,8),(block,1)), true, false).
final_goal(4, in_tower((block,8),(block,10)), false, true).
final_goal(4, in_tower((block,8),(block,10)), true, false).
final_goal(4, in_tower((block,8),(block,11)), false, true).
final_goal(4, in_tower((block,8),(block,11)), true, false).
final_goal(4, in_tower((block,8),(block,12)), false, true).
final_goal(4, in_tower((block,8),(block,12)), true, false).
final_goal(4, in_tower((block,8),(block,13)), false, true).
final_goal(4, in_tower((block,8),(block,13)), true, false).
final_goal(4, in_tower((block,8),(block,14)), false, true).
final_goal(4, in_tower((block,8),(block,14)), true, false).
final_goal(4, in_tower((block,8),(block,15)), false, true).
final_goal(4, in_tower((block,8),(block,15)), true, false).
final_goal(4, in_tower((block,8),(block,16)), false, true).
final_goal(4, in_tower((block,8),(block,16)), true, false).
final_goal(4, in_tower((block,8),(block,17)), false, true).
final_goal(4, in_tower((block,8),(block,17)), true, false).
final_goal(4, in_tower((block,8),(block,18)), false, true).
final_goal(4, in_tower((block,8),(block,18)), true, false).
final_goal(4, in_tower((block,8),(block,2)), false, true).
final_goal(4, in_tower((block,8),(block,2)), true, false).
final_goal(4, in_tower((block,8),(block,3)), false, true).
final_goal(4, in_tower((block,8),(block,3)), true, false).
final_goal(4, in_tower((block,8),(block,4)), false, true).
final_goal(4, in_tower((block,8),(block,4)), true, false).
final_goal(4, in_tower((block,8),(block,5)), false, true).
final_goal(4, in_tower((block,8),(block,5)), true, false).
final_goal(4, in_tower((block,8),(block,6)), false, true).
final_goal(4, in_tower((block,8),(block,6)), true, false).
final_goal(4, in_tower((block,8),(block,7)), false, true).
final_goal(4, in_tower((block,8),(block,7)), true, false).
final_goal(4, in_tower((block,8),(block,8)), false, true).
final_goal(4, in_tower((block,8),(block,8)), true, false).
final_goal(4, in_tower((block,8),(block,9)), false, true).
final_goal(4, in_tower((block,8),(block,9)), true, false).
final_goal(4, in_tower((block,9),(block,1)), false, true).
final_goal(4, in_tower((block,9),(block,1)), true, false).
final_goal(4, in_tower((block,9),(block,10)), false, true).
final_goal(4, in_tower((block,9),(block,10)), true, false).
final_goal(4, in_tower((block,9),(block,11)), false, true).
final_goal(4, in_tower((block,9),(block,11)), true, false).
final_goal(4, in_tower((block,9),(block,12)), false, true).
final_goal(4, in_tower((block,9),(block,12)), true, false).
final_goal(4, in_tower((block,9),(block,13)), false, true).
final_goal(4, in_tower((block,9),(block,13)), true, false).
final_goal(4, in_tower((block,9),(block,14)), false, true).
final_goal(4, in_tower((block,9),(block,14)), true, false).
final_goal(4, in_tower((block,9),(block,15)), false, true).
final_goal(4, in_tower((block,9),(block,15)), true, false).
final_goal(4, in_tower((block,9),(block,16)), false, true).
final_goal(4, in_tower((block,9),(block,16)), true, false).
final_goal(4, in_tower((block,9),(block,17)), false, true).
final_goal(4, in_tower((block,9),(block,17)), true, false).
final_goal(4, in_tower((block,9),(block,18)), false, true).
final_goal(4, in_tower((block,9),(block,18)), true, false).
final_goal(4, in_tower((block,9),(block,2)), false, true).
final_goal(4, in_tower((block,9),(block,2)), true, false).
final_goal(4, in_tower((block,9),(block,3)), false, true).
final_goal(4, in_tower((block,9),(block,3)), true, false).
final_goal(4, in_tower((block,9),(block,4)), false, true).
final_goal(4, in_tower((block,9),(block,4)), true, false).
final_goal(4, in_tower((block,9),(block,5)), false, true).
final_goal(4, in_tower((block,9),(block,5)), true, false).
final_goal(4, in_tower((block,9),(block,6)), false, true).
final_goal(4, in_tower((block,9),(block,6)), true, false).
final_goal(4, in_tower((block,9),(block,7)), false, false).
final_goal(4, in_tower((block,9),(block,7)), true, true).
final_goal(4, in_tower((block,9),(block,8)), false, false).
final_goal(4, in_tower((block,9),(block,8)), true, true).
final_goal(4, in_tower((block,9),(block,9)), false, false).
final_goal(4, in_tower((block,9),(block,9)), true, true).
final_goal(4, on((block,1)), (block,10), false).
final_goal(4, on((block,1)), (block,11), false).
final_goal(4, on((block,1)), (block,12), false).
final_goal(4, on((block,1)), (block,13), false).
final_goal(4, on((block,1)), (block,14), false).
final_goal(4, on((block,1)), (block,15), false).
final_goal(4, on((block,1)), (block,16), false).
final_goal(4, on((block,1)), (block,17), false).
final_goal(4, on((block,1)), (block,18), false).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), (block,7), false).
final_goal(4, on((block,1)), (block,8), false).
final_goal(4, on((block,1)), (block,9), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,1)), puzzle_room_1_table, false).
final_goal(4, on((block,1)), puzzle_room_2_table, false).
final_goal(4, on((block,10)), (block,1), false).
final_goal(4, on((block,10)), (block,11), true).
final_goal(4, on((block,10)), (block,12), false).
final_goal(4, on((block,10)), (block,13), false).
final_goal(4, on((block,10)), (block,14), false).
final_goal(4, on((block,10)), (block,15), false).
final_goal(4, on((block,10)), (block,16), false).
final_goal(4, on((block,10)), (block,17), false).
final_goal(4, on((block,10)), (block,18), false).
final_goal(4, on((block,10)), (block,2), false).
final_goal(4, on((block,10)), (block,3), false).
final_goal(4, on((block,10)), (block,4), false).
final_goal(4, on((block,10)), (block,5), false).
final_goal(4, on((block,10)), (block,6), false).
final_goal(4, on((block,10)), (block,7), false).
final_goal(4, on((block,10)), (block,8), false).
final_goal(4, on((block,10)), (block,9), false).
final_goal(4, on((block,10)), nothing, false).
final_goal(4, on((block,10)), puzzle_room_1_table, false).
final_goal(4, on((block,10)), puzzle_room_2_table, false).
final_goal(4, on((block,11)), (block,1), false).
final_goal(4, on((block,11)), (block,10), false).
final_goal(4, on((block,11)), (block,12), true).
final_goal(4, on((block,11)), (block,13), false).
final_goal(4, on((block,11)), (block,14), false).
final_goal(4, on((block,11)), (block,15), false).
final_goal(4, on((block,11)), (block,16), false).
final_goal(4, on((block,11)), (block,17), false).
final_goal(4, on((block,11)), (block,18), false).
final_goal(4, on((block,11)), (block,2), false).
final_goal(4, on((block,11)), (block,3), false).
final_goal(4, on((block,11)), (block,4), false).
final_goal(4, on((block,11)), (block,5), false).
final_goal(4, on((block,11)), (block,6), false).
final_goal(4, on((block,11)), (block,7), false).
final_goal(4, on((block,11)), (block,8), false).
final_goal(4, on((block,11)), (block,9), false).
final_goal(4, on((block,11)), nothing, false).
final_goal(4, on((block,11)), puzzle_room_1_table, false).
final_goal(4, on((block,11)), puzzle_room_2_table, false).
final_goal(4, on((block,12)), (block,1), false).
final_goal(4, on((block,12)), (block,10), false).
final_goal(4, on((block,12)), (block,11), false).
final_goal(4, on((block,12)), (block,13), false).
final_goal(4, on((block,12)), (block,14), false).
final_goal(4, on((block,12)), (block,15), false).
final_goal(4, on((block,12)), (block,16), false).
final_goal(4, on((block,12)), (block,17), false).
final_goal(4, on((block,12)), (block,18), false).
final_goal(4, on((block,12)), (block,2), false).
final_goal(4, on((block,12)), (block,3), false).
final_goal(4, on((block,12)), (block,4), false).
final_goal(4, on((block,12)), (block,5), false).
final_goal(4, on((block,12)), (block,6), false).
final_goal(4, on((block,12)), (block,7), false).
final_goal(4, on((block,12)), (block,8), false).
final_goal(4, on((block,12)), (block,9), false).
final_goal(4, on((block,12)), nothing, false).
final_goal(4, on((block,12)), puzzle_room_1_table, false).
final_goal(4, on((block,12)), puzzle_room_2_table, true).
final_goal(4, on((block,13)), (block,1), false).
final_goal(4, on((block,13)), (block,10), false).
final_goal(4, on((block,13)), (block,11), false).
final_goal(4, on((block,13)), (block,12), false).
final_goal(4, on((block,13)), (block,14), true).
final_goal(4, on((block,13)), (block,15), false).
final_goal(4, on((block,13)), (block,16), false).
final_goal(4, on((block,13)), (block,17), false).
final_goal(4, on((block,13)), (block,18), false).
final_goal(4, on((block,13)), (block,2), false).
final_goal(4, on((block,13)), (block,3), false).
final_goal(4, on((block,13)), (block,4), false).
final_goal(4, on((block,13)), (block,5), false).
final_goal(4, on((block,13)), (block,6), false).
final_goal(4, on((block,13)), (block,7), false).
final_goal(4, on((block,13)), (block,8), false).
final_goal(4, on((block,13)), (block,9), false).
final_goal(4, on((block,13)), nothing, false).
final_goal(4, on((block,13)), puzzle_room_1_table, false).
final_goal(4, on((block,13)), puzzle_room_2_table, false).
final_goal(4, on((block,14)), (block,1), false).
final_goal(4, on((block,14)), (block,10), false).
final_goal(4, on((block,14)), (block,11), false).
final_goal(4, on((block,14)), (block,12), false).
final_goal(4, on((block,14)), (block,13), false).
final_goal(4, on((block,14)), (block,15), true).
final_goal(4, on((block,14)), (block,16), false).
final_goal(4, on((block,14)), (block,17), false).
final_goal(4, on((block,14)), (block,18), false).
final_goal(4, on((block,14)), (block,2), false).
final_goal(4, on((block,14)), (block,3), false).
final_goal(4, on((block,14)), (block,4), false).
final_goal(4, on((block,14)), (block,5), false).
final_goal(4, on((block,14)), (block,6), false).
final_goal(4, on((block,14)), (block,7), false).
final_goal(4, on((block,14)), (block,8), false).
final_goal(4, on((block,14)), (block,9), false).
final_goal(4, on((block,14)), nothing, false).
final_goal(4, on((block,14)), puzzle_room_1_table, false).
final_goal(4, on((block,14)), puzzle_room_2_table, false).
final_goal(4, on((block,15)), (block,1), false).
final_goal(4, on((block,15)), (block,10), false).
final_goal(4, on((block,15)), (block,11), false).
final_goal(4, on((block,15)), (block,12), false).
final_goal(4, on((block,15)), (block,13), false).
final_goal(4, on((block,15)), (block,14), false).
final_goal(4, on((block,15)), (block,16), false).
final_goal(4, on((block,15)), (block,17), false).
final_goal(4, on((block,15)), (block,18), false).
final_goal(4, on((block,15)), (block,2), false).
final_goal(4, on((block,15)), (block,3), false).
final_goal(4, on((block,15)), (block,4), false).
final_goal(4, on((block,15)), (block,5), false).
final_goal(4, on((block,15)), (block,6), false).
final_goal(4, on((block,15)), (block,7), false).
final_goal(4, on((block,15)), (block,8), false).
final_goal(4, on((block,15)), (block,9), false).
final_goal(4, on((block,15)), nothing, false).
final_goal(4, on((block,15)), puzzle_room_1_table, false).
final_goal(4, on((block,15)), puzzle_room_2_table, true).
final_goal(4, on((block,16)), (block,1), false).
final_goal(4, on((block,16)), (block,10), false).
final_goal(4, on((block,16)), (block,11), false).
final_goal(4, on((block,16)), (block,12), false).
final_goal(4, on((block,16)), (block,13), false).
final_goal(4, on((block,16)), (block,14), false).
final_goal(4, on((block,16)), (block,15), false).
final_goal(4, on((block,16)), (block,17), true).
final_goal(4, on((block,16)), (block,18), false).
final_goal(4, on((block,16)), (block,2), false).
final_goal(4, on((block,16)), (block,3), false).
final_goal(4, on((block,16)), (block,4), false).
final_goal(4, on((block,16)), (block,5), false).
final_goal(4, on((block,16)), (block,6), false).
final_goal(4, on((block,16)), (block,7), false).
final_goal(4, on((block,16)), (block,8), false).
final_goal(4, on((block,16)), (block,9), false).
final_goal(4, on((block,16)), nothing, false).
final_goal(4, on((block,16)), puzzle_room_1_table, false).
final_goal(4, on((block,16)), puzzle_room_2_table, false).
final_goal(4, on((block,17)), (block,1), false).
final_goal(4, on((block,17)), (block,10), false).
final_goal(4, on((block,17)), (block,11), false).
final_goal(4, on((block,17)), (block,12), false).
final_goal(4, on((block,17)), (block,13), false).
final_goal(4, on((block,17)), (block,14), false).
final_goal(4, on((block,17)), (block,15), false).
final_goal(4, on((block,17)), (block,16), false).
final_goal(4, on((block,17)), (block,18), true).
final_goal(4, on((block,17)), (block,2), false).
final_goal(4, on((block,17)), (block,3), false).
final_goal(4, on((block,17)), (block,4), false).
final_goal(4, on((block,17)), (block,5), false).
final_goal(4, on((block,17)), (block,6), false).
final_goal(4, on((block,17)), (block,7), false).
final_goal(4, on((block,17)), (block,8), false).
final_goal(4, on((block,17)), (block,9), false).
final_goal(4, on((block,17)), nothing, false).
final_goal(4, on((block,17)), puzzle_room_1_table, false).
final_goal(4, on((block,17)), puzzle_room_2_table, false).
final_goal(4, on((block,18)), (block,1), false).
final_goal(4, on((block,18)), (block,10), false).
final_goal(4, on((block,18)), (block,11), false).
final_goal(4, on((block,18)), (block,12), false).
final_goal(4, on((block,18)), (block,13), false).
final_goal(4, on((block,18)), (block,14), false).
final_goal(4, on((block,18)), (block,15), false).
final_goal(4, on((block,18)), (block,16), false).
final_goal(4, on((block,18)), (block,17), false).
final_goal(4, on((block,18)), (block,2), false).
final_goal(4, on((block,18)), (block,3), false).
final_goal(4, on((block,18)), (block,4), false).
final_goal(4, on((block,18)), (block,5), false).
final_goal(4, on((block,18)), (block,6), false).
final_goal(4, on((block,18)), (block,7), false).
final_goal(4, on((block,18)), (block,8), false).
final_goal(4, on((block,18)), (block,9), false).
final_goal(4, on((block,18)), nothing, false).
final_goal(4, on((block,18)), puzzle_room_1_table, false).
final_goal(4, on((block,18)), puzzle_room_2_table, true).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,10), false).
final_goal(4, on((block,2)), (block,11), false).
final_goal(4, on((block,2)), (block,12), false).
final_goal(4, on((block,2)), (block,13), false).
final_goal(4, on((block,2)), (block,14), false).
final_goal(4, on((block,2)), (block,15), false).
final_goal(4, on((block,2)), (block,16), false).
final_goal(4, on((block,2)), (block,17), false).
final_goal(4, on((block,2)), (block,18), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), (block,7), false).
final_goal(4, on((block,2)), (block,8), false).
final_goal(4, on((block,2)), (block,9), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,2)), puzzle_room_1_table, false).
final_goal(4, on((block,2)), puzzle_room_2_table, false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,10), false).
final_goal(4, on((block,3)), (block,11), false).
final_goal(4, on((block,3)), (block,12), false).
final_goal(4, on((block,3)), (block,13), false).
final_goal(4, on((block,3)), (block,14), false).
final_goal(4, on((block,3)), (block,15), false).
final_goal(4, on((block,3)), (block,16), false).
final_goal(4, on((block,3)), (block,17), false).
final_goal(4, on((block,3)), (block,18), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), (block,7), false).
final_goal(4, on((block,3)), (block,8), false).
final_goal(4, on((block,3)), (block,9), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,3)), puzzle_room_1_table, true).
final_goal(4, on((block,3)), puzzle_room_2_table, false).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,10), false).
final_goal(4, on((block,4)), (block,11), false).
final_goal(4, on((block,4)), (block,12), false).
final_goal(4, on((block,4)), (block,13), false).
final_goal(4, on((block,4)), (block,14), false).
final_goal(4, on((block,4)), (block,15), false).
final_goal(4, on((block,4)), (block,16), false).
final_goal(4, on((block,4)), (block,17), false).
final_goal(4, on((block,4)), (block,18), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), (block,7), false).
final_goal(4, on((block,4)), (block,8), false).
final_goal(4, on((block,4)), (block,9), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,4)), puzzle_room_1_table, false).
final_goal(4, on((block,4)), puzzle_room_2_table, false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,10), false).
final_goal(4, on((block,5)), (block,11), false).
final_goal(4, on((block,5)), (block,12), false).
final_goal(4, on((block,5)), (block,13), false).
final_goal(4, on((block,5)), (block,14), false).
final_goal(4, on((block,5)), (block,15), false).
final_goal(4, on((block,5)), (block,16), false).
final_goal(4, on((block,5)), (block,17), false).
final_goal(4, on((block,5)), (block,18), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), (block,7), false).
final_goal(4, on((block,5)), (block,8), false).
final_goal(4, on((block,5)), (block,9), false).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,5)), puzzle_room_1_table, false).
final_goal(4, on((block,5)), puzzle_room_2_table, false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,10), false).
final_goal(4, on((block,6)), (block,11), false).
final_goal(4, on((block,6)), (block,12), false).
final_goal(4, on((block,6)), (block,13), false).
final_goal(4, on((block,6)), (block,14), false).
final_goal(4, on((block,6)), (block,15), false).
final_goal(4, on((block,6)), (block,16), false).
final_goal(4, on((block,6)), (block,17), false).
final_goal(4, on((block,6)), (block,18), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), (block,7), false).
final_goal(4, on((block,6)), (block,8), false).
final_goal(4, on((block,6)), (block,9), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,6)), puzzle_room_1_table, true).
final_goal(4, on((block,6)), puzzle_room_2_table, false).
final_goal(4, on((block,7)), (block,1), false).
final_goal(4, on((block,7)), (block,10), false).
final_goal(4, on((block,7)), (block,11), false).
final_goal(4, on((block,7)), (block,12), false).
final_goal(4, on((block,7)), (block,13), false).
final_goal(4, on((block,7)), (block,14), false).
final_goal(4, on((block,7)), (block,15), false).
final_goal(4, on((block,7)), (block,16), false).
final_goal(4, on((block,7)), (block,17), false).
final_goal(4, on((block,7)), (block,18), false).
final_goal(4, on((block,7)), (block,2), false).
final_goal(4, on((block,7)), (block,3), false).
final_goal(4, on((block,7)), (block,4), false).
final_goal(4, on((block,7)), (block,5), false).
final_goal(4, on((block,7)), (block,6), false).
final_goal(4, on((block,7)), (block,8), true).
final_goal(4, on((block,7)), (block,9), false).
final_goal(4, on((block,7)), nothing, false).
final_goal(4, on((block,7)), puzzle_room_1_table, false).
final_goal(4, on((block,7)), puzzle_room_2_table, false).
final_goal(4, on((block,8)), (block,1), false).
final_goal(4, on((block,8)), (block,10), false).
final_goal(4, on((block,8)), (block,11), false).
final_goal(4, on((block,8)), (block,12), false).
final_goal(4, on((block,8)), (block,13), false).
final_goal(4, on((block,8)), (block,14), false).
final_goal(4, on((block,8)), (block,15), false).
final_goal(4, on((block,8)), (block,16), false).
final_goal(4, on((block,8)), (block,17), false).
final_goal(4, on((block,8)), (block,18), false).
final_goal(4, on((block,8)), (block,2), false).
final_goal(4, on((block,8)), (block,3), false).
final_goal(4, on((block,8)), (block,4), false).
final_goal(4, on((block,8)), (block,5), false).
final_goal(4, on((block,8)), (block,6), false).
final_goal(4, on((block,8)), (block,7), false).
final_goal(4, on((block,8)), (block,9), true).
final_goal(4, on((block,8)), nothing, false).
final_goal(4, on((block,8)), puzzle_room_1_table, false).
final_goal(4, on((block,8)), puzzle_room_2_table, false).
final_goal(4, on((block,9)), (block,1), false).
final_goal(4, on((block,9)), (block,10), false).
final_goal(4, on((block,9)), (block,11), false).
final_goal(4, on((block,9)), (block,12), false).
final_goal(4, on((block,9)), (block,13), false).
final_goal(4, on((block,9)), (block,14), false).
final_goal(4, on((block,9)), (block,15), false).
final_goal(4, on((block,9)), (block,16), false).
final_goal(4, on((block,9)), (block,17), false).
final_goal(4, on((block,9)), (block,18), false).
final_goal(4, on((block,9)), (block,2), false).
final_goal(4, on((block,9)), (block,3), false).
final_goal(4, on((block,9)), (block,4), false).
final_goal(4, on((block,9)), (block,5), false).
final_goal(4, on((block,9)), (block,6), false).
final_goal(4, on((block,9)), (block,7), false).
final_goal(4, on((block,9)), (block,8), false).
final_goal(4, on((block,9)), nothing, false).
final_goal(4, on((block,9)), puzzle_room_1_table, true).
final_goal(4, on((block,9)), puzzle_room_2_table, false).
final_goal(4, tower_base((block,1),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,1),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,1),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,10),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,10),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,10),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,10),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,11),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,11),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,11),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,11),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,12),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,12),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,12),puzzle_room_2_table), false, false).
final_goal(4, tower_base((block,12),puzzle_room_2_table), true, true).
final_goal(4, tower_base((block,13),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,13),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,13),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,13),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,14),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,14),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,14),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,14),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,15),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,15),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,15),puzzle_room_2_table), false, false).
final_goal(4, tower_base((block,15),puzzle_room_2_table), true, true).
final_goal(4, tower_base((block,16),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,16),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,16),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,16),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,17),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,17),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,17),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,17),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,18),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,18),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,18),puzzle_room_2_table), false, false).
final_goal(4, tower_base((block,18),puzzle_room_2_table), true, true).
final_goal(4, tower_base((block,2),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,2),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,2),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,3),puzzle_room_1_table), false, false).
final_goal(4, tower_base((block,3),puzzle_room_1_table), true, true).
final_goal(4, tower_base((block,3),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,3),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,4),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,4),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,4),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,5),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,5),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,6),puzzle_room_1_table), false, false).
final_goal(4, tower_base((block,6),puzzle_room_1_table), true, true).
final_goal(4, tower_base((block,6),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,6),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,7),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,7),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,7),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_1_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_1_table), true, false).
final_goal(4, tower_base((block,8),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,8),puzzle_room_2_table), true, false).
final_goal(4, tower_base((block,9),puzzle_room_1_table), false, false).
final_goal(4, tower_base((block,9),puzzle_room_1_table), true, true).
final_goal(4, tower_base((block,9),puzzle_room_2_table), false, true).
final_goal(4, tower_base((block,9),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,1),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,1),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,1),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,10),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,10),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,10),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,10),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,11),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,11),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,11),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,11),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,12),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,12),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,12),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,12),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,13),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,13),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,13),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,13),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,14),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,14),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,14),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,14),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,15),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,15),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,15),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,15),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,16),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,16),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,16),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,16),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,17),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,17),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,17),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,17),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,18),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,18),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,18),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,18),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,2),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,2),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,3),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,3),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,4),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,4),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,5),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,5),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,6),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,6),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,7),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,7),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,8),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,8),puzzle_room_2_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_1_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_1_table), true, false).
final_goal(4, unordered_tower((block,9),puzzle_room_2_table), false, true).
final_goal(4, unordered_tower((block,9),puzzle_room_2_table), true, false).
final_goal(5, complete_tower(blue,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(blue,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(blue,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(blue,puzzle_room_2_table), true, true).
final_goal(5, complete_tower(red,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(red,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(red,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(red,puzzle_room_2_table), true, true).
final_goal(5, complete_tower(yellow,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(yellow,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(yellow,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(yellow,puzzle_room_2_table), true, true).
final_goal(5, in_tower((block,1),(block,1)), false, true).
final_goal(5, in_tower((block,1),(block,1)), true, false).
final_goal(5, in_tower((block,1),(block,10)), false, true).
final_goal(5, in_tower((block,1),(block,10)), true, false).
final_goal(5, in_tower((block,1),(block,11)), false, true).
final_goal(5, in_tower((block,1),(block,11)), true, false).
final_goal(5, in_tower((block,1),(block,12)), false, true).
final_goal(5, in_tower((block,1),(block,12)), true, false).
final_goal(5, in_tower((block,1),(block,13)), false, true).
final_goal(5, in_tower((block,1),(block,13)), true, false).
final_goal(5, in_tower((block,1),(block,14)), false, true).
final_goal(5, in_tower((block,1),(block,14)), true, false).
final_goal(5, in_tower((block,1),(block,15)), false, true).
final_goal(5, in_tower((block,1),(block,15)), true, false).
final_goal(5, in_tower((block,1),(block,16)), false, true).
final_goal(5, in_tower((block,1),(block,16)), true, false).
final_goal(5, in_tower((block,1),(block,17)), false, true).
final_goal(5, in_tower((block,1),(block,17)), true, false).
final_goal(5, in_tower((block,1),(block,18)), false, true).
final_goal(5, in_tower((block,1),(block,18)), true, false).
final_goal(5, in_tower((block,1),(block,2)), false, true).
final_goal(5, in_tower((block,1),(block,2)), true, false).
final_goal(5, in_tower((block,1),(block,3)), false, true).
final_goal(5, in_tower((block,1),(block,3)), true, false).
final_goal(5, in_tower((block,1),(block,4)), false, true).
final_goal(5, in_tower((block,1),(block,4)), true, false).
final_goal(5, in_tower((block,1),(block,5)), false, true).
final_goal(5, in_tower((block,1),(block,5)), true, false).
final_goal(5, in_tower((block,1),(block,6)), false, true).
final_goal(5, in_tower((block,1),(block,6)), true, false).
final_goal(5, in_tower((block,1),(block,7)), false, true).
final_goal(5, in_tower((block,1),(block,7)), true, false).
final_goal(5, in_tower((block,1),(block,8)), false, true).
final_goal(5, in_tower((block,1),(block,8)), true, false).
final_goal(5, in_tower((block,1),(block,9)), false, true).
final_goal(5, in_tower((block,1),(block,9)), true, false).
final_goal(5, in_tower((block,10),(block,1)), false, true).
final_goal(5, in_tower((block,10),(block,1)), true, false).
final_goal(5, in_tower((block,10),(block,10)), false, true).
final_goal(5, in_tower((block,10),(block,10)), true, false).
final_goal(5, in_tower((block,10),(block,11)), false, true).
final_goal(5, in_tower((block,10),(block,11)), true, false).
final_goal(5, in_tower((block,10),(block,12)), false, true).
final_goal(5, in_tower((block,10),(block,12)), true, false).
final_goal(5, in_tower((block,10),(block,13)), false, true).
final_goal(5, in_tower((block,10),(block,13)), true, false).
final_goal(5, in_tower((block,10),(block,14)), false, true).
final_goal(5, in_tower((block,10),(block,14)), true, false).
final_goal(5, in_tower((block,10),(block,15)), false, true).
final_goal(5, in_tower((block,10),(block,15)), true, false).
final_goal(5, in_tower((block,10),(block,16)), false, true).
final_goal(5, in_tower((block,10),(block,16)), true, false).
final_goal(5, in_tower((block,10),(block,17)), false, true).
final_goal(5, in_tower((block,10),(block,17)), true, false).
final_goal(5, in_tower((block,10),(block,18)), false, true).
final_goal(5, in_tower((block,10),(block,18)), true, false).
final_goal(5, in_tower((block,10),(block,2)), false, true).
final_goal(5, in_tower((block,10),(block,2)), true, false).
final_goal(5, in_tower((block,10),(block,3)), false, true).
final_goal(5, in_tower((block,10),(block,3)), true, false).
final_goal(5, in_tower((block,10),(block,4)), false, true).
final_goal(5, in_tower((block,10),(block,4)), true, false).
final_goal(5, in_tower((block,10),(block,5)), false, true).
final_goal(5, in_tower((block,10),(block,5)), true, false).
final_goal(5, in_tower((block,10),(block,6)), false, true).
final_goal(5, in_tower((block,10),(block,6)), true, false).
final_goal(5, in_tower((block,10),(block,7)), false, true).
final_goal(5, in_tower((block,10),(block,7)), true, false).
final_goal(5, in_tower((block,10),(block,8)), false, true).
final_goal(5, in_tower((block,10),(block,8)), true, false).
final_goal(5, in_tower((block,10),(block,9)), false, true).
final_goal(5, in_tower((block,10),(block,9)), true, false).
final_goal(5, in_tower((block,11),(block,1)), false, true).
final_goal(5, in_tower((block,11),(block,1)), true, false).
final_goal(5, in_tower((block,11),(block,10)), false, true).
final_goal(5, in_tower((block,11),(block,10)), true, false).
final_goal(5, in_tower((block,11),(block,11)), false, true).
final_goal(5, in_tower((block,11),(block,11)), true, false).
final_goal(5, in_tower((block,11),(block,12)), false, true).
final_goal(5, in_tower((block,11),(block,12)), true, false).
final_goal(5, in_tower((block,11),(block,13)), false, true).
final_goal(5, in_tower((block,11),(block,13)), true, false).
final_goal(5, in_tower((block,11),(block,14)), false, true).
final_goal(5, in_tower((block,11),(block,14)), true, false).
final_goal(5, in_tower((block,11),(block,15)), false, true).
final_goal(5, in_tower((block,11),(block,15)), true, false).
final_goal(5, in_tower((block,11),(block,16)), false, true).
final_goal(5, in_tower((block,11),(block,16)), true, false).
final_goal(5, in_tower((block,11),(block,17)), false, true).
final_goal(5, in_tower((block,11),(block,17)), true, false).
final_goal(5, in_tower((block,11),(block,18)), false, true).
final_goal(5, in_tower((block,11),(block,18)), true, false).
final_goal(5, in_tower((block,11),(block,2)), false, true).
final_goal(5, in_tower((block,11),(block,2)), true, false).
final_goal(5, in_tower((block,11),(block,3)), false, true).
final_goal(5, in_tower((block,11),(block,3)), true, false).
final_goal(5, in_tower((block,11),(block,4)), false, true).
final_goal(5, in_tower((block,11),(block,4)), true, false).
final_goal(5, in_tower((block,11),(block,5)), false, true).
final_goal(5, in_tower((block,11),(block,5)), true, false).
final_goal(5, in_tower((block,11),(block,6)), false, true).
final_goal(5, in_tower((block,11),(block,6)), true, false).
final_goal(5, in_tower((block,11),(block,7)), false, true).
final_goal(5, in_tower((block,11),(block,7)), true, false).
final_goal(5, in_tower((block,11),(block,8)), false, true).
final_goal(5, in_tower((block,11),(block,8)), true, false).
final_goal(5, in_tower((block,11),(block,9)), false, true).
final_goal(5, in_tower((block,11),(block,9)), true, false).
final_goal(5, in_tower((block,12),(block,1)), false, true).
final_goal(5, in_tower((block,12),(block,1)), true, false).
final_goal(5, in_tower((block,12),(block,10)), false, false).
final_goal(5, in_tower((block,12),(block,10)), true, true).
final_goal(5, in_tower((block,12),(block,11)), false, false).
final_goal(5, in_tower((block,12),(block,11)), true, true).
final_goal(5, in_tower((block,12),(block,12)), false, false).
final_goal(5, in_tower((block,12),(block,12)), true, true).
final_goal(5, in_tower((block,12),(block,13)), false, true).
final_goal(5, in_tower((block,12),(block,13)), true, false).
final_goal(5, in_tower((block,12),(block,14)), false, true).
final_goal(5, in_tower((block,12),(block,14)), true, false).
final_goal(5, in_tower((block,12),(block,15)), false, true).
final_goal(5, in_tower((block,12),(block,15)), true, false).
final_goal(5, in_tower((block,12),(block,16)), false, true).
final_goal(5, in_tower((block,12),(block,16)), true, false).
final_goal(5, in_tower((block,12),(block,17)), false, true).
final_goal(5, in_tower((block,12),(block,17)), true, false).
final_goal(5, in_tower((block,12),(block,18)), false, true).
final_goal(5, in_tower((block,12),(block,18)), true, false).
final_goal(5, in_tower((block,12),(block,2)), false, true).
final_goal(5, in_tower((block,12),(block,2)), true, false).
final_goal(5, in_tower((block,12),(block,3)), false, true).
final_goal(5, in_tower((block,12),(block,3)), true, false).
final_goal(5, in_tower((block,12),(block,4)), false, true).
final_goal(5, in_tower((block,12),(block,4)), true, false).
final_goal(5, in_tower((block,12),(block,5)), false, true).
final_goal(5, in_tower((block,12),(block,5)), true, false).
final_goal(5, in_tower((block,12),(block,6)), false, true).
final_goal(5, in_tower((block,12),(block,6)), true, false).
final_goal(5, in_tower((block,12),(block,7)), false, true).
final_goal(5, in_tower((block,12),(block,7)), true, false).
final_goal(5, in_tower((block,12),(block,8)), false, true).
final_goal(5, in_tower((block,12),(block,8)), true, false).
final_goal(5, in_tower((block,12),(block,9)), false, true).
final_goal(5, in_tower((block,12),(block,9)), true, false).
final_goal(5, in_tower((block,13),(block,1)), false, true).
final_goal(5, in_tower((block,13),(block,1)), true, false).
final_goal(5, in_tower((block,13),(block,10)), false, true).
final_goal(5, in_tower((block,13),(block,10)), true, false).
final_goal(5, in_tower((block,13),(block,11)), false, true).
final_goal(5, in_tower((block,13),(block,11)), true, false).
final_goal(5, in_tower((block,13),(block,12)), false, true).
final_goal(5, in_tower((block,13),(block,12)), true, false).
final_goal(5, in_tower((block,13),(block,13)), false, true).
final_goal(5, in_tower((block,13),(block,13)), true, false).
final_goal(5, in_tower((block,13),(block,14)), false, true).
final_goal(5, in_tower((block,13),(block,14)), true, false).
final_goal(5, in_tower((block,13),(block,15)), false, true).
final_goal(5, in_tower((block,13),(block,15)), true, false).
final_goal(5, in_tower((block,13),(block,16)), false, true).
final_goal(5, in_tower((block,13),(block,16)), true, false).
final_goal(5, in_tower((block,13),(block,17)), false, true).
final_goal(5, in_tower((block,13),(block,17)), true, false).
final_goal(5, in_tower((block,13),(block,18)), false, true).
final_goal(5, in_tower((block,13),(block,18)), true, false).
final_goal(5, in_tower((block,13),(block,2)), false, true).
final_goal(5, in_tower((block,13),(block,2)), true, false).
final_goal(5, in_tower((block,13),(block,3)), false, true).
final_goal(5, in_tower((block,13),(block,3)), true, false).
final_goal(5, in_tower((block,13),(block,4)), false, true).
final_goal(5, in_tower((block,13),(block,4)), true, false).
final_goal(5, in_tower((block,13),(block,5)), false, true).
final_goal(5, in_tower((block,13),(block,5)), true, false).
final_goal(5, in_tower((block,13),(block,6)), false, true).
final_goal(5, in_tower((block,13),(block,6)), true, false).
final_goal(5, in_tower((block,13),(block,7)), false, true).
final_goal(5, in_tower((block,13),(block,7)), true, false).
final_goal(5, in_tower((block,13),(block,8)), false, true).
final_goal(5, in_tower((block,13),(block,8)), true, false).
final_goal(5, in_tower((block,13),(block,9)), false, true).
final_goal(5, in_tower((block,13),(block,9)), true, false).
final_goal(5, in_tower((block,14),(block,1)), false, true).
final_goal(5, in_tower((block,14),(block,1)), true, false).
final_goal(5, in_tower((block,14),(block,10)), false, true).
final_goal(5, in_tower((block,14),(block,10)), true, false).
final_goal(5, in_tower((block,14),(block,11)), false, true).
final_goal(5, in_tower((block,14),(block,11)), true, false).
final_goal(5, in_tower((block,14),(block,12)), false, true).
final_goal(5, in_tower((block,14),(block,12)), true, false).
final_goal(5, in_tower((block,14),(block,13)), false, true).
final_goal(5, in_tower((block,14),(block,13)), true, false).
final_goal(5, in_tower((block,14),(block,14)), false, true).
final_goal(5, in_tower((block,14),(block,14)), true, false).
final_goal(5, in_tower((block,14),(block,15)), false, true).
final_goal(5, in_tower((block,14),(block,15)), true, false).
final_goal(5, in_tower((block,14),(block,16)), false, true).
final_goal(5, in_tower((block,14),(block,16)), true, false).
final_goal(5, in_tower((block,14),(block,17)), false, true).
final_goal(5, in_tower((block,14),(block,17)), true, false).
final_goal(5, in_tower((block,14),(block,18)), false, true).
final_goal(5, in_tower((block,14),(block,18)), true, false).
final_goal(5, in_tower((block,14),(block,2)), false, true).
final_goal(5, in_tower((block,14),(block,2)), true, false).
final_goal(5, in_tower((block,14),(block,3)), false, true).
final_goal(5, in_tower((block,14),(block,3)), true, false).
final_goal(5, in_tower((block,14),(block,4)), false, true).
final_goal(5, in_tower((block,14),(block,4)), true, false).
final_goal(5, in_tower((block,14),(block,5)), false, true).
final_goal(5, in_tower((block,14),(block,5)), true, false).
final_goal(5, in_tower((block,14),(block,6)), false, true).
final_goal(5, in_tower((block,14),(block,6)), true, false).
final_goal(5, in_tower((block,14),(block,7)), false, true).
final_goal(5, in_tower((block,14),(block,7)), true, false).
final_goal(5, in_tower((block,14),(block,8)), false, true).
final_goal(5, in_tower((block,14),(block,8)), true, false).
final_goal(5, in_tower((block,14),(block,9)), false, true).
final_goal(5, in_tower((block,14),(block,9)), true, false).
final_goal(5, in_tower((block,15),(block,1)), false, true).
final_goal(5, in_tower((block,15),(block,1)), true, false).
final_goal(5, in_tower((block,15),(block,10)), false, true).
final_goal(5, in_tower((block,15),(block,10)), true, false).
final_goal(5, in_tower((block,15),(block,11)), false, true).
final_goal(5, in_tower((block,15),(block,11)), true, false).
final_goal(5, in_tower((block,15),(block,12)), false, true).
final_goal(5, in_tower((block,15),(block,12)), true, false).
final_goal(5, in_tower((block,15),(block,13)), false, false).
final_goal(5, in_tower((block,15),(block,13)), true, true).
final_goal(5, in_tower((block,15),(block,14)), false, false).
final_goal(5, in_tower((block,15),(block,14)), true, true).
final_goal(5, in_tower((block,15),(block,15)), false, false).
final_goal(5, in_tower((block,15),(block,15)), true, true).
final_goal(5, in_tower((block,15),(block,16)), false, true).
final_goal(5, in_tower((block,15),(block,16)), true, false).
final_goal(5, in_tower((block,15),(block,17)), false, true).
final_goal(5, in_tower((block,15),(block,17)), true, false).
final_goal(5, in_tower((block,15),(block,18)), false, true).
final_goal(5, in_tower((block,15),(block,18)), true, false).
final_goal(5, in_tower((block,15),(block,2)), false, true).
final_goal(5, in_tower((block,15),(block,2)), true, false).
final_goal(5, in_tower((block,15),(block,3)), false, true).
final_goal(5, in_tower((block,15),(block,3)), true, false).
final_goal(5, in_tower((block,15),(block,4)), false, true).
final_goal(5, in_tower((block,15),(block,4)), true, false).
final_goal(5, in_tower((block,15),(block,5)), false, true).
final_goal(5, in_tower((block,15),(block,5)), true, false).
final_goal(5, in_tower((block,15),(block,6)), false, true).
final_goal(5, in_tower((block,15),(block,6)), true, false).
final_goal(5, in_tower((block,15),(block,7)), false, true).
final_goal(5, in_tower((block,15),(block,7)), true, false).
final_goal(5, in_tower((block,15),(block,8)), false, true).
final_goal(5, in_tower((block,15),(block,8)), true, false).
final_goal(5, in_tower((block,15),(block,9)), false, true).
final_goal(5, in_tower((block,15),(block,9)), true, false).
final_goal(5, in_tower((block,16),(block,1)), false, true).
final_goal(5, in_tower((block,16),(block,1)), true, false).
final_goal(5, in_tower((block,16),(block,10)), false, true).
final_goal(5, in_tower((block,16),(block,10)), true, false).
final_goal(5, in_tower((block,16),(block,11)), false, true).
final_goal(5, in_tower((block,16),(block,11)), true, false).
final_goal(5, in_tower((block,16),(block,12)), false, true).
final_goal(5, in_tower((block,16),(block,12)), true, false).
final_goal(5, in_tower((block,16),(block,13)), false, true).
final_goal(5, in_tower((block,16),(block,13)), true, false).
final_goal(5, in_tower((block,16),(block,14)), false, true).
final_goal(5, in_tower((block,16),(block,14)), true, false).
final_goal(5, in_tower((block,16),(block,15)), false, true).
final_goal(5, in_tower((block,16),(block,15)), true, false).
final_goal(5, in_tower((block,16),(block,16)), false, true).
final_goal(5, in_tower((block,16),(block,16)), true, false).
final_goal(5, in_tower((block,16),(block,17)), false, true).
final_goal(5, in_tower((block,16),(block,17)), true, false).
final_goal(5, in_tower((block,16),(block,18)), false, true).
final_goal(5, in_tower((block,16),(block,18)), true, false).
final_goal(5, in_tower((block,16),(block,2)), false, true).
final_goal(5, in_tower((block,16),(block,2)), true, false).
final_goal(5, in_tower((block,16),(block,3)), false, true).
final_goal(5, in_tower((block,16),(block,3)), true, false).
final_goal(5, in_tower((block,16),(block,4)), false, true).
final_goal(5, in_tower((block,16),(block,4)), true, false).
final_goal(5, in_tower((block,16),(block,5)), false, true).
final_goal(5, in_tower((block,16),(block,5)), true, false).
final_goal(5, in_tower((block,16),(block,6)), false, true).
final_goal(5, in_tower((block,16),(block,6)), true, false).
final_goal(5, in_tower((block,16),(block,7)), false, true).
final_goal(5, in_tower((block,16),(block,7)), true, false).
final_goal(5, in_tower((block,16),(block,8)), false, true).
final_goal(5, in_tower((block,16),(block,8)), true, false).
final_goal(5, in_tower((block,16),(block,9)), false, true).
final_goal(5, in_tower((block,16),(block,9)), true, false).
final_goal(5, in_tower((block,17),(block,1)), false, true).
final_goal(5, in_tower((block,17),(block,1)), true, false).
final_goal(5, in_tower((block,17),(block,10)), false, true).
final_goal(5, in_tower((block,17),(block,10)), true, false).
final_goal(5, in_tower((block,17),(block,11)), false, true).
final_goal(5, in_tower((block,17),(block,11)), true, false).
final_goal(5, in_tower((block,17),(block,12)), false, true).
final_goal(5, in_tower((block,17),(block,12)), true, false).
final_goal(5, in_tower((block,17),(block,13)), false, true).
final_goal(5, in_tower((block,17),(block,13)), true, false).
final_goal(5, in_tower((block,17),(block,14)), false, true).
final_goal(5, in_tower((block,17),(block,14)), true, false).
final_goal(5, in_tower((block,17),(block,15)), false, true).
final_goal(5, in_tower((block,17),(block,15)), true, false).
final_goal(5, in_tower((block,17),(block,16)), false, true).
final_goal(5, in_tower((block,17),(block,16)), true, false).
final_goal(5, in_tower((block,17),(block,17)), false, true).
final_goal(5, in_tower((block,17),(block,17)), true, false).
final_goal(5, in_tower((block,17),(block,18)), false, true).
final_goal(5, in_tower((block,17),(block,18)), true, false).
final_goal(5, in_tower((block,17),(block,2)), false, true).
final_goal(5, in_tower((block,17),(block,2)), true, false).
final_goal(5, in_tower((block,17),(block,3)), false, true).
final_goal(5, in_tower((block,17),(block,3)), true, false).
final_goal(5, in_tower((block,17),(block,4)), false, true).
final_goal(5, in_tower((block,17),(block,4)), true, false).
final_goal(5, in_tower((block,17),(block,5)), false, true).
final_goal(5, in_tower((block,17),(block,5)), true, false).
final_goal(5, in_tower((block,17),(block,6)), false, true).
final_goal(5, in_tower((block,17),(block,6)), true, false).
final_goal(5, in_tower((block,17),(block,7)), false, true).
final_goal(5, in_tower((block,17),(block,7)), true, false).
final_goal(5, in_tower((block,17),(block,8)), false, true).
final_goal(5, in_tower((block,17),(block,8)), true, false).
final_goal(5, in_tower((block,17),(block,9)), false, true).
final_goal(5, in_tower((block,17),(block,9)), true, false).
final_goal(5, in_tower((block,18),(block,1)), false, true).
final_goal(5, in_tower((block,18),(block,1)), true, false).
final_goal(5, in_tower((block,18),(block,10)), false, true).
final_goal(5, in_tower((block,18),(block,10)), true, false).
final_goal(5, in_tower((block,18),(block,11)), false, true).
final_goal(5, in_tower((block,18),(block,11)), true, false).
final_goal(5, in_tower((block,18),(block,12)), false, true).
final_goal(5, in_tower((block,18),(block,12)), true, false).
final_goal(5, in_tower((block,18),(block,13)), false, true).
final_goal(5, in_tower((block,18),(block,13)), true, false).
final_goal(5, in_tower((block,18),(block,14)), false, true).
final_goal(5, in_tower((block,18),(block,14)), true, false).
final_goal(5, in_tower((block,18),(block,15)), false, true).
final_goal(5, in_tower((block,18),(block,15)), true, false).
final_goal(5, in_tower((block,18),(block,16)), false, false).
final_goal(5, in_tower((block,18),(block,16)), true, true).
final_goal(5, in_tower((block,18),(block,17)), false, false).
final_goal(5, in_tower((block,18),(block,17)), true, true).
final_goal(5, in_tower((block,18),(block,18)), false, false).
final_goal(5, in_tower((block,18),(block,18)), true, true).
final_goal(5, in_tower((block,18),(block,2)), false, true).
final_goal(5, in_tower((block,18),(block,2)), true, false).
final_goal(5, in_tower((block,18),(block,3)), false, true).
final_goal(5, in_tower((block,18),(block,3)), true, false).
final_goal(5, in_tower((block,18),(block,4)), false, true).
final_goal(5, in_tower((block,18),(block,4)), true, false).
final_goal(5, in_tower((block,18),(block,5)), false, true).
final_goal(5, in_tower((block,18),(block,5)), true, false).
final_goal(5, in_tower((block,18),(block,6)), false, true).
final_goal(5, in_tower((block,18),(block,6)), true, false).
final_goal(5, in_tower((block,18),(block,7)), false, true).
final_goal(5, in_tower((block,18),(block,7)), true, false).
final_goal(5, in_tower((block,18),(block,8)), false, true).
final_goal(5, in_tower((block,18),(block,8)), true, false).
final_goal(5, in_tower((block,18),(block,9)), false, true).
final_goal(5, in_tower((block,18),(block,9)), true, false).
final_goal(5, in_tower((block,2),(block,1)), false, true).
final_goal(5, in_tower((block,2),(block,1)), true, false).
final_goal(5, in_tower((block,2),(block,10)), false, true).
final_goal(5, in_tower((block,2),(block,10)), true, false).
final_goal(5, in_tower((block,2),(block,11)), false, true).
final_goal(5, in_tower((block,2),(block,11)), true, false).
final_goal(5, in_tower((block,2),(block,12)), false, true).
final_goal(5, in_tower((block,2),(block,12)), true, false).
final_goal(5, in_tower((block,2),(block,13)), false, true).
final_goal(5, in_tower((block,2),(block,13)), true, false).
final_goal(5, in_tower((block,2),(block,14)), false, true).
final_goal(5, in_tower((block,2),(block,14)), true, false).
final_goal(5, in_tower((block,2),(block,15)), false, true).
final_goal(5, in_tower((block,2),(block,15)), true, false).
final_goal(5, in_tower((block,2),(block,16)), false, true).
final_goal(5, in_tower((block,2),(block,16)), true, false).
final_goal(5, in_tower((block,2),(block,17)), false, true).
final_goal(5, in_tower((block,2),(block,17)), true, false).
final_goal(5, in_tower((block,2),(block,18)), false, true).
final_goal(5, in_tower((block,2),(block,18)), true, false).
final_goal(5, in_tower((block,2),(block,2)), false, true).
final_goal(5, in_tower((block,2),(block,2)), true, false).
final_goal(5, in_tower((block,2),(block,3)), false, true).
final_goal(5, in_tower((block,2),(block,3)), true, false).
final_goal(5, in_tower((block,2),(block,4)), false, true).
final_goal(5, in_tower((block,2),(block,4)), true, false).
final_goal(5, in_tower((block,2),(block,5)), false, true).
final_goal(5, in_tower((block,2),(block,5)), true, false).
final_goal(5, in_tower((block,2),(block,6)), false, true).
final_goal(5, in_tower((block,2),(block,6)), true, false).
final_goal(5, in_tower((block,2),(block,7)), false, true).
final_goal(5, in_tower((block,2),(block,7)), true, false).
final_goal(5, in_tower((block,2),(block,8)), false, true).
final_goal(5, in_tower((block,2),(block,8)), true, false).
final_goal(5, in_tower((block,2),(block,9)), false, true).
final_goal(5, in_tower((block,2),(block,9)), true, false).
final_goal(5, in_tower((block,3),(block,1)), false, false).
final_goal(5, in_tower((block,3),(block,1)), true, true).
final_goal(5, in_tower((block,3),(block,10)), false, true).
final_goal(5, in_tower((block,3),(block,10)), true, false).
final_goal(5, in_tower((block,3),(block,11)), false, true).
final_goal(5, in_tower((block,3),(block,11)), true, false).
final_goal(5, in_tower((block,3),(block,12)), false, true).
final_goal(5, in_tower((block,3),(block,12)), true, false).
final_goal(5, in_tower((block,3),(block,13)), false, true).
final_goal(5, in_tower((block,3),(block,13)), true, false).
final_goal(5, in_tower((block,3),(block,14)), false, true).
final_goal(5, in_tower((block,3),(block,14)), true, false).
final_goal(5, in_tower((block,3),(block,15)), false, true).
final_goal(5, in_tower((block,3),(block,15)), true, false).
final_goal(5, in_tower((block,3),(block,16)), false, true).
final_goal(5, in_tower((block,3),(block,16)), true, false).
final_goal(5, in_tower((block,3),(block,17)), false, true).
final_goal(5, in_tower((block,3),(block,17)), true, false).
final_goal(5, in_tower((block,3),(block,18)), false, true).
final_goal(5, in_tower((block,3),(block,18)), true, false).
final_goal(5, in_tower((block,3),(block,2)), false, false).
final_goal(5, in_tower((block,3),(block,2)), true, true).
final_goal(5, in_tower((block,3),(block,3)), false, false).
final_goal(5, in_tower((block,3),(block,3)), true, true).
final_goal(5, in_tower((block,3),(block,4)), false, true).
final_goal(5, in_tower((block,3),(block,4)), true, false).
final_goal(5, in_tower((block,3),(block,5)), false, true).
final_goal(5, in_tower((block,3),(block,5)), true, false).
final_goal(5, in_tower((block,3),(block,6)), false, true).
final_goal(5, in_tower((block,3),(block,6)), true, false).
final_goal(5, in_tower((block,3),(block,7)), false, true).
final_goal(5, in_tower((block,3),(block,7)), true, false).
final_goal(5, in_tower((block,3),(block,8)), false, true).
final_goal(5, in_tower((block,3),(block,8)), true, false).
final_goal(5, in_tower((block,3),(block,9)), false, true).
final_goal(5, in_tower((block,3),(block,9)), true, false).
final_goal(5, in_tower((block,4),(block,1)), false, true).
final_goal(5, in_tower((block,4),(block,1)), true, false).
final_goal(5, in_tower((block,4),(block,10)), false, true).
final_goal(5, in_tower((block,4),(block,10)), true, false).
final_goal(5, in_tower((block,4),(block,11)), false, true).
final_goal(5, in_tower((block,4),(block,11)), true, false).
final_goal(5, in_tower((block,4),(block,12)), false, true).
final_goal(5, in_tower((block,4),(block,12)), true, false).
final_goal(5, in_tower((block,4),(block,13)), false, true).
final_goal(5, in_tower((block,4),(block,13)), true, false).
final_goal(5, in_tower((block,4),(block,14)), false, true).
final_goal(5, in_tower((block,4),(block,14)), true, false).
final_goal(5, in_tower((block,4),(block,15)), false, true).
final_goal(5, in_tower((block,4),(block,15)), true, false).
final_goal(5, in_tower((block,4),(block,16)), false, true).
final_goal(5, in_tower((block,4),(block,16)), true, false).
final_goal(5, in_tower((block,4),(block,17)), false, true).
final_goal(5, in_tower((block,4),(block,17)), true, false).
final_goal(5, in_tower((block,4),(block,18)), false, true).
final_goal(5, in_tower((block,4),(block,18)), true, false).
final_goal(5, in_tower((block,4),(block,2)), false, true).
final_goal(5, in_tower((block,4),(block,2)), true, false).
final_goal(5, in_tower((block,4),(block,3)), false, true).
final_goal(5, in_tower((block,4),(block,3)), true, false).
final_goal(5, in_tower((block,4),(block,4)), false, true).
final_goal(5, in_tower((block,4),(block,4)), true, false).
final_goal(5, in_tower((block,4),(block,5)), false, true).
final_goal(5, in_tower((block,4),(block,5)), true, false).
final_goal(5, in_tower((block,4),(block,6)), false, true).
final_goal(5, in_tower((block,4),(block,6)), true, false).
final_goal(5, in_tower((block,4),(block,7)), false, true).
final_goal(5, in_tower((block,4),(block,7)), true, false).
final_goal(5, in_tower((block,4),(block,8)), false, true).
final_goal(5, in_tower((block,4),(block,8)), true, false).
final_goal(5, in_tower((block,4),(block,9)), false, true).
final_goal(5, in_tower((block,4),(block,9)), true, false).
final_goal(5, in_tower((block,5),(block,1)), false, true).
final_goal(5, in_tower((block,5),(block,1)), true, false).
final_goal(5, in_tower((block,5),(block,10)), false, true).
final_goal(5, in_tower((block,5),(block,10)), true, false).
final_goal(5, in_tower((block,5),(block,11)), false, true).
final_goal(5, in_tower((block,5),(block,11)), true, false).
final_goal(5, in_tower((block,5),(block,12)), false, true).
final_goal(5, in_tower((block,5),(block,12)), true, false).
final_goal(5, in_tower((block,5),(block,13)), false, true).
final_goal(5, in_tower((block,5),(block,13)), true, false).
final_goal(5, in_tower((block,5),(block,14)), false, true).
final_goal(5, in_tower((block,5),(block,14)), true, false).
final_goal(5, in_tower((block,5),(block,15)), false, true).
final_goal(5, in_tower((block,5),(block,15)), true, false).
final_goal(5, in_tower((block,5),(block,16)), false, true).
final_goal(5, in_tower((block,5),(block,16)), true, false).
final_goal(5, in_tower((block,5),(block,17)), false, true).
final_goal(5, in_tower((block,5),(block,17)), true, false).
final_goal(5, in_tower((block,5),(block,18)), false, true).
final_goal(5, in_tower((block,5),(block,18)), true, false).
final_goal(5, in_tower((block,5),(block,2)), false, true).
final_goal(5, in_tower((block,5),(block,2)), true, false).
final_goal(5, in_tower((block,5),(block,3)), false, true).
final_goal(5, in_tower((block,5),(block,3)), true, false).
final_goal(5, in_tower((block,5),(block,4)), false, true).
final_goal(5, in_tower((block,5),(block,4)), true, false).
final_goal(5, in_tower((block,5),(block,5)), false, true).
final_goal(5, in_tower((block,5),(block,5)), true, false).
final_goal(5, in_tower((block,5),(block,6)), false, true).
final_goal(5, in_tower((block,5),(block,6)), true, false).
final_goal(5, in_tower((block,5),(block,7)), false, true).
final_goal(5, in_tower((block,5),(block,7)), true, false).
final_goal(5, in_tower((block,5),(block,8)), false, true).
final_goal(5, in_tower((block,5),(block,8)), true, false).
final_goal(5, in_tower((block,5),(block,9)), false, true).
final_goal(5, in_tower((block,5),(block,9)), true, false).
final_goal(5, in_tower((block,6),(block,1)), false, true).
final_goal(5, in_tower((block,6),(block,1)), true, false).
final_goal(5, in_tower((block,6),(block,10)), false, true).
final_goal(5, in_tower((block,6),(block,10)), true, false).
final_goal(5, in_tower((block,6),(block,11)), false, true).
final_goal(5, in_tower((block,6),(block,11)), true, false).
final_goal(5, in_tower((block,6),(block,12)), false, true).
final_goal(5, in_tower((block,6),(block,12)), true, false).
final_goal(5, in_tower((block,6),(block,13)), false, true).
final_goal(5, in_tower((block,6),(block,13)), true, false).
final_goal(5, in_tower((block,6),(block,14)), false, true).
final_goal(5, in_tower((block,6),(block,14)), true, false).
final_goal(5, in_tower((block,6),(block,15)), false, true).
final_goal(5, in_tower((block,6),(block,15)), true, false).
final_goal(5, in_tower((block,6),(block,16)), false, true).
final_goal(5, in_tower((block,6),(block,16)), true, false).
final_goal(5, in_tower((block,6),(block,17)), false, true).
final_goal(5, in_tower((block,6),(block,17)), true, false).
final_goal(5, in_tower((block,6),(block,18)), false, true).
final_goal(5, in_tower((block,6),(block,18)), true, false).
final_goal(5, in_tower((block,6),(block,2)), false, true).
final_goal(5, in_tower((block,6),(block,2)), true, false).
final_goal(5, in_tower((block,6),(block,3)), false, true).
final_goal(5, in_tower((block,6),(block,3)), true, false).
final_goal(5, in_tower((block,6),(block,4)), false, false).
final_goal(5, in_tower((block,6),(block,4)), true, true).
final_goal(5, in_tower((block,6),(block,5)), false, false).
final_goal(5, in_tower((block,6),(block,5)), true, true).
final_goal(5, in_tower((block,6),(block,6)), false, false).
final_goal(5, in_tower((block,6),(block,6)), true, true).
final_goal(5, in_tower((block,6),(block,7)), false, true).
final_goal(5, in_tower((block,6),(block,7)), true, false).
final_goal(5, in_tower((block,6),(block,8)), false, true).
final_goal(5, in_tower((block,6),(block,8)), true, false).
final_goal(5, in_tower((block,6),(block,9)), false, true).
final_goal(5, in_tower((block,6),(block,9)), true, false).
final_goal(5, in_tower((block,7),(block,1)), false, true).
final_goal(5, in_tower((block,7),(block,1)), true, false).
final_goal(5, in_tower((block,7),(block,10)), false, true).
final_goal(5, in_tower((block,7),(block,10)), true, false).
final_goal(5, in_tower((block,7),(block,11)), false, true).
final_goal(5, in_tower((block,7),(block,11)), true, false).
final_goal(5, in_tower((block,7),(block,12)), false, true).
final_goal(5, in_tower((block,7),(block,12)), true, false).
final_goal(5, in_tower((block,7),(block,13)), false, true).
final_goal(5, in_tower((block,7),(block,13)), true, false).
final_goal(5, in_tower((block,7),(block,14)), false, true).
final_goal(5, in_tower((block,7),(block,14)), true, false).
final_goal(5, in_tower((block,7),(block,15)), false, true).
final_goal(5, in_tower((block,7),(block,15)), true, false).
final_goal(5, in_tower((block,7),(block,16)), false, true).
final_goal(5, in_tower((block,7),(block,16)), true, false).
final_goal(5, in_tower((block,7),(block,17)), false, true).
final_goal(5, in_tower((block,7),(block,17)), true, false).
final_goal(5, in_tower((block,7),(block,18)), false, true).
final_goal(5, in_tower((block,7),(block,18)), true, false).
final_goal(5, in_tower((block,7),(block,2)), false, true).
final_goal(5, in_tower((block,7),(block,2)), true, false).
final_goal(5, in_tower((block,7),(block,3)), false, true).
final_goal(5, in_tower((block,7),(block,3)), true, false).
final_goal(5, in_tower((block,7),(block,4)), false, true).
final_goal(5, in_tower((block,7),(block,4)), true, false).
final_goal(5, in_tower((block,7),(block,5)), false, true).
final_goal(5, in_tower((block,7),(block,5)), true, false).
final_goal(5, in_tower((block,7),(block,6)), false, true).
final_goal(5, in_tower((block,7),(block,6)), true, false).
final_goal(5, in_tower((block,7),(block,7)), false, true).
final_goal(5, in_tower((block,7),(block,7)), true, false).
final_goal(5, in_tower((block,7),(block,8)), false, true).
final_goal(5, in_tower((block,7),(block,8)), true, false).
final_goal(5, in_tower((block,7),(block,9)), false, true).
final_goal(5, in_tower((block,7),(block,9)), true, false).
final_goal(5, in_tower((block,8),(block,1)), false, true).
final_goal(5, in_tower((block,8),(block,1)), true, false).
final_goal(5, in_tower((block,8),(block,10)), false, true).
final_goal(5, in_tower((block,8),(block,10)), true, false).
final_goal(5, in_tower((block,8),(block,11)), false, true).
final_goal(5, in_tower((block,8),(block,11)), true, false).
final_goal(5, in_tower((block,8),(block,12)), false, true).
final_goal(5, in_tower((block,8),(block,12)), true, false).
final_goal(5, in_tower((block,8),(block,13)), false, true).
final_goal(5, in_tower((block,8),(block,13)), true, false).
final_goal(5, in_tower((block,8),(block,14)), false, true).
final_goal(5, in_tower((block,8),(block,14)), true, false).
final_goal(5, in_tower((block,8),(block,15)), false, true).
final_goal(5, in_tower((block,8),(block,15)), true, false).
final_goal(5, in_tower((block,8),(block,16)), false, true).
final_goal(5, in_tower((block,8),(block,16)), true, false).
final_goal(5, in_tower((block,8),(block,17)), false, true).
final_goal(5, in_tower((block,8),(block,17)), true, false).
final_goal(5, in_tower((block,8),(block,18)), false, true).
final_goal(5, in_tower((block,8),(block,18)), true, false).
final_goal(5, in_tower((block,8),(block,2)), false, true).
final_goal(5, in_tower((block,8),(block,2)), true, false).
final_goal(5, in_tower((block,8),(block,3)), false, true).
final_goal(5, in_tower((block,8),(block,3)), true, false).
final_goal(5, in_tower((block,8),(block,4)), false, true).
final_goal(5, in_tower((block,8),(block,4)), true, false).
final_goal(5, in_tower((block,8),(block,5)), false, true).
final_goal(5, in_tower((block,8),(block,5)), true, false).
final_goal(5, in_tower((block,8),(block,6)), false, true).
final_goal(5, in_tower((block,8),(block,6)), true, false).
final_goal(5, in_tower((block,8),(block,7)), false, true).
final_goal(5, in_tower((block,8),(block,7)), true, false).
final_goal(5, in_tower((block,8),(block,8)), false, true).
final_goal(5, in_tower((block,8),(block,8)), true, false).
final_goal(5, in_tower((block,8),(block,9)), false, true).
final_goal(5, in_tower((block,8),(block,9)), true, false).
final_goal(5, in_tower((block,9),(block,1)), false, true).
final_goal(5, in_tower((block,9),(block,1)), true, false).
final_goal(5, in_tower((block,9),(block,10)), false, true).
final_goal(5, in_tower((block,9),(block,10)), true, false).
final_goal(5, in_tower((block,9),(block,11)), false, true).
final_goal(5, in_tower((block,9),(block,11)), true, false).
final_goal(5, in_tower((block,9),(block,12)), false, true).
final_goal(5, in_tower((block,9),(block,12)), true, false).
final_goal(5, in_tower((block,9),(block,13)), false, true).
final_goal(5, in_tower((block,9),(block,13)), true, false).
final_goal(5, in_tower((block,9),(block,14)), false, true).
final_goal(5, in_tower((block,9),(block,14)), true, false).
final_goal(5, in_tower((block,9),(block,15)), false, true).
final_goal(5, in_tower((block,9),(block,15)), true, false).
final_goal(5, in_tower((block,9),(block,16)), false, true).
final_goal(5, in_tower((block,9),(block,16)), true, false).
final_goal(5, in_tower((block,9),(block,17)), false, true).
final_goal(5, in_tower((block,9),(block,17)), true, false).
final_goal(5, in_tower((block,9),(block,18)), false, true).
final_goal(5, in_tower((block,9),(block,18)), true, false).
final_goal(5, in_tower((block,9),(block,2)), false, true).
final_goal(5, in_tower((block,9),(block,2)), true, false).
final_goal(5, in_tower((block,9),(block,3)), false, true).
final_goal(5, in_tower((block,9),(block,3)), true, false).
final_goal(5, in_tower((block,9),(block,4)), false, true).
final_goal(5, in_tower((block,9),(block,4)), true, false).
final_goal(5, in_tower((block,9),(block,5)), false, true).
final_goal(5, in_tower((block,9),(block,5)), true, false).
final_goal(5, in_tower((block,9),(block,6)), false, true).
final_goal(5, in_tower((block,9),(block,6)), true, false).
final_goal(5, in_tower((block,9),(block,7)), false, false).
final_goal(5, in_tower((block,9),(block,7)), true, true).
final_goal(5, in_tower((block,9),(block,8)), false, false).
final_goal(5, in_tower((block,9),(block,8)), true, true).
final_goal(5, in_tower((block,9),(block,9)), false, false).
final_goal(5, in_tower((block,9),(block,9)), true, true).
final_goal(5, on((block,1)), (block,10), false).
final_goal(5, on((block,1)), (block,11), false).
final_goal(5, on((block,1)), (block,12), false).
final_goal(5, on((block,1)), (block,13), false).
final_goal(5, on((block,1)), (block,14), false).
final_goal(5, on((block,1)), (block,15), false).
final_goal(5, on((block,1)), (block,16), false).
final_goal(5, on((block,1)), (block,17), false).
final_goal(5, on((block,1)), (block,18), false).
final_goal(5, on((block,1)), (block,2), true).
final_goal(5, on((block,1)), (block,3), false).
final_goal(5, on((block,1)), (block,4), false).
final_goal(5, on((block,1)), (block,5), false).
final_goal(5, on((block,1)), (block,6), false).
final_goal(5, on((block,1)), (block,7), false).
final_goal(5, on((block,1)), (block,8), false).
final_goal(5, on((block,1)), (block,9), false).
final_goal(5, on((block,1)), nothing, false).
final_goal(5, on((block,1)), puzzle_room_1_table, false).
final_goal(5, on((block,1)), puzzle_room_2_table, false).
final_goal(5, on((block,10)), (block,1), false).
final_goal(5, on((block,10)), (block,11), true).
final_goal(5, on((block,10)), (block,12), false).
final_goal(5, on((block,10)), (block,13), false).
final_goal(5, on((block,10)), (block,14), false).
final_goal(5, on((block,10)), (block,15), false).
final_goal(5, on((block,10)), (block,16), false).
final_goal(5, on((block,10)), (block,17), false).
final_goal(5, on((block,10)), (block,18), false).
final_goal(5, on((block,10)), (block,2), false).
final_goal(5, on((block,10)), (block,3), false).
final_goal(5, on((block,10)), (block,4), false).
final_goal(5, on((block,10)), (block,5), false).
final_goal(5, on((block,10)), (block,6), false).
final_goal(5, on((block,10)), (block,7), false).
final_goal(5, on((block,10)), (block,8), false).
final_goal(5, on((block,10)), (block,9), false).
final_goal(5, on((block,10)), nothing, false).
final_goal(5, on((block,10)), puzzle_room_1_table, false).
final_goal(5, on((block,10)), puzzle_room_2_table, false).
final_goal(5, on((block,11)), (block,1), false).
final_goal(5, on((block,11)), (block,10), false).
final_goal(5, on((block,11)), (block,12), true).
final_goal(5, on((block,11)), (block,13), false).
final_goal(5, on((block,11)), (block,14), false).
final_goal(5, on((block,11)), (block,15), false).
final_goal(5, on((block,11)), (block,16), false).
final_goal(5, on((block,11)), (block,17), false).
final_goal(5, on((block,11)), (block,18), false).
final_goal(5, on((block,11)), (block,2), false).
final_goal(5, on((block,11)), (block,3), false).
final_goal(5, on((block,11)), (block,4), false).
final_goal(5, on((block,11)), (block,5), false).
final_goal(5, on((block,11)), (block,6), false).
final_goal(5, on((block,11)), (block,7), false).
final_goal(5, on((block,11)), (block,8), false).
final_goal(5, on((block,11)), (block,9), false).
final_goal(5, on((block,11)), nothing, false).
final_goal(5, on((block,11)), puzzle_room_1_table, false).
final_goal(5, on((block,11)), puzzle_room_2_table, false).
final_goal(5, on((block,12)), (block,1), false).
final_goal(5, on((block,12)), (block,10), false).
final_goal(5, on((block,12)), (block,11), false).
final_goal(5, on((block,12)), (block,13), false).
final_goal(5, on((block,12)), (block,14), false).
final_goal(5, on((block,12)), (block,15), false).
final_goal(5, on((block,12)), (block,16), false).
final_goal(5, on((block,12)), (block,17), false).
final_goal(5, on((block,12)), (block,18), false).
final_goal(5, on((block,12)), (block,2), false).
final_goal(5, on((block,12)), (block,3), false).
final_goal(5, on((block,12)), (block,4), false).
final_goal(5, on((block,12)), (block,5), false).
final_goal(5, on((block,12)), (block,6), false).
final_goal(5, on((block,12)), (block,7), false).
final_goal(5, on((block,12)), (block,8), false).
final_goal(5, on((block,12)), (block,9), false).
final_goal(5, on((block,12)), nothing, false).
final_goal(5, on((block,12)), puzzle_room_1_table, false).
final_goal(5, on((block,12)), puzzle_room_2_table, true).
final_goal(5, on((block,13)), (block,1), false).
final_goal(5, on((block,13)), (block,10), false).
final_goal(5, on((block,13)), (block,11), false).
final_goal(5, on((block,13)), (block,12), false).
final_goal(5, on((block,13)), (block,14), true).
final_goal(5, on((block,13)), (block,15), false).
final_goal(5, on((block,13)), (block,16), false).
final_goal(5, on((block,13)), (block,17), false).
final_goal(5, on((block,13)), (block,18), false).
final_goal(5, on((block,13)), (block,2), false).
final_goal(5, on((block,13)), (block,3), false).
final_goal(5, on((block,13)), (block,4), false).
final_goal(5, on((block,13)), (block,5), false).
final_goal(5, on((block,13)), (block,6), false).
final_goal(5, on((block,13)), (block,7), false).
final_goal(5, on((block,13)), (block,8), false).
final_goal(5, on((block,13)), (block,9), false).
final_goal(5, on((block,13)), nothing, false).
final_goal(5, on((block,13)), puzzle_room_1_table, false).
final_goal(5, on((block,13)), puzzle_room_2_table, false).
final_goal(5, on((block,14)), (block,1), false).
final_goal(5, on((block,14)), (block,10), false).
final_goal(5, on((block,14)), (block,11), false).
final_goal(5, on((block,14)), (block,12), false).
final_goal(5, on((block,14)), (block,13), false).
final_goal(5, on((block,14)), (block,15), true).
final_goal(5, on((block,14)), (block,16), false).
final_goal(5, on((block,14)), (block,17), false).
final_goal(5, on((block,14)), (block,18), false).
final_goal(5, on((block,14)), (block,2), false).
final_goal(5, on((block,14)), (block,3), false).
final_goal(5, on((block,14)), (block,4), false).
final_goal(5, on((block,14)), (block,5), false).
final_goal(5, on((block,14)), (block,6), false).
final_goal(5, on((block,14)), (block,7), false).
final_goal(5, on((block,14)), (block,8), false).
final_goal(5, on((block,14)), (block,9), false).
final_goal(5, on((block,14)), nothing, false).
final_goal(5, on((block,14)), puzzle_room_1_table, false).
final_goal(5, on((block,14)), puzzle_room_2_table, false).
final_goal(5, on((block,15)), (block,1), false).
final_goal(5, on((block,15)), (block,10), false).
final_goal(5, on((block,15)), (block,11), false).
final_goal(5, on((block,15)), (block,12), false).
final_goal(5, on((block,15)), (block,13), false).
final_goal(5, on((block,15)), (block,14), false).
final_goal(5, on((block,15)), (block,16), false).
final_goal(5, on((block,15)), (block,17), false).
final_goal(5, on((block,15)), (block,18), false).
final_goal(5, on((block,15)), (block,2), false).
final_goal(5, on((block,15)), (block,3), false).
final_goal(5, on((block,15)), (block,4), false).
final_goal(5, on((block,15)), (block,5), false).
final_goal(5, on((block,15)), (block,6), false).
final_goal(5, on((block,15)), (block,7), false).
final_goal(5, on((block,15)), (block,8), false).
final_goal(5, on((block,15)), (block,9), false).
final_goal(5, on((block,15)), nothing, false).
final_goal(5, on((block,15)), puzzle_room_1_table, false).
final_goal(5, on((block,15)), puzzle_room_2_table, true).
final_goal(5, on((block,16)), (block,1), false).
final_goal(5, on((block,16)), (block,10), false).
final_goal(5, on((block,16)), (block,11), false).
final_goal(5, on((block,16)), (block,12), false).
final_goal(5, on((block,16)), (block,13), false).
final_goal(5, on((block,16)), (block,14), false).
final_goal(5, on((block,16)), (block,15), false).
final_goal(5, on((block,16)), (block,17), true).
final_goal(5, on((block,16)), (block,18), false).
final_goal(5, on((block,16)), (block,2), false).
final_goal(5, on((block,16)), (block,3), false).
final_goal(5, on((block,16)), (block,4), false).
final_goal(5, on((block,16)), (block,5), false).
final_goal(5, on((block,16)), (block,6), false).
final_goal(5, on((block,16)), (block,7), false).
final_goal(5, on((block,16)), (block,8), false).
final_goal(5, on((block,16)), (block,9), false).
final_goal(5, on((block,16)), nothing, false).
final_goal(5, on((block,16)), puzzle_room_1_table, false).
final_goal(5, on((block,16)), puzzle_room_2_table, false).
final_goal(5, on((block,17)), (block,1), false).
final_goal(5, on((block,17)), (block,10), false).
final_goal(5, on((block,17)), (block,11), false).
final_goal(5, on((block,17)), (block,12), false).
final_goal(5, on((block,17)), (block,13), false).
final_goal(5, on((block,17)), (block,14), false).
final_goal(5, on((block,17)), (block,15), false).
final_goal(5, on((block,17)), (block,16), false).
final_goal(5, on((block,17)), (block,18), true).
final_goal(5, on((block,17)), (block,2), false).
final_goal(5, on((block,17)), (block,3), false).
final_goal(5, on((block,17)), (block,4), false).
final_goal(5, on((block,17)), (block,5), false).
final_goal(5, on((block,17)), (block,6), false).
final_goal(5, on((block,17)), (block,7), false).
final_goal(5, on((block,17)), (block,8), false).
final_goal(5, on((block,17)), (block,9), false).
final_goal(5, on((block,17)), nothing, false).
final_goal(5, on((block,17)), puzzle_room_1_table, false).
final_goal(5, on((block,17)), puzzle_room_2_table, false).
final_goal(5, on((block,18)), (block,1), false).
final_goal(5, on((block,18)), (block,10), false).
final_goal(5, on((block,18)), (block,11), false).
final_goal(5, on((block,18)), (block,12), false).
final_goal(5, on((block,18)), (block,13), false).
final_goal(5, on((block,18)), (block,14), false).
final_goal(5, on((block,18)), (block,15), false).
final_goal(5, on((block,18)), (block,16), false).
final_goal(5, on((block,18)), (block,17), false).
final_goal(5, on((block,18)), (block,2), false).
final_goal(5, on((block,18)), (block,3), false).
final_goal(5, on((block,18)), (block,4), false).
final_goal(5, on((block,18)), (block,5), false).
final_goal(5, on((block,18)), (block,6), false).
final_goal(5, on((block,18)), (block,7), false).
final_goal(5, on((block,18)), (block,8), false).
final_goal(5, on((block,18)), (block,9), false).
final_goal(5, on((block,18)), nothing, false).
final_goal(5, on((block,18)), puzzle_room_1_table, false).
final_goal(5, on((block,18)), puzzle_room_2_table, true).
final_goal(5, on((block,2)), (block,1), false).
final_goal(5, on((block,2)), (block,10), false).
final_goal(5, on((block,2)), (block,11), false).
final_goal(5, on((block,2)), (block,12), false).
final_goal(5, on((block,2)), (block,13), false).
final_goal(5, on((block,2)), (block,14), false).
final_goal(5, on((block,2)), (block,15), false).
final_goal(5, on((block,2)), (block,16), false).
final_goal(5, on((block,2)), (block,17), false).
final_goal(5, on((block,2)), (block,18), false).
final_goal(5, on((block,2)), (block,3), true).
final_goal(5, on((block,2)), (block,4), false).
final_goal(5, on((block,2)), (block,5), false).
final_goal(5, on((block,2)), (block,6), false).
final_goal(5, on((block,2)), (block,7), false).
final_goal(5, on((block,2)), (block,8), false).
final_goal(5, on((block,2)), (block,9), false).
final_goal(5, on((block,2)), nothing, false).
final_goal(5, on((block,2)), puzzle_room_1_table, false).
final_goal(5, on((block,2)), puzzle_room_2_table, false).
final_goal(5, on((block,3)), (block,1), false).
final_goal(5, on((block,3)), (block,10), false).
final_goal(5, on((block,3)), (block,11), false).
final_goal(5, on((block,3)), (block,12), false).
final_goal(5, on((block,3)), (block,13), false).
final_goal(5, on((block,3)), (block,14), false).
final_goal(5, on((block,3)), (block,15), false).
final_goal(5, on((block,3)), (block,16), false).
final_goal(5, on((block,3)), (block,17), false).
final_goal(5, on((block,3)), (block,18), false).
final_goal(5, on((block,3)), (block,2), false).
final_goal(5, on((block,3)), (block,4), false).
final_goal(5, on((block,3)), (block,5), false).
final_goal(5, on((block,3)), (block,6), false).
final_goal(5, on((block,3)), (block,7), false).
final_goal(5, on((block,3)), (block,8), false).
final_goal(5, on((block,3)), (block,9), false).
final_goal(5, on((block,3)), nothing, false).
final_goal(5, on((block,3)), puzzle_room_1_table, true).
final_goal(5, on((block,3)), puzzle_room_2_table, false).
final_goal(5, on((block,4)), (block,1), false).
final_goal(5, on((block,4)), (block,10), false).
final_goal(5, on((block,4)), (block,11), false).
final_goal(5, on((block,4)), (block,12), false).
final_goal(5, on((block,4)), (block,13), false).
final_goal(5, on((block,4)), (block,14), false).
final_goal(5, on((block,4)), (block,15), false).
final_goal(5, on((block,4)), (block,16), false).
final_goal(5, on((block,4)), (block,17), false).
final_goal(5, on((block,4)), (block,18), false).
final_goal(5, on((block,4)), (block,2), false).
final_goal(5, on((block,4)), (block,3), false).
final_goal(5, on((block,4)), (block,5), true).
final_goal(5, on((block,4)), (block,6), false).
final_goal(5, on((block,4)), (block,7), false).
final_goal(5, on((block,4)), (block,8), false).
final_goal(5, on((block,4)), (block,9), false).
final_goal(5, on((block,4)), nothing, false).
final_goal(5, on((block,4)), puzzle_room_1_table, false).
final_goal(5, on((block,4)), puzzle_room_2_table, false).
final_goal(5, on((block,5)), (block,1), false).
final_goal(5, on((block,5)), (block,10), false).
final_goal(5, on((block,5)), (block,11), false).
final_goal(5, on((block,5)), (block,12), false).
final_goal(5, on((block,5)), (block,13), false).
final_goal(5, on((block,5)), (block,14), false).
final_goal(5, on((block,5)), (block,15), false).
final_goal(5, on((block,5)), (block,16), false).
final_goal(5, on((block,5)), (block,17), false).
final_goal(5, on((block,5)), (block,18), false).
final_goal(5, on((block,5)), (block,2), false).
final_goal(5, on((block,5)), (block,3), false).
final_goal(5, on((block,5)), (block,4), false).
final_goal(5, on((block,5)), (block,6), true).
final_goal(5, on((block,5)), (block,7), false).
final_goal(5, on((block,5)), (block,8), false).
final_goal(5, on((block,5)), (block,9), false).
final_goal(5, on((block,5)), nothing, false).
final_goal(5, on((block,5)), puzzle_room_1_table, false).
final_goal(5, on((block,5)), puzzle_room_2_table, false).
final_goal(5, on((block,6)), (block,1), false).
final_goal(5, on((block,6)), (block,10), false).
final_goal(5, on((block,6)), (block,11), false).
final_goal(5, on((block,6)), (block,12), false).
final_goal(5, on((block,6)), (block,13), false).
final_goal(5, on((block,6)), (block,14), false).
final_goal(5, on((block,6)), (block,15), false).
final_goal(5, on((block,6)), (block,16), false).
final_goal(5, on((block,6)), (block,17), false).
final_goal(5, on((block,6)), (block,18), false).
final_goal(5, on((block,6)), (block,2), false).
final_goal(5, on((block,6)), (block,3), false).
final_goal(5, on((block,6)), (block,4), false).
final_goal(5, on((block,6)), (block,5), false).
final_goal(5, on((block,6)), (block,7), false).
final_goal(5, on((block,6)), (block,8), false).
final_goal(5, on((block,6)), (block,9), false).
final_goal(5, on((block,6)), nothing, false).
final_goal(5, on((block,6)), puzzle_room_1_table, true).
final_goal(5, on((block,6)), puzzle_room_2_table, false).
final_goal(5, on((block,7)), (block,1), false).
final_goal(5, on((block,7)), (block,10), false).
final_goal(5, on((block,7)), (block,11), false).
final_goal(5, on((block,7)), (block,12), false).
final_goal(5, on((block,7)), (block,13), false).
final_goal(5, on((block,7)), (block,14), false).
final_goal(5, on((block,7)), (block,15), false).
final_goal(5, on((block,7)), (block,16), false).
final_goal(5, on((block,7)), (block,17), false).
final_goal(5, on((block,7)), (block,18), false).
final_goal(5, on((block,7)), (block,2), false).
final_goal(5, on((block,7)), (block,3), false).
final_goal(5, on((block,7)), (block,4), false).
final_goal(5, on((block,7)), (block,5), false).
final_goal(5, on((block,7)), (block,6), false).
final_goal(5, on((block,7)), (block,8), true).
final_goal(5, on((block,7)), (block,9), false).
final_goal(5, on((block,7)), nothing, false).
final_goal(5, on((block,7)), puzzle_room_1_table, false).
final_goal(5, on((block,7)), puzzle_room_2_table, false).
final_goal(5, on((block,8)), (block,1), false).
final_goal(5, on((block,8)), (block,10), false).
final_goal(5, on((block,8)), (block,11), false).
final_goal(5, on((block,8)), (block,12), false).
final_goal(5, on((block,8)), (block,13), false).
final_goal(5, on((block,8)), (block,14), false).
final_goal(5, on((block,8)), (block,15), false).
final_goal(5, on((block,8)), (block,16), false).
final_goal(5, on((block,8)), (block,17), false).
final_goal(5, on((block,8)), (block,18), false).
final_goal(5, on((block,8)), (block,2), false).
final_goal(5, on((block,8)), (block,3), false).
final_goal(5, on((block,8)), (block,4), false).
final_goal(5, on((block,8)), (block,5), false).
final_goal(5, on((block,8)), (block,6), false).
final_goal(5, on((block,8)), (block,7), false).
final_goal(5, on((block,8)), (block,9), true).
final_goal(5, on((block,8)), nothing, false).
final_goal(5, on((block,8)), puzzle_room_1_table, false).
final_goal(5, on((block,8)), puzzle_room_2_table, false).
final_goal(5, on((block,9)), (block,1), false).
final_goal(5, on((block,9)), (block,10), false).
final_goal(5, on((block,9)), (block,11), false).
final_goal(5, on((block,9)), (block,12), false).
final_goal(5, on((block,9)), (block,13), false).
final_goal(5, on((block,9)), (block,14), false).
final_goal(5, on((block,9)), (block,15), false).
final_goal(5, on((block,9)), (block,16), false).
final_goal(5, on((block,9)), (block,17), false).
final_goal(5, on((block,9)), (block,18), false).
final_goal(5, on((block,9)), (block,2), false).
final_goal(5, on((block,9)), (block,3), false).
final_goal(5, on((block,9)), (block,4), false).
final_goal(5, on((block,9)), (block,5), false).
final_goal(5, on((block,9)), (block,6), false).
final_goal(5, on((block,9)), (block,7), false).
final_goal(5, on((block,9)), (block,8), false).
final_goal(5, on((block,9)), nothing, false).
final_goal(5, on((block,9)), puzzle_room_1_table, true).
final_goal(5, on((block,9)), puzzle_room_2_table, false).
final_goal(5, tower_base((block,1),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,1),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,1),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,1),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,10),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,10),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,10),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,10),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,11),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,11),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,11),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,11),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,12),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,12),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,12),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,12),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,13),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,13),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,13),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,13),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,14),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,14),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,14),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,14),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,15),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,15),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,15),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,15),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,16),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,16),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,16),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,16),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,17),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,17),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,17),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,17),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,18),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,18),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,18),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,18),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,2),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,2),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,2),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,2),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,3),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,3),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,3),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,3),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,4),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,4),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,4),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,4),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,5),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,5),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,5),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,5),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,6),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,6),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,6),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,6),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,7),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,7),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,7),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,7),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,8),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,8),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,8),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,8),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,9),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,9),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,9),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,9),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), true, false).

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 5, 'R': 'talos', 'A': 'move(store_room_1)', 'F': 'in(talos)', 'V': 'store_room_1', 'I': 1})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,4))', 'F': 'on((block,4))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,4))', 'F': 'transporting(talos,(block,4))', 'V': 'true', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,5))', 'F': 'on((block,5))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,5))', 'F': 'transporting(talos,(block,5))', 'V': 'true', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,6))', 'F': 'on((block,6))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,6))', 'F': 'transporting(talos,(block,6))', 'V': 'true', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,8))', 'F': 'on((block,8))', 'V': 'nothing', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'collect((block,8))', 'F': 'transporting(talos,(block,8))', 'V': 'true', 'I': 2})
SubGoal({'L': 5, 'R': 'talos', 'A': 'move(puzzle_room_1)', 'F': 'in(talos)', 'V': 'puzzle_room_1', 'I': 3})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,3),puzzle_room_1_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_1_table', 'I': 4})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,3),puzzle_room_1_table)', 'F': 'transporting(talos,(block,3))', 'V': 'false', 'I': 4})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,6),puzzle_room_1_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_1_table', 'I': 4})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,6),puzzle_room_1_table)', 'F': 'transporting(talos,(block,6))', 'V': 'false', 'I': 4})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,9),puzzle_room_1_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_1_table', 'I': 4})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,9),puzzle_room_1_table)', 'F': 'transporting(talos,(block,9))', 'V': 'false', 'I': 4})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 5})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,2),(block,3))', 'F': 'transporting(talos,(block,2))', 'V': 'false', 'I': 5})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 5})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,5),(block,6))', 'F': 'transporting(talos,(block,5))', 'V': 'false', 'I': 5})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 5})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,8),(block,9))', 'F': 'transporting(talos,(block,8))', 'V': 'false', 'I': 5})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 6})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,1),(block,2))', 'F': 'transporting(talos,(block,1))', 'V': 'false', 'I': 6})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 6})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,4),(block,5))', 'F': 'transporting(talos,(block,4))', 'V': 'false', 'I': 6})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 6})
SubGoal({'L': 5, 'R': 'talos', 'A': 'place_upon((block,7),(block,8))', 'F': 'transporting(talos,(block,7))', 'V': 'false', 'I': 6})

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 28 rules into program part base:

sub_goal(5, talos, move(store_room_1), in(talos), store_room_1, 1).
sub_goal(5, talos, collect((block,4)), on((block,4)), nothing, 2).
sub_goal(5, talos, collect((block,4)), transporting(talos,(block,4)), true, 2).
sub_goal(5, talos, collect((block,5)), on((block,5)), nothing, 2).
sub_goal(5, talos, collect((block,5)), transporting(talos,(block,5)), true, 2).
sub_goal(5, talos, collect((block,6)), on((block,6)), nothing, 2).
sub_goal(5, talos, collect((block,6)), transporting(talos,(block,6)), true, 2).
sub_goal(5, talos, collect((block,8)), on((block,8)), nothing, 2).
sub_goal(5, talos, collect((block,8)), transporting(talos,(block,8)), true, 2).
sub_goal(5, talos, move(puzzle_room_1), in(talos), puzzle_room_1, 3).
sub_goal(5, talos, place_upon((block,3),puzzle_room_1_table), on((block,3)), puzzle_room_1_table, 4).
sub_goal(5, talos, place_upon((block,3),puzzle_room_1_table), transporting(talos,(block,3)), false, 4).
sub_goal(5, talos, place_upon((block,6),puzzle_room_1_table), on((block,6)), puzzle_room_1_table, 4).
sub_goal(5, talos, place_upon((block,6),puzzle_room_1_table), transporting(talos,(block,6)), false, 4).
sub_goal(5, talos, place_upon((block,9),puzzle_room_1_table), on((block,9)), puzzle_room_1_table, 4).
sub_goal(5, talos, place_upon((block,9),puzzle_room_1_table), transporting(talos,(block,9)), false, 4).
sub_goal(5, talos, place_upon((block,2),(block,3)), on((block,2)), (block,3), 5).
sub_goal(5, talos, place_upon((block,2),(block,3)), transporting(talos,(block,2)), false, 5).
sub_goal(5, talos, place_upon((block,5),(block,6)), on((block,5)), (block,6), 5).
sub_goal(5, talos, place_upon((block,5),(block,6)), transporting(talos,(block,5)), false, 5).
sub_goal(5, talos, place_upon((block,8),(block,9)), on((block,8)), (block,9), 5).
sub_goal(5, talos, place_upon((block,8),(block,9)), transporting(talos,(block,8)), false, 5).
sub_goal(5, talos, place_upon((block,1),(block,2)), on((block,1)), (block,2), 6).
sub_goal(5, talos, place_upon((block,1),(block,2)), transporting(talos,(block,1)), false, 6).
sub_goal(5, talos, place_upon((block,4),(block,5)), on((block,4)), (block,5), 6).
sub_goal(5, talos, place_upon((block,4),(block,5)), transporting(talos,(block,4)), false, 6).
sub_goal(5, talos, place_upon((block,7),(block,8)), on((block,7)), (block,8), 6).
sub_goal(5, talos, place_upon((block,7),(block,8)), transporting(talos,(block,7)), false, 6).

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=5, start_step=0, total_plan_length=12, step_range=range(0, 13)

[04-03-2022_16-20-11] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Total actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [3]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000013B45F3B5E0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=6, step_end_max=300, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1773.071201, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(4, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 6, 'sequential', 'true'), range_=None)]

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 3709 rules

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0186238000000003s

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(4, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(4), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.595952s.

[04-03-2022_16-20-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.137308s with result Satisfiable.

[04-03-2022_16-20-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[04-03-2022_16-20-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000013B4602A720>

[04-03-2022_16-20-12] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws_tasking_double_condensed.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_4_DC.lp'], Anon #1), Main #1, 8, Verbosity.Standard, True))
	('level', 4)
	('start_step', 0)
	('last_sgoals', 6)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Hasty object at 0x0000013B45EAEE80>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000013B4602A720>)

[04-03-2022_16-20-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[04-03-2022_16-20-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 6, sequential, true). %* None *%

[04-03-2022_16-20-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-20-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-20-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.134447s.

[04-03-2022_16-20-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[04-03-2022_16-20-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[04-03-2022_16-20-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.212360s with result Satisfiable.

[04-03-2022_16-20-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 4.346807300000009, Incremental time limit = None
Running cumulative time = 4.346807300000009, Cumulative time limit = 1773.071201
Used memory = (RSS = 320.285156Mb, VMS = 318.328125Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.134447s, Solving = 0.212360s, Total = 4.346807s, Memory = (RSS = 320.285156Mb, VMS = 318.328125Mb), Step range = [0-1]), Calls = 1
Final Model :: Total atoms = 75923, Cost = (1, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[04-03-2022_16-20-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.134447300000005, solving_time=0.21236000000000388, total_time=4.346807300000009, memory=Memory(rss=320.28515625, vms=318.328125), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.134447300000005, solving_time=0.21236000000000388, total_time=4.346807300000009, memory=Memory(rss=320.28515625, vms=318.328125), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 133664.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 136340.0, 'bodies_tr': 136340.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 1215.0, 'count_bodies_tr': 1215.0, 'sccs': 55.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7766.0, 'rules': 278891.0, 'rules_normal': 277088.0, 'rules_choice': 1801.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 278891.0, 'rules_tr_normal': 277088.0, 'rules_tr_choice': 1801.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 220604.0, 'eqs_atom': 85930.0, 'eqs_body': 7665.0, 'eqs_other': 127009.0}, 'lpStep': {'atoms': 38222.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 127136.0, 'bodies_tr': 127136.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 1215.0, 'count_bodies_tr': 1215.0, 'sccs': 55.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7766.0, 'rules': 179695.0, 'rules_normal': 177892.0, 'rules_choice': 1801.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 179695.0, 'rules_tr_normal': 177892.0, 'rules_tr_choice': 1801.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 62913.0, 'eqs_atom': 12583.0, 'eqs_body': 2839.0, 'eqs_other': 47491.0}, 'generator': {'vars': 24682.0, 'vars_eliminated': 0.0, 'vars_frozen': 12706.0, 'constraints': 34.0, 'constraints_binary': 6159.0, 'constraints_ternary': 1122.0, 'acyc_edges': 0.0, 'complexity': 7323.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 17.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 1.0, 'integrated': 0.0, 'lemmas': 1.0, 'lits_learnt': 1.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.171875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 136.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 1.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 0.0, 'levels': 1.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [1.0, 0.0], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 4.343025207519531, 'cpu': 4.375, 'solve': 0.10475540161132812, 'unsat': 0.09974098205566406, 'sat': 0.0050144195556640625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.09600830078125, 'cpu': 5.109375, 'solve': 0.1875324249267578, 'unsat': 0.09974098205566406, 'sat': 0.006011962890625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 18.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 1.0, 'integrated': 0.0, 'lemmas': 1.0, 'lits_learnt': 1.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.25, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 144.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 1.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 0.0, 'levels': 1.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-20-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 1}

[04-03-2022_16-20-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 2 ( 33.33% solved)

[04-03-2022_16-20-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 1)', truth=True, inc_range=None)

[04-03-2022_16-20-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 1]:
sub_goal(5, talos, collect((block,4)), on((block,4)), nothing, 2)
sub_goal(5, talos, collect((block,4)), transporting(talos,(block,4)), true, 2)
sub_goal(5, talos, collect((block,5)), on((block,5)), nothing, 2)
sub_goal(5, talos, collect((block,5)), transporting(talos,(block,5)), true, 2)
sub_goal(5, talos, collect((block,6)), on((block,6)), nothing, 2)
sub_goal(5, talos, collect((block,6)), transporting(talos,(block,6)), true, 2)
sub_goal(5, talos, collect((block,8)), on((block,8)), nothing, 2)
sub_goal(5, talos, collect((block,8)), transporting(talos,(block,8)), true, 2)

[04-03-2022_16-20-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 1:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-20-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-20-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-20-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.052257s.

[04-03-2022_16-20-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 2: original = External(symbol='current_last_sgoals(2, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(2,1).

[04-03-2022_16-20-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031717s with result Unsatisfiable.

[04-03-2022_16-20-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 3.0839739000000037, Incremental time limit = None
Running cumulative time = 7.430781200000013, Cumulative time limit = 1773.071201
Used memory = (RSS = 323.359375Mb, VMS = 324.203125Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=7.186703900000005, solving_time=0.24407730000000782, total_time=7.430781200000013, memory=Memory(rss=323.359375, vms=324.203125), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.0522565999999998, solving_time=0.031717300000003945, total_time=3.0839739000000037, memory=Memory(rss=323.359375, vms=324.203125), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 147930.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 220706.0, 'bodies_tr': 220706.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 2284.0, 'count_bodies_tr': 2284.0, 'sccs': 62.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7836.0, 'rules': 390212.0, 'rules_normal': 387608.0, 'rules_choice': 2600.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 390212.0, 'rules_tr_normal': 387608.0, 'rules_tr_choice': 2600.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 247290.0, 'eqs_atom': 94727.0, 'eqs_body': 10687.0, 'eqs_other': 141876.0}, 'lpStep': {'atoms': 14266.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 84366.0, 'bodies_tr': 84366.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 7.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 70.0, 'rules': 111321.0, 'rules_normal': 110520.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 111321.0, 'rules_tr_normal': 110520.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26686.0, 'eqs_atom': 8797.0, 'eqs_body': 3022.0, 'eqs_other': 14867.0}, 'generator': {'vars': 25441.0, 'vars_eliminated': 0.0, 'vars_frozen': 13084.0, 'constraints': 200.0, 'constraints_binary': 5909.0, 'constraints_ternary': 425.0, 'acyc_edges': 0.0, 'complexity': 7323.0}}, 'solving': {'solvers': {'choices': 21.0, 'conflicts': 9.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 2.0, 'lemmas': 4.0, 'lits_learnt': 12.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 2.0, 'integrated_jumps': 6.0, 'guiding_paths_lits': 175.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 0.0, 'lemmas_other': 2.0, 'lits_conflict': 6.0, 'lits_loop': 0.0, 'lits_other': 6.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 19.0, 'levels_bounded': 4.0, 'max': 8.0, 'max_executed': 7.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 3.0866928100585938, 'cpu': 3.015625, 'solve': 0.0029926300048828125, 'unsat': 0.0029926300048828125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 8.182701110839844, 'cpu': 8.125, 'solve': 0.19052505493164062, 'unsat': 0.10273361206054688, 'sat': 0.006011962890625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 21.0, 'conflicts': 11.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 18.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 5.0, 'integrated': 2.0, 'lemmas': 5.0, 'lits_learnt': 13.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.25, 'integrated_imps': 2.0, 'integrated_jumps': 6.0, 'guiding_paths_lits': 319.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 0.0, 'lemmas_other': 2.0, 'lits_conflict': 7.0, 'lits_loop': 0.0, 'lits_other': 6.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 3.0, 'levels': 20.0, 'levels_bounded': 4.0, 'max': 8.0, 'max_executed': 7.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-20-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-20-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-20-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-20-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.323525s.

[04-03-2022_16-20-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.084674s with result Unsatisfiable.

[04-03-2022_16-20-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 3.4081991000000045, Incremental time limit = None
Running cumulative time = 10.838980300000017, Cumulative time limit = 1773.071201
Used memory = (RSS = 345.726562Mb, VMS = 349.003906Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=10.510228700000006, solving_time=0.328751600000011, total_time=10.838980300000017, memory=Memory(rss=345.7265625, vms=349.00390625), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.3235248000000013, solving_time=0.0846743000000032, total_time=3.4081991000000045, memory=Memory(rss=345.7265625, vms=349.00390625), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 164077.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 310976.0, 'bodies_tr': 310976.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 3353.0, 'count_bodies_tr': 3353.0, 'sccs': 105.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14578.0, 'rules': 509132.0, 'rules_normal': 505727.0, 'rules_choice': 3399.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 509132.0, 'rules_tr_normal': 505727.0, 'rules_tr_choice': 3399.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 282691.0, 'eqs_atom': 104249.0, 'eqs_body': 12797.0, 'eqs_other': 165645.0}, 'lpStep': {'atoms': 16147.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 90270.0, 'bodies_tr': 90270.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6742.0, 'rules': 118920.0, 'rules_normal': 118119.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 118920.0, 'rules_tr_normal': 118119.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 35401.0, 'eqs_atom': 9522.0, 'eqs_body': 2110.0, 'eqs_other': 23769.0}, 'generator': {'vars': 42311.0, 'vars_eliminated': 0.0, 'vars_frozen': 22628.0, 'constraints': 7065.0, 'constraints_binary': 87327.0, 'constraints_ternary': 15154.0, 'acyc_edges': 0.0, 'complexity': 109914.0}}, 'solving': {'solvers': {'choices': 607.0, 'conflicts': 33.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 30.0, 'distributed_sum_lbd': 83.0, 'integrated': 108.0, 'lemmas': 1600.0, 'lits_learnt': 56414.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.125, 'integrated_imps': 14.0, 'integrated_jumps': 308.0, 'guiding_paths_lits': 231.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 1464.0, 'lemmas_other': 108.0, 'lits_conflict': 168.0, 'lits_loop': 55713.0, 'lits_other': 533.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 6.0, 'levels': 255.0, 'levels_bounded': 10.0, 'max': 119.0, 'max_executed': 119.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, -28.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 3.410818099975586, 'cpu': 3.484375, 'solve': 0.0189361572265625, 'unsat': 0.0189361572265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 11.59351921081543, 'cpu': 11.609375, 'solve': 0.20946121215820312, 'unsat': 0.12166976928710938, 'sat': 0.006011962890625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 628.0, 'conflicts': 44.0, 'conflicts_analyzed': 33.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 18.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 33.0, 'distributed_sum_lbd': 88.0, 'integrated': 110.0, 'lemmas': 1605.0, 'lits_learnt': 56427.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.375, 'integrated_imps': 16.0, 'integrated_jumps': 314.0, 'guiding_paths_lits': 550.0, 'guiding_paths': 31.0, 'splits': 0.0, 'lemmas_conflict': 31.0, 'lemmas_loop': 1464.0, 'lemmas_other': 110.0, 'lits_conflict': 175.0, 'lits_loop': 55713.0, 'lits_other': 539.0, 'jumps': {'jumps': 33.0, 'jumps_bounded': 9.0, 'levels': 275.0, 'levels_bounded': 14.0, 'max': 119.0, 'max_executed': 119.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-20-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-20-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-20-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-20-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.693840s.

[04-03-2022_16-20-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.193805s with result Satisfiable.

[04-03-2022_16-20-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 3.887644999999999, Incremental time limit = None
Running cumulative time = 14.726625300000016, Cumulative time limit = 1773.071201
Used memory = (RSS = 391.050781Mb, VMS = 399.273438Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 14.204069s, Solving = 0.522557s, Total = 14.726625s, Memory = (RSS = 391.050781Mb, VMS = 399.273438Mb), Step range = [0-4]), Calls = 4
Final Model :: Total atoms = 83010, Cost = (7, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[04-03-2022_16-20-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=14.204068600000006, solving_time=0.5225567000000098, total_time=14.726625300000016, memory=Memory(rss=391.05078125, vms=399.2734375), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.6938399000000004, solving_time=0.19380509999999873, total_time=3.887644999999999, memory=Memory(rss=391.05078125, vms=399.2734375), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 182051.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 411107.0, 'bodies_tr': 411107.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 4422.0, 'count_bodies_tr': 4422.0, 'sccs': 148.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 21372.0, 'rules': 639196.0, 'rules_normal': 634990.0, 'rules_choice': 4198.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 639196.0, 'rules_tr_normal': 634990.0, 'rules_tr_choice': 4198.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 324193.0, 'eqs_atom': 115234.0, 'eqs_body': 14101.0, 'eqs_other': 194858.0}, 'lpStep': {'atoms': 17974.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 100131.0, 'bodies_tr': 100131.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6794.0, 'rules': 130064.0, 'rules_normal': 129263.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 130064.0, 'rules_tr_normal': 129263.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 41502.0, 'eqs_atom': 10985.0, 'eqs_body': 1304.0, 'eqs_other': 29213.0}, 'generator': {'vars': 60432.0, 'vars_eliminated': 0.0, 'vars_frozen': 32666.0, 'constraints': 14172.0, 'constraints_binary': 185899.0, 'constraints_ternary': 33012.0, 'acyc_edges': 0.0, 'complexity': 233767.0}}, 'solving': {'solvers': {'choices': 904.0, 'conflicts': 232.0, 'conflicts_analyzed': 227.0, 'restarts': 1.0, 'restarts_last': 42.0, 'extra': {'domain_choices': 23.0, 'models': 1.0, 'models_level': 46.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 184.0, 'distributed_sum_lbd': 503.0, 'integrated': 733.0, 'lemmas': 3344.0, 'lits_learnt': 101740.0, 'lemmas_binary': 90.0, 'lemmas_ternary': 99.0, 'cpu_time': 0.625, 'integrated_imps': 226.0, 'integrated_jumps': 367.0, 'guiding_paths_lits': 287.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 227.0, 'lemmas_loop': 2402.0, 'lemmas_other': 715.0, 'lits_conflict': 3701.0, 'lits_loop': 88525.0, 'lits_other': 9514.0, 'jumps': {'jumps': 227.0, 'jumps_bounded': 3.0, 'levels': 535.0, 'levels_bounded': 6.0, 'max': 95.0, 'max_executed': 95.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [7.0, 0.0], 'lower': [7.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 3.891338348388672, 'cpu': 4.40625, 'solve': 0.11768531799316406, 'unsat': 0.09574317932128906, 'sat': 0.021942138671875}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 15.484857559204102, 'cpu': 16.015625, 'solve': 0.3271465301513672, 'unsat': 0.21741294860839844, 'sat': 0.0279541015625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 1532.0, 'conflicts': 276.0, 'conflicts_analyzed': 260.0, 'restarts': 1.0, 'restarts_last': 42.0, 'extra': {'domain_choices': 23.0, 'models': 3.0, 'models_level': 64.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 217.0, 'distributed_sum_lbd': 591.0, 'integrated': 843.0, 'lemmas': 4949.0, 'lits_learnt': 158167.0, 'lemmas_binary': 118.0, 'lemmas_ternary': 113.0, 'cpu_time': 1.0, 'integrated_imps': 242.0, 'integrated_jumps': 681.0, 'guiding_paths_lits': 837.0, 'guiding_paths': 39.0, 'splits': 0.0, 'lemmas_conflict': 258.0, 'lemmas_loop': 3866.0, 'lemmas_other': 825.0, 'lits_conflict': 3876.0, 'lits_loop': 144238.0, 'lits_other': 10053.0, 'jumps': {'jumps': 260.0, 'jumps_bounded': 12.0, 'levels': 810.0, 'levels_bounded': 20.0, 'max': 119.0, 'max_executed': 119.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-20-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 1, 2: 4}

[04-03-2022_16-20-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 3 ( 50.00% solved)

[04-03-2022_16-20-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 4)', truth=True, inc_range=None)

[04-03-2022_16-20-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 4]:
sub_goal(5, talos, move(puzzle_room_1), in(talos), puzzle_room_1, 3)

[04-03-2022_16-20-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-20-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-20-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-20-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.816597s.

[04-03-2022_16-20-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 5: original = External(symbol='current_last_sgoals(3, 4)', truth=True, inc_range=None), conversion = current_last_sgoals(3,4).

[04-03-2022_16-20-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.330665s with result Satisfiable.

[04-03-2022_16-20-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 4.147262599999998, Incremental time limit = None
Running cumulative time = 18.873887900000014, Cumulative time limit = 1773.071201
Used memory = (RSS = 458.304688Mb, VMS = 476.214844Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 18.020666s, Solving = 0.853222s, Total = 18.873888s, Memory = (RSS = 458.304688Mb, VMS = 476.214844Mb), Step range = [0-5]), Calls = 5
Final Model :: Total atoms = 85368, Cost = (8, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[04-03-2022_16-20-31] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=18.0206661, solving_time=0.8532218000000142, total_time=18.873887900000014, memory=Memory(rss=458.3046875, vms=476.21484375), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.816597499999993, solving_time=0.3306651000000045, total_time=4.147262599999998, memory=Memory(rss=458.3046875, vms=476.21484375), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 200178.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 515550.0, 'bodies_tr': 515550.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 5491.0, 'count_bodies_tr': 5491.0, 'sccs': 191.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 32458.0, 'rules': 773603.0, 'rules_normal': 768596.0, 'rules_choice': 4997.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 773603.0, 'rules_tr_normal': 768596.0, 'rules_tr_choice': 4997.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 360688.0, 'eqs_atom': 125885.0, 'eqs_body': 14556.0, 'eqs_other': 220247.0}, 'lpStep': {'atoms': 18127.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 104443.0, 'bodies_tr': 104443.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 134407.0, 'rules_normal': 133606.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 134407.0, 'rules_tr_normal': 133606.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 36495.0, 'eqs_atom': 10651.0, 'eqs_body': 455.0, 'eqs_other': 25389.0}, 'generator': {'vars': 89185.0, 'vars_eliminated': 0.0, 'vars_frozen': 47819.0, 'constraints': 26776.0, 'constraints_binary': 346187.0, 'constraints_ternary': 59185.0, 'acyc_edges': 0.0, 'complexity': 433276.0}}, 'solving': {'solvers': {'choices': 318.0, 'conflicts': 178.0, 'conflicts_analyzed': 172.0, 'restarts': 0.0, 'restarts_last': 56.0, 'extra': {'domain_choices': 28.0, 'models': 1.0, 'models_level': 52.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 95.0, 'distributed_sum_lbd': 287.0, 'integrated': 276.0, 'lemmas': 2174.0, 'lits_learnt': 121884.0, 'lemmas_binary': 49.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.890625, 'integrated_imps': 47.0, 'integrated_jumps': 60.0, 'guiding_paths_lits': 343.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 172.0, 'lemmas_loop': 1749.0, 'lemmas_other': 253.0, 'lits_conflict': 14118.0, 'lits_loop': 93382.0, 'lits_other': 14384.0, 'jumps': {'jumps': 172.0, 'jumps_bounded': 5.0, 'levels': 255.0, 'levels_bounded': 9.0, 'max': 17.0, 'max_executed': 17.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [8.0, 0.0], 'lower': [8.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 4.152912139892578, 'cpu': 4.75, 'solve': 0.24086380004882812, 'unsat': 0.19598770141601562, 'sat': 0.0448760986328125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 19.63776969909668, 'cpu': 20.765625, 'solve': 0.5680103302001953, 'unsat': 0.41340065002441406, 'sat': 0.0728302001953125}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 1850.0, 'conflicts': 454.0, 'conflicts_analyzed': 432.0, 'restarts': 1.0, 'restarts_last': 56.0, 'extra': {'domain_choices': 51.0, 'models': 4.0, 'models_level': 116.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 312.0, 'distributed_sum_lbd': 878.0, 'integrated': 1119.0, 'lemmas': 7123.0, 'lits_learnt': 280051.0, 'lemmas_binary': 167.0, 'lemmas_ternary': 127.0, 'cpu_time': 1.890625, 'integrated_imps': 289.0, 'integrated_jumps': 741.0, 'guiding_paths_lits': 1180.0, 'guiding_paths': 48.0, 'splits': 0.0, 'lemmas_conflict': 430.0, 'lemmas_loop': 5615.0, 'lemmas_other': 1078.0, 'lits_conflict': 17994.0, 'lits_loop': 237620.0, 'lits_other': 24437.0, 'jumps': {'jumps': 432.0, 'jumps_bounded': 17.0, 'levels': 1065.0, 'levels_bounded': 29.0, 'max': 119.0, 'max_executed': 119.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-20-31] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 1, 2: 4, 3: 5}

[04-03-2022_16-20-31] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 4 ( 66.67% solved)

[04-03-2022_16-20-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 5)', truth=True, inc_range=None)

[04-03-2022_16-20-31] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 5]:
sub_goal(5, talos, place_upon((block,3),puzzle_room_1_table), on((block,3)), puzzle_room_1_table, 4)
sub_goal(5, talos, place_upon((block,3),puzzle_room_1_table), transporting(talos,(block,3)), false, 4)
sub_goal(5, talos, place_upon((block,6),puzzle_room_1_table), on((block,6)), puzzle_room_1_table, 4)
sub_goal(5, talos, place_upon((block,6),puzzle_room_1_table), transporting(talos,(block,6)), false, 4)
sub_goal(5, talos, place_upon((block,9),puzzle_room_1_table), on((block,9)), puzzle_room_1_table, 4)
sub_goal(5, talos, place_upon((block,9),puzzle_room_1_table), transporting(talos,(block,9)), false, 4)

[04-03-2022_16-20-31] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-20-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-20-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-20-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 4.197495s.

[04-03-2022_16-20-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 6: original = External(symbol='current_last_sgoals(4, 5)', truth=True, inc_range=None), conversion = current_last_sgoals(4,5).

[04-03-2022_16-20-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.198344s with result Unsatisfiable.

[04-03-2022_16-20-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.395838799999986, Incremental time limit = None
Running cumulative time = 23.2697267, Cumulative time limit = 1773.071201
Used memory = (RSS = 511.035156Mb, VMS = 512.050781Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=22.21816069999999, solving_time=1.0515660000000082, total_time=23.2697267, memory=Memory(rss=511.03515625, vms=512.05078125), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=4.197494599999992, solving_time=0.19834419999999398, total_time=4.395838799999986, memory=Memory(rss=511.03515625, vms=512.05078125), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 219412.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 623933.0, 'bodies_tr': 623933.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 6560.0, 'count_bodies_tr': 6560.0, 'sccs': 234.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 43544.0, 'rules': 912817.0, 'rules_normal': 907009.0, 'rules_choice': 5796.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 912817.0, 'rules_tr_normal': 907009.0, 'rules_tr_choice': 5796.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 399921.0, 'eqs_atom': 137504.0, 'eqs_body': 14904.0, 'eqs_other': 247513.0}, 'lpStep': {'atoms': 19234.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108383.0, 'bodies_tr': 108383.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139214.0, 'rules_normal': 138413.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139214.0, 'rules_tr_normal': 138413.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39233.0, 'eqs_atom': 11619.0, 'eqs_body': 348.0, 'eqs_other': 27266.0}, 'generator': {'vars': 118261.0, 'vars_eliminated': 0.0, 'vars_frozen': 63059.0, 'constraints': 39477.0, 'constraints_binary': 508853.0, 'constraints_ternary': 87616.0, 'acyc_edges': 0.0, 'complexity': 637518.0}}, 'solving': {'solvers': {'choices': 341.0, 'conflicts': 57.0, 'conflicts_analyzed': 41.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 8.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 37.0, 'distributed_sum_lbd': 107.0, 'integrated': 202.0, 'lemmas': 776.0, 'lits_learnt': 44434.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.546875, 'integrated_imps': 48.0, 'integrated_jumps': 290.0, 'guiding_paths_lits': 399.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 41.0, 'lemmas_loop': 556.0, 'lemmas_other': 179.0, 'lits_conflict': 1459.0, 'lits_loop': 36541.0, 'lits_other': 6434.0, 'jumps': {'jumps': 41.0, 'jumps_bounded': 5.0, 'levels': 58.0, 'levels_bounded': 7.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [5.0, -128.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 4.403926849365234, 'cpu': 4.78125, 'solve': 0.09078407287597656, 'unsat': 0.09078407287597656, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 24.041696548461914, 'cpu': 25.546875, 'solve': 0.6587944030761719, 'unsat': 0.5041847229003906, 'sat': 0.0728302001953125}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 2191.0, 'conflicts': 511.0, 'conflicts_analyzed': 473.0, 'restarts': 1.0, 'restarts_last': 56.0, 'extra': {'domain_choices': 59.0, 'models': 4.0, 'models_level': 116.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 349.0, 'distributed_sum_lbd': 985.0, 'integrated': 1321.0, 'lemmas': 7899.0, 'lits_learnt': 324485.0, 'lemmas_binary': 174.0, 'lemmas_ternary': 127.0, 'cpu_time': 2.4375, 'integrated_imps': 337.0, 'integrated_jumps': 1031.0, 'guiding_paths_lits': 1579.0, 'guiding_paths': 60.0, 'splits': 0.0, 'lemmas_conflict': 471.0, 'lemmas_loop': 6171.0, 'lemmas_other': 1257.0, 'lits_conflict': 19453.0, 'lits_loop': 274161.0, 'lits_other': 30871.0, 'jumps': {'jumps': 473.0, 'jumps_bounded': 22.0, 'levels': 1123.0, 'levels_bounded': 36.0, 'max': 119.0, 'max_executed': 119.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-20-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-20-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-20-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-20-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.950150s.

[04-03-2022_16-20-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.590975s with result Unsatisfiable.

[04-03-2022_16-20-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.541124800000006, Incremental time limit = None
Running cumulative time = 27.810851500000005, Cumulative time limit = 1773.071201
Used memory = (RSS = 586.976562Mb, VMS = 610.656250Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=26.168310499999997, solving_time=1.6425410000000085, total_time=27.810851500000005, memory=Memory(rss=586.9765625, vms=610.65625), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.9501498000000055, solving_time=0.5909750000000003, total_time=4.541124800000006, memory=Memory(rss=586.9765625, vms=610.65625), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 238674.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 732352.0, 'bodies_tr': 732352.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 7629.0, 'count_bodies_tr': 7629.0, 'sccs': 277.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 54630.0, 'rules': 1052087.0, 'rules_normal': 1045478.0, 'rules_choice': 6595.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1052087.0, 'rules_tr_normal': 1045478.0, 'rules_tr_choice': 6595.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 439234.0, 'eqs_atom': 149145.0, 'eqs_body': 15243.0, 'eqs_other': 274846.0}, 'lpStep': {'atoms': 19262.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108419.0, 'bodies_tr': 108419.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139270.0, 'rules_normal': 138469.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139270.0, 'rules_tr_normal': 138469.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39313.0, 'eqs_atom': 11641.0, 'eqs_body': 339.0, 'eqs_other': 27333.0}, 'generator': {'vars': 147356.0, 'vars_eliminated': 0.0, 'vars_frozen': 78305.0, 'constraints': 52185.0, 'constraints_binary': 671589.0, 'constraints_ternary': 116059.0, 'acyc_edges': 0.0, 'complexity': 841849.0}}, 'solving': {'solvers': {'choices': 1996.0, 'conflicts': 469.0, 'conflicts_analyzed': 458.0, 'restarts': 1.0, 'restarts_last': 67.0, 'extra': {'domain_choices': 50.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 346.0, 'distributed_sum_lbd': 1019.0, 'integrated': 2011.0, 'lemmas': 9762.0, 'lits_learnt': 483790.0, 'lemmas_binary': 569.0, 'lemmas_ternary': 159.0, 'cpu_time': 3.296875, 'integrated_imps': 144.0, 'integrated_jumps': 285.0, 'guiding_paths_lits': 455.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 457.0, 'lemmas_loop': 7340.0, 'lemmas_other': 1965.0, 'lits_conflict': 20226.0, 'lits_loop': 404974.0, 'lits_other': 58590.0, 'jumps': {'jumps': 458.0, 'jumps_bounded': 4.0, 'levels': 3216.0, 'levels_bounded': 1506.0, 'max': 2104.0, 'max_executed': 2104.0, 'max_bounded': 1436.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [7.0, -164.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 4.54966926574707, 'cpu': 7.296875, 'solve': 0.47570228576660156, 'unsat': 0.47570228576660156, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 28.591365814208984, 'cpu': 32.84375, 'solve': 1.1344966888427734, 'unsat': 0.9798870086669922, 'sat': 0.0728302001953125}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 4187.0, 'conflicts': 980.0, 'conflicts_analyzed': 931.0, 'restarts': 2.0, 'restarts_last': 67.0, 'extra': {'domain_choices': 109.0, 'models': 4.0, 'models_level': 116.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 695.0, 'distributed_sum_lbd': 2004.0, 'integrated': 3332.0, 'lemmas': 17661.0, 'lits_learnt': 808275.0, 'lemmas_binary': 743.0, 'lemmas_ternary': 286.0, 'cpu_time': 5.734375, 'integrated_imps': 481.0, 'integrated_jumps': 1316.0, 'guiding_paths_lits': 2034.0, 'guiding_paths': 73.0, 'splits': 0.0, 'lemmas_conflict': 928.0, 'lemmas_loop': 13511.0, 'lemmas_other': 3222.0, 'lits_conflict': 39679.0, 'lits_loop': 679135.0, 'lits_other': 89461.0, 'jumps': {'jumps': 931.0, 'jumps_bounded': 26.0, 'levels': 4339.0, 'levels_bounded': 1542.0, 'max': 2104.0, 'max_executed': 2104.0, 'max_bounded': 1436.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-20-40] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-20-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-20-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-20-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.798981s.

[04-03-2022_16-20-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.975343s with result Unsatisfiable.

[04-03-2022_16-20-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.774324500000006, Incremental time limit = None
Running cumulative time = 32.58517600000001, Cumulative time limit = 1773.071201
Used memory = (RSS = 642.718750Mb, VMS = 655.820312Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-44] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=29.96729150000001, solving_time=2.6178845000000024, total_time=32.58517600000001, memory=Memory(rss=642.71875, vms=655.8203125), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.798981000000012, solving_time=0.9753434999999939, total_time=4.774324500000006, memory=Memory(rss=642.71875, vms=655.8203125), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 257964.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 840806.0, 'bodies_tr': 840806.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 8698.0, 'count_bodies_tr': 8698.0, 'sccs': 320.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 65716.0, 'rules': 1191407.0, 'rules_normal': 1183997.0, 'rules_choice': 7394.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1191407.0, 'rules_tr_normal': 1183997.0, 'rules_tr_choice': 7394.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 478643.0, 'eqs_atom': 160814.0, 'eqs_body': 15580.0, 'eqs_other': 302249.0}, 'lpStep': {'atoms': 19290.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108454.0, 'bodies_tr': 108454.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139320.0, 'rules_normal': 138519.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139320.0, 'rules_tr_normal': 138519.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39409.0, 'eqs_atom': 11669.0, 'eqs_body': 337.0, 'eqs_other': 27403.0}, 'generator': {'vars': 176451.0, 'vars_eliminated': 0.0, 'vars_frozen': 93551.0, 'constraints': 64035.0, 'constraints_binary': 820663.0, 'constraints_ternary': 143329.0, 'acyc_edges': 0.0, 'complexity': 1030477.0}}, 'solving': {'solvers': {'choices': 2425.0, 'conflicts': 915.0, 'conflicts_analyzed': 906.0, 'restarts': 5.0, 'restarts_last': 111.0, 'extra': {'domain_choices': 91.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 657.0, 'distributed_sum_lbd': 1927.0, 'integrated': 3927.0, 'lemmas': 14068.0, 'lits_learnt': 675094.0, 'lemmas_binary': 1246.0, 'lemmas_ternary': 314.0, 'cpu_time': 5.953125, 'integrated_imps': 236.0, 'integrated_jumps': 508.0, 'guiding_paths_lits': 511.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 906.0, 'lemmas_loop': 9368.0, 'lemmas_other': 3794.0, 'lits_conflict': 36153.0, 'lits_loop': 532197.0, 'lits_other': 106744.0, 'jumps': {'jumps': 906.0, 'jumps_bounded': 4.0, 'levels': 3177.0, 'levels_bounded': 1265.0, 'max': 598.0, 'max_executed': 598.0, 'max_bounded': 597.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [7.0, -200.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 4.790016174316406, 'cpu': 9.796875, 'solve': 0.8691864013671875, 'unsat': 0.8691864013671875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 33.38138198852539, 'cpu': 42.640625, 'solve': 2.003683090209961, 'unsat': 1.8490734100341797, 'sat': 0.0728302001953125}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 6612.0, 'conflicts': 1895.0, 'conflicts_analyzed': 1837.0, 'restarts': 7.0, 'restarts_last': 111.0, 'extra': {'domain_choices': 200.0, 'models': 4.0, 'models_level': 116.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1352.0, 'distributed_sum_lbd': 3931.0, 'integrated': 7259.0, 'lemmas': 31729.0, 'lits_learnt': 1483369.0, 'lemmas_binary': 1989.0, 'lemmas_ternary': 600.0, 'cpu_time': 11.6875, 'integrated_imps': 717.0, 'integrated_jumps': 1824.0, 'guiding_paths_lits': 2545.0, 'guiding_paths': 87.0, 'splits': 0.0, 'lemmas_conflict': 1834.0, 'lemmas_loop': 22879.0, 'lemmas_other': 7016.0, 'lits_conflict': 75832.0, 'lits_loop': 1211332.0, 'lits_other': 196205.0, 'jumps': {'jumps': 1837.0, 'jumps_bounded': 30.0, 'levels': 7516.0, 'levels_bounded': 2807.0, 'max': 2104.0, 'max_executed': 2104.0, 'max_bounded': 1436.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-20-44] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-20-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-20-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-20-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.857761s.

[04-03-2022_16-20-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.423280s with result Satisfiable.

[04-03-2022_16-20-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 6.281040800000014, Incremental time limit = None
Running cumulative time = 38.866216800000025, Cumulative time limit = 1773.071201
Used memory = (RSS = 747.082031Mb, VMS = 797.437500Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 33.825052s, Solving = 5.041165s, Total = 38.866217s, Memory = (RSS = 747.082031Mb, VMS = 797.437500Mb), Step range = [0-9]), Calls = 9
Final Model :: Total atoms = 94815, Cost = (15, -3), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[04-03-2022_16-20-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=33.82505200000002, solving_time=5.041164800000004, total_time=38.866216800000025, memory=Memory(rss=747.08203125, vms=797.4375), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.857760500000012, solving_time=2.423280300000002, total_time=6.281040800000014, memory=Memory(rss=747.08203125, vms=797.4375), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 277282.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 949295.0, 'bodies_tr': 949295.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 9767.0, 'count_bodies_tr': 9767.0, 'sccs': 363.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76802.0, 'rules': 1330777.0, 'rules_normal': 1322566.0, 'rules_choice': 8193.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1330777.0, 'rules_tr_normal': 1322566.0, 'rules_tr_choice': 8193.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 518152.0, 'eqs_atom': 172511.0, 'eqs_body': 15919.0, 'eqs_other': 329722.0}, 'lpStep': {'atoms': 19318.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108489.0, 'bodies_tr': 108489.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139370.0, 'rules_normal': 138569.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139370.0, 'rules_tr_normal': 138569.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39509.0, 'eqs_atom': 11697.0, 'eqs_body': 339.0, 'eqs_other': 27473.0}, 'generator': {'vars': 205546.0, 'vars_eliminated': 0.0, 'vars_frozen': 108797.0, 'constraints': 76741.0, 'constraints_binary': 983468.0, 'constraints_ternary': 171866.0, 'acyc_edges': 0.0, 'complexity': 1234969.0}}, 'solving': {'solvers': {'choices': 4652.0, 'conflicts': 2105.0, 'conflicts_analyzed': 2097.0, 'restarts': 7.0, 'restarts_last': 330.0, 'extra': {'domain_choices': 18.0, 'models': 3.0, 'models_level': 1627.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1326.0, 'distributed_sum_lbd': 3236.0, 'integrated': 7880.0, 'lemmas': 24923.0, 'lits_learnt': 1053779.0, 'lemmas_binary': 1505.0, 'lemmas_ternary': 362.0, 'cpu_time': 13.4375, 'integrated_imps': 2909.0, 'integrated_jumps': 1434.0, 'guiding_paths_lits': 567.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 2096.0, 'lemmas_loop': 15171.0, 'lemmas_other': 7656.0, 'lits_conflict': 68895.0, 'lits_loop': 871584.0, 'lits_other': 113300.0, 'jumps': {'jumps': 2097.0, 'jumps_bounded': 4.0, 'levels': 3518.0, 'levels_bounded': 11.0, 'max': 19.0, 'max_executed': 19.0, 'max_bounded': 6.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [15.0, -3.0], 'lower': [15.0, -3.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 6.299345016479492, 'cpu': 17.421875, 'solve': 2.302959442138672, 'unsat': 0.35585975646972656, 'sat': 0.2154254913330078}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 39.68072700500488, 'cpu': 60.0625, 'solve': 4.306642532348633, 'unsat': 2.2049331665039062, 'sat': 0.2882556915283203}, 'models': {'enumerated': 7.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 11264.0, 'conflicts': 4000.0, 'conflicts_analyzed': 3934.0, 'restarts': 14.0, 'restarts_last': 330.0, 'extra': {'domain_choices': 218.0, 'models': 7.0, 'models_level': 1743.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2678.0, 'distributed_sum_lbd': 7167.0, 'integrated': 15139.0, 'lemmas': 56652.0, 'lits_learnt': 2537148.0, 'lemmas_binary': 3494.0, 'lemmas_ternary': 962.0, 'cpu_time': 25.125, 'integrated_imps': 3626.0, 'integrated_jumps': 3258.0, 'guiding_paths_lits': 3112.0, 'guiding_paths': 100.0, 'splits': 0.0, 'lemmas_conflict': 3930.0, 'lemmas_loop': 38050.0, 'lemmas_other': 14672.0, 'lits_conflict': 144727.0, 'lits_loop': 2082916.0, 'lits_other': 309505.0, 'jumps': {'jumps': 3934.0, 'jumps_bounded': 34.0, 'levels': 11034.0, 'levels_bounded': 2818.0, 'max': 2104.0, 'max_executed': 2104.0, 'max_bounded': 1436.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-20-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 1, 2: 4, 3: 5, 4: 9}

[04-03-2022_16-20-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 5 ( 83.33% solved)

[04-03-2022_16-20-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 9)', truth=True, inc_range=None)

[04-03-2022_16-20-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 9]:
sub_goal(5, talos, place_upon((block,2),(block,3)), on((block,2)), (block,3), 5)
sub_goal(5, talos, place_upon((block,2),(block,3)), transporting(talos,(block,2)), false, 5)
sub_goal(5, talos, place_upon((block,5),(block,6)), on((block,5)), (block,6), 5)
sub_goal(5, talos, place_upon((block,5),(block,6)), transporting(talos,(block,5)), false, 5)
sub_goal(5, talos, place_upon((block,8),(block,9)), on((block,8)), (block,9), 5)
sub_goal(5, talos, place_upon((block,8),(block,9)), transporting(talos,(block,8)), false, 5)

[04-03-2022_16-20-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-20-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-20-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.832935s.

[04-03-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 10: original = External(symbol='current_last_sgoals(5, 9)', truth=True, inc_range=None), conversion = current_last_sgoals(5,9).

[04-03-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.316706s with result Unsatisfiable.

[04-03-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.149640399999996, Incremental time limit = None
Running cumulative time = 43.01585720000002, Cumulative time limit = 1773.071201
Used memory = (RSS = 795.660156Mb, VMS = 830.535156Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=37.65798660000001, solving_time=5.3578706000000125, total_time=43.01585720000002, memory=Memory(rss=795.66015625, vms=830.53515625), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.8329345999999873, solving_time=0.31670580000000825, total_time=4.149640399999996, memory=Memory(rss=795.66015625, vms=830.53515625), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 296628.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1057815.0, 'bodies_tr': 1057815.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 10836.0, 'count_bodies_tr': 10836.0, 'sccs': 406.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 87888.0, 'rules': 1470178.0, 'rules_normal': 1461166.0, 'rules_choice': 8992.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1470178.0, 'rules_tr_normal': 1461166.0, 'rules_tr_choice': 8992.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 557715.0, 'eqs_atom': 184217.0, 'eqs_body': 16256.0, 'eqs_other': 357242.0}, 'lpStep': {'atoms': 19346.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108520.0, 'bodies_tr': 108520.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139401.0, 'rules_normal': 138600.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139401.0, 'rules_tr_normal': 138600.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39563.0, 'eqs_atom': 11706.0, 'eqs_body': 337.0, 'eqs_other': 27520.0}, 'generator': {'vars': 234641.0, 'vars_eliminated': 0.0, 'vars_frozen': 124043.0, 'constraints': 83633.0, 'constraints_binary': 1078463.0, 'constraints_ternary': 189189.0, 'acyc_edges': 0.0, 'complexity': 1354499.0}}, 'solving': {'solvers': {'choices': 245.0, 'conflicts': 70.0, 'conflicts_analyzed': 59.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 50.0, 'distributed_sum_lbd': 140.0, 'integrated': 193.0, 'lemmas': 1520.0, 'lits_learnt': 84443.0, 'lemmas_binary': 39.0, 'lemmas_ternary': 15.0, 'cpu_time': 1.03125, 'integrated_imps': 61.0, 'integrated_jumps': 138.0, 'guiding_paths_lits': 623.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 59.0, 'lemmas_loop': 1281.0, 'lemmas_other': 180.0, 'lits_conflict': 4723.0, 'lits_loop': 74811.0, 'lits_other': 4909.0, 'jumps': {'jumps': 59.0, 'jumps_bounded': 6.0, 'levels': 113.0, 'levels_bounded': 6.0, 'max': 11.0, 'max_executed': 11.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [4.0, -256.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 4.192499160766602, 'cpu': 4.96875, 'solve': 0.18157958984375, 'unsat': 0.18157958984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 43.873226165771484, 'cpu': 65.03125, 'solve': 4.488222122192383, 'unsat': 2.3865127563476562, 'sat': 0.2882556915283203}, 'models': {'enumerated': 7.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 11509.0, 'conflicts': 4070.0, 'conflicts_analyzed': 3993.0, 'restarts': 14.0, 'restarts_last': 330.0, 'extra': {'domain_choices': 218.0, 'models': 7.0, 'models_level': 1743.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2728.0, 'distributed_sum_lbd': 7307.0, 'integrated': 15332.0, 'lemmas': 58172.0, 'lits_learnt': 2621591.0, 'lemmas_binary': 3533.0, 'lemmas_ternary': 977.0, 'cpu_time': 26.15625, 'integrated_imps': 3687.0, 'integrated_jumps': 3396.0, 'guiding_paths_lits': 3735.0, 'guiding_paths': 111.0, 'splits': 0.0, 'lemmas_conflict': 3989.0, 'lemmas_loop': 39331.0, 'lemmas_other': 14852.0, 'lits_conflict': 149450.0, 'lits_loop': 2157727.0, 'lits_other': 314414.0, 'jumps': {'jumps': 3993.0, 'jumps_bounded': 40.0, 'levels': 11147.0, 'levels_bounded': 2824.0, 'max': 2104.0, 'max_executed': 2104.0, 'max_bounded': 1436.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-20-55] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-20-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.729353s.

[04-03-2022_16-20-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.161559s with result Unsatisfiable.

[04-03-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.890912399999991, Incremental time limit = None
Running cumulative time = 47.90676960000001, Cumulative time limit = 1773.071201
Used memory = (RSS = 855.289062Mb, VMS = 882.812500Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=41.38733990000001, solving_time=6.519429700000003, total_time=47.90676960000001, memory=Memory(rss=855.2890625, vms=882.8125), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.7293532999999996, solving_time=1.161559099999991, total_time=4.890912399999991, memory=Memory(rss=855.2890625, vms=882.8125), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 315983.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1166370.0, 'bodies_tr': 1166370.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 11905.0, 'count_bodies_tr': 11905.0, 'sccs': 449.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 98974.0, 'rules': 1609629.0, 'rules_normal': 1599816.0, 'rules_choice': 9791.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1609629.0, 'rules_tr_normal': 1599816.0, 'rules_tr_choice': 9791.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 597378.0, 'eqs_atom': 195951.0, 'eqs_body': 16595.0, 'eqs_other': 384832.0}, 'lpStep': {'atoms': 19355.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108555.0, 'bodies_tr': 108555.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139451.0, 'rules_normal': 138650.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139451.0, 'rules_tr_normal': 138650.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39663.0, 'eqs_atom': 11734.0, 'eqs_body': 339.0, 'eqs_other': 27590.0}, 'generator': {'vars': 263736.0, 'vars_eliminated': 0.0, 'vars_frozen': 139289.0, 'constraints': 96341.0, 'constraints_binary': 1241287.0, 'constraints_ternary': 217681.0, 'acyc_edges': 0.0, 'complexity': 1558967.0}}, 'solving': {'solvers': {'choices': 2335.0, 'conflicts': 967.0, 'conflicts_analyzed': 955.0, 'restarts': 5.0, 'restarts_last': 127.0, 'extra': {'domain_choices': 25.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 566.0, 'distributed_sum_lbd': 1667.0, 'integrated': 3365.0, 'lemmas': 10969.0, 'lits_learnt': 498489.0, 'lemmas_binary': 940.0, 'lemmas_ternary': 263.0, 'cpu_time': 7.3125, 'integrated_imps': 145.0, 'integrated_jumps': 298.0, 'guiding_paths_lits': 679.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 955.0, 'lemmas_loop': 6718.0, 'lemmas_other': 3296.0, 'lits_conflict': 32610.0, 'lits_loop': 390111.0, 'lits_other': 75768.0, 'jumps': {'jumps': 955.0, 'jumps_bounded': 7.0, 'levels': 5021.0, 'levels_bounded': 2994.0, 'max': 2957.0, 'max_executed': 2957.0, 'max_bounded': 2956.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [8.0, -292.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 4.908540725708008, 'cpu': 11.171875, 'solve': 1.0392189025878906, 'unsat': 1.0392189025878906, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 48.78176689147949, 'cpu': 76.203125, 'solve': 5.527441024780273, 'unsat': 3.425731658935547, 'sat': 0.2882556915283203}, 'models': {'enumerated': 7.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 13844.0, 'conflicts': 5037.0, 'conflicts_analyzed': 4948.0, 'restarts': 19.0, 'restarts_last': 330.0, 'extra': {'domain_choices': 243.0, 'models': 7.0, 'models_level': 1743.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3294.0, 'distributed_sum_lbd': 8974.0, 'integrated': 18697.0, 'lemmas': 69141.0, 'lits_learnt': 3120080.0, 'lemmas_binary': 4473.0, 'lemmas_ternary': 1240.0, 'cpu_time': 33.46875, 'integrated_imps': 3832.0, 'integrated_jumps': 3694.0, 'guiding_paths_lits': 4414.0, 'guiding_paths': 126.0, 'splits': 0.0, 'lemmas_conflict': 4944.0, 'lemmas_loop': 46049.0, 'lemmas_other': 18148.0, 'lits_conflict': 182060.0, 'lits_loop': 2547838.0, 'lits_other': 390182.0, 'jumps': {'jumps': 4948.0, 'jumps_bounded': 47.0, 'levels': 16168.0, 'levels_bounded': 5818.0, 'max': 2957.0, 'max_executed': 2957.0, 'max_bounded': 2956.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-21-00] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-21-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

[04-03-2022_16-21-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 3.765720s.

[04-03-2022_16-21-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-03-2022_16-21-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.884246s with result Unsatisfiable.

[04-03-2022_16-21-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 6.649965600000002, Incremental time limit = None
Running cumulative time = 54.55673520000001, Cumulative time limit = 1773.071201
Used memory = (RSS = 916.121094Mb, VMS = 1009.347656Mb), Total system virtual memory = 16324.18359375Mb

[04-03-2022_16-21-06] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=45.15305990000001, solving_time=9.403675300000003, total_time=54.55673520000001, memory=Memory(rss=916.12109375, vms=1009.34765625), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=3.7657200000000017, solving_time=2.8842456, total_time=6.649965600000002, memory=Memory(rss=916.12109375, vms=1009.34765625), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 335366.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1274960.0, 'bodies_tr': 1274960.0, 'sum_bodies': 16.0, 'sum_bodies_tr': 16.0, 'count_bodies': 12974.0, 'count_bodies_tr': 12974.0, 'sccs': 492.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 110060.0, 'rules': 1749130.0, 'rules_normal': 1738516.0, 'rules_choice': 10590.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1749130.0, 'rules_tr_normal': 1738516.0, 'rules_tr_choice': 10590.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 637137.0, 'eqs_atom': 207713.0, 'eqs_body': 16932.0, 'eqs_other': 412492.0}, 'lpStep': {'atoms': 19383.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 108590.0, 'bodies_tr': 108590.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1069.0, 'count_bodies_tr': 1069.0, 'sccs': 43.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11086.0, 'rules': 139501.0, 'rules_normal': 138700.0, 'rules_choice': 799.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139501.0, 'rules_tr_normal': 138700.0, 'rules_tr_choice': 799.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39759.0, 'eqs_atom': 11762.0, 'eqs_body': 337.0, 'eqs_other': 27660.0}, 'generator': {'vars': 292831.0, 'vars_eliminated': 0.0, 'vars_frozen': 154535.0, 'constraints': 109049.0, 'constraints_binary': 1404133.0, 'constraints_ternary': 246124.0, 'acyc_edges': 0.0, 'complexity': 1763408.0}}, 'solving': {'solvers': {'choices': 6207.0, 'conflicts': 2977.0, 'conflicts_analyzed': 2963.0, 'restarts': 14.0, 'restarts_last': 445.0, 'extra': {'domain_choices': 140.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 7388.0, 'distributed': 1126.0, 'distributed_sum_lbd': 3463.0, 'integrated': 6709.0, 'lemmas': 23747.0, 'lits_learnt': 1160986.0, 'lemmas_binary': 1796.0, 'lemmas_ternary': 599.0, 'cpu_time': 19.15625, 'integrated_imps': 354.0, 'integrated_jumps': 796.0, 'guiding_paths_lits': 735.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 2963.0, 'lemmas_loop': 14171.0, 'lemmas_other': 6613.0, 'lits_conflict': 130260.0, 'lits_loop': 865329.0, 'lits_other': 165397.0, 'jumps': {'jumps': 2963.0, 'jumps_bounded': 15.0, 'levels': 5537.0, 'levels_bounded': 169.0, 'max': 99.0, 'max_executed': 99.0, 'max_bounded': 97.0}}}}, 'summary': {'call': 12.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [8.0, -328.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 6.67271614074707, 'cpu': 23.0625, 'solve': 2.7572669982910156, 'unsat': 2.7572669982910156, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 55.45448303222656, 'cpu': 99.265625, 'solve': 8.284708023071289, 'unsat': 6.1829986572265625, 'sat': 0.2882556915283203}, 'models': {'enumerated': 7.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 20051.0, 'conflicts': 8014.0, 'conflicts_analyzed': 7911.0, 'restarts': 33.0, 'restarts_last': 445.0, 'extra': {'domain_choices': 383.0, 'models': 7.0, 'models_level': 1743.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 7388.0, 'distributed': 4420.0, 'distributed_sum_lbd': 12437.0, 'integrated': 25406.0, 'lemmas': 92888.0, 'lits_learnt': 4281066.0, 'lemmas_binary': 6269.0, 'lemmas_ternary': 1839.0, 'cpu_time': 52.625, 'integrated_imps': 4186.0, 'integrated_jumps': 4490.0, 'guiding_paths_lits': 5149.0, 'guiding_paths': 140.0, 'splits': 0.0, 'lemmas_conflict': 7907.0, 'lemmas_loop': 60220.0, 'lemmas_other': 24761.0, 'lits_conflict': 312320.0, 'lits_loop': 3413167.0, 'lits_other': 555579.0, 'jumps': {'jumps': 7911.0, 'jumps_bounded': 62.0, 'levels': 21705.0, 'levels_bounded': 5987.0, 'max': 2957.0, 'max_executed': 2957.0, 'max_bounded': 2956.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-03-2022_16-21-06] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-03-2022_16-21-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      6 : Maximum =    300

[04-03-2022_16-21-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(6), Function('sequential', [], True), Function('true', [], True)])]

